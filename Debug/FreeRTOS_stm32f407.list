
FreeRTOS_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800e758  0800e758  0001e758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb50  0800eb50  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb50  0800eb50  0001eb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb58  0800eb58  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb58  0800eb58  0001eb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb5c  0800eb5c  0001eb5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800eb60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c0c0  200001e8  0800ed48  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c2a8  0800ed48  0002c2a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003162b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ffc  00000000  00000000  00051843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c0  00000000  00000000  00057840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f80  00000000  00000000  00059a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ae1  00000000  00000000  0005b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d5f3  00000000  00000000  00085461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaf67  00000000  00000000  000b2a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019d9bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000947c  00000000  00000000  0019da10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e740 	.word	0x0800e740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e740 	.word	0x0800e740

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationStackOverflowHook>:
}
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 f8ea 	bl	800176c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f89e 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 faba 	bl	8000b14 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a0:	f000 f97c 	bl	800089c <MX_I2C1_Init>
  MX_I2S3_Init();
 80005a4:	f000 f9a8 	bl	80008f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005a8:	f000 f9d6 	bl	8000958 <MX_SPI1_Init>
  MX_ADC1_Init();
 80005ac:	f000 f8fe 	bl	80007ac <MX_ADC1_Init>
  MX_TIM4_Init();
 80005b0:	f000 fa56 	bl	8000a60 <MX_TIM4_Init>
  MX_TIM3_Init();
 80005b4:	f000 fa06 	bl	80009c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80005b8:	482b      	ldr	r0, [pc, #172]	; (8000668 <main+0xd8>)
 80005ba:	f001 f981 	bl	80018c0 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005be:	2100      	movs	r1, #0
 80005c0:	482a      	ldr	r0, [pc, #168]	; (800066c <main+0xdc>)
 80005c2:	f004 ffad 	bl	8005520 <HAL_TIM_PWM_Start>


  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 80005c6:	482a      	ldr	r0, [pc, #168]	; (8000670 <main+0xe0>)
 80005c8:	f004 feea 	bl	80053a0 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start(&htim3);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005cc:	f008 ff18 	bl	8009400 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BtnSem */
  BtnSemHandle = osSemaphoreNew(1, 1, &BtnSem_attributes);
 80005d0:	4a28      	ldr	r2, [pc, #160]	; (8000674 <main+0xe4>)
 80005d2:	2101      	movs	r1, #1
 80005d4:	2001      	movs	r0, #1
 80005d6:	f009 f80a 	bl	80095ee <osSemaphoreNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a26      	ldr	r2, [pc, #152]	; (8000678 <main+0xe8>)
 80005de:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 80005e0:	4a26      	ldr	r2, [pc, #152]	; (800067c <main+0xec>)
 80005e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e6:	200a      	movs	r0, #10
 80005e8:	f009 f920 	bl	800982c <osMessageQueueNew>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a24      	ldr	r2, [pc, #144]	; (8000680 <main+0xf0>)
 80005f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f2:	4a24      	ldr	r2, [pc, #144]	; (8000684 <main+0xf4>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	4824      	ldr	r0, [pc, #144]	; (8000688 <main+0xf8>)
 80005f8:	f008 ff4c 	bl	8009494 <osThreadNew>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <main+0xfc>)
 8000600:	6013      	str	r3, [r2, #0]

  /* creation of LED_BLUE_BLINK */
  LED_BLUE_BLINKHandle = osThreadNew(StartLED_BLUE_BLINK, NULL, &LED_BLUE_BLINK_attributes);
 8000602:	4a23      	ldr	r2, [pc, #140]	; (8000690 <main+0x100>)
 8000604:	2100      	movs	r1, #0
 8000606:	4823      	ldr	r0, [pc, #140]	; (8000694 <main+0x104>)
 8000608:	f008 ff44 	bl	8009494 <osThreadNew>
 800060c:	4603      	mov	r3, r0
 800060e:	4a22      	ldr	r2, [pc, #136]	; (8000698 <main+0x108>)
 8000610:	6013      	str	r3, [r2, #0]

  /* creation of LED_YELLOW_ADC */
  LED_YELLOW_ADCHandle = osThreadNew(StartLED_YELLOW_ADC, NULL, &LED_YELLOW_ADC_attributes);
 8000612:	4a22      	ldr	r2, [pc, #136]	; (800069c <main+0x10c>)
 8000614:	2100      	movs	r1, #0
 8000616:	4822      	ldr	r0, [pc, #136]	; (80006a0 <main+0x110>)
 8000618:	f008 ff3c 	bl	8009494 <osThreadNew>
 800061c:	4603      	mov	r3, r0
 800061e:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <main+0x114>)
 8000620:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(StartUART_Task, NULL, &UART_Task_attributes);
 8000622:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <main+0x118>)
 8000624:	2100      	movs	r1, #0
 8000626:	4821      	ldr	r0, [pc, #132]	; (80006ac <main+0x11c>)
 8000628:	f008 ff34 	bl	8009494 <osThreadNew>
 800062c:	4603      	mov	r3, r0
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <main+0x120>)
 8000630:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Task */
  ADC_TaskHandle = osThreadNew(StartADC_Task, NULL, &ADC_Task_attributes);
 8000632:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <main+0x124>)
 8000634:	2100      	movs	r1, #0
 8000636:	4820      	ldr	r0, [pc, #128]	; (80006b8 <main+0x128>)
 8000638:	f008 ff2c 	bl	8009494 <osThreadNew>
 800063c:	4603      	mov	r3, r0
 800063e:	4a1f      	ldr	r2, [pc, #124]	; (80006bc <main+0x12c>)
 8000640:	6013      	str	r3, [r2, #0]

  /* creation of TeadBtn_Task */
  TeadBtn_TaskHandle = osThreadNew(StartTeadBtn_Task, NULL, &TeadBtn_Task_attributes);
 8000642:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <main+0x130>)
 8000644:	2100      	movs	r1, #0
 8000646:	481f      	ldr	r0, [pc, #124]	; (80006c4 <main+0x134>)
 8000648:	f008 ff24 	bl	8009494 <osThreadNew>
 800064c:	4603      	mov	r3, r0
 800064e:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <main+0x138>)
 8000650:	6013      	str	r3, [r2, #0]

  /* creation of ShowResources */
  ShowResourcesHandle = osThreadNew(StartShowResources, NULL, &ShowResources_attributes);
 8000652:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <main+0x13c>)
 8000654:	2100      	movs	r1, #0
 8000656:	481e      	ldr	r0, [pc, #120]	; (80006d0 <main+0x140>)
 8000658:	f008 ff1c 	bl	8009494 <osThreadNew>
 800065c:	4603      	mov	r3, r0
 800065e:	4a1d      	ldr	r2, [pc, #116]	; (80006d4 <main+0x144>)
 8000660:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000662:	f008 fef1 	bl	8009448 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000666:	e7fe      	b.n	8000666 <main+0xd6>
 8000668:	20009e14 	.word	0x20009e14
 800066c:	20005260 	.word	0x20005260
 8000670:	20009dc4 	.word	0x20009dc4
 8000674:	0800ea70 	.word	0x0800ea70
 8000678:	20005208 	.word	0x20005208
 800067c:	0800ea58 	.word	0x0800ea58
 8000680:	200073c0 	.word	0x200073c0
 8000684:	0800e95c 	.word	0x0800e95c
 8000688:	08000d0d 	.word	0x08000d0d
 800068c:	2000520c 	.word	0x2000520c
 8000690:	0800e980 	.word	0x0800e980
 8000694:	08000d3d 	.word	0x08000d3d
 8000698:	2000a510 	.word	0x2000a510
 800069c:	0800e9a4 	.word	0x0800e9a4
 80006a0:	08000d71 	.word	0x08000d71
 80006a4:	2000a3f0 	.word	0x2000a3f0
 80006a8:	0800e9c8 	.word	0x0800e9c8
 80006ac:	08000da9 	.word	0x08000da9
 80006b0:	20009e5c 	.word	0x20009e5c
 80006b4:	0800e9ec 	.word	0x0800e9ec
 80006b8:	08000e05 	.word	0x08000e05
 80006bc:	20009e0c 	.word	0x20009e0c
 80006c0:	0800ea10 	.word	0x0800ea10
 80006c4:	08000e35 	.word	0x08000e35
 80006c8:	2000a060 	.word	0x2000a060
 80006cc:	0800ea34 	.word	0x0800ea34
 80006d0:	08000ead 	.word	0x08000ead
 80006d4:	20009e10 	.word	0x20009e10

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00d fb40 	bl	800dd6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800074c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000750:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000756:	2307      	movs	r3, #7
 8000758:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4618      	mov	r0, r3
 8000760:	f003 ff74 	bl	800464c <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800076a:	f000 fcf5 	bl	8001158 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2105      	movs	r1, #5
 800078c:	4618      	mov	r0, r3
 800078e:	f004 f9d5 	bl	8004b3c <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000798:	f000 fcde 	bl	8001158 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	; 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007c0:	463b      	mov	r3, r7
 80007c2:	2220      	movs	r2, #32
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f00d fad0 	bl	800dd6c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_ADC1_Init+0xe0>)
 80007ce:	4a30      	ldr	r2, [pc, #192]	; (8000890 <MX_ADC1_Init+0xe4>)
 80007d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <MX_ADC1_Init+0xe0>)
 80007d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_ADC1_Init+0xe0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_ADC1_Init+0xe0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_ADC1_Init+0xe0>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_ADC1_Init+0xe0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f4:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_ADC1_Init+0xe0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fa:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_ADC1_Init+0xe0>)
 80007fc:	4a25      	ldr	r2, [pc, #148]	; (8000894 <MX_ADC1_Init+0xe8>)
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_ADC1_Init+0xe0>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_ADC1_Init+0xe0>)
 8000808:	2201      	movs	r2, #1
 800080a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_ADC1_Init+0xe0>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_ADC1_Init+0xe0>)
 8000816:	2201      	movs	r2, #1
 8000818:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081a:	481c      	ldr	r0, [pc, #112]	; (800088c <MX_ADC1_Init+0xe0>)
 800081c:	f001 f80c 	bl	8001838 <HAL_ADC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000826:	f000 fc97 	bl	8001158 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800082a:	2309      	movs	r3, #9
 800082c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	4619      	mov	r1, r3
 800083c:	4813      	ldr	r0, [pc, #76]	; (800088c <MX_ADC1_Init+0xe0>)
 800083e:	f001 f91f 	bl	8001a80 <HAL_ADC_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000848:	f000 fc86 	bl	8001158 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_9;
 800084c:	2309      	movs	r3, #9
 800084e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_ADC1_Init+0xec>)
 8000862:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_ADC1_Init+0xe0>)
 8000876:	f001 fb21 	bl	8001ebc <HAL_ADCEx_InjectedConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000880:	f000 fc6a 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3730      	adds	r7, #48	; 0x30
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20009e14 	.word	0x20009e14
 8000890:	40012000 	.word	0x40012000
 8000894:	0f000001 	.word	0x0f000001
 8000898:	000f0001 	.word	0x000f0001

0800089c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_I2C1_Init+0x50>)
 80008a2:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <MX_I2C1_Init+0x54>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_I2C1_Init+0x50>)
 80008a8:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x58>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_I2C1_Init+0x50>)
 80008ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_I2C1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_I2C1_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_I2C1_Init+0x50>)
 80008da:	f001 ff4f 	bl	800277c <HAL_I2C_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e4:	f000 fc38 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200052a8 	.word	0x200052a8
 80008f0:	40005400 	.word	0x40005400
 80008f4:	000186a0 	.word	0x000186a0

080008f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_I2S3_Init+0x54>)
 80008fe:	4a14      	ldr	r2, [pc, #80]	; (8000950 <MX_I2S3_Init+0x58>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_I2S3_Init+0x54>)
 8000904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000908:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_I2S3_Init+0x54>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_I2S3_Init+0x54>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <MX_I2S3_Init+0x54>)
 8000918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_I2S3_Init+0x54>)
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <MX_I2S3_Init+0x5c>)
 8000922:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_I2S3_Init+0x54>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_I2S3_Init+0x54>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_I2S3_Init+0x54>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_I2S3_Init+0x54>)
 8000938:	f002 f864 	bl	8002a04 <HAL_I2S_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000942:	f000 fc09 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000a8ec 	.word	0x2000a8ec
 8000950:	40003c00 	.word	0x40003c00
 8000954:	00017700 	.word	0x00017700

08000958 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_SPI1_Init+0x64>)
 800095e:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <MX_SPI1_Init+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_SPI1_Init+0x64>)
 8000964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000968:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_SPI1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_SPI1_Init+0x64>)
 8000984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000988:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_SPI1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_SPI1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_SPI1_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_SPI1_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_SPI1_Init+0x64>)
 80009a4:	220a      	movs	r2, #10
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_SPI1_Init+0x64>)
 80009aa:	f004 fc21 	bl	80051f0 <HAL_SPI_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009b4:	f000 fbd0 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000a3f4 	.word	0x2000a3f4
 80009c0:	40013000 	.word	0x40013000

080009c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	463b      	mov	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_TIM3_Init+0x94>)
 80009e2:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <MX_TIM3_Init+0x98>)
 80009e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 420;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_TIM3_Init+0x94>)
 80009e8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80009ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_TIM3_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_TIM3_Init+0x94>)
 80009f6:	220a      	movs	r2, #10
 80009f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_TIM3_Init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_TIM3_Init+0x94>)
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_TIM3_Init+0x94>)
 8000a08:	f004 fc7b 	bl	8005302 <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a12:	f000 fba1 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_TIM3_Init+0x94>)
 8000a24:	f005 f80e 	bl	8005a44 <HAL_TIM_ConfigClockSource>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 fb93 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_TIM3_Init+0x94>)
 8000a40:	f005 fc00 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a4a:	f000 fb85 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20009dc4 	.word	0x20009dc4
 8000a5c:	40000400 	.word	0x40000400

08000a60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_TIM4_Init+0xac>)
 8000a84:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <MX_TIM4_Init+0xb0>)
 8000a86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300;
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <MX_TIM4_Init+0xac>)
 8000a8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_TIM4_Init+0xac>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_TIM4_Init+0xac>)
 8000a98:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_TIM4_Init+0xac>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_TIM4_Init+0xac>)
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000aaa:	4818      	ldr	r0, [pc, #96]	; (8000b0c <MX_TIM4_Init+0xac>)
 8000aac:	f004 fce8 	bl	8005480 <HAL_TIM_PWM_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000ab6:	f000 fb4f 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000aba:	2310      	movs	r3, #16
 8000abc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4810      	ldr	r0, [pc, #64]	; (8000b0c <MX_TIM4_Init+0xac>)
 8000aca:	f005 fbbb 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000ad4:	f000 fb40 	bl	8001158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad8:	2360      	movs	r3, #96	; 0x60
 8000ada:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	4619      	mov	r1, r3
 8000aee:	4807      	ldr	r0, [pc, #28]	; (8000b0c <MX_TIM4_Init+0xac>)
 8000af0:	f004 fee6 	bl	80058c0 <HAL_TIM_PWM_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000afa:	f000 fb2d 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <MX_TIM4_Init+0xac>)
 8000b00:	f000 fcfa 	bl	80014f8 <HAL_TIM_MspPostInit>

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20005260 	.word	0x20005260
 8000b10:	40000800 	.word	0x40000800

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	4b71      	ldr	r3, [pc, #452]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a70      	ldr	r2, [pc, #448]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000b34:	f043 0310 	orr.w	r3, r3, #16
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b6e      	ldr	r3, [pc, #440]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	4b6a      	ldr	r3, [pc, #424]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a69      	ldr	r2, [pc, #420]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b67      	ldr	r3, [pc, #412]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b63      	ldr	r3, [pc, #396]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a62      	ldr	r2, [pc, #392]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b60      	ldr	r3, [pc, #384]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b5c      	ldr	r3, [pc, #368]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a5b      	ldr	r2, [pc, #364]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b59      	ldr	r3, [pc, #356]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b55      	ldr	r3, [pc, #340]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a54      	ldr	r2, [pc, #336]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b52      	ldr	r3, [pc, #328]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b4e      	ldr	r3, [pc, #312]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a4d      	ldr	r2, [pc, #308]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <MX_GPIO_Init+0x1e0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4848      	ldr	r0, [pc, #288]	; (8000cf8 <MX_GPIO_Init+0x1e4>)
 8000bd8:	f001 fd9c 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2101      	movs	r1, #1
 8000be0:	4846      	ldr	r0, [pc, #280]	; (8000cfc <MX_GPIO_Init+0x1e8>)
 8000be2:	f001 fd97 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f24e 0110 	movw	r1, #57360	; 0xe010
 8000bec:	4844      	ldr	r0, [pc, #272]	; (8000d00 <MX_GPIO_Init+0x1ec>)
 8000bee:	f001 fd91 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	483b      	ldr	r0, [pc, #236]	; (8000cf8 <MX_GPIO_Init+0x1e4>)
 8000c0a:	f001 fbcf 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4835      	ldr	r0, [pc, #212]	; (8000cfc <MX_GPIO_Init+0x1e8>)
 8000c26:	f001 fbc1 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c2a:	2308      	movs	r3, #8
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	482d      	ldr	r0, [pc, #180]	; (8000cfc <MX_GPIO_Init+0x1e8>)
 8000c46:	f001 fbb1 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4829      	ldr	r0, [pc, #164]	; (8000d04 <MX_GPIO_Init+0x1f0>)
 8000c5e:	f001 fba5 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c62:	2304      	movs	r3, #4
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4824      	ldr	r0, [pc, #144]	; (8000d08 <MX_GPIO_Init+0x1f4>)
 8000c76:	f001 fb99 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	481c      	ldr	r0, [pc, #112]	; (8000d08 <MX_GPIO_Init+0x1f4>)
 8000c98:	f001 fb88 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8000c9c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4812      	ldr	r0, [pc, #72]	; (8000d00 <MX_GPIO_Init+0x1ec>)
 8000cb6:	f001 fb79 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cba:	2320      	movs	r3, #32
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_GPIO_Init+0x1ec>)
 8000cce:	f001 fb6d 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_GPIO_Init+0x1e4>)
 8000ce8:	f001 fb60 	bl	80023ac <HAL_GPIO_Init>

}
 8000cec:	bf00      	nop
 8000cee:	3730      	adds	r7, #48	; 0x30
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40020800 	.word	0x40020800
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40020400 	.word	0x40020400

08000d0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d14:	f00c faae 	bl	800d274 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  for(;;)
  {
	// This task make test payload for test
	for(int x = 0; x <= 10000; x++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	e005      	b.n	8000d2a <StartDefaultTask+0x1e>
	{
	 	x++;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3301      	adds	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
	for(int x = 0; x <= 10000; x++)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d30:	4293      	cmp	r3, r2
 8000d32:	ddf4      	ble.n	8000d1e <StartDefaultTask+0x12>
	}

    osDelay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f008 fc3f 	bl	80095b8 <osDelay>
	for(int x = 0; x <= 10000; x++)
 8000d3a:	e7ed      	b.n	8000d18 <StartDefaultTask+0xc>

08000d3c <StartLED_BLUE_BLINK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_BLUE_BLINK */
void StartLED_BLUE_BLINK(void *argument)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_BLUE_BLINK */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4a:	4808      	ldr	r0, [pc, #32]	; (8000d6c <StartLED_BLUE_BLINK+0x30>)
 8000d4c:	f001 fce2 	bl	8002714 <HAL_GPIO_WritePin>
	  osDelay(100);
 8000d50:	2064      	movs	r0, #100	; 0x64
 8000d52:	f008 fc31 	bl	80095b8 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <StartLED_BLUE_BLINK+0x30>)
 8000d5e:	f001 fcd9 	bl	8002714 <HAL_GPIO_WritePin>
	  osDelay(900);
 8000d62:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000d66:	f008 fc27 	bl	80095b8 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000d6a:	e7eb      	b.n	8000d44 <StartLED_BLUE_BLINK+0x8>
 8000d6c:	40020c00 	.word	0x40020c00

08000d70 <StartLED_YELLOW_ADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_YELLOW_ADC */
void StartLED_YELLOW_ADC(void *argument)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_YELLOW_ADC */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreAcquire(BtnSemHandle, osWaitForever) == osOK);							// Waiting on press button. Semaphore
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <StartLED_YELLOW_ADC+0x30>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d80:	4618      	mov	r0, r3
 8000d82:	f008 fcbd 	bl	8009700 <osSemaphoreAcquire>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <StartLED_YELLOW_ADC+0x34>)
 8000d8c:	f001 fcdb 	bl	8002746 <HAL_GPIO_TogglePin>
		  osDelay(100);
 8000d90:	2064      	movs	r0, #100	; 0x64
 8000d92:	f008 fc11 	bl	80095b8 <osDelay>
	  }
	  osDelay(100);
 8000d96:	2064      	movs	r0, #100	; 0x64
 8000d98:	f008 fc0e 	bl	80095b8 <osDelay>
	  if(osSemaphoreAcquire(BtnSemHandle, osWaitForever) == osOK);							// Waiting on press button. Semaphore
 8000d9c:	e7ec      	b.n	8000d78 <StartLED_YELLOW_ADC+0x8>
 8000d9e:	bf00      	nop
 8000da0:	20005208 	.word	0x20005208
 8000da4:	40020c00 	.word	0x40020c00

08000da8 <StartUART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_Task */
void StartUART_Task(void *argument)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
	QUEUE_t msg;
  for(;;)
  {
	  // osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <StartUART_Task+0x58>)
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	f107 010c 	add.w	r1, r7, #12
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f008 fe07 	bl	80099d4 <osMessageQueueGet>

	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8000dcc:	e004      	b.n	8000dd8 <StartUART_Task+0x30>
	{
		buffer_size ++;
 8000dce:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8000dd8:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8000ddc:	f107 020c 	add.w	r2, r7, #12
 8000de0:	5cd3      	ldrb	r3, [r2, r3]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f3      	bne.n	8000dce <StartUART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8000de6:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00c fafd 	bl	800d3f0 <CDC_Transmit_FS>
    osDelay(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f008 fbde 	bl	80095b8 <osDelay>
  {
 8000dfc:	e7da      	b.n	8000db4 <StartUART_Task+0xc>
 8000dfe:	bf00      	nop
 8000e00:	200073c0 	.word	0x200073c0

08000e04 <StartADC_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC_Task */
void StartADC_Task(void *argument)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC_Task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <StartADC_Task+0x28>)
 8000e0e:	f000 fd57 	bl	80018c0 <HAL_ADC_Start>
	  uint16_t adc_res = HAL_ADC_GetValue(&hadc1);						// Read Voltage on potentiometer
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <StartADC_Task+0x28>)
 8000e14:	f000 fe26 	bl	8001a64 <HAL_ADC_GetValue>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	81fb      	strh	r3, [r7, #14]
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, adc_res);			// Set PWM generation
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <StartADC_Task+0x2c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	89fa      	ldrh	r2, [r7, #14]
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34
	  osDelay(100);
 8000e24:	2064      	movs	r0, #100	; 0x64
 8000e26:	f008 fbc7 	bl	80095b8 <osDelay>
  {
 8000e2a:	e7ef      	b.n	8000e0c <StartADC_Task+0x8>
 8000e2c:	20009e14 	.word	0x20009e14
 8000e30:	20005260 	.word	0x20005260

08000e34 <StartTeadBtn_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeadBtn_Task */
void StartTeadBtn_Task(void *argument)
{
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTeadBtn_Task */
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000e40:	2101      	movs	r1, #1
 8000e42:	4816      	ldr	r0, [pc, #88]	; (8000e9c <StartTeadBtn_Task+0x68>)
 8000e44:	f001 fc4e 	bl	80026e4 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d022      	beq.n	8000e94 <StartTeadBtn_Task+0x60>
	  {
		  osSemaphoreRelease(BtnSemHandle);									// Set semaphore BtnSemHandle semaphore (FOR TURN ON/OFF YELLOW LED)
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <StartTeadBtn_Task+0x6c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f008 fca6 	bl	80097a4 <osSemaphoreRelease>
		  memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00c ff82 	bl	800dd6c <memset>
		  strcpy(msg.Buf, "Button pressed!!!\r\n\0");						// Write message
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <StartTeadBtn_Task+0x70>)
 8000e6e:	461c      	mov	r4, r3
 8000e70:	4615      	mov	r5, r2
 8000e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e76:	682b      	ldr	r3, [r5, #0]
 8000e78:	6023      	str	r3, [r4, #0]
		  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);		// Write data on queue
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <StartTeadBtn_Task+0x74>)
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	f107 0108 	add.w	r1, r7, #8
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e86:	2200      	movs	r2, #0
 8000e88:	f008 fd44 	bl	8009914 <osMessageQueuePut>
		  osDelay(300);
 8000e8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e90:	f008 fb92 	bl	80095b8 <osDelay>
	  }
	  osDelay(100);
 8000e94:	2064      	movs	r0, #100	; 0x64
 8000e96:	f008 fb8f 	bl	80095b8 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000e9a:	e7d1      	b.n	8000e40 <StartTeadBtn_Task+0xc>
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	20005208 	.word	0x20005208
 8000ea4:	0800e7d0 	.word	0x0800e7d0
 8000ea8:	200073c0 	.word	0x200073c0

08000eac <StartShowResources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowResources */
void StartShowResources(void *argument)
{
 8000eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eae:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartShowResources */
  /* Infinite loop */
  for(;;)
  {
		osDelay(5000);												// Every 5 second task management will print data
 8000eb8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ebc:	f008 fb7c 	bl	80095b8 <osDelay>

		char str_end_of_line[3] = {'\r','\n'};
 8000ec0:	4a8d      	ldr	r2, [pc, #564]	; (80010f8 <StartShowResources+0x24c>)
 8000ec2:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	4611      	mov	r1, r2
 8000eca:	8019      	strh	r1, [r3, #0]
 8000ecc:	3302      	adds	r3, #2
 8000ece:	0c12      	lsrs	r2, r2, #16
 8000ed0:	701a      	strb	r2, [r3, #0]
		char str_sig = '-';
 8000ed2:	232d      	movs	r3, #45	; 0x2d
 8000ed4:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
		char buff[10] = {0};
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8000ede:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	809a      	strh	r2, [r3, #4]

		QUEUE_t msg;												// Make a queue
		memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8000ee8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f00c ff3a 	bl	800dd6c <memset>
		strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8000ef8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff f967 	bl	80001d0 <strlen>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a7b      	ldr	r2, [pc, #492]	; (80010fc <StartShowResources+0x250>)
 8000f0e:	461d      	mov	r5, r3
 8000f10:	4614      	mov	r4, r2
 8000f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f14:	6028      	str	r0, [r5, #0]
 8000f16:	6069      	str	r1, [r5, #4]
 8000f18:	60aa      	str	r2, [r5, #8]
 8000f1a:	60eb      	str	r3, [r5, #12]
 8000f1c:	cc03      	ldmia	r4!, {r0, r1}
 8000f1e:	6128      	str	r0, [r5, #16]
 8000f20:	6169      	str	r1, [r5, #20]
 8000f22:	7823      	ldrb	r3, [r4, #0]
 8000f24:	762b      	strb	r3, [r5, #24]

		freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8000f26:	f00c f8dd 	bl	800d0e4 <xPortGetFreeHeapSize>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b74      	ldr	r3, [pc, #464]	; (8001100 <StartShowResources+0x254>)
 8000f30:	601a      	str	r2, [r3, #0]
		itoa(freemem, buff, 10);
 8000f32:	4b73      	ldr	r3, [pc, #460]	; (8001100 <StartShowResources+0x254>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8000f3a:	220a      	movs	r2, #10
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f00c ff03 	bl	800dd48 <itoa>
		strcat(msg.Buf, buff);
 8000f42:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8000f46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f00d f809 	bl	800df64 <strcat>
		strcat(msg.Buf, str_end_of_line);
 8000f52:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8000f56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00d f801 	bl	800df64 <strcat>

		// add a hat
		strcat(msg.Buf, "| TASK NAME           | STATUS |   PRIOR	|  STACK  |    NUM  |\n\r\0");
 8000f62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff f932 	bl	80001d0 <strlen>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f74:	4413      	add	r3, r2
 8000f76:	4a63      	ldr	r2, [pc, #396]	; (8001104 <StartShowResources+0x258>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	2341      	movs	r3, #65	; 0x41
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f00c fee6 	bl	800dd50 <memcpy>

		vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8000f84:	4860      	ldr	r0, [pc, #384]	; (8001108 <StartShowResources+0x25c>)
 8000f86:	f00b f85f 	bl	800c048 <vTaskList>

		// Finding the  end of string
		uint16_t buffer_size = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
		while(msg.Buf[buffer_size] != '\0')
 8000f90:	e004      	b.n	8000f9c <StartShowResources+0xf0>
		{
			buffer_size ++;
 8000f92:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8000f96:	3301      	adds	r3, #1
 8000f98:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
		while(msg.Buf[buffer_size] != '\0')
 8000f9c:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8000fa0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000fa4:	5cd3      	ldrb	r3, [r2, r3]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f3      	bne.n	8000f92 <StartShowResources+0xe6>
		}

		// Add str_management_memory_str to queue string
		int i = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8000fb6:	e011      	b.n	8000fdc <StartShowResources+0x130>
		{
			// add data to queue
			msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8000fb8:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8000fbc:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4951      	ldr	r1, [pc, #324]	; (8001108 <StartShowResources+0x25c>)
 8000fc4:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8000fc8:	440a      	add	r2, r1
 8000fca:	7811      	ldrb	r1, [r2, #0]
 8000fcc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000fd0:	54d1      	strb	r1, [r2, r3]
		for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8000fd2:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8000fdc:	4a4a      	ldr	r2, [pc, #296]	; (8001108 <StartShowResources+0x25c>)
 8000fde:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1e6      	bne.n	8000fb8 <StartShowResources+0x10c>
		}

		// add a hat
		char str_line[] = {"-----------------------\n\r"};
 8000fea:	4b48      	ldr	r3, [pc, #288]	; (800110c <StartShowResources+0x260>)
 8000fec:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 8000ff0:	461d      	mov	r5, r3
 8000ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ffa:	c403      	stmia	r4!, {r0, r1}
 8000ffc:	8022      	strh	r2, [r4, #0]
		char str_head_2[] = {"| TASK NAME           | ABS TIME |              TASK TIME% |\n\r"};
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4a43      	ldr	r2, [pc, #268]	; (8001110 <StartShowResources+0x264>)
 8001004:	461c      	mov	r4, r3
 8001006:	4615      	mov	r5, r2
 8001008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001014:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001018:	c407      	stmia	r4!, {r0, r1, r2}
 800101a:	8023      	strh	r3, [r4, #0]
 800101c:	3402      	adds	r4, #2
 800101e:	0c1b      	lsrs	r3, r3, #16
 8001020:	7023      	strb	r3, [r4, #0]
		strcat(msg.Buf, str_line);
 8001022:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8001026:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f00c ff99 	bl	800df64 <strcat>
		strcat(msg.Buf, str_head_2);
 8001032:	f107 020c 	add.w	r2, r7, #12
 8001036:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f00c ff91 	bl	800df64 <strcat>


		memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8001042:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001046:	2100      	movs	r1, #0
 8001048:	482f      	ldr	r0, [pc, #188]	; (8001108 <StartShowResources+0x25c>)
 800104a:	f00c fe8f 	bl	800dd6c <memset>

		vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 800104e:	482e      	ldr	r0, [pc, #184]	; (8001108 <StartShowResources+0x25c>)
 8001050:	f00b f890 	bl	800c174 <vTaskGetRunTimeStats>

		buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);           // НЕ ВИВОДИТЬ СТРОКУ !!!!!!!!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<
 8001054:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8001058:	b29a      	uxth	r2, r3
 800105a:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 800105e:	4413      	add	r3, r2
 8001060:	b29b      	uxth	r3, r3
 8001062:	3357      	adds	r3, #87	; 0x57
 8001064:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
		for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800106e:	e011      	b.n	8001094 <StartShowResources+0x1e8>
		{
			// add data to queue
			msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8001070:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8001074:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8001078:	4413      	add	r3, r2
 800107a:	4923      	ldr	r1, [pc, #140]	; (8001108 <StartShowResources+0x25c>)
 800107c:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8001080:	440a      	add	r2, r1
 8001082:	7811      	ldrb	r1, [r2, #0]
 8001084:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001088:	54d1      	strb	r1, [r2, r3]
		for(i = 0; str_management_memory_str[i] != '\0'; i++)
 800108a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800108e:	3301      	adds	r3, #1
 8001090:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <StartShowResources+0x25c>)
 8001096:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1e6      	bne.n	8001070 <StartShowResources+0x1c4>
	    }
		strcat(msg.Buf, "#########################################\n\r");
 80010a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f892 	bl	80001d0 <strlen>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b4:	4413      	add	r3, r2
 80010b6:	4a17      	ldr	r2, [pc, #92]	; (8001114 <StartShowResources+0x268>)
 80010b8:	4614      	mov	r4, r2
 80010ba:	469c      	mov	ip, r3
 80010bc:	f104 0e20 	add.w	lr, r4, #32
 80010c0:	4665      	mov	r5, ip
 80010c2:	4626      	mov	r6, r4
 80010c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010c6:	6028      	str	r0, [r5, #0]
 80010c8:	6069      	str	r1, [r5, #4]
 80010ca:	60aa      	str	r2, [r5, #8]
 80010cc:	60eb      	str	r3, [r5, #12]
 80010ce:	3410      	adds	r4, #16
 80010d0:	f10c 0c10 	add.w	ip, ip, #16
 80010d4:	4574      	cmp	r4, lr
 80010d6:	d1f3      	bne.n	80010c0 <StartShowResources+0x214>
 80010d8:	4665      	mov	r5, ip
 80010da:	4623      	mov	r3, r4
 80010dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010de:	6028      	str	r0, [r5, #0]
 80010e0:	6069      	str	r1, [r5, #4]
 80010e2:	60aa      	str	r2, [r5, #8]

		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <StartShowResources+0x26c>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f0:	2200      	movs	r2, #0
 80010f2:	f008 fc0f 	bl	8009914 <osMessageQueuePut>
  {
 80010f6:	e6df      	b.n	8000eb8 <StartShowResources+0xc>
 80010f8:	0800e874 	.word	0x0800e874
 80010fc:	0800e7e8 	.word	0x0800e7e8
 8001100:	200005ec 	.word	0x200005ec
 8001104:	0800e804 	.word	0x0800e804
 8001108:	20000204 	.word	0x20000204
 800110c:	0800e878 	.word	0x0800e878
 8001110:	0800e894 	.word	0x0800e894
 8001114:	0800e848 	.word	0x0800e848
 8001118:	200073c0 	.word	0x200073c0

0800111c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM3)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a09      	ldr	r2, [pc, #36]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d104      	bne.n	8001138 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001136:	6013      	str	r3, [r2, #0]
	}


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001140:	d101      	bne.n	8001146 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8001142:	f000 fb35 	bl	80017b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40000400 	.word	0x40000400
 8001154:	2000a3ec 	.word	0x2000a3ec

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>
	...

08001164 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_MspInit+0x54>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_MspInit+0x54>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_MspInit+0x54>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_MspInit+0x54>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_MspInit+0x54>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_MspInit+0x54>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	210f      	movs	r1, #15
 80011a6:	f06f 0001 	mvn.w	r0, #1
 80011aa:	f001 f8d5 	bl	8002358 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a17      	ldr	r2, [pc, #92]	; (8001238 <HAL_ADC_MspInit+0x7c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d127      	bne.n	800122e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_ADC_MspInit+0x80>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a15      	ldr	r2, [pc, #84]	; (800123c <HAL_ADC_MspInit+0x80>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_ADC_MspInit+0x80>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_ADC_MspInit+0x80>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_ADC_MspInit+0x80>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_ADC_MspInit+0x80>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001216:	2302      	movs	r3, #2
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121a:	2303      	movs	r3, #3
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_ADC_MspInit+0x84>)
 800122a:	f001 f8bf 	bl	80023ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40012000 	.word	0x40012000
 800123c:	40023800 	.word	0x40023800
 8001240:	40020400 	.word	0x40020400

08001244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <HAL_I2C_MspInit+0x84>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d12c      	bne.n	80012c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_I2C_MspInit+0x88>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a17      	ldr	r2, [pc, #92]	; (80012cc <HAL_I2C_MspInit+0x88>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_I2C_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001282:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001288:	2312      	movs	r3, #18
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001294:	2304      	movs	r3, #4
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <HAL_I2C_MspInit+0x8c>)
 80012a0:	f001 f884 	bl	80023ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_I2C_MspInit+0x88>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_I2C_MspInit+0x88>)
 80012ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b2:	6413      	str	r3, [r2, #64]	; 0x40
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_I2C_MspInit+0x88>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	; 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40005400 	.word	0x40005400
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020400 	.word	0x40020400

080012d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a31      	ldr	r2, [pc, #196]	; (80013c4 <HAL_I2S_MspInit+0xf0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d15a      	bne.n	80013ba <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001304:	2301      	movs	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001308:	23c0      	movs	r3, #192	; 0xc0
 800130a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4618      	mov	r0, r3
 8001316:	f003 fe2b 	bl	8004f70 <HAL_RCCEx_PeriphCLKConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001320:	f7ff ff1a 	bl	8001158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <HAL_I2S_MspInit+0xf4>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	4a26      	ldr	r2, [pc, #152]	; (80013c8 <HAL_I2S_MspInit+0xf4>)
 800132e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001332:	6413      	str	r3, [r2, #64]	; 0x40
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_I2S_MspInit+0xf4>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_I2S_MspInit+0xf4>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <HAL_I2S_MspInit+0xf4>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_I2S_MspInit+0xf4>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_I2S_MspInit+0xf4>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <HAL_I2S_MspInit+0xf4>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6313      	str	r3, [r2, #48]	; 0x30
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_I2S_MspInit+0xf4>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001378:	2310      	movs	r3, #16
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001388:	2306      	movs	r3, #6
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	480e      	ldr	r0, [pc, #56]	; (80013cc <HAL_I2S_MspInit+0xf8>)
 8001394:	f001 f80a 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001398:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013aa:	2306      	movs	r3, #6
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	4806      	ldr	r0, [pc, #24]	; (80013d0 <HAL_I2S_MspInit+0xfc>)
 80013b6:	f000 fff9 	bl	80023ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3738      	adds	r7, #56	; 0x38
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40003c00 	.word	0x40003c00
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020800 	.word	0x40020800

080013d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a19      	ldr	r2, [pc, #100]	; (8001458 <HAL_SPI_MspInit+0x84>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12b      	bne.n	800144e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_SPI_MspInit+0x88>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_SPI_MspInit+0x88>)
 8001400:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_SPI_MspInit+0x88>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_SPI_MspInit+0x88>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_SPI_MspInit+0x88>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_SPI_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800142e:	23e0      	movs	r3, #224	; 0xe0
 8001430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800143e:	2305      	movs	r3, #5
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_SPI_MspInit+0x8c>)
 800144a:	f000 ffaf 	bl	80023ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40013000 	.word	0x40013000
 800145c:	40023800 	.word	0x40023800
 8001460:	40020000 	.word	0x40020000

08001464 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <HAL_TIM_Base_MspInit+0x48>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d115      	bne.n	80014a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_TIM_Base_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <HAL_TIM_Base_MspInit+0x4c>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_TIM_Base_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2105      	movs	r1, #5
 8001496:	201d      	movs	r0, #29
 8001498:	f000 ff5e 	bl	8002358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800149c:	201d      	movs	r0, #29
 800149e:	f000 ff77 	bl	8002390 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40000400 	.word	0x40000400
 80014b0:	40023800 	.word	0x40023800

080014b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10d      	bne.n	80014e2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_TIM_PWM_MspInit+0x40>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <HAL_TIM_PWM_MspInit+0x40>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_TIM_PWM_MspInit+0x40>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40000800 	.word	0x40000800
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <HAL_TIM_MspPostInit+0x68>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d11e      	bne.n	8001558 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_TIM_MspPostInit+0x6c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <HAL_TIM_MspPostInit+0x6c>)
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_TIM_MspPostInit+0x6c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001548:	2302      	movs	r3, #2
 800154a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	4619      	mov	r1, r3
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_TIM_MspPostInit+0x70>)
 8001554:	f000 ff2a 	bl	80023ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40000800 	.word	0x40000800
 8001564:	40023800 	.word	0x40023800
 8001568:	40020c00 	.word	0x40020c00

0800156c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	201c      	movs	r0, #28
 8001582:	f000 fee9 	bl	8002358 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001586:	201c      	movs	r0, #28
 8001588:	f000 ff02 	bl	8002390 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_InitTick+0xa8>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_InitTick+0xa8>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_InitTick+0xa8>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a8:	f107 0210 	add.w	r2, r7, #16
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fcaa 	bl	8004f0c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015b8:	f003 fc94 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 80015bc:	4603      	mov	r3, r0
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <HAL_InitTick+0xac>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	3b01      	subs	r3, #1
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0xb0>)
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_InitTick+0xb0>)
 80015da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015de:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_InitTick+0xb0>)
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_InitTick+0xb0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_InitTick+0xb0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80015f2:	480a      	ldr	r0, [pc, #40]	; (800161c <HAL_InitTick+0xb0>)
 80015f4:	f003 fe85 	bl	8005302 <HAL_TIM_Base_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d104      	bne.n	8001608 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <HAL_InitTick+0xb0>)
 8001600:	f003 fece 	bl	80053a0 <HAL_TIM_Base_Start_IT>
 8001604:	4603      	mov	r3, r0
 8001606:	e000      	b.n	800160a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
}
 800160a:	4618      	mov	r0, r3
 800160c:	3730      	adds	r7, #48	; 0x30
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	431bde83 	.word	0x431bde83
 800161c:	2000a934 	.word	0x2000a934

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler+0x4>

08001626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <MemManage_Handler+0x4>

08001632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler+0x4>

0800163e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <TIM2_IRQHandler+0x10>)
 8001652:	f004 f82d 	bl	80056b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000a934 	.word	0x2000a934

08001660 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <TIM3_IRQHandler+0x10>)
 8001666:	f004 f823 	bl	80056b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20009dc4 	.word	0x20009dc4

08001674 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <OTG_FS_IRQHandler+0x10>)
 800167a:	f001 ffb3 	bl	80035e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000be90 	.word	0x2000be90

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f00c fb04 	bl	800dcc4 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20020000 	.word	0x20020000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	200005f0 	.word	0x200005f0
 80016f0:	2000c2a8 	.word	0x2000c2a8

080016f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001750 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800171e:	490e      	ldr	r1, [pc, #56]	; (8001758 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001720:	4a0e      	ldr	r2, [pc, #56]	; (800175c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001734:	4c0b      	ldr	r4, [pc, #44]	; (8001764 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001742:	f7ff ffd7 	bl	80016f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001746:	f00c fac3 	bl	800dcd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174a:	f7fe ff21 	bl	8000590 <main>
  bx  lr    
 800174e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800175c:	0800eb60 	.word	0x0800eb60
  ldr r2, =_sbss
 8001760:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001764:	2000c2a8 	.word	0x2000c2a8

08001768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC_IRQHandler>
	...

0800176c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <HAL_Init+0x40>)
 8001776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_Init+0x40>)
 8001782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001786:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_Init+0x40>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 fdd4 	bl	8002342 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179a:	200f      	movs	r0, #15
 800179c:	f7ff fee6 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a0:	f7ff fce0 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008
 80017d4:	2000a97c 	.word	0x2000a97c

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	2000a97c 	.word	0x2000a97c

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000008 	.word	0x20000008

08001838 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e033      	b.n	80018b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fcb0 	bl	80011bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d118      	bne.n	80018a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800187e:	f023 0302 	bic.w	r3, r3, #2
 8001882:	f043 0202 	orr.w	r2, r3, #2
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fa1a 	bl	8001cc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
 80018a6:	e001      	b.n	80018ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Start+0x1a>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e0b2      	b.n	8001a40 <HAL_ADC_Start+0x180>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d018      	beq.n	8001922 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001900:	4b52      	ldr	r3, [pc, #328]	; (8001a4c <HAL_ADC_Start+0x18c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_ADC_Start+0x190>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	0c9a      	lsrs	r2, r3, #18
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001914:	e002      	b.n	800191c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	3b01      	subs	r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f9      	bne.n	8001916 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b01      	cmp	r3, #1
 800192e:	d17a      	bne.n	8001a26 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800195a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800196a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800196e:	d106      	bne.n	800197e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f023 0206 	bic.w	r2, r3, #6
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	645a      	str	r2, [r3, #68]	; 0x44
 800197c:	e002      	b.n	8001984 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_ADC_Start+0x194>)
 800198e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001998:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d12a      	bne.n	80019fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2b      	ldr	r2, [pc, #172]	; (8001a58 <HAL_ADC_Start+0x198>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d015      	beq.n	80019dc <HAL_ADC_Start+0x11c>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <HAL_ADC_Start+0x19c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d105      	bne.n	80019c6 <HAL_ADC_Start+0x106>
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_ADC_Start+0x194>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00a      	beq.n	80019dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a25      	ldr	r2, [pc, #148]	; (8001a60 <HAL_ADC_Start+0x1a0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d136      	bne.n	8001a3e <HAL_ADC_Start+0x17e>
 80019d0:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_ADC_Start+0x194>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d130      	bne.n	8001a3e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d129      	bne.n	8001a3e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	e020      	b.n	8001a3e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <HAL_ADC_Start+0x198>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d11b      	bne.n	8001a3e <HAL_ADC_Start+0x17e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d114      	bne.n	8001a3e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	e00b      	b.n	8001a3e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f043 0210 	orr.w	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f043 0201 	orr.w	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	431bde83 	.word	0x431bde83
 8001a54:	40012300 	.word	0x40012300
 8001a58:	40012000 	.word	0x40012000
 8001a5c:	40012100 	.word	0x40012100
 8001a60:	40012200 	.word	0x40012200

08001a64 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x1c>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e105      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x228>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b09      	cmp	r3, #9
 8001aaa:	d925      	bls.n	8001af8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68d9      	ldr	r1, [r3, #12]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b1e      	subs	r3, #30
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	400a      	ands	r2, r1
 8001ad0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68d9      	ldr	r1, [r3, #12]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4403      	add	r3, r0
 8001aea:	3b1e      	subs	r3, #30
 8001aec:	409a      	lsls	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	e022      	b.n	8001b3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6919      	ldr	r1, [r3, #16]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	400a      	ands	r2, r1
 8001b1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6919      	ldr	r1, [r3, #16]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4403      	add	r3, r0
 8001b34:	409a      	lsls	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d824      	bhi.n	8001b90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b05      	subs	r3, #5
 8001b58:	221f      	movs	r2, #31
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	400a      	ands	r2, r1
 8001b66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b05      	subs	r3, #5
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8e:	e04c      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b0c      	cmp	r3, #12
 8001b96:	d824      	bhi.n	8001be2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b23      	subs	r3, #35	; 0x23
 8001baa:	221f      	movs	r2, #31
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b23      	subs	r3, #35	; 0x23
 8001bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
 8001be0:	e023      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b41      	subs	r3, #65	; 0x41
 8001bf4:	221f      	movs	r2, #31
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	400a      	ands	r2, r1
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b41      	subs	r3, #65	; 0x41
 8001c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_ADC_ConfigChannel+0x234>)
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <HAL_ADC_ConfigChannel+0x238>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d109      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1cc>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b12      	cmp	r3, #18
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_ADC_ConfigChannel+0x238>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d123      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x21e>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d003      	beq.n	8001c66 <HAL_ADC_ConfigChannel+0x1e6>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b11      	cmp	r3, #17
 8001c64:	d11b      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b10      	cmp	r3, #16
 8001c78:	d111      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_ADC_ConfigChannel+0x23c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <HAL_ADC_ConfigChannel+0x240>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	0c9a      	lsrs	r2, r3, #18
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c90:	e002      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f9      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40012300 	.word	0x40012300
 8001cb8:	40012000 	.word	0x40012000
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	431bde83 	.word	0x431bde83

08001cc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ccc:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <ADC_Init+0x1f0>)
 8001cce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	021a      	lsls	r2, r3, #8
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6899      	ldr	r1, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	4a58      	ldr	r2, [pc, #352]	; (8001eb8 <ADC_Init+0x1f4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d022      	beq.n	8001da2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6899      	ldr	r1, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6899      	ldr	r1, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	e00f      	b.n	8001dc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0202 	bic.w	r2, r2, #2
 8001dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6899      	ldr	r1, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e1b      	ldrb	r3, [r3, #24]
 8001ddc:	005a      	lsls	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01b      	beq.n	8001e28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6859      	ldr	r1, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	035a      	lsls	r2, r3, #13
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	e007      	b.n	8001e38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	051a      	lsls	r2, r3, #20
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6899      	ldr	r1, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e7a:	025a      	lsls	r2, r3, #9
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	029a      	lsls	r2, r3, #10
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	609a      	str	r2, [r3, #8]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40012300 	.word	0x40012300
 8001eb8:	0f000001 	.word	0x0f000001

08001ebc <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e17d      	b.n	80021d0 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b09      	cmp	r3, #9
 8001ee2:	d925      	bls.n	8001f30 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68d9      	ldr	r1, [r3, #12]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b1e      	subs	r3, #30
 8001efa:	2207      	movs	r2, #7
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43da      	mvns	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	400a      	ands	r2, r1
 8001f08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68d9      	ldr	r1, [r3, #12]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4403      	add	r3, r0
 8001f22:	3b1e      	subs	r3, #30
 8001f24:	409a      	lsls	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	e022      	b.n	8001f76 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6919      	ldr	r1, [r3, #16]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	2207      	movs	r2, #7
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	400a      	ands	r2, r1
 8001f52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6919      	ldr	r1, [r3, #16]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4403      	add	r3, r0
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001f84:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	051a      	lsls	r2, r3, #20
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	3303      	adds	r3, #3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	221f      	movs	r2, #31
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	400a      	ands	r2, r1
 8001fcc:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	3303      	adds	r3, #3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a74      	ldr	r2, [pc, #464]	; (80021dc <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d022      	beq.n	8002054 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800201c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6899      	ldr	r1, [r3, #8]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800203e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6899      	ldr	r1, [r3, #8]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	e00f      	b.n	8002074 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002062:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002072:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	7d5b      	ldrb	r3, [r3, #21]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	e007      	b.n	800209e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209c:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	7d1b      	ldrb	r3, [r3, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	e007      	b.n	80020c8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020c6:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d02e      	beq.n	800212e <HAL_ADCEx_InjectedConfigChannel+0x272>
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d840      	bhi.n	8002156 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d002      	beq.n	80020de <HAL_ADCEx_InjectedConfigChannel+0x222>
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d014      	beq.n	8002106 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80020dc:	e03b      	b.n	8002156 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80020ec:	f023 030f 	bic.w	r3, r3, #15
 80020f0:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6959      	ldr	r1, [r3, #20]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	615a      	str	r2, [r3, #20]
      break;
 8002104:	e03b      	b.n	800217e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002114:	f023 030f 	bic.w	r3, r3, #15
 8002118:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6999      	ldr	r1, [r3, #24]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	619a      	str	r2, [r3, #24]
      break;
 800212c:	e027      	b.n	800217e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800213c:	f023 030f 	bic.w	r3, r3, #15
 8002140:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69d9      	ldr	r1, [r3, #28]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	61da      	str	r2, [r3, #28]
      break;
 8002154:	e013      	b.n	800217e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002164:	f023 030f 	bic.w	r3, r3, #15
 8002168:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6a19      	ldr	r1, [r3, #32]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	621a      	str	r2, [r3, #32]
      break;
 800217c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002180:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d109      	bne.n	80021a0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b12      	cmp	r3, #18
 8002192:	d105      	bne.n	80021a0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10d      	bne.n	80021c6 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d003      	beq.n	80021ba <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b11      	cmp	r3, #17
 80021b8:	d105      	bne.n	80021c6 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	000f0001 	.word	0x000f0001
 80021e0:	40012300 	.word	0x40012300
 80021e4:	40012000 	.word	0x40012000

080021e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <__NVIC_SetPriorityGrouping+0x44>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002204:	4013      	ands	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221a:	4a04      	ldr	r2, [pc, #16]	; (800222c <__NVIC_SetPriorityGrouping+0x44>)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	60d3      	str	r3, [r2, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <__NVIC_GetPriorityGrouping+0x18>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	f003 0307 	and.w	r3, r3, #7
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	2b00      	cmp	r3, #0
 800225c:	db0b      	blt.n	8002276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	f003 021f 	and.w	r2, r3, #31
 8002264:	4907      	ldr	r1, [pc, #28]	; (8002284 <__NVIC_EnableIRQ+0x38>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2001      	movs	r0, #1
 800226e:	fa00 f202 	lsl.w	r2, r0, r2
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000e100 	.word	0xe000e100

08002288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	; (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	; (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
         );
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ff4c 	bl	80021e8 <__NVIC_SetPriorityGrouping>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800236a:	f7ff ff61 	bl	8002230 <__NVIC_GetPriorityGrouping>
 800236e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	6978      	ldr	r0, [r7, #20]
 8002376:	f7ff ffb1 	bl	80022dc <NVIC_EncodePriority>
 800237a:	4602      	mov	r2, r0
 800237c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff80 	bl	8002288 <__NVIC_SetPriority>
}
 8002388:	bf00      	nop
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff54 	bl	800224c <__NVIC_EnableIRQ>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	; 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e16b      	b.n	80026a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 815a 	bne.w	800269a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d017      	beq.n	800249c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80b4 	beq.w	800269a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b60      	ldr	r3, [pc, #384]	; (80026b8 <HAL_GPIO_Init+0x30c>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	4a5f      	ldr	r2, [pc, #380]	; (80026b8 <HAL_GPIO_Init+0x30c>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002540:	6453      	str	r3, [r2, #68]	; 0x44
 8002542:	4b5d      	ldr	r3, [pc, #372]	; (80026b8 <HAL_GPIO_Init+0x30c>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254e:	4a5b      	ldr	r2, [pc, #364]	; (80026bc <HAL_GPIO_Init+0x310>)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	220f      	movs	r2, #15
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a52      	ldr	r2, [pc, #328]	; (80026c0 <HAL_GPIO_Init+0x314>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02b      	beq.n	80025d2 <HAL_GPIO_Init+0x226>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a51      	ldr	r2, [pc, #324]	; (80026c4 <HAL_GPIO_Init+0x318>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d025      	beq.n	80025ce <HAL_GPIO_Init+0x222>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a50      	ldr	r2, [pc, #320]	; (80026c8 <HAL_GPIO_Init+0x31c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01f      	beq.n	80025ca <HAL_GPIO_Init+0x21e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4f      	ldr	r2, [pc, #316]	; (80026cc <HAL_GPIO_Init+0x320>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d019      	beq.n	80025c6 <HAL_GPIO_Init+0x21a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4e      	ldr	r2, [pc, #312]	; (80026d0 <HAL_GPIO_Init+0x324>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0x216>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4d      	ldr	r2, [pc, #308]	; (80026d4 <HAL_GPIO_Init+0x328>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_Init+0x212>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4c      	ldr	r2, [pc, #304]	; (80026d8 <HAL_GPIO_Init+0x32c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x20e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4b      	ldr	r2, [pc, #300]	; (80026dc <HAL_GPIO_Init+0x330>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_GPIO_Init+0x20a>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e00e      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025b6:	2308      	movs	r3, #8
 80025b8:	e00c      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ba:	2306      	movs	r3, #6
 80025bc:	e00a      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025be:	2305      	movs	r3, #5
 80025c0:	e008      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025c2:	2304      	movs	r3, #4
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025c6:	2303      	movs	r3, #3
 80025c8:	e004      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025d2:	2300      	movs	r3, #0
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f002 0203 	and.w	r2, r2, #3
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	4093      	lsls	r3, r2
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e4:	4935      	ldr	r1, [pc, #212]	; (80026bc <HAL_GPIO_Init+0x310>)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f2:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <HAL_GPIO_Init+0x334>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002616:	4a32      	ldr	r2, [pc, #200]	; (80026e0 <HAL_GPIO_Init+0x334>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800261c:	4b30      	ldr	r3, [pc, #192]	; (80026e0 <HAL_GPIO_Init+0x334>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002640:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <HAL_GPIO_Init+0x334>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_GPIO_Init+0x334>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266a:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <HAL_GPIO_Init+0x334>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_GPIO_Init+0x334>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002694:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <HAL_GPIO_Init+0x334>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3301      	adds	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	f67f ae90 	bls.w	80023c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3724      	adds	r7, #36	; 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40013800 	.word	0x40013800
 80026c0:	40020000 	.word	0x40020000
 80026c4:	40020400 	.word	0x40020400
 80026c8:	40020800 	.word	0x40020800
 80026cc:	40020c00 	.word	0x40020c00
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40021400 	.word	0x40021400
 80026d8:	40021800 	.word	0x40021800
 80026dc:	40021c00 	.word	0x40021c00
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	887b      	ldrh	r3, [r7, #2]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e001      	b.n	8002706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
 8002720:	4613      	mov	r3, r2
 8002722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002730:	e003      	b.n	800273a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	041a      	lsls	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	619a      	str	r2, [r3, #24]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002758:	887a      	ldrh	r2, [r7, #2]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	041a      	lsls	r2, r3, #16
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43d9      	mvns	r1, r3
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	400b      	ands	r3, r1
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e12b      	b.n	80029e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe fd4e 	bl	8001244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2224      	movs	r2, #36	; 0x24
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027e0:	f002 fb80 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 80027e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4a81      	ldr	r2, [pc, #516]	; (80029f0 <HAL_I2C_Init+0x274>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d807      	bhi.n	8002800 <HAL_I2C_Init+0x84>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4a80      	ldr	r2, [pc, #512]	; (80029f4 <HAL_I2C_Init+0x278>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	bf94      	ite	ls
 80027f8:	2301      	movls	r3, #1
 80027fa:	2300      	movhi	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	e006      	b.n	800280e <HAL_I2C_Init+0x92>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4a7d      	ldr	r2, [pc, #500]	; (80029f8 <HAL_I2C_Init+0x27c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	bf94      	ite	ls
 8002808:	2301      	movls	r3, #1
 800280a:	2300      	movhi	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e0e7      	b.n	80029e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4a78      	ldr	r2, [pc, #480]	; (80029fc <HAL_I2C_Init+0x280>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	0c9b      	lsrs	r3, r3, #18
 8002820:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	430a      	orrs	r2, r1
 8002834:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a6a      	ldr	r2, [pc, #424]	; (80029f0 <HAL_I2C_Init+0x274>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d802      	bhi.n	8002850 <HAL_I2C_Init+0xd4>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3301      	adds	r3, #1
 800284e:	e009      	b.n	8002864 <HAL_I2C_Init+0xe8>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	4a69      	ldr	r2, [pc, #420]	; (8002a00 <HAL_I2C_Init+0x284>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	3301      	adds	r3, #1
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	430b      	orrs	r3, r1
 800286a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002876:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	495c      	ldr	r1, [pc, #368]	; (80029f0 <HAL_I2C_Init+0x274>)
 8002880:	428b      	cmp	r3, r1
 8002882:	d819      	bhi.n	80028b8 <HAL_I2C_Init+0x13c>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e59      	subs	r1, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002892:	1c59      	adds	r1, r3, #1
 8002894:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002898:	400b      	ands	r3, r1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_I2C_Init+0x138>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1e59      	subs	r1, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b2:	e051      	b.n	8002958 <HAL_I2C_Init+0x1dc>
 80028b4:	2304      	movs	r3, #4
 80028b6:	e04f      	b.n	8002958 <HAL_I2C_Init+0x1dc>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d111      	bne.n	80028e4 <HAL_I2C_Init+0x168>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1e58      	subs	r0, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	440b      	add	r3, r1
 80028ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d2:	3301      	adds	r3, #1
 80028d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e012      	b.n	800290a <HAL_I2C_Init+0x18e>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1e58      	subs	r0, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	0099      	lsls	r1, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_I2C_Init+0x196>
 800290e:	2301      	movs	r3, #1
 8002910:	e022      	b.n	8002958 <HAL_I2C_Init+0x1dc>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10e      	bne.n	8002938 <HAL_I2C_Init+0x1bc>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1e58      	subs	r0, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6859      	ldr	r1, [r3, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	440b      	add	r3, r1
 8002928:	fbb0 f3f3 	udiv	r3, r0, r3
 800292c:	3301      	adds	r3, #1
 800292e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002936:	e00f      	b.n	8002958 <HAL_I2C_Init+0x1dc>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e58      	subs	r0, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	0099      	lsls	r1, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	fbb0 f3f3 	udiv	r3, r0, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	6809      	ldr	r1, [r1, #0]
 800295c:	4313      	orrs	r3, r2
 800295e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002986:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6911      	ldr	r1, [r2, #16]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68d2      	ldr	r2, [r2, #12]
 8002992:	4311      	orrs	r1, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	430b      	orrs	r3, r1
 800299a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	000186a0 	.word	0x000186a0
 80029f4:	001e847f 	.word	0x001e847f
 80029f8:	003d08ff 	.word	0x003d08ff
 80029fc:	431bde83 	.word	0x431bde83
 8002a00:	10624dd3 	.word	0x10624dd3

08002a04 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e128      	b.n	8002c68 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a90      	ldr	r2, [pc, #576]	; (8002c70 <HAL_I2S_Init+0x26c>)
 8002a2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7fe fc4f 	bl	80012d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a4c:	f023 030f 	bic.w	r3, r3, #15
 8002a50:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2202      	movs	r2, #2
 8002a58:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d060      	beq.n	8002b24 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e001      	b.n	8002a74 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d802      	bhi.n	8002a82 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002a82:	2001      	movs	r0, #1
 8002a84:	f002 fb56 	bl	8005134 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a88:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a92:	d125      	bne.n	8002ae0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	461a      	mov	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	3305      	adds	r3, #5
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e01f      	b.n	8002afe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	3305      	adds	r3, #5
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	e00e      	b.n	8002afe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	461a      	mov	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	3305      	adds	r3, #5
 8002afc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4a5c      	ldr	r2, [pc, #368]	; (8002c74 <HAL_I2S_Init+0x270>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	08db      	lsrs	r3, r3, #3
 8002b08:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e003      	b.n	8002b2c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002b24:	2302      	movs	r3, #2
 8002b26:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d902      	bls.n	8002b38 <HAL_I2S_Init+0x134>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	2bff      	cmp	r3, #255	; 0xff
 8002b36:	d907      	bls.n	8002b48 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f043 0210 	orr.w	r2, r3, #16
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e08f      	b.n	8002c68 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	ea42 0103 	orr.w	r1, r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b66:	f023 030f 	bic.w	r3, r3, #15
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6851      	ldr	r1, [r2, #4]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6892      	ldr	r2, [r2, #8]
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68d2      	ldr	r2, [r2, #12]
 8002b78:	4311      	orrs	r1, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6992      	ldr	r2, [r2, #24]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d161      	bne.n	8002c58 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a38      	ldr	r2, [pc, #224]	; (8002c78 <HAL_I2S_Init+0x274>)
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a37      	ldr	r2, [pc, #220]	; (8002c7c <HAL_I2S_Init+0x278>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_I2S_Init+0x1a4>
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_I2S_Init+0x27c>)
 8002ba6:	e001      	b.n	8002bac <HAL_I2S_Init+0x1a8>
 8002ba8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	4932      	ldr	r1, [pc, #200]	; (8002c7c <HAL_I2S_Init+0x278>)
 8002bb4:	428a      	cmp	r2, r1
 8002bb6:	d101      	bne.n	8002bbc <HAL_I2S_Init+0x1b8>
 8002bb8:	4a31      	ldr	r2, [pc, #196]	; (8002c80 <HAL_I2S_Init+0x27c>)
 8002bba:	e001      	b.n	8002bc0 <HAL_I2S_Init+0x1bc>
 8002bbc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002bc0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002bc4:	f023 030f 	bic.w	r3, r3, #15
 8002bc8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2b      	ldr	r2, [pc, #172]	; (8002c7c <HAL_I2S_Init+0x278>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_I2S_Init+0x1d4>
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <HAL_I2S_Init+0x27c>)
 8002bd6:	e001      	b.n	8002bdc <HAL_I2S_Init+0x1d8>
 8002bd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bdc:	2202      	movs	r2, #2
 8002bde:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a25      	ldr	r2, [pc, #148]	; (8002c7c <HAL_I2S_Init+0x278>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_I2S_Init+0x1ea>
 8002bea:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_I2S_Init+0x27c>)
 8002bec:	e001      	b.n	8002bf2 <HAL_I2S_Init+0x1ee>
 8002bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfe:	d003      	beq.n	8002c08 <HAL_I2S_Init+0x204>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d103      	bne.n	8002c10 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	e001      	b.n	8002c14 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c32:	4313      	orrs	r3, r2
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	897b      	ldrh	r3, [r7, #10]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c40:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <HAL_I2S_Init+0x278>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <HAL_I2S_Init+0x24c>
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_I2S_Init+0x27c>)
 8002c4e:	e001      	b.n	8002c54 <HAL_I2S_Init+0x250>
 8002c50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c54:	897a      	ldrh	r2, [r7, #10]
 8002c56:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	08002d7b 	.word	0x08002d7b
 8002c74:	cccccccd 	.word	0xcccccccd
 8002c78:	08002e91 	.word	0x08002e91
 8002c7c:	40003800 	.word	0x40003800
 8002c80:	40003400 	.word	0x40003400

08002c84 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	881a      	ldrh	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c9a      	adds	r2, r3, #2
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10e      	bne.n	8002d14 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d04:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff ffb8 	bl	8002c84 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	b292      	uxth	r2, r2
 8002d30:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	1c9a      	adds	r2, r3, #2
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10e      	bne.n	8002d72 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d62:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff93 	bl	8002c98 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d13a      	bne.n	8002e0c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d109      	bne.n	8002db4 <I2S_IRQHandler+0x3a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d102      	bne.n	8002db4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ffb4 	bl	8002d1c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d126      	bne.n	8002e0c <I2S_IRQHandler+0x92>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d11f      	bne.n	8002e0c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dda:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f043 0202 	orr.w	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ff50 	bl	8002cac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d136      	bne.n	8002e86 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d109      	bne.n	8002e36 <I2S_IRQHandler+0xbc>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	d102      	bne.n	8002e36 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ff45 	bl	8002cc0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d122      	bne.n	8002e86 <I2S_IRQHandler+0x10c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d11b      	bne.n	8002e86 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e5c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff13 	bl	8002cac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4aa2      	ldr	r2, [pc, #648]	; (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002eaa:	4ba2      	ldr	r3, [pc, #648]	; (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002eac:	e001      	b.n	8002eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002eae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a9b      	ldr	r2, [pc, #620]	; (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ec8:	4b9a      	ldr	r3, [pc, #616]	; (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002eca:	e001      	b.n	8002ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ecc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002edc:	d004      	beq.n	8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 8099 	bne.w	800301a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d107      	bne.n	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f925 	bl	800314c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f9c8 	bl	80032ac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d13a      	bne.n	8002f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d035      	beq.n	8002f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a7e      	ldr	r2, [pc, #504]	; (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002f3a:	4b7e      	ldr	r3, [pc, #504]	; (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f3c:	e001      	b.n	8002f42 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002f3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4979      	ldr	r1, [pc, #484]	; (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f4a:	428b      	cmp	r3, r1
 8002f4c:	d101      	bne.n	8002f52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002f4e:	4b79      	ldr	r3, [pc, #484]	; (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f50:	e001      	b.n	8002f56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f5a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f043 0202 	orr.w	r2, r3, #2
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff fe88 	bl	8002cac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	f040 80be 	bne.w	8003124 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80b8 	beq.w	8003124 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fc2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a59      	ldr	r2, [pc, #356]	; (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002fce:	4b59      	ldr	r3, [pc, #356]	; (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fd0:	e001      	b.n	8002fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002fd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4954      	ldr	r1, [pc, #336]	; (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fde:	428b      	cmp	r3, r1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002fe2:	4b54      	ldr	r3, [pc, #336]	; (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fe4:	e001      	b.n	8002fea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f043 0204 	orr.w	r2, r3, #4
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fe4a 	bl	8002cac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003018:	e084      	b.n	8003124 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b02      	cmp	r3, #2
 8003022:	d107      	bne.n	8003034 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f8be 	bl	80031b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8fd 	bl	8003248 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d12f      	bne.n	80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02a      	beq.n	80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003070:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2e      	ldr	r2, [pc, #184]	; (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d101      	bne.n	8003080 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800307c:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800307e:	e001      	b.n	8003084 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003080:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4929      	ldr	r1, [pc, #164]	; (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800308c:	428b      	cmp	r3, r1
 800308e:	d101      	bne.n	8003094 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003090:	4b28      	ldr	r3, [pc, #160]	; (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003092:	e001      	b.n	8003098 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003098:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800309c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f043 0202 	orr.w	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fdfa 	bl	8002cac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d131      	bne.n	8003126 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d02c      	beq.n	8003126 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a17      	ldr	r2, [pc, #92]	; (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80030d6:	4b17      	ldr	r3, [pc, #92]	; (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030d8:	e001      	b.n	80030de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80030da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4912      	ldr	r1, [pc, #72]	; (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030e6:	428b      	cmp	r3, r1
 80030e8:	d101      	bne.n	80030ee <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030ec:	e001      	b.n	80030f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80030ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003106:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	f043 0204 	orr.w	r2, r3, #4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff fdc5 	bl	8002cac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003122:	e000      	b.n	8003126 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003124:	bf00      	nop
}
 8003126:	bf00      	nop
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40003800 	.word	0x40003800
 8003134:	40003400 	.word	0x40003400

08003138 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	1c99      	adds	r1, r3, #2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6251      	str	r1, [r2, #36]	; 0x24
 800315e:	881a      	ldrh	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d113      	bne.n	80031a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800318c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d106      	bne.n	80031a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff ffc9 	bl	8003138 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	1c99      	adds	r1, r3, #2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6251      	str	r1, [r2, #36]	; 0x24
 80031c2:	8819      	ldrh	r1, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <I2SEx_TxISR_I2SExt+0x90>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d101      	bne.n	80031d2 <I2SEx_TxISR_I2SExt+0x22>
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <I2SEx_TxISR_I2SExt+0x94>)
 80031d0:	e001      	b.n	80031d6 <I2SEx_TxISR_I2SExt+0x26>
 80031d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031d6:	460a      	mov	r2, r1
 80031d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d121      	bne.n	8003236 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a12      	ldr	r2, [pc, #72]	; (8003240 <I2SEx_TxISR_I2SExt+0x90>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <I2SEx_TxISR_I2SExt+0x50>
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <I2SEx_TxISR_I2SExt+0x94>)
 80031fe:	e001      	b.n	8003204 <I2SEx_TxISR_I2SExt+0x54>
 8003200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	490d      	ldr	r1, [pc, #52]	; (8003240 <I2SEx_TxISR_I2SExt+0x90>)
 800320c:	428b      	cmp	r3, r1
 800320e:	d101      	bne.n	8003214 <I2SEx_TxISR_I2SExt+0x64>
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <I2SEx_TxISR_I2SExt+0x94>)
 8003212:	e001      	b.n	8003218 <I2SEx_TxISR_I2SExt+0x68>
 8003214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003218:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800321c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d106      	bne.n	8003236 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ff81 	bl	8003138 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40003800 	.word	0x40003800
 8003244:	40003400 	.word	0x40003400

08003248 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68d8      	ldr	r0, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	1c99      	adds	r1, r3, #2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003260:	b282      	uxth	r2, r0
 8003262:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d113      	bne.n	80032a4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800328a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ff4a 	bl	8003138 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a20      	ldr	r2, [pc, #128]	; (800333c <I2SEx_RxISR_I2SExt+0x90>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <I2SEx_RxISR_I2SExt+0x16>
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <I2SEx_RxISR_I2SExt+0x94>)
 80032c0:	e001      	b.n	80032c6 <I2SEx_RxISR_I2SExt+0x1a>
 80032c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c6:	68d8      	ldr	r0, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	1c99      	adds	r1, r3, #2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80032d2:	b282      	uxth	r2, r0
 80032d4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d121      	bne.n	8003332 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a12      	ldr	r2, [pc, #72]	; (800333c <I2SEx_RxISR_I2SExt+0x90>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <I2SEx_RxISR_I2SExt+0x50>
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <I2SEx_RxISR_I2SExt+0x94>)
 80032fa:	e001      	b.n	8003300 <I2SEx_RxISR_I2SExt+0x54>
 80032fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	490d      	ldr	r1, [pc, #52]	; (800333c <I2SEx_RxISR_I2SExt+0x90>)
 8003308:	428b      	cmp	r3, r1
 800330a:	d101      	bne.n	8003310 <I2SEx_RxISR_I2SExt+0x64>
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <I2SEx_RxISR_I2SExt+0x94>)
 800330e:	e001      	b.n	8003314 <I2SEx_RxISR_I2SExt+0x68>
 8003310:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003314:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003318:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d106      	bne.n	8003332 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff03 	bl	8003138 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40003800 	.word	0x40003800
 8003340:	40003400 	.word	0x40003400

08003344 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003346:	b08f      	sub	sp, #60	; 0x3c
 8003348:	af0a      	add	r7, sp, #40	; 0x28
 800334a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e10f      	b.n	8003576 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d106      	bne.n	8003376 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f00a f985 	bl	800d680 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2203      	movs	r2, #3
 800337a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f003 f8fa 	bl	800658e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	687e      	ldr	r6, [r7, #4]
 80033a2:	466d      	mov	r5, sp
 80033a4:	f106 0410 	add.w	r4, r6, #16
 80033a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80033b8:	1d33      	adds	r3, r6, #4
 80033ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033bc:	6838      	ldr	r0, [r7, #0]
 80033be:	f002 ffd1 	bl	8006364 <USB_CoreInit>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0d0      	b.n	8003576 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f003 f8e8 	bl	80065b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	e04a      	b.n	800347c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033e6:	7bfa      	ldrb	r2, [r7, #15]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	333d      	adds	r3, #61	; 0x3d
 80033f6:	2201      	movs	r2, #1
 80033f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	333c      	adds	r3, #60	; 0x3c
 800340a:	7bfa      	ldrb	r2, [r7, #15]
 800340c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800340e:	7bfa      	ldrb	r2, [r7, #15]
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	b298      	uxth	r0, r3
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	3342      	adds	r3, #66	; 0x42
 8003422:	4602      	mov	r2, r0
 8003424:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003426:	7bfa      	ldrb	r2, [r7, #15]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	333f      	adds	r3, #63	; 0x3f
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3344      	adds	r3, #68	; 0x44
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3348      	adds	r3, #72	; 0x48
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	3350      	adds	r3, #80	; 0x50
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	3301      	adds	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d3af      	bcc.n	80033e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	e044      	b.n	8003516 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800348c:	7bfa      	ldrb	r2, [r7, #15]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034b8:	7bfa      	ldrb	r2, [r7, #15]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	3301      	adds	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	429a      	cmp	r2, r3
 800351e:	d3b5      	bcc.n	800348c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	687e      	ldr	r6, [r7, #4]
 8003528:	466d      	mov	r5, sp
 800352a:	f106 0410 	add.w	r4, r6, #16
 800352e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003536:	e894 0003 	ldmia.w	r4, {r0, r1}
 800353a:	e885 0003 	stmia.w	r5, {r0, r1}
 800353e:	1d33      	adds	r3, r6, #4
 8003540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003542:	6838      	ldr	r0, [r7, #0]
 8003544:	f003 f880 	bl	8006648 <USB_DevInit>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2202      	movs	r2, #2
 8003552:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e00d      	b.n	8003576 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f004 f8fc 	bl	800776c <USB_DevDisconnect>

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800357e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_PCD_Start+0x1c>
 8003596:	2302      	movs	r3, #2
 8003598:	e020      	b.n	80035dc <HAL_PCD_Start+0x5e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d109      	bne.n	80035be <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d005      	beq.n	80035be <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f002 ffd2 	bl	800656c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f004 f8ac 	bl	800772a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b08d      	sub	sp, #52	; 0x34
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f004 f96a 	bl	80078d4 <USB_GetMode>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	f040 839d 	bne.w	8003d42 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f004 f8ce 	bl	80077ae <USB_ReadInterrupts>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8393 	beq.w	8003d40 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f004 f8c5 	bl	80077ae <USB_ReadInterrupts>
 8003624:	4603      	mov	r3, r0
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d107      	bne.n	800363e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f002 0202 	and.w	r2, r2, #2
 800363c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f004 f8b3 	bl	80077ae <USB_ReadInterrupts>
 8003648:	4603      	mov	r3, r0
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b10      	cmp	r3, #16
 8003650:	d161      	bne.n	8003716 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0210 	bic.w	r2, r2, #16
 8003660:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f003 020f 	and.w	r2, r3, #15
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	3304      	adds	r3, #4
 8003680:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	0c5b      	lsrs	r3, r3, #17
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	2b02      	cmp	r3, #2
 800368c:	d124      	bne.n	80036d8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d035      	beq.n	8003706 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	6a38      	ldr	r0, [r7, #32]
 80036ae:	f003 feea 	bl	8007486 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036be:	441a      	add	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	699a      	ldr	r2, [r3, #24]
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d0:	441a      	add	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	619a      	str	r2, [r3, #24]
 80036d6:	e016      	b.n	8003706 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	0c5b      	lsrs	r3, r3, #17
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d110      	bne.n	8003706 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036ea:	2208      	movs	r2, #8
 80036ec:	4619      	mov	r1, r3
 80036ee:	6a38      	ldr	r0, [r7, #32]
 80036f0:	f003 fec9 	bl	8007486 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003700:	441a      	add	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0210 	orr.w	r2, r2, #16
 8003714:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f004 f847 	bl	80077ae <USB_ReadInterrupts>
 8003720:	4603      	mov	r3, r0
 8003722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003726:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800372a:	d16e      	bne.n	800380a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f004 f84d 	bl	80077d4 <USB_ReadDevAllOutEpInterrupt>
 800373a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800373c:	e062      	b.n	8003804 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d057      	beq.n	80037f8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f004 f872 	bl	800783c <USB_ReadDevOutEPInterrupt>
 8003758:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00c      	beq.n	800377e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003770:	461a      	mov	r2, r3
 8003772:	2301      	movs	r3, #1
 8003774:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fdb1 	bl	80042e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00c      	beq.n	80037a2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003794:	461a      	mov	r2, r3
 8003796:	2308      	movs	r3, #8
 8003798:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800379a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 feab 	bl	80044f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b8:	461a      	mov	r2, r3
 80037ba:	2310      	movs	r3, #16
 80037bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d4:	461a      	mov	r2, r3
 80037d6:	2320      	movs	r3, #32
 80037d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f0:	461a      	mov	r2, r3
 80037f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	3301      	adds	r3, #1
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	2b00      	cmp	r3, #0
 8003808:	d199      	bne.n	800373e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f003 ffcd 	bl	80077ae <USB_ReadInterrupts>
 8003814:	4603      	mov	r3, r0
 8003816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800381e:	f040 80c0 	bne.w	80039a2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f003 ffee 	bl	8007808 <USB_ReadDevAllInEpInterrupt>
 800382c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003832:	e0b2      	b.n	800399a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80a7 	beq.w	800398e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f004 f814 	bl	8007878 <USB_ReadDevInEPInterrupt>
 8003850:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d057      	beq.n	800390c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	2201      	movs	r2, #1
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	43db      	mvns	r3, r3
 8003876:	69f9      	ldr	r1, [r7, #28]
 8003878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800387c:	4013      	ands	r3, r2
 800387e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388c:	461a      	mov	r2, r3
 800388e:	2301      	movs	r3, #1
 8003890:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d132      	bne.n	8003900 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3348      	adds	r3, #72	; 0x48
 80038aa:	6819      	ldr	r1, [r3, #0]
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4403      	add	r3, r0
 80038ba:	3344      	adds	r3, #68	; 0x44
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4419      	add	r1, r3
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4403      	add	r3, r0
 80038ce:	3348      	adds	r3, #72	; 0x48
 80038d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d113      	bne.n	8003900 <HAL_PCD_IRQHandler+0x31c>
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3350      	adds	r3, #80	; 0x50
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d108      	bne.n	8003900 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038f8:	461a      	mov	r2, r3
 80038fa:	2101      	movs	r1, #1
 80038fc:	f004 f81c 	bl	8007938 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	b2db      	uxtb	r3, r3
 8003904:	4619      	mov	r1, r3
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f009 ff49 	bl	800d79e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003922:	461a      	mov	r2, r3
 8003924:	2308      	movs	r3, #8
 8003926:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393e:	461a      	mov	r2, r3
 8003940:	2310      	movs	r3, #16
 8003942:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395a:	461a      	mov	r2, r3
 800395c:	2340      	movs	r3, #64	; 0x40
 800395e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d008      	beq.n	800397c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003976:	461a      	mov	r2, r3
 8003978:	2302      	movs	r3, #2
 800397a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003986:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fc1b 	bl	80041c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	3301      	adds	r3, #1
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	f47f af49 	bne.w	8003834 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 ff01 	bl	80077ae <USB_ReadInterrupts>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039b6:	d122      	bne.n	80039fe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	69fa      	ldr	r2, [r7, #28]
 80039c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d108      	bne.n	80039e8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039de:	2100      	movs	r1, #0
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fe27 	bl	8004634 <HAL_PCDEx_LPM_Callback>
 80039e6:	e002      	b.n	80039ee <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f009 ff4f 	bl	800d88c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80039fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f003 fed3 	bl	80077ae <USB_ReadInterrupts>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a12:	d112      	bne.n	8003a3a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f009 ff0b 	bl	800d840 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003a38:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f003 feb5 	bl	80077ae <USB_ReadInterrupts>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4e:	f040 80c7 	bne.w	8003be0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2110      	movs	r1, #16
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f002 ff4f 	bl	8006910 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a76:	e056      	b.n	8003b26 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a84:	461a      	mov	r2, r3
 8003a86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a8a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a9c:	0151      	lsls	r1, r2, #5
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	440a      	add	r2, r1
 8003aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003aaa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003abc:	0151      	lsls	r1, r2, #5
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003aca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ade:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af0:	0151      	lsls	r1, r2, #5
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	440a      	add	r2, r1
 8003af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003afa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003afe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b10:	0151      	lsls	r1, r2, #5
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	440a      	add	r2, r1
 8003b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b1e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b22:	3301      	adds	r3, #1
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d3a3      	bcc.n	8003a78 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b3e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003b42:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d016      	beq.n	8003b7a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b5c:	f043 030b 	orr.w	r3, r3, #11
 8003b60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b72:	f043 030b 	orr.w	r3, r3, #11
 8003b76:	6453      	str	r3, [r2, #68]	; 0x44
 8003b78:	e015      	b.n	8003ba6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b8c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b90:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba0:	f043 030b 	orr.w	r3, r3, #11
 8003ba4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69fa      	ldr	r2, [r7, #28]
 8003bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bb4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003bb8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f003 feb4 	bl	8007938 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f003 fde2 	bl	80077ae <USB_ReadInterrupts>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf4:	d124      	bne.n	8003c40 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f003 fe78 	bl	80078f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f002 fee0 	bl	80069ca <USB_GetDevSpeed>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681c      	ldr	r4, [r3, #0]
 8003c16:	f001 f959 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8003c1a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	4620      	mov	r0, r4
 8003c26:	f002 fbff 	bl	8006428 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f009 fddf 	bl	800d7ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f003 fdb2 	bl	80077ae <USB_ReadInterrupts>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d10a      	bne.n	8003c6a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f009 fdbc 	bl	800d7d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f002 0208 	and.w	r2, r2, #8
 8003c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f003 fd9d 	bl	80077ae <USB_ReadInterrupts>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7e:	d10f      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	4619      	mov	r1, r3
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f009 fe1e 	bl	800d8cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f003 fd82 	bl	80077ae <USB_ReadInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cb4:	d10f      	bne.n	8003cd6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f009 fdf1 	bl	800d8a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f003 fd67 	bl	80077ae <USB_ReadInterrupts>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cea:	d10a      	bne.n	8003d02 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f009 fdff 	bl	800d8f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f003 fd51 	bl	80077ae <USB_ReadInterrupts>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d115      	bne.n	8003d42 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f009 fdef 	bl	800d90c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	e000      	b.n	8003d42 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003d40:	bf00      	nop
    }
  }
}
 8003d42:	3734      	adds	r7, #52	; 0x34
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd90      	pop	{r4, r7, pc}

08003d48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_PCD_SetAddress+0x1a>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e013      	b.n	8003d8a <HAL_PCD_SetAddress+0x42>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	78fa      	ldrb	r2, [r7, #3]
 8003d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	4611      	mov	r1, r2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f003 fcaf 	bl	80076de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	4608      	mov	r0, r1
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4603      	mov	r3, r0
 8003da2:	70fb      	strb	r3, [r7, #3]
 8003da4:	460b      	mov	r3, r1
 8003da6:	803b      	strh	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	da0f      	bge.n	8003dd8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	3338      	adds	r3, #56	; 0x38
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	705a      	strb	r2, [r3, #1]
 8003dd6:	e00f      	b.n	8003df8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	3304      	adds	r3, #4
 8003df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e04:	883a      	ldrh	r2, [r7, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	78ba      	ldrb	r2, [r7, #2]
 8003e0e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	785b      	ldrb	r3, [r3, #1]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d004      	beq.n	8003e22 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e22:	78bb      	ldrb	r3, [r7, #2]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d102      	bne.n	8003e2e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_PCD_EP_Open+0xaa>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e00e      	b.n	8003e5a <HAL_PCD_EP_Open+0xc8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68f9      	ldr	r1, [r7, #12]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f002 fde2 	bl	8006a14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003e58:	7afb      	ldrb	r3, [r7, #11]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	da0f      	bge.n	8003e96 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	f003 020f 	and.w	r2, r3, #15
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	3338      	adds	r3, #56	; 0x38
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4413      	add	r3, r2
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	705a      	strb	r2, [r3, #1]
 8003e94:	e00f      	b.n	8003eb6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	f003 020f 	and.w	r2, r3, #15
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4413      	add	r3, r2
 8003eac:	3304      	adds	r3, #4
 8003eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_PCD_EP_Close+0x6e>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e00e      	b.n	8003eee <HAL_PCD_EP_Close+0x8c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68f9      	ldr	r1, [r7, #12]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f002 fe20 	bl	8006b24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	460b      	mov	r3, r1
 8003f04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f06:	7afb      	ldrb	r3, [r7, #11]
 8003f08:	f003 020f 	and.w	r2, r3, #15
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2200      	movs	r2, #0
 8003f36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f38:	7afb      	ldrb	r3, [r7, #11]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d102      	bne.n	8003f52 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f52:	7afb      	ldrb	r3, [r7, #11]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	6979      	ldr	r1, [r7, #20]
 8003f6a:	f003 f8fb 	bl	8007164 <USB_EP0StartXfer>
 8003f6e:	e008      	b.n	8003f82 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6979      	ldr	r1, [r7, #20]
 8003f7e:	f002 fead 	bl	8006cdc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	f003 020f 	and.w	r2, r3, #15
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fcc:	7afb      	ldrb	r3, [r7, #11]
 8003fce:	f003 020f 	and.w	r2, r3, #15
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	3338      	adds	r3, #56	; 0x38
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ffc:	7afb      	ldrb	r3, [r7, #11]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	b2da      	uxtb	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d102      	bne.n	8004016 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004016:	7afb      	ldrb	r3, [r7, #11]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	6979      	ldr	r1, [r7, #20]
 800402e:	f003 f899 	bl	8007164 <USB_EP0StartXfer>
 8004032:	e008      	b.n	8004046 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	6979      	ldr	r1, [r7, #20]
 8004042:	f002 fe4b 	bl	8006cdc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 020f 	and.w	r2, r3, #15
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	429a      	cmp	r2, r3
 8004068:	d901      	bls.n	800406e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e050      	b.n	8004110 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800406e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004072:	2b00      	cmp	r3, #0
 8004074:	da0f      	bge.n	8004096 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f003 020f 	and.w	r2, r3, #15
 800407c:	4613      	mov	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	3338      	adds	r3, #56	; 0x38
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	3304      	adds	r3, #4
 800408c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	705a      	strb	r2, [r3, #1]
 8004094:	e00d      	b.n	80040b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	4613      	mov	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	4413      	add	r3, r2
 80040a8:	3304      	adds	r3, #4
 80040aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_PCD_EP_SetStall+0x82>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e01e      	b.n	8004110 <HAL_PCD_EP_SetStall+0xc0>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68f9      	ldr	r1, [r7, #12]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f003 fa28 	bl	8007536 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	b2d9      	uxtb	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004100:	461a      	mov	r2, r3
 8004102:	f003 fc19 	bl	8007938 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	f003 020f 	and.w	r2, r3, #15
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	429a      	cmp	r2, r3
 8004130:	d901      	bls.n	8004136 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e042      	b.n	80041bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800413a:	2b00      	cmp	r3, #0
 800413c:	da0f      	bge.n	800415e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	f003 020f 	and.w	r2, r3, #15
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	3338      	adds	r3, #56	; 0x38
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	3304      	adds	r3, #4
 8004154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	705a      	strb	r2, [r3, #1]
 800415c:	e00f      	b.n	800417e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	f003 020f 	and.w	r2, r3, #15
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4413      	add	r3, r2
 8004174:	3304      	adds	r3, #4
 8004176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	b2da      	uxtb	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_PCD_EP_ClrStall+0x86>
 800419a:	2302      	movs	r3, #2
 800419c:	e00e      	b.n	80041bc <HAL_PCD_EP_ClrStall+0xa4>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68f9      	ldr	r1, [r7, #12]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f003 fa30 	bl	8007612 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	3338      	adds	r3, #56	; 0x38
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	4413      	add	r3, r2
 80041e8:	3304      	adds	r3, #4
 80041ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d901      	bls.n	80041fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e06c      	b.n	80042d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	429a      	cmp	r2, r3
 8004210:	d902      	bls.n	8004218 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	3303      	adds	r3, #3
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004220:	e02b      	b.n	800427a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	429a      	cmp	r2, r3
 8004236:	d902      	bls.n	800423e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3303      	adds	r3, #3
 8004242:	089b      	lsrs	r3, r3, #2
 8004244:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68d9      	ldr	r1, [r3, #12]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004256:	b2db      	uxtb	r3, r3
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	4603      	mov	r3, r0
 800425c:	6978      	ldr	r0, [r7, #20]
 800425e:	f003 f8d4 	bl	800740a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	441a      	add	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	441a      	add	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	b29b      	uxth	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	429a      	cmp	r2, r3
 800428e:	d809      	bhi.n	80042a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004298:	429a      	cmp	r2, r3
 800429a:	d203      	bcs.n	80042a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1be      	bne.n	8004222 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d811      	bhi.n	80042d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	2201      	movs	r2, #1
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	6939      	ldr	r1, [r7, #16]
 80042cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042d0:	4013      	ands	r3, r2
 80042d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	333c      	adds	r3, #60	; 0x3c
 80042f8:	3304      	adds	r3, #4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b01      	cmp	r3, #1
 8004314:	f040 80a0 	bne.w	8004458 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d015      	beq.n	800434e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4a72      	ldr	r2, [pc, #456]	; (80044f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004326:	4293      	cmp	r3, r2
 8004328:	f240 80dd 	bls.w	80044e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80d7 	beq.w	80044e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	461a      	mov	r2, r3
 8004346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434a:	6093      	str	r3, [r2, #8]
 800434c:	e0cb      	b.n	80044e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d009      	beq.n	800436c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004364:	461a      	mov	r2, r3
 8004366:	2320      	movs	r3, #32
 8004368:	6093      	str	r3, [r2, #8]
 800436a:	e0bc      	b.n	80044e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 80b7 	bne.w	80044e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4a5d      	ldr	r2, [pc, #372]	; (80044f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d90f      	bls.n	80043a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	461a      	mov	r2, r3
 8004398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439c:	6093      	str	r3, [r2, #8]
 800439e:	e0a2      	b.n	80044e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80043b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	0159      	lsls	r1, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	440b      	add	r3, r1
 80043bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80043c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4403      	add	r3, r0
 80043d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043ee:	6819      	ldr	r1, [r3, #0]
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4403      	add	r3, r0
 80043fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4419      	add	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4403      	add	r3, r0
 8004414:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004418:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d114      	bne.n	800444a <PCD_EP_OutXfrComplete_int+0x16a>
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d108      	bne.n	800444a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004442:	461a      	mov	r2, r3
 8004444:	2101      	movs	r1, #1
 8004446:	f003 fa77 	bl	8007938 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f009 f989 	bl	800d768 <HAL_PCD_DataOutStageCallback>
 8004456:	e046      	b.n	80044e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a26      	ldr	r2, [pc, #152]	; (80044f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d124      	bne.n	80044aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004476:	461a      	mov	r2, r3
 8004478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800447c:	6093      	str	r3, [r2, #8]
 800447e:	e032      	b.n	80044e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d008      	beq.n	800449c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	461a      	mov	r2, r3
 8004498:	2320      	movs	r3, #32
 800449a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f009 f960 	bl	800d768 <HAL_PCD_DataOutStageCallback>
 80044a8:	e01d      	b.n	80044e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d114      	bne.n	80044da <PCD_EP_OutXfrComplete_int+0x1fa>
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044d2:	461a      	mov	r2, r3
 80044d4:	2100      	movs	r1, #0
 80044d6:	f003 fa2f 	bl	8007938 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f009 f941 	bl	800d768 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	4f54300a 	.word	0x4f54300a
 80044f4:	4f54310a 	.word	0x4f54310a

080044f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	333c      	adds	r3, #60	; 0x3c
 8004510:	3304      	adds	r3, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a15      	ldr	r2, [pc, #84]	; (8004580 <PCD_EP_OutSetupPacket_int+0x88>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d90e      	bls.n	800454c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	461a      	mov	r2, r3
 8004546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f009 f8f9 	bl	800d744 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <PCD_EP_OutSetupPacket_int+0x88>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d90c      	bls.n	8004574 <PCD_EP_OutSetupPacket_int+0x7c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d108      	bne.n	8004574 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800456c:	461a      	mov	r2, r3
 800456e:	2101      	movs	r1, #1
 8004570:	f003 f9e2 	bl	8007938 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	4f54300a 	.word	0x4f54300a

08004584 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
 8004590:	4613      	mov	r3, r2
 8004592:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d107      	bne.n	80045b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045a2:	883b      	ldrh	r3, [r7, #0]
 80045a4:	0419      	lsls	r1, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28
 80045b0:	e028      	b.n	8004604 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4413      	add	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	73fb      	strb	r3, [r7, #15]
 80045c4:	e00d      	b.n	80045e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	3340      	adds	r3, #64	; 0x40
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	3301      	adds	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
 80045e2:	7bfa      	ldrb	r2, [r7, #15]
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d3ec      	bcc.n	80045c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045ec:	883b      	ldrh	r3, [r7, #0]
 80045ee:	0418      	lsls	r0, r3, #16
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	4302      	orrs	r2, r0
 80045fc:	3340      	adds	r3, #64	; 0x40
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	460b      	mov	r3, r1
 800461c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e264      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d075      	beq.n	8004756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800466a:	4ba3      	ldr	r3, [pc, #652]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b04      	cmp	r3, #4
 8004674:	d00c      	beq.n	8004690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004676:	4ba0      	ldr	r3, [pc, #640]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800467e:	2b08      	cmp	r3, #8
 8004680:	d112      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004682:	4b9d      	ldr	r3, [pc, #628]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468e:	d10b      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004690:	4b99      	ldr	r3, [pc, #612]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05b      	beq.n	8004754 <HAL_RCC_OscConfig+0x108>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d157      	bne.n	8004754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e23f      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b0:	d106      	bne.n	80046c0 <HAL_RCC_OscConfig+0x74>
 80046b2:	4b91      	ldr	r3, [pc, #580]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a90      	ldr	r2, [pc, #576]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e01d      	b.n	80046fc <HAL_RCC_OscConfig+0xb0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c8:	d10c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x98>
 80046ca:	4b8b      	ldr	r3, [pc, #556]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a8a      	ldr	r2, [pc, #552]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	4b88      	ldr	r3, [pc, #544]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a87      	ldr	r2, [pc, #540]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e00b      	b.n	80046fc <HAL_RCC_OscConfig+0xb0>
 80046e4:	4b84      	ldr	r3, [pc, #528]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a83      	ldr	r2, [pc, #524]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	4b81      	ldr	r3, [pc, #516]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a80      	ldr	r2, [pc, #512]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fd f868 	bl	80017d8 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800470c:	f7fd f864 	bl	80017d8 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e204      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471e:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0xc0>
 800472a:	e014      	b.n	8004756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fd f854 	bl	80017d8 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004734:	f7fd f850 	bl	80017d8 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e1f0      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004746:	4b6c      	ldr	r3, [pc, #432]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0xe8>
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d063      	beq.n	800482a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004762:	4b65      	ldr	r3, [pc, #404]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476e:	4b62      	ldr	r3, [pc, #392]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004776:	2b08      	cmp	r3, #8
 8004778:	d11c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477a:	4b5f      	ldr	r3, [pc, #380]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d116      	bne.n	80047b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004786:	4b5c      	ldr	r3, [pc, #368]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_RCC_OscConfig+0x152>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d001      	beq.n	800479e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e1c4      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479e:	4b56      	ldr	r3, [pc, #344]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4952      	ldr	r1, [pc, #328]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	e03a      	b.n	800482a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047bc:	4b4f      	ldr	r3, [pc, #316]	; (80048fc <HAL_RCC_OscConfig+0x2b0>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fd f809 	bl	80017d8 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ca:	f7fd f805 	bl	80017d8 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e1a5      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	4b46      	ldr	r3, [pc, #280]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b43      	ldr	r3, [pc, #268]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4940      	ldr	r1, [pc, #256]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]
 80047fc:	e015      	b.n	800482a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <HAL_RCC_OscConfig+0x2b0>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fc ffe8 	bl	80017d8 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480c:	f7fc ffe4 	bl	80017d8 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e184      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d030      	beq.n	8004898 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800483e:	4b30      	ldr	r3, [pc, #192]	; (8004900 <HAL_RCC_OscConfig+0x2b4>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fc ffc8 	bl	80017d8 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484c:	f7fc ffc4 	bl	80017d8 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e164      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x200>
 800486a:	e015      	b.n	8004898 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_RCC_OscConfig+0x2b4>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004872:	f7fc ffb1 	bl	80017d8 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800487a:	f7fc ffad 	bl	80017d8 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e14d      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80a0 	beq.w	80049e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	4a0e      	ldr	r2, [pc, #56]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6413      	str	r3, [r2, #64]	; 0x40
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d121      	bne.n	8004926 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a07      	ldr	r2, [pc, #28]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fc ff73 	bl	80017d8 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	e011      	b.n	800491a <HAL_RCC_OscConfig+0x2ce>
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	42470000 	.word	0x42470000
 8004900:	42470e80 	.word	0x42470e80
 8004904:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004908:	f7fc ff66 	bl	80017d8 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e106      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491a:	4b85      	ldr	r3, [pc, #532]	; (8004b30 <HAL_RCC_OscConfig+0x4e4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x2f0>
 800492e:	4b81      	ldr	r3, [pc, #516]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a80      	ldr	r2, [pc, #512]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	e01c      	b.n	8004976 <HAL_RCC_OscConfig+0x32a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b05      	cmp	r3, #5
 8004942:	d10c      	bne.n	800495e <HAL_RCC_OscConfig+0x312>
 8004944:	4b7b      	ldr	r3, [pc, #492]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004948:	4a7a      	ldr	r2, [pc, #488]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	6713      	str	r3, [r2, #112]	; 0x70
 8004950:	4b78      	ldr	r3, [pc, #480]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	4a77      	ldr	r2, [pc, #476]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	6713      	str	r3, [r2, #112]	; 0x70
 800495c:	e00b      	b.n	8004976 <HAL_RCC_OscConfig+0x32a>
 800495e:	4b75      	ldr	r3, [pc, #468]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a74      	ldr	r2, [pc, #464]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
 800496a:	4b72      	ldr	r3, [pc, #456]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a71      	ldr	r2, [pc, #452]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004970:	f023 0304 	bic.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fc ff2b 	bl	80017d8 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	e00a      	b.n	800499c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fc ff27 	bl	80017d8 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	; 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0c5      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	4b65      	ldr	r3, [pc, #404]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ee      	beq.n	8004986 <HAL_RCC_OscConfig+0x33a>
 80049a8:	e014      	b.n	80049d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049aa:	f7fc ff15 	bl	80017d8 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fc ff11 	bl	80017d8 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0af      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c8:	4b5a      	ldr	r3, [pc, #360]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ee      	bne.n	80049b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d105      	bne.n	80049e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049da:	4b56      	ldr	r3, [pc, #344]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	4a55      	ldr	r2, [pc, #340]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 809b 	beq.w	8004b26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049f0:	4b50      	ldr	r3, [pc, #320]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d05c      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d141      	bne.n	8004a88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a04:	4b4c      	ldr	r3, [pc, #304]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fc fee5 	bl	80017d8 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a12:	f7fc fee1 	bl	80017d8 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e081      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a24:	4b43      	ldr	r3, [pc, #268]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	019b      	lsls	r3, r3, #6
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	061b      	lsls	r3, r3, #24
 8004a54:	4937      	ldr	r1, [pc, #220]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5a:	4b37      	ldr	r3, [pc, #220]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fc feba 	bl	80017d8 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fc feb6 	bl	80017d8 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e056      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x41c>
 8004a86:	e04e      	b.n	8004b26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a88:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8e:	f7fc fea3 	bl	80017d8 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fc fe9f 	bl	80017d8 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e03f      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa8:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x44a>
 8004ab4:	e037      	b.n	8004b26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e032      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d028      	beq.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d121      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d11a      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004af2:	4013      	ands	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004af8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d111      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40007000 	.word	0x40007000
 8004b34:	40023800 	.word	0x40023800
 8004b38:	42470060 	.word	0x42470060

08004b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0cc      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b50:	4b68      	ldr	r3, [pc, #416]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d90c      	bls.n	8004b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5e:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b63      	ldr	r3, [pc, #396]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0b8      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b90:	4b59      	ldr	r3, [pc, #356]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4a58      	ldr	r2, [pc, #352]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4a52      	ldr	r2, [pc, #328]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb4:	4b50      	ldr	r3, [pc, #320]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	494d      	ldr	r1, [pc, #308]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d044      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bda:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d119      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e07f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfa:	4b3f      	ldr	r3, [pc, #252]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e06f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e067      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c1a:	4b37      	ldr	r3, [pc, #220]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f023 0203 	bic.w	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4934      	ldr	r1, [pc, #208]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c2c:	f7fc fdd4 	bl	80017d8 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c34:	f7fc fdd0 	bl	80017d8 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e04f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 020c 	and.w	r2, r3, #12
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d1eb      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d20c      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b22      	ldr	r3, [pc, #136]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e032      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c90:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4916      	ldr	r1, [pc, #88]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	490e      	ldr	r1, [pc, #56]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cc2:	f000 f821 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	490a      	ldr	r1, [pc, #40]	; (8004cfc <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	5ccb      	ldrb	r3, [r1, r3]
 8004cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cda:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <HAL_RCC_ClockConfig+0x1c4>)
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fc fc42 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023c00 	.word	0x40023c00
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	0800ea80 	.word	0x0800ea80
 8004d00:	20000000 	.word	0x20000000
 8004d04:	20000004 	.word	0x20000004

08004d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d20:	4b67      	ldr	r3, [pc, #412]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 030c 	and.w	r3, r3, #12
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d00d      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x40>
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	f200 80bd 	bhi.w	8004eac <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0x34>
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d003      	beq.n	8004d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d3a:	e0b7      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d3c:	4b61      	ldr	r3, [pc, #388]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d3e:	60bb      	str	r3, [r7, #8]
       break;
 8004d40:	e0b7      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d42:	4b61      	ldr	r3, [pc, #388]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d44:	60bb      	str	r3, [r7, #8]
      break;
 8004d46:	e0b4      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d48:	4b5d      	ldr	r3, [pc, #372]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d52:	4b5b      	ldr	r3, [pc, #364]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d04d      	beq.n	8004dfa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5e:	4b58      	ldr	r3, [pc, #352]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	461a      	mov	r2, r3
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	ea02 0800 	and.w	r8, r2, r0
 8004d76:	ea03 0901 	and.w	r9, r3, r1
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	014b      	lsls	r3, r1, #5
 8004d88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d8c:	0142      	lsls	r2, r0, #5
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	ebb0 0008 	subs.w	r0, r0, r8
 8004d96:	eb61 0109 	sbc.w	r1, r1, r9
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	018b      	lsls	r3, r1, #6
 8004da4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004da8:	0182      	lsls	r2, r0, #6
 8004daa:	1a12      	subs	r2, r2, r0
 8004dac:	eb63 0301 	sbc.w	r3, r3, r1
 8004db0:	f04f 0000 	mov.w	r0, #0
 8004db4:	f04f 0100 	mov.w	r1, #0
 8004db8:	00d9      	lsls	r1, r3, #3
 8004dba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dbe:	00d0      	lsls	r0, r2, #3
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	eb12 0208 	adds.w	r2, r2, r8
 8004dc8:	eb43 0309 	adc.w	r3, r3, r9
 8004dcc:	f04f 0000 	mov.w	r0, #0
 8004dd0:	f04f 0100 	mov.w	r1, #0
 8004dd4:	0259      	lsls	r1, r3, #9
 8004dd6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004dda:	0250      	lsls	r0, r2, #9
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	f7fb fa48 	bl	8000280 <__aeabi_uldivmod>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4613      	mov	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e04a      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfa:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	099b      	lsrs	r3, r3, #6
 8004e00:	461a      	mov	r2, r3
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e0a:	f04f 0100 	mov.w	r1, #0
 8004e0e:	ea02 0400 	and.w	r4, r2, r0
 8004e12:	ea03 0501 	and.w	r5, r3, r1
 8004e16:	4620      	mov	r0, r4
 8004e18:	4629      	mov	r1, r5
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	014b      	lsls	r3, r1, #5
 8004e24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e28:	0142      	lsls	r2, r0, #5
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	1b00      	subs	r0, r0, r4
 8004e30:	eb61 0105 	sbc.w	r1, r1, r5
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	018b      	lsls	r3, r1, #6
 8004e3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e42:	0182      	lsls	r2, r0, #6
 8004e44:	1a12      	subs	r2, r2, r0
 8004e46:	eb63 0301 	sbc.w	r3, r3, r1
 8004e4a:	f04f 0000 	mov.w	r0, #0
 8004e4e:	f04f 0100 	mov.w	r1, #0
 8004e52:	00d9      	lsls	r1, r3, #3
 8004e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e58:	00d0      	lsls	r0, r2, #3
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	1912      	adds	r2, r2, r4
 8004e60:	eb45 0303 	adc.w	r3, r5, r3
 8004e64:	f04f 0000 	mov.w	r0, #0
 8004e68:	f04f 0100 	mov.w	r1, #0
 8004e6c:	0299      	lsls	r1, r3, #10
 8004e6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e72:	0290      	lsls	r0, r2, #10
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	f7fb f9fc 	bl	8000280 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	0c1b      	lsrs	r3, r3, #16
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	60bb      	str	r3, [r7, #8]
      break;
 8004eaa:	e002      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004eae:	60bb      	str	r3, [r7, #8]
      break;
 8004eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	00f42400 	.word	0x00f42400
 8004ec8:	007a1200 	.word	0x007a1200

08004ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000000 	.word	0x20000000

08004ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ee8:	f7ff fff0 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	0a9b      	lsrs	r3, r3, #10
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	4903      	ldr	r1, [pc, #12]	; (8004f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40023800 	.word	0x40023800
 8004f08:	0800ea90 	.word	0x0800ea90

08004f0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	220f      	movs	r2, #15
 8004f1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f1c:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <HAL_RCC_GetClockConfig+0x5c>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 0203 	and.w	r2, r3, #3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f28:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <HAL_RCC_GetClockConfig+0x5c>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <HAL_RCC_GetClockConfig+0x5c>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f40:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <HAL_RCC_GetClockConfig+0x5c>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	08db      	lsrs	r3, r3, #3
 8004f46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <HAL_RCC_GetClockConfig+0x60>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0207 	and.w	r2, r3, #7
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	601a      	str	r2, [r3, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	40023c00 	.word	0x40023c00

08004f70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d035      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f98:	4b62      	ldr	r3, [pc, #392]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f9e:	f7fc fc1b 	bl	80017d8 <HAL_GetTick>
 8004fa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fa6:	f7fc fc17 	bl	80017d8 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e0b0      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fb8:	4b5b      	ldr	r3, [pc, #364]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f0      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	019a      	lsls	r2, r3, #6
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	071b      	lsls	r3, r3, #28
 8004fd0:	4955      	ldr	r1, [pc, #340]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fd8:	4b52      	ldr	r3, [pc, #328]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fde:	f7fc fbfb 	bl	80017d8 <HAL_GetTick>
 8004fe2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fe6:	f7fc fbf7 	bl	80017d8 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e090      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8083 	beq.w	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	4b44      	ldr	r3, [pc, #272]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	4a43      	ldr	r2, [pc, #268]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800501c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005020:	6413      	str	r3, [r2, #64]	; 0x40
 8005022:	4b41      	ldr	r3, [pc, #260]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800502e:	4b3f      	ldr	r3, [pc, #252]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a3e      	ldr	r2, [pc, #248]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005038:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800503a:	f7fc fbcd 	bl	80017d8 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005040:	e008      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005042:	f7fc fbc9 	bl	80017d8 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e062      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005054:	4b35      	ldr	r3, [pc, #212]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005060:	4b31      	ldr	r3, [pc, #196]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005068:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d02f      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	429a      	cmp	r2, r3
 800507c:	d028      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800507e:	4b2a      	ldr	r3, [pc, #168]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005086:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005088:	4b29      	ldr	r3, [pc, #164]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800508e:	4b28      	ldr	r3, [pc, #160]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005094:	4a24      	ldr	r2, [pc, #144]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800509a:	4b23      	ldr	r3, [pc, #140]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d114      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050a6:	f7fc fb97 	bl	80017d8 <HAL_GetTick>
 80050aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ac:	e00a      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ae:	f7fc fb93 	bl	80017d8 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050bc:	4293      	cmp	r3, r2
 80050be:	d901      	bls.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e02a      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c4:	4b18      	ldr	r3, [pc, #96]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ee      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050dc:	d10d      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f2:	490d      	ldr	r1, [pc, #52]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]
 80050f8:	e005      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	4a0a      	ldr	r2, [pc, #40]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005100:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005104:	6093      	str	r3, [r2, #8]
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005108:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005112:	4905      	ldr	r1, [pc, #20]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005114:	4313      	orrs	r3, r2
 8005116:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	42470068 	.word	0x42470068
 8005128:	40023800 	.word	0x40023800
 800512c:	40007000 	.word	0x40007000
 8005130:	42470e40 	.word	0x42470e40

08005134 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d13e      	bne.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005152:	4b23      	ldr	r3, [pc, #140]	; (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d12f      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005168:	4b1e      	ldr	r3, [pc, #120]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800516a:	617b      	str	r3, [r7, #20]
          break;
 800516c:	e02f      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800516e:	4b1c      	ldr	r3, [pc, #112]	; (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800517a:	d108      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800517c:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005184:	4a18      	ldr	r2, [pc, #96]	; (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005186:	fbb2 f3f3 	udiv	r3, r2, r3
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	e007      	b.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800518e:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005196:	4a15      	ldr	r2, [pc, #84]	; (80051ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005198:	fbb2 f3f3 	udiv	r3, r2, r3
 800519c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800519e:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a4:	099b      	lsrs	r3, r3, #6
 80051a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	fb02 f303 	mul.w	r3, r2, r3
 80051b0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80051b2:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b8:	0f1b      	lsrs	r3, r3, #28
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	617b      	str	r3, [r7, #20]
          break;
 80051c6:	e002      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
          break;
 80051cc:	bf00      	nop
        }
      }
      break;
 80051ce:	bf00      	nop
    }
  }
  return frequency;
 80051d0:	697b      	ldr	r3, [r7, #20]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40023800 	.word	0x40023800
 80051e4:	00bb8000 	.word	0x00bb8000
 80051e8:	007a1200 	.word	0x007a1200
 80051ec:	00f42400 	.word	0x00f42400

080051f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e07b      	b.n	80052fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	d108      	bne.n	800521c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005212:	d009      	beq.n	8005228 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	61da      	str	r2, [r3, #28]
 800521a:	e005      	b.n	8005228 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc f8c6 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800525e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ac:	ea42 0103 	orr.w	r1, r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	f003 0104 	and.w	r1, r3, #4
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	f003 0210 	and.w	r2, r3, #16
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e041      	b.n	8005398 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7fc f89b 	bl	8001464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	4619      	mov	r1, r3
 8005340:	4610      	mov	r0, r2
 8005342:	f000 fc6f 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d001      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e04e      	b.n	8005456 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a23      	ldr	r2, [pc, #140]	; (8005464 <HAL_TIM_Base_Start_IT+0xc4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d022      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x80>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e2:	d01d      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x80>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1f      	ldr	r2, [pc, #124]	; (8005468 <HAL_TIM_Base_Start_IT+0xc8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d018      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x80>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1e      	ldr	r2, [pc, #120]	; (800546c <HAL_TIM_Base_Start_IT+0xcc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x80>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1c      	ldr	r2, [pc, #112]	; (8005470 <HAL_TIM_Base_Start_IT+0xd0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00e      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x80>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <HAL_TIM_Base_Start_IT+0xd4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d009      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x80>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a19      	ldr	r2, [pc, #100]	; (8005478 <HAL_TIM_Base_Start_IT+0xd8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x80>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a18      	ldr	r2, [pc, #96]	; (800547c <HAL_TIM_Base_Start_IT+0xdc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d111      	bne.n	8005444 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b06      	cmp	r3, #6
 8005430:	d010      	beq.n	8005454 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0201 	orr.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005442:	e007      	b.n	8005454 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40010000 	.word	0x40010000
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40000c00 	.word	0x40000c00
 8005474:	40010400 	.word	0x40010400
 8005478:	40014000 	.word	0x40014000
 800547c:	40001800 	.word	0x40001800

08005480 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e041      	b.n	8005516 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fc f804 	bl	80014b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f000 fbb0 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d109      	bne.n	8005544 <HAL_TIM_PWM_Start+0x24>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	bf14      	ite	ne
 800553c:	2301      	movne	r3, #1
 800553e:	2300      	moveq	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	e022      	b.n	800558a <HAL_TIM_PWM_Start+0x6a>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b04      	cmp	r3, #4
 8005548:	d109      	bne.n	800555e <HAL_TIM_PWM_Start+0x3e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b01      	cmp	r3, #1
 8005554:	bf14      	ite	ne
 8005556:	2301      	movne	r3, #1
 8005558:	2300      	moveq	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	e015      	b.n	800558a <HAL_TIM_PWM_Start+0x6a>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d109      	bne.n	8005578 <HAL_TIM_PWM_Start+0x58>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	bf14      	ite	ne
 8005570:	2301      	movne	r3, #1
 8005572:	2300      	moveq	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	e008      	b.n	800558a <HAL_TIM_PWM_Start+0x6a>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b01      	cmp	r3, #1
 8005582:	bf14      	ite	ne
 8005584:	2301      	movne	r3, #1
 8005586:	2300      	moveq	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e07c      	b.n	800568c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d104      	bne.n	80055a2 <HAL_TIM_PWM_Start+0x82>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a0:	e013      	b.n	80055ca <HAL_TIM_PWM_Start+0xaa>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d104      	bne.n	80055b2 <HAL_TIM_PWM_Start+0x92>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055b0:	e00b      	b.n	80055ca <HAL_TIM_PWM_Start+0xaa>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d104      	bne.n	80055c2 <HAL_TIM_PWM_Start+0xa2>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055c0:	e003      	b.n	80055ca <HAL_TIM_PWM_Start+0xaa>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2202      	movs	r2, #2
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2201      	movs	r2, #1
 80055d0:	6839      	ldr	r1, [r7, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fe10 	bl	80061f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a2d      	ldr	r2, [pc, #180]	; (8005694 <HAL_TIM_PWM_Start+0x174>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_TIM_PWM_Start+0xcc>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a2c      	ldr	r2, [pc, #176]	; (8005698 <HAL_TIM_PWM_Start+0x178>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d101      	bne.n	80055f0 <HAL_TIM_PWM_Start+0xd0>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <HAL_TIM_PWM_Start+0xd2>
 80055f0:	2300      	movs	r3, #0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005604:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a22      	ldr	r2, [pc, #136]	; (8005694 <HAL_TIM_PWM_Start+0x174>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d022      	beq.n	8005656 <HAL_TIM_PWM_Start+0x136>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005618:	d01d      	beq.n	8005656 <HAL_TIM_PWM_Start+0x136>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1f      	ldr	r2, [pc, #124]	; (800569c <HAL_TIM_PWM_Start+0x17c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d018      	beq.n	8005656 <HAL_TIM_PWM_Start+0x136>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1d      	ldr	r2, [pc, #116]	; (80056a0 <HAL_TIM_PWM_Start+0x180>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_TIM_PWM_Start+0x136>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <HAL_TIM_PWM_Start+0x184>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00e      	beq.n	8005656 <HAL_TIM_PWM_Start+0x136>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a16      	ldr	r2, [pc, #88]	; (8005698 <HAL_TIM_PWM_Start+0x178>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d009      	beq.n	8005656 <HAL_TIM_PWM_Start+0x136>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <HAL_TIM_PWM_Start+0x188>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_TIM_PWM_Start+0x136>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a16      	ldr	r2, [pc, #88]	; (80056ac <HAL_TIM_PWM_Start+0x18c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d111      	bne.n	800567a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b06      	cmp	r3, #6
 8005666:	d010      	beq.n	800568a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005678:	e007      	b.n	800568a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40010000 	.word	0x40010000
 8005698:	40010400 	.word	0x40010400
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40001800 	.word	0x40001800

080056b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d122      	bne.n	800570c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d11b      	bne.n	800570c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0202 	mvn.w	r2, #2
 80056dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa77 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 80056f8:	e005      	b.n	8005706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa69 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fa7a 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b04      	cmp	r3, #4
 8005718:	d122      	bne.n	8005760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b04      	cmp	r3, #4
 8005726:	d11b      	bne.n	8005760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0204 	mvn.w	r2, #4
 8005730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa4d 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 800574c:	e005      	b.n	800575a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa3f 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fa50 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b08      	cmp	r3, #8
 800576c:	d122      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b08      	cmp	r3, #8
 800577a:	d11b      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0208 	mvn.w	r2, #8
 8005784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2204      	movs	r2, #4
 800578a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fa23 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 80057a0:	e005      	b.n	80057ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fa15 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fa26 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b10      	cmp	r3, #16
 80057c0:	d122      	bne.n	8005808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d11b      	bne.n	8005808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0210 	mvn.w	r2, #16
 80057d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2208      	movs	r2, #8
 80057de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f9f9 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 80057f4:	e005      	b.n	8005802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f9eb 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f9fc 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b01      	cmp	r3, #1
 8005814:	d10e      	bne.n	8005834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	d107      	bne.n	8005834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0201 	mvn.w	r2, #1
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fb fc74 	bl	800111c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583e:	2b80      	cmp	r3, #128	; 0x80
 8005840:	d10e      	bne.n	8005860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584c:	2b80      	cmp	r3, #128	; 0x80
 800584e:	d107      	bne.n	8005860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fd78 	bl	8006350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	d10e      	bne.n	800588c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d107      	bne.n	800588c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f9c1 	bl	8005c0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b20      	cmp	r3, #32
 8005898:	d10e      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d107      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0220 	mvn.w	r2, #32
 80058b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fd42 	bl	800633c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058da:	2302      	movs	r3, #2
 80058dc:	e0ae      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b0c      	cmp	r3, #12
 80058ea:	f200 809f 	bhi.w	8005a2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005929 	.word	0x08005929
 80058f8:	08005a2d 	.word	0x08005a2d
 80058fc:	08005a2d 	.word	0x08005a2d
 8005900:	08005a2d 	.word	0x08005a2d
 8005904:	08005969 	.word	0x08005969
 8005908:	08005a2d 	.word	0x08005a2d
 800590c:	08005a2d 	.word	0x08005a2d
 8005910:	08005a2d 	.word	0x08005a2d
 8005914:	080059ab 	.word	0x080059ab
 8005918:	08005a2d 	.word	0x08005a2d
 800591c:	08005a2d 	.word	0x08005a2d
 8005920:	08005a2d 	.word	0x08005a2d
 8005924:	080059eb 	.word	0x080059eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fa18 	bl	8005d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699a      	ldr	r2, [r3, #24]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0208 	orr.w	r2, r2, #8
 8005942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0204 	bic.w	r2, r2, #4
 8005952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6999      	ldr	r1, [r3, #24]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	619a      	str	r2, [r3, #24]
      break;
 8005966:	e064      	b.n	8005a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fa68 	bl	8005e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6999      	ldr	r1, [r3, #24]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	021a      	lsls	r2, r3, #8
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	619a      	str	r2, [r3, #24]
      break;
 80059a8:	e043      	b.n	8005a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fabd 	bl	8005f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69da      	ldr	r2, [r3, #28]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0208 	orr.w	r2, r2, #8
 80059c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69da      	ldr	r2, [r3, #28]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0204 	bic.w	r2, r2, #4
 80059d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69d9      	ldr	r1, [r3, #28]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	61da      	str	r2, [r3, #28]
      break;
 80059e8:	e023      	b.n	8005a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fb11 	bl	8006018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69da      	ldr	r2, [r3, #28]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69d9      	ldr	r1, [r3, #28]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	021a      	lsls	r2, r3, #8
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	61da      	str	r2, [r3, #28]
      break;
 8005a2a:	e002      	b.n	8005a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_TIM_ConfigClockSource+0x1c>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e0b4      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x186>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a98:	d03e      	beq.n	8005b18 <HAL_TIM_ConfigClockSource+0xd4>
 8005a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9e:	f200 8087 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa6:	f000 8086 	beq.w	8005bb6 <HAL_TIM_ConfigClockSource+0x172>
 8005aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aae:	d87f      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab0:	2b70      	cmp	r3, #112	; 0x70
 8005ab2:	d01a      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0xa6>
 8005ab4:	2b70      	cmp	r3, #112	; 0x70
 8005ab6:	d87b      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab8:	2b60      	cmp	r3, #96	; 0x60
 8005aba:	d050      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0x11a>
 8005abc:	2b60      	cmp	r3, #96	; 0x60
 8005abe:	d877      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac0:	2b50      	cmp	r3, #80	; 0x50
 8005ac2:	d03c      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0xfa>
 8005ac4:	2b50      	cmp	r3, #80	; 0x50
 8005ac6:	d873      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d058      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x13a>
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d86f      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad0:	2b30      	cmp	r3, #48	; 0x30
 8005ad2:	d064      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ad4:	2b30      	cmp	r3, #48	; 0x30
 8005ad6:	d86b      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d060      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x15a>
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d867      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d05c      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d05a      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ae8:	e062      	b.n	8005bb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6899      	ldr	r1, [r3, #8]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f000 fb5d 	bl	80061b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	609a      	str	r2, [r3, #8]
      break;
 8005b16:	e04f      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	6899      	ldr	r1, [r3, #8]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f000 fb46 	bl	80061b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b3a:	609a      	str	r2, [r3, #8]
      break;
 8005b3c:	e03c      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6859      	ldr	r1, [r3, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f000 faba 	bl	80060c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2150      	movs	r1, #80	; 0x50
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fb13 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005b5c:	e02c      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6859      	ldr	r1, [r3, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f000 fad9 	bl	8006122 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2160      	movs	r1, #96	; 0x60
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fb03 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005b7c:	e01c      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6859      	ldr	r1, [r3, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f000 fa9a 	bl	80060c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2140      	movs	r1, #64	; 0x40
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 faf3 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005b9c:	e00c      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4610      	mov	r0, r2
 8005baa:	f000 faea 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005bae:	e003      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb4:	e000      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
	...

08005c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a40      	ldr	r2, [pc, #256]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c42:	d00f      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3d      	ldr	r2, [pc, #244]	; (8005d3c <TIM_Base_SetConfig+0x118>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3c      	ldr	r2, [pc, #240]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3b      	ldr	r2, [pc, #236]	; (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a3a      	ldr	r2, [pc, #232]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d108      	bne.n	8005c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a2f      	ldr	r2, [pc, #188]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d02b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d027      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2c      	ldr	r2, [pc, #176]	; (8005d3c <TIM_Base_SetConfig+0x118>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d023      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2b      	ldr	r2, [pc, #172]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01f      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2a      	ldr	r2, [pc, #168]	; (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a29      	ldr	r2, [pc, #164]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d017      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a28      	ldr	r2, [pc, #160]	; (8005d4c <TIM_Base_SetConfig+0x128>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d013      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a27      	ldr	r2, [pc, #156]	; (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00f      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a26      	ldr	r2, [pc, #152]	; (8005d54 <TIM_Base_SetConfig+0x130>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a25      	ldr	r2, [pc, #148]	; (8005d58 <TIM_Base_SetConfig+0x134>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d007      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a24      	ldr	r2, [pc, #144]	; (8005d5c <TIM_Base_SetConfig+0x138>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d003      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a23      	ldr	r2, [pc, #140]	; (8005d60 <TIM_Base_SetConfig+0x13c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d108      	bne.n	8005ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_Base_SetConfig+0xf8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a0c      	ldr	r2, [pc, #48]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d103      	bne.n	8005d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	615a      	str	r2, [r3, #20]
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40000800 	.word	0x40000800
 8005d44:	40000c00 	.word	0x40000c00
 8005d48:	40010400 	.word	0x40010400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800
 8005d58:	40001800 	.word	0x40001800
 8005d5c:	40001c00 	.word	0x40001c00
 8005d60:	40002000 	.word	0x40002000

08005d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0201 	bic.w	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0303 	bic.w	r3, r3, #3
 8005d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 0302 	bic.w	r3, r3, #2
 8005dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a20      	ldr	r2, [pc, #128]	; (8005e3c <TIM_OC1_SetConfig+0xd8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_OC1_SetConfig+0x64>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <TIM_OC1_SetConfig+0xdc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d10c      	bne.n	8005de2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0308 	bic.w	r3, r3, #8
 8005dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f023 0304 	bic.w	r3, r3, #4
 8005de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <TIM_OC1_SetConfig+0xd8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_OC1_SetConfig+0x8e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a14      	ldr	r2, [pc, #80]	; (8005e40 <TIM_OC1_SetConfig+0xdc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d111      	bne.n	8005e16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	621a      	str	r2, [r3, #32]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40010400 	.word	0x40010400

08005e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f023 0210 	bic.w	r2, r3, #16
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f023 0320 	bic.w	r3, r3, #32
 8005e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a22      	ldr	r2, [pc, #136]	; (8005f28 <TIM_OC2_SetConfig+0xe4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_OC2_SetConfig+0x68>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a21      	ldr	r2, [pc, #132]	; (8005f2c <TIM_OC2_SetConfig+0xe8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d10d      	bne.n	8005ec8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <TIM_OC2_SetConfig+0xe4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_OC2_SetConfig+0x94>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <TIM_OC2_SetConfig+0xe8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d113      	bne.n	8005f00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	621a      	str	r2, [r3, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40010400 	.word	0x40010400

08005f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	021b      	lsls	r3, r3, #8
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a21      	ldr	r2, [pc, #132]	; (8006010 <TIM_OC3_SetConfig+0xe0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d003      	beq.n	8005f96 <TIM_OC3_SetConfig+0x66>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a20      	ldr	r2, [pc, #128]	; (8006014 <TIM_OC3_SetConfig+0xe4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d10d      	bne.n	8005fb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a16      	ldr	r2, [pc, #88]	; (8006010 <TIM_OC3_SetConfig+0xe0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_OC3_SetConfig+0x92>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a15      	ldr	r2, [pc, #84]	; (8006014 <TIM_OC3_SetConfig+0xe4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d113      	bne.n	8005fea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40010000 	.word	0x40010000
 8006014:	40010400 	.word	0x40010400

08006018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	031b      	lsls	r3, r3, #12
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a12      	ldr	r2, [pc, #72]	; (80060bc <TIM_OC4_SetConfig+0xa4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_OC4_SetConfig+0x68>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a11      	ldr	r2, [pc, #68]	; (80060c0 <TIM_OC4_SetConfig+0xa8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d109      	bne.n	8006094 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	019b      	lsls	r3, r3, #6
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	621a      	str	r2, [r3, #32]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40010400 	.word	0x40010400

080060c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f023 0201 	bic.w	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f023 030a 	bic.w	r3, r3, #10
 8006100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	621a      	str	r2, [r3, #32]
}
 8006116:	bf00      	nop
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006122:	b480      	push	{r7}
 8006124:	b087      	sub	sp, #28
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f023 0210 	bic.w	r2, r3, #16
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800614c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	031b      	lsls	r3, r3, #12
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800615e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	f043 0307 	orr.w	r3, r3, #7
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	609a      	str	r2, [r3, #8]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	021a      	lsls	r2, r3, #8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	431a      	orrs	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	2201      	movs	r2, #1
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1a      	ldr	r2, [r3, #32]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	43db      	mvns	r3, r3
 800621a:	401a      	ands	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1a      	ldr	r2, [r3, #32]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	fa01 f303 	lsl.w	r3, r1, r3
 8006230:	431a      	orrs	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006258:	2302      	movs	r3, #2
 800625a:	e05a      	b.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a21      	ldr	r2, [pc, #132]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d022      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a8:	d01d      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1d      	ldr	r2, [pc, #116]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d018      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1b      	ldr	r2, [pc, #108]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1a      	ldr	r2, [pc, #104]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00e      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a18      	ldr	r2, [pc, #96]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a17      	ldr	r2, [pc, #92]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a15      	ldr	r2, [pc, #84]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d10c      	bne.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40010000 	.word	0x40010000
 8006324:	40000400 	.word	0x40000400
 8006328:	40000800 	.word	0x40000800
 800632c:	40000c00 	.word	0x40000c00
 8006330:	40010400 	.word	0x40010400
 8006334:	40014000 	.word	0x40014000
 8006338:	40001800 	.word	0x40001800

0800633c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006364:	b084      	sub	sp, #16
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	f107 001c 	add.w	r0, r7, #28
 8006372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	2b01      	cmp	r3, #1
 800637a:	d122      	bne.n	80063c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d105      	bne.n	80063b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 fb1c 	bl	80079f4 <USB_CoreReset>
 80063bc:	4603      	mov	r3, r0
 80063be:	73fb      	strb	r3, [r7, #15]
 80063c0:	e01a      	b.n	80063f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 fb10 	bl	80079f4 <USB_CoreReset>
 80063d4:	4603      	mov	r3, r0
 80063d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	639a      	str	r2, [r3, #56]	; 0x38
 80063ea:	e005      	b.n	80063f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d10b      	bne.n	8006416 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f043 0206 	orr.w	r2, r3, #6
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f043 0220 	orr.w	r2, r3, #32
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006422:	b004      	add	sp, #16
 8006424:	4770      	bx	lr
	...

08006428 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	4613      	mov	r3, r2
 8006434:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d165      	bne.n	8006508 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4a41      	ldr	r2, [pc, #260]	; (8006544 <USB_SetTurnaroundTime+0x11c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d906      	bls.n	8006452 <USB_SetTurnaroundTime+0x2a>
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4a40      	ldr	r2, [pc, #256]	; (8006548 <USB_SetTurnaroundTime+0x120>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d202      	bcs.n	8006452 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800644c:	230f      	movs	r3, #15
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	e062      	b.n	8006518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4a3c      	ldr	r2, [pc, #240]	; (8006548 <USB_SetTurnaroundTime+0x120>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d306      	bcc.n	8006468 <USB_SetTurnaroundTime+0x40>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4a3b      	ldr	r2, [pc, #236]	; (800654c <USB_SetTurnaroundTime+0x124>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d202      	bcs.n	8006468 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006462:	230e      	movs	r3, #14
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e057      	b.n	8006518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4a38      	ldr	r2, [pc, #224]	; (800654c <USB_SetTurnaroundTime+0x124>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d306      	bcc.n	800647e <USB_SetTurnaroundTime+0x56>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4a37      	ldr	r2, [pc, #220]	; (8006550 <USB_SetTurnaroundTime+0x128>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d202      	bcs.n	800647e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006478:	230d      	movs	r3, #13
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e04c      	b.n	8006518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4a33      	ldr	r2, [pc, #204]	; (8006550 <USB_SetTurnaroundTime+0x128>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d306      	bcc.n	8006494 <USB_SetTurnaroundTime+0x6c>
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	4a32      	ldr	r2, [pc, #200]	; (8006554 <USB_SetTurnaroundTime+0x12c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d802      	bhi.n	8006494 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800648e:	230c      	movs	r3, #12
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e041      	b.n	8006518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4a2f      	ldr	r2, [pc, #188]	; (8006554 <USB_SetTurnaroundTime+0x12c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d906      	bls.n	80064aa <USB_SetTurnaroundTime+0x82>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4a2e      	ldr	r2, [pc, #184]	; (8006558 <USB_SetTurnaroundTime+0x130>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d802      	bhi.n	80064aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80064a4:	230b      	movs	r3, #11
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	e036      	b.n	8006518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4a2a      	ldr	r2, [pc, #168]	; (8006558 <USB_SetTurnaroundTime+0x130>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d906      	bls.n	80064c0 <USB_SetTurnaroundTime+0x98>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4a29      	ldr	r2, [pc, #164]	; (800655c <USB_SetTurnaroundTime+0x134>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d802      	bhi.n	80064c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80064ba:	230a      	movs	r3, #10
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	e02b      	b.n	8006518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4a26      	ldr	r2, [pc, #152]	; (800655c <USB_SetTurnaroundTime+0x134>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d906      	bls.n	80064d6 <USB_SetTurnaroundTime+0xae>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4a25      	ldr	r2, [pc, #148]	; (8006560 <USB_SetTurnaroundTime+0x138>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d202      	bcs.n	80064d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064d0:	2309      	movs	r3, #9
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e020      	b.n	8006518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	4a21      	ldr	r2, [pc, #132]	; (8006560 <USB_SetTurnaroundTime+0x138>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d306      	bcc.n	80064ec <USB_SetTurnaroundTime+0xc4>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	4a20      	ldr	r2, [pc, #128]	; (8006564 <USB_SetTurnaroundTime+0x13c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d802      	bhi.n	80064ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80064e6:	2308      	movs	r3, #8
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	e015      	b.n	8006518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <USB_SetTurnaroundTime+0x13c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d906      	bls.n	8006502 <USB_SetTurnaroundTime+0xda>
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4a1c      	ldr	r2, [pc, #112]	; (8006568 <USB_SetTurnaroundTime+0x140>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d202      	bcs.n	8006502 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80064fc:	2307      	movs	r3, #7
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	e00a      	b.n	8006518 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006502:	2306      	movs	r3, #6
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	e007      	b.n	8006518 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800650e:	2309      	movs	r3, #9
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	e001      	b.n	8006518 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006514:	2309      	movs	r3, #9
 8006516:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	029b      	lsls	r3, r3, #10
 800652c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006530:	431a      	orrs	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	00d8acbf 	.word	0x00d8acbf
 8006548:	00e4e1c0 	.word	0x00e4e1c0
 800654c:	00f42400 	.word	0x00f42400
 8006550:	01067380 	.word	0x01067380
 8006554:	011a499f 	.word	0x011a499f
 8006558:	01312cff 	.word	0x01312cff
 800655c:	014ca43f 	.word	0x014ca43f
 8006560:	016e3600 	.word	0x016e3600
 8006564:	01a6ab1f 	.word	0x01a6ab1f
 8006568:	01e84800 	.word	0x01e84800

0800656c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f043 0201 	orr.w	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f023 0201 	bic.w	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d115      	bne.n	80065fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065de:	2001      	movs	r0, #1
 80065e0:	f7fb f906 	bl	80017f0 <HAL_Delay>
      ms++;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3301      	adds	r3, #1
 80065e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f001 f972 	bl	80078d4 <USB_GetMode>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d01e      	beq.n	8006634 <USB_SetCurrentMode+0x84>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b31      	cmp	r3, #49	; 0x31
 80065fa:	d9f0      	bls.n	80065de <USB_SetCurrentMode+0x2e>
 80065fc:	e01a      	b.n	8006634 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065fe:	78fb      	ldrb	r3, [r7, #3]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d115      	bne.n	8006630 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006610:	2001      	movs	r0, #1
 8006612:	f7fb f8ed 	bl	80017f0 <HAL_Delay>
      ms++;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3301      	adds	r3, #1
 800661a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f001 f959 	bl	80078d4 <USB_GetMode>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <USB_SetCurrentMode+0x84>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b31      	cmp	r3, #49	; 0x31
 800662c:	d9f0      	bls.n	8006610 <USB_SetCurrentMode+0x60>
 800662e:	e001      	b.n	8006634 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e005      	b.n	8006640 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b32      	cmp	r3, #50	; 0x32
 8006638:	d101      	bne.n	800663e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006648:	b084      	sub	sp, #16
 800664a:	b580      	push	{r7, lr}
 800664c:	b086      	sub	sp, #24
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006662:	2300      	movs	r3, #0
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	e009      	b.n	800667c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	3340      	adds	r3, #64	; 0x40
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	2200      	movs	r2, #0
 8006674:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	3301      	adds	r3, #1
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	2b0e      	cmp	r3, #14
 8006680:	d9f2      	bls.n	8006668 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11c      	bne.n	80066c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006696:	f043 0302 	orr.w	r3, r3, #2
 800669a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	639a      	str	r2, [r3, #56]	; 0x38
 80066c0:	e00b      	b.n	80066da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066e0:	461a      	mov	r2, r3
 80066e2:	2300      	movs	r3, #0
 80066e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ec:	4619      	mov	r1, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f4:	461a      	mov	r2, r3
 80066f6:	680b      	ldr	r3, [r1, #0]
 80066f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d10c      	bne.n	800671a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d104      	bne.n	8006710 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006706:	2100      	movs	r1, #0
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f945 	bl	8006998 <USB_SetDevSpeed>
 800670e:	e008      	b.n	8006722 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006710:	2101      	movs	r1, #1
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f940 	bl	8006998 <USB_SetDevSpeed>
 8006718:	e003      	b.n	8006722 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800671a:	2103      	movs	r1, #3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f93b 	bl	8006998 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006722:	2110      	movs	r1, #16
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f8f3 	bl	8006910 <USB_FlushTxFifo>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f90f 	bl	8006958 <USB_FlushRxFifo>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	461a      	mov	r2, r3
 800674c:	2300      	movs	r3, #0
 800674e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006756:	461a      	mov	r2, r3
 8006758:	2300      	movs	r3, #0
 800675a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006762:	461a      	mov	r2, r3
 8006764:	2300      	movs	r3, #0
 8006766:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006768:	2300      	movs	r3, #0
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	e043      	b.n	80067f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006784:	d118      	bne.n	80067b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006798:	461a      	mov	r2, r3
 800679a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	e013      	b.n	80067ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ae:	461a      	mov	r2, r3
 80067b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e008      	b.n	80067ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c4:	461a      	mov	r2, r3
 80067c6:	2300      	movs	r3, #0
 80067c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d6:	461a      	mov	r2, r3
 80067d8:	2300      	movs	r3, #0
 80067da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e8:	461a      	mov	r2, r3
 80067ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	3301      	adds	r3, #1
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d3b7      	bcc.n	800676e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067fe:	2300      	movs	r3, #0
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	e043      	b.n	800688c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800681a:	d118      	bne.n	800684e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682e:	461a      	mov	r2, r3
 8006830:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e013      	b.n	8006860 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006844:	461a      	mov	r2, r3
 8006846:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	e008      	b.n	8006860 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	461a      	mov	r2, r3
 800685c:	2300      	movs	r3, #0
 800685e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	461a      	mov	r2, r3
 800686e:	2300      	movs	r3, #0
 8006870:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687e:	461a      	mov	r2, r3
 8006880:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006884:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3301      	adds	r3, #1
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	429a      	cmp	r2, r3
 8006892:	d3b7      	bcc.n	8006804 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d105      	bne.n	80068c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f043 0210 	orr.w	r2, r3, #16
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699a      	ldr	r2, [r3, #24]
 80068cc:	4b0f      	ldr	r3, [pc, #60]	; (800690c <USB_DevInit+0x2c4>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f043 0208 	orr.w	r2, r3, #8
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d107      	bne.n	80068fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068f4:	f043 0304 	orr.w	r3, r3, #4
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006908:	b004      	add	sp, #16
 800690a:	4770      	bx	lr
 800690c:	803c3800 	.word	0x803c3800

08006910 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	019b      	lsls	r3, r3, #6
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3301      	adds	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	4a08      	ldr	r2, [pc, #32]	; (8006954 <USB_FlushTxFifo+0x44>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d901      	bls.n	800693a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e006      	b.n	8006948 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b20      	cmp	r3, #32
 8006944:	d0f1      	beq.n	800692a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	00030d40 	.word	0x00030d40

08006958 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2210      	movs	r2, #16
 8006968:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3301      	adds	r3, #1
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	4a08      	ldr	r2, [pc, #32]	; (8006994 <USB_FlushRxFifo+0x3c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d901      	bls.n	800697a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e006      	b.n	8006988 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b10      	cmp	r3, #16
 8006984:	d0f1      	beq.n	800696a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	00030d40 	.word	0x00030d40

08006998 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	68f9      	ldr	r1, [r7, #12]
 80069b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069b8:	4313      	orrs	r3, r2
 80069ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b087      	sub	sp, #28
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 0306 	and.w	r3, r3, #6
 80069e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d102      	bne.n	80069f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80069ea:	2300      	movs	r3, #0
 80069ec:	75fb      	strb	r3, [r7, #23]
 80069ee:	e00a      	b.n	8006a06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d002      	beq.n	80069fc <USB_GetDevSpeed+0x32>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b06      	cmp	r3, #6
 80069fa:	d102      	bne.n	8006a02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80069fc:	2302      	movs	r3, #2
 80069fe:	75fb      	strb	r3, [r7, #23]
 8006a00:	e001      	b.n	8006a06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a02:	230f      	movs	r3, #15
 8006a04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d13a      	bne.n	8006aa6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	2101      	movs	r1, #1
 8006a42:	fa01 f303 	lsl.w	r3, r1, r3
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	68f9      	ldr	r1, [r7, #12]
 8006a4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d155      	bne.n	8006b14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	78db      	ldrb	r3, [r3, #3]
 8006a82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	059b      	lsls	r3, r3, #22
 8006a8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	e036      	b.n	8006b14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aac:	69da      	ldr	r2, [r3, #28]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8006abc:	041b      	lsls	r3, r3, #16
 8006abe:	68f9      	ldr	r1, [r7, #12]
 8006ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d11a      	bne.n	8006b14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	78db      	ldrb	r3, [r3, #3]
 8006af8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006afa:	430b      	orrs	r3, r1
 8006afc:	4313      	orrs	r3, r2
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
	...

08006b24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d161      	bne.n	8006c04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b56:	d11f      	bne.n	8006b98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	0151      	lsls	r1, r2, #5
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	440a      	add	r2, r1
 8006b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f003 030f 	and.w	r3, r3, #15
 8006ba8:	2101      	movs	r1, #1
 8006baa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	43db      	mvns	r3, r3
 8006bb2:	68f9      	ldr	r1, [r7, #12]
 8006bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bb8:	4013      	ands	r3, r2
 8006bba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	2101      	movs	r1, #1
 8006bce:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	43db      	mvns	r3, r3
 8006bd6:	68f9      	ldr	r1, [r7, #12]
 8006bd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bdc:	4013      	ands	r3, r2
 8006bde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	0159      	lsls	r1, r3, #5
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	440b      	add	r3, r1
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4b35      	ldr	r3, [pc, #212]	; (8006cd4 <USB_DeactivateEndpoint+0x1b0>)
 8006bfe:	4013      	ands	r3, r2
 8006c00:	600b      	str	r3, [r1, #0]
 8006c02:	e060      	b.n	8006cc6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c1a:	d11f      	bne.n	8006c5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	0151      	lsls	r1, r2, #5
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	440a      	add	r2, r1
 8006c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c72:	041b      	lsls	r3, r3, #16
 8006c74:	43db      	mvns	r3, r3
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	2101      	movs	r1, #1
 8006c92:	fa01 f303 	lsl.w	r3, r1, r3
 8006c96:	041b      	lsls	r3, r3, #16
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	68f9      	ldr	r1, [r7, #12]
 8006c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	0159      	lsls	r1, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	440b      	add	r3, r1
 8006cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <USB_DeactivateEndpoint+0x1b4>)
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	ec337800 	.word	0xec337800
 8006cd8:	eff37800 	.word	0xeff37800

08006cdc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	; 0x28
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	f040 815c 	bne.w	8006fb6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d132      	bne.n	8006d6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	0151      	lsls	r1, r2, #5
 8006d3c:	69fa      	ldr	r2, [r7, #28]
 8006d3e:	440a      	add	r2, r1
 8006d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	69fa      	ldr	r2, [r7, #28]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d64:	0cdb      	lsrs	r3, r3, #19
 8006d66:	04db      	lsls	r3, r3, #19
 8006d68:	6113      	str	r3, [r2, #16]
 8006d6a:	e074      	b.n	8006e56 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	0151      	lsls	r1, r2, #5
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	440a      	add	r2, r1
 8006d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d86:	0cdb      	lsrs	r3, r3, #19
 8006d88:	04db      	lsls	r3, r3, #19
 8006d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	0151      	lsls	r1, r2, #5
 8006d9e:	69fa      	ldr	r2, [r7, #28]
 8006da0:	440a      	add	r2, r1
 8006da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006daa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6959      	ldr	r1, [r3, #20]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	440b      	add	r3, r1
 8006dc8:	1e59      	subs	r1, r3, #1
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dd2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006dd4:	4b9d      	ldr	r3, [pc, #628]	; (800704c <USB_EPStartXfer+0x370>)
 8006dd6:	400b      	ands	r3, r1
 8006dd8:	69b9      	ldr	r1, [r7, #24]
 8006dda:	0148      	lsls	r0, r1, #5
 8006ddc:	69f9      	ldr	r1, [r7, #28]
 8006dde:	4401      	add	r1, r0
 8006de0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006de4:	4313      	orrs	r3, r2
 8006de6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df4:	691a      	ldr	r2, [r3, #16]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dfe:	69b9      	ldr	r1, [r7, #24]
 8006e00:	0148      	lsls	r0, r1, #5
 8006e02:	69f9      	ldr	r1, [r7, #28]
 8006e04:	4401      	add	r1, r0
 8006e06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	78db      	ldrb	r3, [r3, #3]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d11f      	bne.n	8006e56 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	0151      	lsls	r1, r2, #5
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	440a      	add	r2, r1
 8006e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e54:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d14b      	bne.n	8006ef4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e70:	461a      	mov	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	78db      	ldrb	r3, [r3, #3]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d128      	bne.n	8006ed2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d110      	bne.n	8006eb2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	e00f      	b.n	8006ed2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	69fa      	ldr	r2, [r7, #28]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	e12f      	b.n	8007154 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f12:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	78db      	ldrb	r3, [r3, #3]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d015      	beq.n	8006f48 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 8117 	beq.w	8007154 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	f003 030f 	and.w	r3, r3, #15
 8006f36:	2101      	movs	r1, #1
 8006f38:	fa01 f303 	lsl.w	r3, r1, r3
 8006f3c:	69f9      	ldr	r1, [r7, #28]
 8006f3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f42:	4313      	orrs	r3, r2
 8006f44:	634b      	str	r3, [r1, #52]	; 0x34
 8006f46:	e105      	b.n	8007154 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d110      	bne.n	8006f7a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	e00f      	b.n	8006f9a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	0151      	lsls	r1, r2, #5
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	440a      	add	r2, r1
 8006f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f98:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	68d9      	ldr	r1, [r3, #12]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	781a      	ldrb	r2, [r3, #0]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	b298      	uxth	r0, r3
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	4603      	mov	r3, r0
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fa2b 	bl	800740a <USB_WritePacket>
 8006fb4:	e0ce      	b.n	8007154 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	69fa      	ldr	r2, [r7, #28]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd0:	0cdb      	lsrs	r3, r3, #19
 8006fd2:	04db      	lsls	r3, r3, #19
 8006fd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	0151      	lsls	r1, r2, #5
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	440a      	add	r2, r1
 8006fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ff4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ff8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d126      	bne.n	8007050 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007018:	69b9      	ldr	r1, [r7, #24]
 800701a:	0148      	lsls	r0, r1, #5
 800701c:	69f9      	ldr	r1, [r7, #28]
 800701e:	4401      	add	r1, r0
 8007020:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007024:	4313      	orrs	r3, r2
 8007026:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	69fa      	ldr	r2, [r7, #28]
 800703c:	440a      	add	r2, r1
 800703e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007042:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007046:	6113      	str	r3, [r2, #16]
 8007048:	e036      	b.n	80070b8 <USB_EPStartXfer+0x3dc>
 800704a:	bf00      	nop
 800704c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	695a      	ldr	r2, [r3, #20]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	4413      	add	r3, r2
 800705a:	1e5a      	subs	r2, r3, #1
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	fbb2 f3f3 	udiv	r3, r2, r3
 8007064:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	8afb      	ldrh	r3, [r7, #22]
 8007076:	04d9      	lsls	r1, r3, #19
 8007078:	4b39      	ldr	r3, [pc, #228]	; (8007160 <USB_EPStartXfer+0x484>)
 800707a:	400b      	ands	r3, r1
 800707c:	69b9      	ldr	r1, [r7, #24]
 800707e:	0148      	lsls	r0, r1, #5
 8007080:	69f9      	ldr	r1, [r7, #28]
 8007082:	4401      	add	r1, r0
 8007084:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007088:	4313      	orrs	r3, r2
 800708a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007098:	691a      	ldr	r2, [r3, #16]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	8af9      	ldrh	r1, [r7, #22]
 80070a0:	fb01 f303 	mul.w	r3, r1, r3
 80070a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070a8:	69b9      	ldr	r1, [r7, #24]
 80070aa:	0148      	lsls	r0, r1, #5
 80070ac:	69f9      	ldr	r1, [r7, #28]
 80070ae:	4401      	add	r1, r0
 80070b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070b4:	4313      	orrs	r3, r2
 80070b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d10d      	bne.n	80070da <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	68d9      	ldr	r1, [r3, #12]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d6:	460a      	mov	r2, r1
 80070d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	78db      	ldrb	r3, [r3, #3]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d128      	bne.n	8007134 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d110      	bne.n	8007114 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	69fa      	ldr	r2, [r7, #28]
 8007106:	440a      	add	r2, r1
 8007108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	e00f      	b.n	8007134 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	0151      	lsls	r1, r2, #5
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	440a      	add	r2, r1
 800712a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800712e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007132:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	0151      	lsls	r1, r2, #5
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	440a      	add	r2, r1
 800714a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800714e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007152:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3720      	adds	r7, #32
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	1ff80000 	.word	0x1ff80000

08007164 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	4613      	mov	r3, r2
 8007170:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	785b      	ldrb	r3, [r3, #1]
 8007180:	2b01      	cmp	r3, #1
 8007182:	f040 80cd 	bne.w	8007320 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d132      	bne.n	80071f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	0151      	lsls	r1, r2, #5
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	440a      	add	r2, r1
 80071a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	0151      	lsls	r1, r2, #5
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	440a      	add	r2, r1
 80071e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ec:	0cdb      	lsrs	r3, r3, #19
 80071ee:	04db      	lsls	r3, r3, #19
 80071f0:	6113      	str	r3, [r2, #16]
 80071f2:	e04e      	b.n	8007292 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	440a      	add	r2, r1
 800720a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800720e:	0cdb      	lsrs	r3, r3, #19
 8007210:	04db      	lsls	r3, r3, #19
 8007212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	0151      	lsls	r1, r2, #5
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	440a      	add	r2, r1
 800722a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800722e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007232:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007236:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	695a      	ldr	r2, [r3, #20]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	429a      	cmp	r2, r3
 8007242:	d903      	bls.n	800724c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	0151      	lsls	r1, r2, #5
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	440a      	add	r2, r1
 8007262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007266:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800726a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007282:	6939      	ldr	r1, [r7, #16]
 8007284:	0148      	lsls	r0, r1, #5
 8007286:	6979      	ldr	r1, [r7, #20]
 8007288:	4401      	add	r1, r0
 800728a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800728e:	4313      	orrs	r3, r2
 8007290:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d11e      	bne.n	80072d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d009      	beq.n	80072b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ac:	461a      	mov	r2, r3
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	0151      	lsls	r1, r2, #5
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	440a      	add	r2, r1
 80072ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	e092      	b.n	80073fc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	0151      	lsls	r1, r2, #5
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	440a      	add	r2, r1
 80072ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d07e      	beq.n	80073fc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	2101      	movs	r1, #1
 8007310:	fa01 f303 	lsl.w	r3, r1, r3
 8007314:	6979      	ldr	r1, [r7, #20]
 8007316:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800731a:	4313      	orrs	r3, r2
 800731c:	634b      	str	r3, [r1, #52]	; 0x34
 800731e:	e06d      	b.n	80073fc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	0151      	lsls	r1, r2, #5
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	440a      	add	r2, r1
 8007336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733a:	0cdb      	lsrs	r3, r3, #19
 800733c:	04db      	lsls	r3, r3, #19
 800733e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	0151      	lsls	r1, r2, #5
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	440a      	add	r2, r1
 8007356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800735a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800735e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007362:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	440a      	add	r2, r1
 800738a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007392:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073aa:	6939      	ldr	r1, [r7, #16]
 80073ac:	0148      	lsls	r0, r1, #5
 80073ae:	6979      	ldr	r1, [r7, #20]
 80073b0:	4401      	add	r1, r0
 80073b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073b6:	4313      	orrs	r3, r2
 80073b8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d10d      	bne.n	80073dc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	68d9      	ldr	r1, [r3, #12]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d8:	460a      	mov	r2, r1
 80073da:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	0151      	lsls	r1, r2, #5
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	440a      	add	r2, r1
 80073f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800740a:	b480      	push	{r7}
 800740c:	b089      	sub	sp, #36	; 0x24
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	4611      	mov	r1, r2
 8007416:	461a      	mov	r2, r3
 8007418:	460b      	mov	r3, r1
 800741a:	71fb      	strb	r3, [r7, #7]
 800741c:	4613      	mov	r3, r2
 800741e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007428:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800742c:	2b00      	cmp	r3, #0
 800742e:	d123      	bne.n	8007478 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007430:	88bb      	ldrh	r3, [r7, #4]
 8007432:	3303      	adds	r3, #3
 8007434:	089b      	lsrs	r3, r3, #2
 8007436:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007438:	2300      	movs	r3, #0
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	e018      	b.n	8007470 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	031a      	lsls	r2, r3, #12
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	4413      	add	r3, r2
 8007446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744a:	461a      	mov	r2, r3
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	3301      	adds	r3, #1
 8007456:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	3301      	adds	r3, #1
 800745c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	3301      	adds	r3, #1
 8007462:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	3301      	adds	r3, #1
 8007468:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	3301      	adds	r3, #1
 800746e:	61bb      	str	r3, [r7, #24]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	429a      	cmp	r2, r3
 8007476:	d3e2      	bcc.n	800743e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3724      	adds	r7, #36	; 0x24
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007486:	b480      	push	{r7}
 8007488:	b08b      	sub	sp, #44	; 0x2c
 800748a:	af00      	add	r7, sp, #0
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	4613      	mov	r3, r2
 8007492:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800749c:	88fb      	ldrh	r3, [r7, #6]
 800749e:	089b      	lsrs	r3, r3, #2
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80074ac:	2300      	movs	r3, #0
 80074ae:	623b      	str	r3, [r7, #32]
 80074b0:	e014      	b.n	80074dc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	601a      	str	r2, [r3, #0]
    pDest++;
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	3301      	adds	r3, #1
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	3301      	adds	r3, #1
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	3301      	adds	r3, #1
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	3301      	adds	r3, #1
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	3301      	adds	r3, #1
 80074da:	623b      	str	r3, [r7, #32]
 80074dc:	6a3a      	ldr	r2, [r7, #32]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d3e6      	bcc.n	80074b2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80074e4:	8bfb      	ldrh	r3, [r7, #30]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01e      	beq.n	8007528 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f4:	461a      	mov	r2, r3
 80074f6:	f107 0310 	add.w	r3, r7, #16
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	fa22 f303 	lsr.w	r3, r2, r3
 800750a:	b2da      	uxtb	r2, r3
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	701a      	strb	r2, [r3, #0]
      i++;
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	3301      	adds	r3, #1
 8007514:	623b      	str	r3, [r7, #32]
      pDest++;
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	3301      	adds	r3, #1
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800751c:	8bfb      	ldrh	r3, [r7, #30]
 800751e:	3b01      	subs	r3, #1
 8007520:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007522:	8bfb      	ldrh	r3, [r7, #30]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1ea      	bne.n	80074fe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800752a:	4618      	mov	r0, r3
 800752c:	372c      	adds	r7, #44	; 0x2c
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d12c      	bne.n	80075ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	db12      	blt.n	800758a <USB_EPSetStall+0x54>
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00f      	beq.n	800758a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	440a      	add	r2, r1
 8007580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007584:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007588:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	0151      	lsls	r1, r2, #5
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	440a      	add	r2, r1
 80075a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e02b      	b.n	8007604 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	db12      	blt.n	80075e4 <USB_EPSetStall+0xae>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00f      	beq.n	80075e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	0151      	lsls	r1, r2, #5
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	440a      	add	r2, r1
 80075fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007602:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007612:	b480      	push	{r7}
 8007614:	b085      	sub	sp, #20
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	785b      	ldrb	r3, [r3, #1]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d128      	bne.n	8007680 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007648:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800764c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	78db      	ldrb	r3, [r3, #3]
 8007652:	2b03      	cmp	r3, #3
 8007654:	d003      	beq.n	800765e <USB_EPClearStall+0x4c>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	78db      	ldrb	r3, [r3, #3]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d138      	bne.n	80076d0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	0151      	lsls	r1, r2, #5
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	440a      	add	r2, r1
 8007674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	e027      	b.n	80076d0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	440a      	add	r2, r1
 8007696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800769a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800769e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	78db      	ldrb	r3, [r3, #3]
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d003      	beq.n	80076b0 <USB_EPClearStall+0x9e>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	78db      	ldrb	r3, [r3, #3]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d10f      	bne.n	80076d0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	0151      	lsls	r1, r2, #5
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	440a      	add	r2, r1
 80076c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007700:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	78fb      	ldrb	r3, [r7, #3]
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007718:	4313      	orrs	r3, r2
 800771a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800772a:	b480      	push	{r7}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007744:	f023 0303 	bic.w	r3, r3, #3
 8007748:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007758:	f023 0302 	bic.w	r3, r3, #2
 800775c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007786:	f023 0303 	bic.w	r3, r3, #3
 800778a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800779a:	f043 0302 	orr.w	r3, r3, #2
 800779e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b085      	sub	sp, #20
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4013      	ands	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077c6:	68fb      	ldr	r3, [r7, #12]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	4013      	ands	r3, r2
 80077f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	0c1b      	lsrs	r3, r3, #16
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	4013      	ands	r3, r2
 800782a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	b29b      	uxth	r3, r3
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4413      	add	r3, r2
 8007854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	4013      	ands	r3, r2
 8007868:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800786a:	68bb      	ldr	r3, [r7, #8]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	fa22 f303 	lsr.w	r3, r2, r3
 80078a8:	01db      	lsls	r3, r3, #7
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80078b2:	78fb      	ldrb	r3, [r7, #3]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	4013      	ands	r3, r2
 80078c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078c6:	68bb      	ldr	r3, [r7, #8]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	371c      	adds	r7, #28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	f003 0301 	and.w	r3, r3, #1
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800790a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800790e:	f023 0307 	bic.w	r3, r3, #7
 8007912:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007926:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	460b      	mov	r3, r1
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	333c      	adds	r3, #60	; 0x3c
 800794e:	3304      	adds	r3, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	4a26      	ldr	r2, [pc, #152]	; (80079f0 <USB_EP0_OutStart+0xb8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d90a      	bls.n	8007972 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800796c:	d101      	bne.n	8007972 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	e037      	b.n	80079e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007978:	461a      	mov	r2, r3
 800797a:	2300      	movs	r3, #0
 800797c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800798c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a0:	f043 0318 	orr.w	r3, r3, #24
 80079a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80079b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80079ba:	7afb      	ldrb	r3, [r7, #11]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d10f      	bne.n	80079e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c6:	461a      	mov	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80079de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	4f54300a 	.word	0x4f54300a

080079f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3301      	adds	r3, #1
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	4a13      	ldr	r2, [pc, #76]	; (8007a54 <USB_CoreReset+0x60>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d901      	bls.n	8007a10 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e01a      	b.n	8007a46 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	daf3      	bge.n	8007a00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	f043 0201 	orr.w	r2, r3, #1
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	4a09      	ldr	r2, [pc, #36]	; (8007a54 <USB_CoreReset+0x60>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d901      	bls.n	8007a38 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e006      	b.n	8007a46 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d0f1      	beq.n	8007a28 <USB_CoreReset+0x34>

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	00030d40 	.word	0x00030d40

08007a58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a68:	f006 f8e8 	bl	800dc3c <USBD_static_malloc>
 8007a6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d105      	bne.n	8007a80 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e066      	b.n	8007b4e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	7c1b      	ldrb	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d119      	bne.n	8007ac4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a94:	2202      	movs	r2, #2
 8007a96:	2181      	movs	r1, #129	; 0x81
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f005 ffac 	bl	800d9f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	2101      	movs	r1, #1
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f005 ffa2 	bl	800d9f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2210      	movs	r2, #16
 8007abe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007ac2:	e016      	b.n	8007af2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ac4:	2340      	movs	r3, #64	; 0x40
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	2181      	movs	r1, #129	; 0x81
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f005 ff93 	bl	800d9f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ad6:	2340      	movs	r3, #64	; 0x40
 8007ad8:	2202      	movs	r2, #2
 8007ada:	2101      	movs	r1, #1
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f005 ff8a 	bl	800d9f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2210      	movs	r2, #16
 8007aee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007af2:	2308      	movs	r3, #8
 8007af4:	2203      	movs	r2, #3
 8007af6:	2182      	movs	r1, #130	; 0x82
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f005 ff7c 	bl	800d9f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	7c1b      	ldrb	r3, [r3, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d109      	bne.n	8007b3c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b32:	2101      	movs	r1, #1
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f006 f84d 	bl	800dbd4 <USBD_LL_PrepareReceive>
 8007b3a:	e007      	b.n	8007b4c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b42:	2340      	movs	r3, #64	; 0x40
 8007b44:	2101      	movs	r1, #1
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f006 f844 	bl	800dbd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b082      	sub	sp, #8
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007b62:	2181      	movs	r1, #129	; 0x81
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f005 ff6c 	bl	800da42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b70:	2101      	movs	r1, #1
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f005 ff65 	bl	800da42 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b80:	2182      	movs	r1, #130	; 0x82
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f005 ff5d 	bl	800da42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00e      	beq.n	8007bc0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f006 f850 	bl	800dc58 <USBD_static_free>
    pdev->pClassData = NULL;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
	...

08007bcc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bdc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e0af      	b.n	8007d54 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d03f      	beq.n	8007c80 <USBD_CDC_Setup+0xb4>
 8007c00:	2b20      	cmp	r3, #32
 8007c02:	f040 809f 	bne.w	8007d44 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	88db      	ldrh	r3, [r3, #6]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d02e      	beq.n	8007c6c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	b25b      	sxtb	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	da16      	bge.n	8007c46 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007c24:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	88d2      	ldrh	r2, [r2, #6]
 8007c2a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	88db      	ldrh	r3, [r3, #6]
 8007c30:	2b07      	cmp	r3, #7
 8007c32:	bf28      	it	cs
 8007c34:	2307      	movcs	r3, #7
 8007c36:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	89fa      	ldrh	r2, [r7, #14]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 fb19 	bl	8009276 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007c44:	e085      	b.n	8007d52 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	785a      	ldrb	r2, [r3, #1]
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	88db      	ldrh	r3, [r3, #6]
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007c5c:	6939      	ldr	r1, [r7, #16]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	88db      	ldrh	r3, [r3, #6]
 8007c62:	461a      	mov	r2, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 fb32 	bl	80092ce <USBD_CtlPrepareRx>
      break;
 8007c6a:	e072      	b.n	8007d52 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	7850      	ldrb	r0, [r2, #1]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	4798      	blx	r3
      break;
 8007c7e:	e068      	b.n	8007d52 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	785b      	ldrb	r3, [r3, #1]
 8007c84:	2b0b      	cmp	r3, #11
 8007c86:	d852      	bhi.n	8007d2e <USBD_CDC_Setup+0x162>
 8007c88:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <USBD_CDC_Setup+0xc4>)
 8007c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8e:	bf00      	nop
 8007c90:	08007cc1 	.word	0x08007cc1
 8007c94:	08007d3d 	.word	0x08007d3d
 8007c98:	08007d2f 	.word	0x08007d2f
 8007c9c:	08007d2f 	.word	0x08007d2f
 8007ca0:	08007d2f 	.word	0x08007d2f
 8007ca4:	08007d2f 	.word	0x08007d2f
 8007ca8:	08007d2f 	.word	0x08007d2f
 8007cac:	08007d2f 	.word	0x08007d2f
 8007cb0:	08007d2f 	.word	0x08007d2f
 8007cb4:	08007d2f 	.word	0x08007d2f
 8007cb8:	08007ceb 	.word	0x08007ceb
 8007cbc:	08007d15 	.word	0x08007d15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d107      	bne.n	8007cdc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ccc:	f107 030a 	add.w	r3, r7, #10
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 face 	bl	8009276 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cda:	e032      	b.n	8007d42 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fa58 	bl	8009194 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ce8:	e02b      	b.n	8007d42 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d107      	bne.n	8007d06 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007cf6:	f107 030d 	add.w	r3, r7, #13
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f001 fab9 	bl	8009276 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d04:	e01d      	b.n	8007d42 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 fa43 	bl	8009194 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	75fb      	strb	r3, [r7, #23]
          break;
 8007d12:	e016      	b.n	8007d42 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d00f      	beq.n	8007d40 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fa36 	bl	8009194 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d2c:	e008      	b.n	8007d40 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 fa2f 	bl	8009194 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d36:	2303      	movs	r3, #3
 8007d38:	75fb      	strb	r3, [r7, #23]
          break;
 8007d3a:	e002      	b.n	8007d42 <USBD_CDC_Setup+0x176>
          break;
 8007d3c:	bf00      	nop
 8007d3e:	e008      	b.n	8007d52 <USBD_CDC_Setup+0x186>
          break;
 8007d40:	bf00      	nop
      }
      break;
 8007d42:	e006      	b.n	8007d52 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f001 fa24 	bl	8009194 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d50:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e04f      	b.n	8007e1e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	3318      	adds	r3, #24
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d029      	beq.n	8007df0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d9c:	78fa      	ldrb	r2, [r7, #3]
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	4613      	mov	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	3318      	adds	r3, #24
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	78f9      	ldrb	r1, [r7, #3]
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	460b      	mov	r3, r1
 8007db4:	00db      	lsls	r3, r3, #3
 8007db6:	1a5b      	subs	r3, r3, r1
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4403      	add	r3, r0
 8007dbc:	3344      	adds	r3, #68	; 0x44
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007dc4:	fb03 f301 	mul.w	r3, r3, r1
 8007dc8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d110      	bne.n	8007df0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007dce:	78fa      	ldrb	r2, [r7, #3]
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	440b      	add	r3, r1
 8007ddc:	3318      	adds	r3, #24
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007de2:	78f9      	ldrb	r1, [r7, #3]
 8007de4:	2300      	movs	r3, #0
 8007de6:	2200      	movs	r2, #0
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f005 fed2 	bl	800db92 <USBD_LL_Transmit>
 8007dee:	e015      	b.n	8007e1c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007e18:	78fa      	ldrb	r2, [r7, #3]
 8007e1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e015      	b.n	8007e74 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f005 fee2 	bl	800dc16 <USBD_LL_GetRxDataSize>
 8007e52:	4602      	mov	r2, r0
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e6e:	4611      	mov	r1, r2
 8007e70:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e8a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e01b      	b.n	8007ece <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d015      	beq.n	8007ecc <USBD_CDC_EP0_RxReady+0x50>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ea6:	2bff      	cmp	r3, #255	; 0xff
 8007ea8:	d010      	beq.n	8007ecc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007eb8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ec0:	b292      	uxth	r2, r2
 8007ec2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	22ff      	movs	r2, #255	; 0xff
 8007ec8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2243      	movs	r2, #67	; 0x43
 8007ee4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007ee6:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	20000094 	.word	0x20000094

08007ef8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2243      	movs	r2, #67	; 0x43
 8007f04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007f06:	4b03      	ldr	r3, [pc, #12]	; (8007f14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	20000050 	.word	0x20000050

08007f18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2243      	movs	r2, #67	; 0x43
 8007f24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007f26:	4b03      	ldr	r3, [pc, #12]	; (8007f34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	200000d8 	.word	0x200000d8

08007f38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	220a      	movs	r2, #10
 8007f44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f46:	4b03      	ldr	r3, [pc, #12]	; (8007f54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	2000000c 	.word	0x2000000c

08007f58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e004      	b.n	8007f76 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b087      	sub	sp, #28
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	60b9      	str	r1, [r7, #8]
 8007f8c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f94:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e008      	b.n	8007fb2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b085      	sub	sp, #20
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e004      	b.n	8007fe4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ffe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008000:	2301      	movs	r3, #1
 8008002:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800800e:	2303      	movs	r3, #3
 8008010:	e01a      	b.n	8008048 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008018:	2b00      	cmp	r3, #0
 800801a:	d114      	bne.n	8008046 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2201      	movs	r2, #1
 8008020:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800803a:	2181      	movs	r1, #129	; 0x81
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f005 fda8 	bl	800db92 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008046:	7bfb      	ldrb	r3, [r7, #15]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800805e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800806a:	2303      	movs	r3, #3
 800806c:	e016      	b.n	800809c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	7c1b      	ldrb	r3, [r3, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d109      	bne.n	800808a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800807c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008080:	2101      	movs	r1, #1
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f005 fda6 	bl	800dbd4 <USBD_LL_PrepareReceive>
 8008088:	e007      	b.n	800809a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008090:	2340      	movs	r3, #64	; 0x40
 8008092:	2101      	movs	r1, #1
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f005 fd9d 	bl	800dbd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	4613      	mov	r3, r2
 80080b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e01f      	b.n	80080fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	79fa      	ldrb	r2, [r7, #7]
 80080ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f005 fc19 	bl	800d928 <USBD_LL_Init>
 80080f6:	4603      	mov	r3, r0
 80080f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008118:	2303      	movs	r3, #3
 800811a:	e016      	b.n	800814a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008138:	f107 020e 	add.w	r2, r7, #14
 800813c:	4610      	mov	r0, r2
 800813e:	4798      	blx	r3
 8008140:	4602      	mov	r2, r0
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f005 fc30 	bl	800d9c0 <USBD_LL_Start>
 8008160:	4603      	mov	r3, r0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800818c:	2303      	movs	r3, #3
 800818e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008196:	2b00      	cmp	r3, #0
 8008198:	d009      	beq.n	80081ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	4611      	mov	r1, r2
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
 80081aa:	4603      	mov	r3, r0
 80081ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d007      	beq.n	80081de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	78fa      	ldrb	r2, [r7, #3]
 80081d8:	4611      	mov	r1, r2
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	4798      	blx	r3
  }

  return USBD_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 ff90 	bl	8009120 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800820e:	461a      	mov	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	2b02      	cmp	r3, #2
 8008222:	d01a      	beq.n	800825a <USBD_LL_SetupStage+0x72>
 8008224:	2b02      	cmp	r3, #2
 8008226:	d822      	bhi.n	800826e <USBD_LL_SetupStage+0x86>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <USBD_LL_SetupStage+0x4a>
 800822c:	2b01      	cmp	r3, #1
 800822e:	d00a      	beq.n	8008246 <USBD_LL_SetupStage+0x5e>
 8008230:	e01d      	b.n	800826e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa62 	bl	8008704 <USBD_StdDevReq>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
      break;
 8008244:	e020      	b.n	8008288 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fac6 	bl	80087e0 <USBD_StdItfReq>
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]
      break;
 8008258:	e016      	b.n	8008288 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fb05 	bl	8008872 <USBD_StdEPReq>
 8008268:	4603      	mov	r3, r0
 800826a:	73fb      	strb	r3, [r7, #15]
      break;
 800826c:	e00c      	b.n	8008288 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008274:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008278:	b2db      	uxtb	r3, r3
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f005 fbff 	bl	800da80 <USBD_LL_StallEP>
 8008282:	4603      	mov	r3, r0
 8008284:	73fb      	strb	r3, [r7, #15]
      break;
 8008286:	bf00      	nop
  }

  return ret;
 8008288:	7bfb      	ldrb	r3, [r7, #15]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b086      	sub	sp, #24
 8008296:	af00      	add	r7, sp, #0
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	460b      	mov	r3, r1
 800829c:	607a      	str	r2, [r7, #4]
 800829e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80082a0:	7afb      	ldrb	r3, [r7, #11]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d138      	bne.n	8008318 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80082ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d14a      	bne.n	800834e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d913      	bls.n	80082ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	1ad2      	subs	r2, r2, r3
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	4293      	cmp	r3, r2
 80082dc:	bf28      	it	cs
 80082de:	4613      	movcs	r3, r2
 80082e0:	461a      	mov	r2, r3
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f001 f80f 	bl	8009308 <USBD_CtlContinueRx>
 80082ea:	e030      	b.n	800834e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d10b      	bne.n	8008310 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f001 f80a 	bl	800932a <USBD_CtlSendStatus>
 8008316:	e01a      	b.n	800834e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b03      	cmp	r3, #3
 8008322:	d114      	bne.n	800834e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00e      	beq.n	800834e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	7afa      	ldrb	r2, [r7, #11]
 800833a:	4611      	mov	r1, r2
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	4798      	blx	r3
 8008340:	4603      	mov	r3, r0
 8008342:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008344:	7dfb      	ldrb	r3, [r7, #23]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	e000      	b.n	8008350 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	460b      	mov	r3, r1
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008366:	7afb      	ldrb	r3, [r7, #11]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d16b      	bne.n	8008444 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3314      	adds	r3, #20
 8008370:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008378:	2b02      	cmp	r3, #2
 800837a:	d156      	bne.n	800842a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	429a      	cmp	r2, r3
 8008386:	d914      	bls.n	80083b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	1ad2      	subs	r2, r2, r3
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	461a      	mov	r2, r3
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 ff84 	bl	80092ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083a4:	2300      	movs	r3, #0
 80083a6:	2200      	movs	r2, #0
 80083a8:	2100      	movs	r1, #0
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f005 fc12 	bl	800dbd4 <USBD_LL_PrepareReceive>
 80083b0:	e03b      	b.n	800842a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d11c      	bne.n	80083f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d316      	bcc.n	80083f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d20f      	bcs.n	80083f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083d8:	2200      	movs	r2, #0
 80083da:	2100      	movs	r1, #0
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 ff65 	bl	80092ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083ea:	2300      	movs	r3, #0
 80083ec:	2200      	movs	r2, #0
 80083ee:	2100      	movs	r1, #0
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f005 fbef 	bl	800dbd4 <USBD_LL_PrepareReceive>
 80083f6:	e018      	b.n	800842a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b03      	cmp	r3, #3
 8008402:	d10b      	bne.n	800841c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800841c:	2180      	movs	r1, #128	; 0x80
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f005 fb2e 	bl	800da80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 ff93 	bl	8009350 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008430:	2b01      	cmp	r3, #1
 8008432:	d122      	bne.n	800847a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f7ff fe98 	bl	800816a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008442:	e01a      	b.n	800847a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b03      	cmp	r3, #3
 800844e:	d114      	bne.n	800847a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00e      	beq.n	800847a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	7afa      	ldrb	r2, [r7, #11]
 8008466:	4611      	mov	r1, r2
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	4798      	blx	r3
 800846c:	4603      	mov	r3, r0
 800846e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	e000      	b.n	800847c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e02f      	b.n	8008518 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00f      	beq.n	80084e2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	6852      	ldr	r2, [r2, #4]
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	4611      	mov	r1, r2
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084e2:	2340      	movs	r3, #64	; 0x40
 80084e4:	2200      	movs	r2, #0
 80084e6:	2100      	movs	r1, #0
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f005 fa84 	bl	800d9f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2240      	movs	r2, #64	; 0x40
 80084fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084fe:	2340      	movs	r3, #64	; 0x40
 8008500:	2200      	movs	r2, #0
 8008502:	2180      	movs	r1, #128	; 0x80
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f005 fa76 	bl	800d9f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2240      	movs	r2, #64	; 0x40
 8008514:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854e:	b2da      	uxtb	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2204      	movs	r2, #4
 800855a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b04      	cmp	r3, #4
 800857e:	d106      	bne.n	800858e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008586:	b2da      	uxtb	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e012      	b.n	80085d8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d10b      	bne.n	80085d6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e014      	b.n	8008624 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b03      	cmp	r3, #3
 8008604:	d10d      	bne.n	8008622 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d007      	beq.n	8008622 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	4611      	mov	r1, r2
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008642:	2303      	movs	r3, #3
 8008644:	e014      	b.n	8008670 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b03      	cmp	r3, #3
 8008650:	d10d      	bne.n	800866e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	78fa      	ldrb	r2, [r7, #3]
 8008668:	4611      	mov	r1, r2
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d009      	beq.n	80086bc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	6852      	ldr	r2, [r2, #4]
 80086b4:	b2d2      	uxtb	r2, r2
 80086b6:	4611      	mov	r1, r2
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	4798      	blx	r3
  }

  return USBD_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b087      	sub	sp, #28
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	3301      	adds	r3, #1
 80086dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086e4:	8a3b      	ldrh	r3, [r7, #16]
 80086e6:	021b      	lsls	r3, r3, #8
 80086e8:	b21a      	sxth	r2, r3
 80086ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	b21b      	sxth	r3, r3
 80086f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086f4:	89fb      	ldrh	r3, [r7, #14]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
	...

08008704 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800871a:	2b40      	cmp	r3, #64	; 0x40
 800871c:	d005      	beq.n	800872a <USBD_StdDevReq+0x26>
 800871e:	2b40      	cmp	r3, #64	; 0x40
 8008720:	d853      	bhi.n	80087ca <USBD_StdDevReq+0xc6>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <USBD_StdDevReq+0x3a>
 8008726:	2b20      	cmp	r3, #32
 8008728:	d14f      	bne.n	80087ca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	4798      	blx	r3
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]
      break;
 800873c:	e04a      	b.n	80087d4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b09      	cmp	r3, #9
 8008744:	d83b      	bhi.n	80087be <USBD_StdDevReq+0xba>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <USBD_StdDevReq+0x48>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	080087a1 	.word	0x080087a1
 8008750:	080087b5 	.word	0x080087b5
 8008754:	080087bf 	.word	0x080087bf
 8008758:	080087ab 	.word	0x080087ab
 800875c:	080087bf 	.word	0x080087bf
 8008760:	0800877f 	.word	0x0800877f
 8008764:	08008775 	.word	0x08008775
 8008768:	080087bf 	.word	0x080087bf
 800876c:	08008797 	.word	0x08008797
 8008770:	08008789 	.word	0x08008789
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f9de 	bl	8008b38 <USBD_GetDescriptor>
          break;
 800877c:	e024      	b.n	80087c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fb43 	bl	8008e0c <USBD_SetAddress>
          break;
 8008786:	e01f      	b.n	80087c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fb82 	bl	8008e94 <USBD_SetConfig>
 8008790:	4603      	mov	r3, r0
 8008792:	73fb      	strb	r3, [r7, #15]
          break;
 8008794:	e018      	b.n	80087c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fc21 	bl	8008fe0 <USBD_GetConfig>
          break;
 800879e:	e013      	b.n	80087c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fc52 	bl	800904c <USBD_GetStatus>
          break;
 80087a8:	e00e      	b.n	80087c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fc81 	bl	80090b4 <USBD_SetFeature>
          break;
 80087b2:	e009      	b.n	80087c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fc90 	bl	80090dc <USBD_ClrFeature>
          break;
 80087bc:	e004      	b.n	80087c8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fce7 	bl	8009194 <USBD_CtlError>
          break;
 80087c6:	bf00      	nop
      }
      break;
 80087c8:	e004      	b.n	80087d4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fce1 	bl	8009194 <USBD_CtlError>
      break;
 80087d2:	bf00      	nop
  }

  return ret;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop

080087e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087f6:	2b40      	cmp	r3, #64	; 0x40
 80087f8:	d005      	beq.n	8008806 <USBD_StdItfReq+0x26>
 80087fa:	2b40      	cmp	r3, #64	; 0x40
 80087fc:	d82f      	bhi.n	800885e <USBD_StdItfReq+0x7e>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <USBD_StdItfReq+0x26>
 8008802:	2b20      	cmp	r3, #32
 8008804:	d12b      	bne.n	800885e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800880c:	b2db      	uxtb	r3, r3
 800880e:	3b01      	subs	r3, #1
 8008810:	2b02      	cmp	r3, #2
 8008812:	d81d      	bhi.n	8008850 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	889b      	ldrh	r3, [r3, #4]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b01      	cmp	r3, #1
 800881c:	d813      	bhi.n	8008846 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	4798      	blx	r3
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	88db      	ldrh	r3, [r3, #6]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d110      	bne.n	800885a <USBD_StdItfReq+0x7a>
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10d      	bne.n	800885a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fd73 	bl	800932a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008844:	e009      	b.n	800885a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fca3 	bl	8009194 <USBD_CtlError>
          break;
 800884e:	e004      	b.n	800885a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fc9e 	bl	8009194 <USBD_CtlError>
          break;
 8008858:	e000      	b.n	800885c <USBD_StdItfReq+0x7c>
          break;
 800885a:	bf00      	nop
      }
      break;
 800885c:	e004      	b.n	8008868 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fc97 	bl	8009194 <USBD_CtlError>
      break;
 8008866:	bf00      	nop
  }

  return ret;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	889b      	ldrh	r3, [r3, #4]
 8008884:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800888e:	2b40      	cmp	r3, #64	; 0x40
 8008890:	d007      	beq.n	80088a2 <USBD_StdEPReq+0x30>
 8008892:	2b40      	cmp	r3, #64	; 0x40
 8008894:	f200 8145 	bhi.w	8008b22 <USBD_StdEPReq+0x2b0>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00c      	beq.n	80088b6 <USBD_StdEPReq+0x44>
 800889c:	2b20      	cmp	r3, #32
 800889e:	f040 8140 	bne.w	8008b22 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	4798      	blx	r3
 80088b0:	4603      	mov	r3, r0
 80088b2:	73fb      	strb	r3, [r7, #15]
      break;
 80088b4:	e13a      	b.n	8008b2c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d007      	beq.n	80088ce <USBD_StdEPReq+0x5c>
 80088be:	2b03      	cmp	r3, #3
 80088c0:	f300 8129 	bgt.w	8008b16 <USBD_StdEPReq+0x2a4>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d07f      	beq.n	80089c8 <USBD_StdEPReq+0x156>
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d03c      	beq.n	8008946 <USBD_StdEPReq+0xd4>
 80088cc:	e123      	b.n	8008b16 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d002      	beq.n	80088e0 <USBD_StdEPReq+0x6e>
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d016      	beq.n	800890c <USBD_StdEPReq+0x9a>
 80088de:	e02c      	b.n	800893a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00d      	beq.n	8008902 <USBD_StdEPReq+0x90>
 80088e6:	7bbb      	ldrb	r3, [r7, #14]
 80088e8:	2b80      	cmp	r3, #128	; 0x80
 80088ea:	d00a      	beq.n	8008902 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f005 f8c5 	bl	800da80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088f6:	2180      	movs	r1, #128	; 0x80
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f005 f8c1 	bl	800da80 <USBD_LL_StallEP>
 80088fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008900:	e020      	b.n	8008944 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fc45 	bl	8009194 <USBD_CtlError>
              break;
 800890a:	e01b      	b.n	8008944 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	885b      	ldrh	r3, [r3, #2]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10e      	bne.n	8008932 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00b      	beq.n	8008932 <USBD_StdEPReq+0xc0>
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b80      	cmp	r3, #128	; 0x80
 800891e:	d008      	beq.n	8008932 <USBD_StdEPReq+0xc0>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	88db      	ldrh	r3, [r3, #6]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d104      	bne.n	8008932 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f005 f8a7 	bl	800da80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fcf9 	bl	800932a <USBD_CtlSendStatus>

              break;
 8008938:	e004      	b.n	8008944 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fc29 	bl	8009194 <USBD_CtlError>
              break;
 8008942:	bf00      	nop
          }
          break;
 8008944:	e0ec      	b.n	8008b20 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b02      	cmp	r3, #2
 8008950:	d002      	beq.n	8008958 <USBD_StdEPReq+0xe6>
 8008952:	2b03      	cmp	r3, #3
 8008954:	d016      	beq.n	8008984 <USBD_StdEPReq+0x112>
 8008956:	e030      	b.n	80089ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008958:	7bbb      	ldrb	r3, [r7, #14]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00d      	beq.n	800897a <USBD_StdEPReq+0x108>
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	2b80      	cmp	r3, #128	; 0x80
 8008962:	d00a      	beq.n	800897a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008964:	7bbb      	ldrb	r3, [r7, #14]
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f005 f889 	bl	800da80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800896e:	2180      	movs	r1, #128	; 0x80
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f005 f885 	bl	800da80 <USBD_LL_StallEP>
 8008976:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008978:	e025      	b.n	80089c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fc09 	bl	8009194 <USBD_CtlError>
              break;
 8008982:	e020      	b.n	80089c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	885b      	ldrh	r3, [r3, #2]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d11b      	bne.n	80089c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008992:	2b00      	cmp	r3, #0
 8008994:	d004      	beq.n	80089a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f005 f88f 	bl	800dabe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fcc2 	bl	800932a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	4798      	blx	r3
 80089b4:	4603      	mov	r3, r0
 80089b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80089b8:	e004      	b.n	80089c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fbe9 	bl	8009194 <USBD_CtlError>
              break;
 80089c2:	e000      	b.n	80089c6 <USBD_StdEPReq+0x154>
              break;
 80089c4:	bf00      	nop
          }
          break;
 80089c6:	e0ab      	b.n	8008b20 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d002      	beq.n	80089da <USBD_StdEPReq+0x168>
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d032      	beq.n	8008a3e <USBD_StdEPReq+0x1cc>
 80089d8:	e097      	b.n	8008b0a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d007      	beq.n	80089f0 <USBD_StdEPReq+0x17e>
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b80      	cmp	r3, #128	; 0x80
 80089e4:	d004      	beq.n	80089f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fbd3 	bl	8009194 <USBD_CtlError>
                break;
 80089ee:	e091      	b.n	8008b14 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	da0b      	bge.n	8008a10 <USBD_StdEPReq+0x19e>
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089fe:	4613      	mov	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	3310      	adds	r3, #16
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	e00b      	b.n	8008a28 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	4413      	add	r3, r2
 8008a26:	3304      	adds	r3, #4
 8008a28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2202      	movs	r2, #2
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fc1d 	bl	8009276 <USBD_CtlSendData>
              break;
 8008a3c:	e06a      	b.n	8008b14 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	da11      	bge.n	8008a6a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	f003 020f 	and.w	r2, r3, #15
 8008a4c:	6879      	ldr	r1, [r7, #4]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	440b      	add	r3, r1
 8008a58:	3324      	adds	r3, #36	; 0x24
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d117      	bne.n	8008a90 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fb96 	bl	8009194 <USBD_CtlError>
                  break;
 8008a68:	e054      	b.n	8008b14 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	f003 020f 	and.w	r2, r3, #15
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d104      	bne.n	8008a90 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fb83 	bl	8009194 <USBD_CtlError>
                  break;
 8008a8e:	e041      	b.n	8008b14 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	da0b      	bge.n	8008ab0 <USBD_StdEPReq+0x23e>
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	3310      	adds	r3, #16
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	4413      	add	r3, r2
 8008aac:	3304      	adds	r3, #4
 8008aae:	e00b      	b.n	8008ac8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <USBD_StdEPReq+0x264>
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b80      	cmp	r3, #128	; 0x80
 8008ad4:	d103      	bne.n	8008ade <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	e00e      	b.n	8008afc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f005 f80a 	bl	800dafc <USBD_LL_IsStallEP>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2201      	movs	r2, #1
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	e002      	b.n	8008afc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2202      	movs	r2, #2
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fbb7 	bl	8009276 <USBD_CtlSendData>
              break;
 8008b08:	e004      	b.n	8008b14 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fb41 	bl	8009194 <USBD_CtlError>
              break;
 8008b12:	bf00      	nop
          }
          break;
 8008b14:	e004      	b.n	8008b20 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fb3b 	bl	8009194 <USBD_CtlError>
          break;
 8008b1e:	bf00      	nop
      }
      break;
 8008b20:	e004      	b.n	8008b2c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fb35 	bl	8009194 <USBD_CtlError>
      break;
 8008b2a:	bf00      	nop
  }

  return ret;
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	0a1b      	lsrs	r3, r3, #8
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	3b01      	subs	r3, #1
 8008b58:	2b06      	cmp	r3, #6
 8008b5a:	f200 8128 	bhi.w	8008dae <USBD_GetDescriptor+0x276>
 8008b5e:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <USBD_GetDescriptor+0x2c>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008b81 	.word	0x08008b81
 8008b68:	08008b99 	.word	0x08008b99
 8008b6c:	08008bd9 	.word	0x08008bd9
 8008b70:	08008daf 	.word	0x08008daf
 8008b74:	08008daf 	.word	0x08008daf
 8008b78:	08008d4f 	.word	0x08008d4f
 8008b7c:	08008d7b 	.word	0x08008d7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	7c12      	ldrb	r2, [r2, #16]
 8008b8c:	f107 0108 	add.w	r1, r7, #8
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
 8008b94:	60f8      	str	r0, [r7, #12]
      break;
 8008b96:	e112      	b.n	8008dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	7c1b      	ldrb	r3, [r3, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10d      	bne.n	8008bbc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba8:	f107 0208 	add.w	r2, r7, #8
 8008bac:	4610      	mov	r0, r2
 8008bae:	4798      	blx	r3
 8008bb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bba:	e100      	b.n	8008dbe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	f107 0208 	add.w	r2, r7, #8
 8008bc8:	4610      	mov	r0, r2
 8008bca:	4798      	blx	r3
 8008bcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	701a      	strb	r2, [r3, #0]
      break;
 8008bd6:	e0f2      	b.n	8008dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	885b      	ldrh	r3, [r3, #2]
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	f200 80ac 	bhi.w	8008d3c <USBD_GetDescriptor+0x204>
 8008be4:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <USBD_GetDescriptor+0xb4>)
 8008be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bea:	bf00      	nop
 8008bec:	08008c05 	.word	0x08008c05
 8008bf0:	08008c39 	.word	0x08008c39
 8008bf4:	08008c6d 	.word	0x08008c6d
 8008bf8:	08008ca1 	.word	0x08008ca1
 8008bfc:	08008cd5 	.word	0x08008cd5
 8008c00:	08008d09 	.word	0x08008d09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00b      	beq.n	8008c28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	7c12      	ldrb	r2, [r2, #16]
 8008c1c:	f107 0108 	add.w	r1, r7, #8
 8008c20:	4610      	mov	r0, r2
 8008c22:	4798      	blx	r3
 8008c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c26:	e091      	b.n	8008d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fab2 	bl	8009194 <USBD_CtlError>
            err++;
 8008c30:	7afb      	ldrb	r3, [r7, #11]
 8008c32:	3301      	adds	r3, #1
 8008c34:	72fb      	strb	r3, [r7, #11]
          break;
 8008c36:	e089      	b.n	8008d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00b      	beq.n	8008c5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	7c12      	ldrb	r2, [r2, #16]
 8008c50:	f107 0108 	add.w	r1, r7, #8
 8008c54:	4610      	mov	r0, r2
 8008c56:	4798      	blx	r3
 8008c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c5a:	e077      	b.n	8008d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fa98 	bl	8009194 <USBD_CtlError>
            err++;
 8008c64:	7afb      	ldrb	r3, [r7, #11]
 8008c66:	3301      	adds	r3, #1
 8008c68:	72fb      	strb	r3, [r7, #11]
          break;
 8008c6a:	e06f      	b.n	8008d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00b      	beq.n	8008c90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	7c12      	ldrb	r2, [r2, #16]
 8008c84:	f107 0108 	add.w	r1, r7, #8
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4798      	blx	r3
 8008c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c8e:	e05d      	b.n	8008d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa7e 	bl	8009194 <USBD_CtlError>
            err++;
 8008c98:	7afb      	ldrb	r3, [r7, #11]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c9e:	e055      	b.n	8008d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00b      	beq.n	8008cc4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	7c12      	ldrb	r2, [r2, #16]
 8008cb8:	f107 0108 	add.w	r1, r7, #8
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4798      	blx	r3
 8008cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cc2:	e043      	b.n	8008d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa64 	bl	8009194 <USBD_CtlError>
            err++;
 8008ccc:	7afb      	ldrb	r3, [r7, #11]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008cd2:	e03b      	b.n	8008d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00b      	beq.n	8008cf8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	7c12      	ldrb	r2, [r2, #16]
 8008cec:	f107 0108 	add.w	r1, r7, #8
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	4798      	blx	r3
 8008cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cf6:	e029      	b.n	8008d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa4a 	bl	8009194 <USBD_CtlError>
            err++;
 8008d00:	7afb      	ldrb	r3, [r7, #11]
 8008d02:	3301      	adds	r3, #1
 8008d04:	72fb      	strb	r3, [r7, #11]
          break;
 8008d06:	e021      	b.n	8008d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00b      	beq.n	8008d2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	7c12      	ldrb	r2, [r2, #16]
 8008d20:	f107 0108 	add.w	r1, r7, #8
 8008d24:	4610      	mov	r0, r2
 8008d26:	4798      	blx	r3
 8008d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d2a:	e00f      	b.n	8008d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fa30 	bl	8009194 <USBD_CtlError>
            err++;
 8008d34:	7afb      	ldrb	r3, [r7, #11]
 8008d36:	3301      	adds	r3, #1
 8008d38:	72fb      	strb	r3, [r7, #11]
          break;
 8008d3a:	e007      	b.n	8008d4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa28 	bl	8009194 <USBD_CtlError>
          err++;
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	3301      	adds	r3, #1
 8008d48:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008d4a:	bf00      	nop
      }
      break;
 8008d4c:	e037      	b.n	8008dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	7c1b      	ldrb	r3, [r3, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d109      	bne.n	8008d6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5e:	f107 0208 	add.w	r2, r7, #8
 8008d62:	4610      	mov	r0, r2
 8008d64:	4798      	blx	r3
 8008d66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d68:	e029      	b.n	8008dbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fa11 	bl	8009194 <USBD_CtlError>
        err++;
 8008d72:	7afb      	ldrb	r3, [r7, #11]
 8008d74:	3301      	adds	r3, #1
 8008d76:	72fb      	strb	r3, [r7, #11]
      break;
 8008d78:	e021      	b.n	8008dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	7c1b      	ldrb	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10d      	bne.n	8008d9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8a:	f107 0208 	add.w	r2, r7, #8
 8008d8e:	4610      	mov	r0, r2
 8008d90:	4798      	blx	r3
 8008d92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3301      	adds	r3, #1
 8008d98:	2207      	movs	r2, #7
 8008d9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d9c:	e00f      	b.n	8008dbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f9f7 	bl	8009194 <USBD_CtlError>
        err++;
 8008da6:	7afb      	ldrb	r3, [r7, #11]
 8008da8:	3301      	adds	r3, #1
 8008daa:	72fb      	strb	r3, [r7, #11]
      break;
 8008dac:	e007      	b.n	8008dbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f9ef 	bl	8009194 <USBD_CtlError>
      err++;
 8008db6:	7afb      	ldrb	r3, [r7, #11]
 8008db8:	3301      	adds	r3, #1
 8008dba:	72fb      	strb	r3, [r7, #11]
      break;
 8008dbc:	bf00      	nop
  }

  if (err != 0U)
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d11e      	bne.n	8008e02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	88db      	ldrh	r3, [r3, #6]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d016      	beq.n	8008dfa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008dcc:	893b      	ldrh	r3, [r7, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00e      	beq.n	8008df0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	88da      	ldrh	r2, [r3, #6]
 8008dd6:	893b      	ldrh	r3, [r7, #8]
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	bf28      	it	cs
 8008ddc:	4613      	movcs	r3, r2
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008de2:	893b      	ldrh	r3, [r7, #8]
 8008de4:	461a      	mov	r2, r3
 8008de6:	68f9      	ldr	r1, [r7, #12]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fa44 	bl	8009276 <USBD_CtlSendData>
 8008dee:	e009      	b.n	8008e04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f9ce 	bl	8009194 <USBD_CtlError>
 8008df8:	e004      	b.n	8008e04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fa95 	bl	800932a <USBD_CtlSendStatus>
 8008e00:	e000      	b.n	8008e04 <USBD_GetDescriptor+0x2cc>
    return;
 8008e02:	bf00      	nop
  }
}
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop

08008e0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	889b      	ldrh	r3, [r3, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d131      	bne.n	8008e82 <USBD_SetAddress+0x76>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	88db      	ldrh	r3, [r3, #6]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d12d      	bne.n	8008e82 <USBD_SetAddress+0x76>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	885b      	ldrh	r3, [r3, #2]
 8008e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8008e2c:	d829      	bhi.n	8008e82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	885b      	ldrh	r3, [r3, #2]
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d104      	bne.n	8008e50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f9a3 	bl	8009194 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4e:	e01d      	b.n	8008e8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	7bfa      	ldrb	r2, [r7, #15]
 8008e54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f004 fe79 	bl	800db54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa61 	bl	800932a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d004      	beq.n	8008e78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2202      	movs	r2, #2
 8008e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e76:	e009      	b.n	8008e8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e80:	e004      	b.n	8008e8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f985 	bl	8009194 <USBD_CtlError>
  }
}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	885b      	ldrh	r3, [r3, #2]
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	4b4c      	ldr	r3, [pc, #304]	; (8008fdc <USBD_SetConfig+0x148>)
 8008eaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008eac:	4b4b      	ldr	r3, [pc, #300]	; (8008fdc <USBD_SetConfig+0x148>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d905      	bls.n	8008ec0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f96c 	bl	8009194 <USBD_CtlError>
    return USBD_FAIL;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e088      	b.n	8008fd2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d002      	beq.n	8008ed2 <USBD_SetConfig+0x3e>
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d025      	beq.n	8008f1c <USBD_SetConfig+0x88>
 8008ed0:	e071      	b.n	8008fb6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ed2:	4b42      	ldr	r3, [pc, #264]	; (8008fdc <USBD_SetConfig+0x148>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d01c      	beq.n	8008f14 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008eda:	4b40      	ldr	r3, [pc, #256]	; (8008fdc <USBD_SetConfig+0x148>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ee4:	4b3d      	ldr	r3, [pc, #244]	; (8008fdc <USBD_SetConfig+0x148>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff f948 	bl	8008180 <USBD_SetClassConfig>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d004      	beq.n	8008f04 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f949 	bl	8009194 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f02:	e065      	b.n	8008fd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fa10 	bl	800932a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2203      	movs	r2, #3
 8008f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f12:	e05d      	b.n	8008fd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa08 	bl	800932a <USBD_CtlSendStatus>
      break;
 8008f1a:	e059      	b.n	8008fd0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f1c:	4b2f      	ldr	r3, [pc, #188]	; (8008fdc <USBD_SetConfig+0x148>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d112      	bne.n	8008f4a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008f2c:	4b2b      	ldr	r3, [pc, #172]	; (8008fdc <USBD_SetConfig+0x148>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	461a      	mov	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f36:	4b29      	ldr	r3, [pc, #164]	; (8008fdc <USBD_SetConfig+0x148>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff f93b 	bl	80081b8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f9f1 	bl	800932a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f48:	e042      	b.n	8008fd0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008f4a:	4b24      	ldr	r3, [pc, #144]	; (8008fdc <USBD_SetConfig+0x148>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d02a      	beq.n	8008fae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7ff f929 	bl	80081b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f66:	4b1d      	ldr	r3, [pc, #116]	; (8008fdc <USBD_SetConfig+0x148>)
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f70:	4b1a      	ldr	r3, [pc, #104]	; (8008fdc <USBD_SetConfig+0x148>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff f902 	bl	8008180 <USBD_SetClassConfig>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00f      	beq.n	8008fa6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f903 	bl	8009194 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	4619      	mov	r1, r3
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff f90e 	bl	80081b8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008fa4:	e014      	b.n	8008fd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f9bf 	bl	800932a <USBD_CtlSendStatus>
      break;
 8008fac:	e010      	b.n	8008fd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f9bb 	bl	800932a <USBD_CtlSendStatus>
      break;
 8008fb4:	e00c      	b.n	8008fd0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f8eb 	bl	8009194 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fbe:	4b07      	ldr	r3, [pc, #28]	; (8008fdc <USBD_SetConfig+0x148>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff f8f7 	bl	80081b8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fce:	bf00      	nop
  }

  return ret;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	200005f4 	.word	0x200005f4

08008fe0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	88db      	ldrh	r3, [r3, #6]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d004      	beq.n	8008ffc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f8cd 	bl	8009194 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ffa:	e023      	b.n	8009044 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b02      	cmp	r3, #2
 8009006:	dc02      	bgt.n	800900e <USBD_GetConfig+0x2e>
 8009008:	2b00      	cmp	r3, #0
 800900a:	dc03      	bgt.n	8009014 <USBD_GetConfig+0x34>
 800900c:	e015      	b.n	800903a <USBD_GetConfig+0x5a>
 800900e:	2b03      	cmp	r3, #3
 8009010:	d00b      	beq.n	800902a <USBD_GetConfig+0x4a>
 8009012:	e012      	b.n	800903a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3308      	adds	r3, #8
 800901e:	2201      	movs	r2, #1
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f927 	bl	8009276 <USBD_CtlSendData>
        break;
 8009028:	e00c      	b.n	8009044 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	3304      	adds	r3, #4
 800902e:	2201      	movs	r2, #1
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f91f 	bl	8009276 <USBD_CtlSendData>
        break;
 8009038:	e004      	b.n	8009044 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f8a9 	bl	8009194 <USBD_CtlError>
        break;
 8009042:	bf00      	nop
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800905c:	b2db      	uxtb	r3, r3
 800905e:	3b01      	subs	r3, #1
 8009060:	2b02      	cmp	r3, #2
 8009062:	d81e      	bhi.n	80090a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	88db      	ldrh	r3, [r3, #6]
 8009068:	2b02      	cmp	r3, #2
 800906a:	d004      	beq.n	8009076 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f890 	bl	8009194 <USBD_CtlError>
        break;
 8009074:	e01a      	b.n	80090ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009082:	2b00      	cmp	r3, #0
 8009084:	d005      	beq.n	8009092 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f043 0202 	orr.w	r2, r3, #2
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	330c      	adds	r3, #12
 8009096:	2202      	movs	r2, #2
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f8eb 	bl	8009276 <USBD_CtlSendData>
      break;
 80090a0:	e004      	b.n	80090ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f875 	bl	8009194 <USBD_CtlError>
      break;
 80090aa:	bf00      	nop
  }
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	885b      	ldrh	r3, [r3, #2]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d106      	bne.n	80090d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f92b 	bl	800932a <USBD_CtlSendStatus>
  }
}
 80090d4:	bf00      	nop
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d80b      	bhi.n	800910c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	885b      	ldrh	r3, [r3, #2]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d10c      	bne.n	8009116 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f910 	bl	800932a <USBD_CtlSendStatus>
      }
      break;
 800910a:	e004      	b.n	8009116 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f840 	bl	8009194 <USBD_CtlError>
      break;
 8009114:	e000      	b.n	8009118 <USBD_ClrFeature+0x3c>
      break;
 8009116:	bf00      	nop
  }
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	781a      	ldrb	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3301      	adds	r3, #1
 800913a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	781a      	ldrb	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3301      	adds	r3, #1
 8009148:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7ff fabb 	bl	80086c6 <SWAPBYTE>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3301      	adds	r3, #1
 800915c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3301      	adds	r3, #1
 8009162:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7ff faae 	bl	80086c6 <SWAPBYTE>
 800916a:	4603      	mov	r3, r0
 800916c:	461a      	mov	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3301      	adds	r3, #1
 8009176:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3301      	adds	r3, #1
 800917c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff faa1 	bl	80086c6 <SWAPBYTE>
 8009184:	4603      	mov	r3, r0
 8009186:	461a      	mov	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	80da      	strh	r2, [r3, #6]
}
 800918c:	bf00      	nop
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800919e:	2180      	movs	r1, #128	; 0x80
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f004 fc6d 	bl	800da80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091a6:	2100      	movs	r1, #0
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f004 fc69 	bl	800da80 <USBD_LL_StallEP>
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b086      	sub	sp, #24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d036      	beq.n	800923a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091d0:	6938      	ldr	r0, [r7, #16]
 80091d2:	f000 f836 	bl	8009242 <USBD_GetLen>
 80091d6:	4603      	mov	r3, r0
 80091d8:	3301      	adds	r3, #1
 80091da:	b29b      	uxth	r3, r3
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	b29a      	uxth	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091e4:	7dfb      	ldrb	r3, [r7, #23]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	4413      	add	r3, r2
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	7812      	ldrb	r2, [r2, #0]
 80091ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
 80091f2:	3301      	adds	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	4413      	add	r3, r2
 80091fc:	2203      	movs	r2, #3
 80091fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009200:	7dfb      	ldrb	r3, [r7, #23]
 8009202:	3301      	adds	r3, #1
 8009204:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009206:	e013      	b.n	8009230 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	4413      	add	r3, r2
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	7812      	ldrb	r2, [r2, #0]
 8009212:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	3301      	adds	r3, #1
 8009218:	613b      	str	r3, [r7, #16]
    idx++;
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	3301      	adds	r3, #1
 800921e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009220:	7dfb      	ldrb	r3, [r7, #23]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	4413      	add	r3, r2
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]
    idx++;
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	3301      	adds	r3, #1
 800922e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1e7      	bne.n	8009208 <USBD_GetString+0x52>
 8009238:	e000      	b.n	800923c <USBD_GetString+0x86>
    return;
 800923a:	bf00      	nop
  }
}
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009242:	b480      	push	{r7}
 8009244:	b085      	sub	sp, #20
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009252:	e005      	b.n	8009260 <USBD_GetLen+0x1e>
  {
    len++;
 8009254:	7bfb      	ldrb	r3, [r7, #15]
 8009256:	3301      	adds	r3, #1
 8009258:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	3301      	adds	r3, #1
 800925e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1f5      	bne.n	8009254 <USBD_GetLen+0x12>
  }

  return len;
 8009268:	7bfb      	ldrb	r3, [r7, #15]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	60b9      	str	r1, [r7, #8]
 8009280:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2202      	movs	r2, #2
 8009286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	2100      	movs	r1, #0
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f004 fc78 	bl	800db92 <USBD_LL_Transmit>

  return USBD_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	2100      	movs	r1, #0
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f004 fc67 	bl	800db92 <USBD_LL_Transmit>

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2203      	movs	r2, #3
 80092de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	2100      	movs	r1, #0
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f004 fc6b 	bl	800dbd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	2100      	movs	r1, #0
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f004 fc5a 	bl	800dbd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b082      	sub	sp, #8
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2204      	movs	r2, #4
 8009336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800933a:	2300      	movs	r3, #0
 800933c:	2200      	movs	r2, #0
 800933e:	2100      	movs	r1, #0
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f004 fc26 	bl	800db92 <USBD_LL_Transmit>

  return USBD_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2205      	movs	r2, #5
 800935c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009360:	2300      	movs	r3, #0
 8009362:	2200      	movs	r2, #0
 8009364:	2100      	movs	r1, #0
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f004 fc34 	bl	800dbd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <__NVIC_SetPriority>:
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	4603      	mov	r3, r0
 8009380:	6039      	str	r1, [r7, #0]
 8009382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009388:	2b00      	cmp	r3, #0
 800938a:	db0a      	blt.n	80093a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	b2da      	uxtb	r2, r3
 8009390:	490c      	ldr	r1, [pc, #48]	; (80093c4 <__NVIC_SetPriority+0x4c>)
 8009392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009396:	0112      	lsls	r2, r2, #4
 8009398:	b2d2      	uxtb	r2, r2
 800939a:	440b      	add	r3, r1
 800939c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80093a0:	e00a      	b.n	80093b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	4908      	ldr	r1, [pc, #32]	; (80093c8 <__NVIC_SetPriority+0x50>)
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	f003 030f 	and.w	r3, r3, #15
 80093ae:	3b04      	subs	r3, #4
 80093b0:	0112      	lsls	r2, r2, #4
 80093b2:	b2d2      	uxtb	r2, r2
 80093b4:	440b      	add	r3, r1
 80093b6:	761a      	strb	r2, [r3, #24]
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	e000e100 	.word	0xe000e100
 80093c8:	e000ed00 	.word	0xe000ed00

080093cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80093d0:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <SysTick_Handler+0x1c>)
 80093d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80093d4:	f002 fc9c 	bl	800bd10 <xTaskGetSchedulerState>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d001      	beq.n	80093e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80093de:	f003 fcc3 	bl	800cd68 <xPortSysTickHandler>
  }
}
 80093e2:	bf00      	nop
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	e000e010 	.word	0xe000e010

080093ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80093ec:	b580      	push	{r7, lr}
 80093ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80093f0:	2100      	movs	r1, #0
 80093f2:	f06f 0004 	mvn.w	r0, #4
 80093f6:	f7ff ffbf 	bl	8009378 <__NVIC_SetPriority>
#endif
}
 80093fa:	bf00      	nop
 80093fc:	bd80      	pop	{r7, pc}
	...

08009400 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009406:	f3ef 8305 	mrs	r3, IPSR
 800940a:	603b      	str	r3, [r7, #0]
  return(result);
 800940c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009412:	f06f 0305 	mvn.w	r3, #5
 8009416:	607b      	str	r3, [r7, #4]
 8009418:	e00c      	b.n	8009434 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800941a:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <osKernelInitialize+0x44>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d105      	bne.n	800942e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009422:	4b08      	ldr	r3, [pc, #32]	; (8009444 <osKernelInitialize+0x44>)
 8009424:	2201      	movs	r2, #1
 8009426:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009428:	2300      	movs	r3, #0
 800942a:	607b      	str	r3, [r7, #4]
 800942c:	e002      	b.n	8009434 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800942e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009432:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009434:	687b      	ldr	r3, [r7, #4]
}
 8009436:	4618      	mov	r0, r3
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	200005f8 	.word	0x200005f8

08009448 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800944e:	f3ef 8305 	mrs	r3, IPSR
 8009452:	603b      	str	r3, [r7, #0]
  return(result);
 8009454:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <osKernelStart+0x1a>
    stat = osErrorISR;
 800945a:	f06f 0305 	mvn.w	r3, #5
 800945e:	607b      	str	r3, [r7, #4]
 8009460:	e010      	b.n	8009484 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009462:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <osKernelStart+0x48>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d109      	bne.n	800947e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800946a:	f7ff ffbf 	bl	80093ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800946e:	4b08      	ldr	r3, [pc, #32]	; (8009490 <osKernelStart+0x48>)
 8009470:	2202      	movs	r2, #2
 8009472:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009474:	f001 fe5a 	bl	800b12c <vTaskStartScheduler>
      stat = osOK;
 8009478:	2300      	movs	r3, #0
 800947a:	607b      	str	r3, [r7, #4]
 800947c:	e002      	b.n	8009484 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800947e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009482:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009484:	687b      	ldr	r3, [r7, #4]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	200005f8 	.word	0x200005f8

08009494 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009494:	b580      	push	{r7, lr}
 8009496:	b08e      	sub	sp, #56	; 0x38
 8009498:	af04      	add	r7, sp, #16
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80094a0:	2300      	movs	r3, #0
 80094a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094a4:	f3ef 8305 	mrs	r3, IPSR
 80094a8:	617b      	str	r3, [r7, #20]
  return(result);
 80094aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d17e      	bne.n	80095ae <osThreadNew+0x11a>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d07b      	beq.n	80095ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80094b6:	2380      	movs	r3, #128	; 0x80
 80094b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80094ba:	2318      	movs	r3, #24
 80094bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80094be:	2300      	movs	r3, #0
 80094c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80094c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d045      	beq.n	800955a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <osThreadNew+0x48>
        name = attr->name;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d008      	beq.n	8009502 <osThreadNew+0x6e>
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	2b38      	cmp	r3, #56	; 0x38
 80094f4:	d805      	bhi.n	8009502 <osThreadNew+0x6e>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <osThreadNew+0x72>
        return (NULL);
 8009502:	2300      	movs	r3, #0
 8009504:	e054      	b.n	80095b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	089b      	lsrs	r3, r3, #2
 8009514:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00e      	beq.n	800953c <osThreadNew+0xa8>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	2bc3      	cmp	r3, #195	; 0xc3
 8009524:	d90a      	bls.n	800953c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800952a:	2b00      	cmp	r3, #0
 800952c:	d006      	beq.n	800953c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <osThreadNew+0xa8>
        mem = 1;
 8009536:	2301      	movs	r3, #1
 8009538:	61bb      	str	r3, [r7, #24]
 800953a:	e010      	b.n	800955e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10c      	bne.n	800955e <osThreadNew+0xca>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d108      	bne.n	800955e <osThreadNew+0xca>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d104      	bne.n	800955e <osThreadNew+0xca>
          mem = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	61bb      	str	r3, [r7, #24]
 8009558:	e001      	b.n	800955e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d110      	bne.n	8009586 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800956c:	9202      	str	r2, [sp, #8]
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	6a3a      	ldr	r2, [r7, #32]
 8009578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f001 fb7e 	bl	800ac7c <xTaskCreateStatic>
 8009580:	4603      	mov	r3, r0
 8009582:	613b      	str	r3, [r7, #16]
 8009584:	e013      	b.n	80095ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d110      	bne.n	80095ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	b29a      	uxth	r2, r3
 8009590:	f107 0310 	add.w	r3, r7, #16
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f001 fbc9 	bl	800ad36 <xTaskCreate>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d001      	beq.n	80095ae <osThreadNew+0x11a>
            hTask = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80095ae:	693b      	ldr	r3, [r7, #16]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3728      	adds	r7, #40	; 0x28
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095c0:	f3ef 8305 	mrs	r3, IPSR
 80095c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80095c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d003      	beq.n	80095d4 <osDelay+0x1c>
    stat = osErrorISR;
 80095cc:	f06f 0305 	mvn.w	r3, #5
 80095d0:	60fb      	str	r3, [r7, #12]
 80095d2:	e007      	b.n	80095e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f001 fd0a 	bl	800aff8 <vTaskDelay>
    }
  }

  return (stat);
 80095e4:	68fb      	ldr	r3, [r7, #12]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b08a      	sub	sp, #40	; 0x28
 80095f2:	af02      	add	r7, sp, #8
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	60b9      	str	r1, [r7, #8]
 80095f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095fe:	f3ef 8305 	mrs	r3, IPSR
 8009602:	613b      	str	r3, [r7, #16]
  return(result);
 8009604:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009606:	2b00      	cmp	r3, #0
 8009608:	d175      	bne.n	80096f6 <osSemaphoreNew+0x108>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d072      	beq.n	80096f6 <osSemaphoreNew+0x108>
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	429a      	cmp	r2, r3
 8009616:	d86e      	bhi.n	80096f6 <osSemaphoreNew+0x108>
    mem = -1;
 8009618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800961c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d015      	beq.n	8009650 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d006      	beq.n	800963a <osSemaphoreNew+0x4c>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	2b4f      	cmp	r3, #79	; 0x4f
 8009632:	d902      	bls.n	800963a <osSemaphoreNew+0x4c>
        mem = 1;
 8009634:	2301      	movs	r3, #1
 8009636:	61bb      	str	r3, [r7, #24]
 8009638:	e00c      	b.n	8009654 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d108      	bne.n	8009654 <osSemaphoreNew+0x66>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d104      	bne.n	8009654 <osSemaphoreNew+0x66>
          mem = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	61bb      	str	r3, [r7, #24]
 800964e:	e001      	b.n	8009654 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800965a:	d04c      	beq.n	80096f6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d128      	bne.n	80096b4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d10a      	bne.n	800967e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	2203      	movs	r2, #3
 800966e:	9200      	str	r2, [sp, #0]
 8009670:	2200      	movs	r2, #0
 8009672:	2100      	movs	r1, #0
 8009674:	2001      	movs	r0, #1
 8009676:	f000 fb5b 	bl	8009d30 <xQueueGenericCreateStatic>
 800967a:	61f8      	str	r0, [r7, #28]
 800967c:	e005      	b.n	800968a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800967e:	2203      	movs	r2, #3
 8009680:	2100      	movs	r1, #0
 8009682:	2001      	movs	r0, #1
 8009684:	f000 fbcc 	bl	8009e20 <xQueueGenericCreate>
 8009688:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d022      	beq.n	80096d6 <osSemaphoreNew+0xe8>
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01f      	beq.n	80096d6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009696:	2300      	movs	r3, #0
 8009698:	2200      	movs	r2, #0
 800969a:	2100      	movs	r1, #0
 800969c:	69f8      	ldr	r0, [r7, #28]
 800969e:	f000 fc87 	bl	8009fb0 <xQueueGenericSend>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d016      	beq.n	80096d6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80096a8:	69f8      	ldr	r0, [r7, #28]
 80096aa:	f001 f913 	bl	800a8d4 <vQueueDelete>
            hSemaphore = NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	61fb      	str	r3, [r7, #28]
 80096b2:	e010      	b.n	80096d6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d108      	bne.n	80096cc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	461a      	mov	r2, r3
 80096c0:	68b9      	ldr	r1, [r7, #8]
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 fc09 	bl	8009eda <xQueueCreateCountingSemaphoreStatic>
 80096c8:	61f8      	str	r0, [r7, #28]
 80096ca:	e004      	b.n	80096d6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80096cc:	68b9      	ldr	r1, [r7, #8]
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fc3a 	bl	8009f48 <xQueueCreateCountingSemaphore>
 80096d4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00c      	beq.n	80096f6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <osSemaphoreNew+0xfc>
          name = attr->name;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	617b      	str	r3, [r7, #20]
 80096e8:	e001      	b.n	80096ee <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80096ea:	2300      	movs	r3, #0
 80096ec:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80096ee:	6979      	ldr	r1, [r7, #20]
 80096f0:	69f8      	ldr	r0, [r7, #28]
 80096f2:	f001 fa3b 	bl	800ab6c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80096f6:	69fb      	ldr	r3, [r7, #28]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3720      	adds	r7, #32
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800970e:	2300      	movs	r3, #0
 8009710:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d103      	bne.n	8009720 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009718:	f06f 0303 	mvn.w	r3, #3
 800971c:	617b      	str	r3, [r7, #20]
 800971e:	e039      	b.n	8009794 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009720:	f3ef 8305 	mrs	r3, IPSR
 8009724:	60fb      	str	r3, [r7, #12]
  return(result);
 8009726:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009728:	2b00      	cmp	r3, #0
 800972a:	d022      	beq.n	8009772 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009732:	f06f 0303 	mvn.w	r3, #3
 8009736:	617b      	str	r3, [r7, #20]
 8009738:	e02c      	b.n	8009794 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800973a:	2300      	movs	r3, #0
 800973c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800973e:	f107 0308 	add.w	r3, r7, #8
 8009742:	461a      	mov	r2, r3
 8009744:	2100      	movs	r1, #0
 8009746:	6938      	ldr	r0, [r7, #16]
 8009748:	f001 f844 	bl	800a7d4 <xQueueReceiveFromISR>
 800974c:	4603      	mov	r3, r0
 800974e:	2b01      	cmp	r3, #1
 8009750:	d003      	beq.n	800975a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009752:	f06f 0302 	mvn.w	r3, #2
 8009756:	617b      	str	r3, [r7, #20]
 8009758:	e01c      	b.n	8009794 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d019      	beq.n	8009794 <osSemaphoreAcquire+0x94>
 8009760:	4b0f      	ldr	r3, [pc, #60]	; (80097a0 <osSemaphoreAcquire+0xa0>)
 8009762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	e010      	b.n	8009794 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6938      	ldr	r0, [r7, #16]
 8009776:	f000 ff21 	bl	800a5bc <xQueueSemaphoreTake>
 800977a:	4603      	mov	r3, r0
 800977c:	2b01      	cmp	r3, #1
 800977e:	d009      	beq.n	8009794 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d003      	beq.n	800978e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009786:	f06f 0301 	mvn.w	r3, #1
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	e002      	b.n	8009794 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800978e:	f06f 0302 	mvn.w	r3, #2
 8009792:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009794:	697b      	ldr	r3, [r7, #20]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	e000ed04 	.word	0xe000ed04

080097a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d103      	bne.n	80097c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80097ba:	f06f 0303 	mvn.w	r3, #3
 80097be:	617b      	str	r3, [r7, #20]
 80097c0:	e02c      	b.n	800981c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097c2:	f3ef 8305 	mrs	r3, IPSR
 80097c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80097c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d01a      	beq.n	8009804 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80097ce:	2300      	movs	r3, #0
 80097d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80097d2:	f107 0308 	add.w	r3, r7, #8
 80097d6:	4619      	mov	r1, r3
 80097d8:	6938      	ldr	r0, [r7, #16]
 80097da:	f000 fd82 	bl	800a2e2 <xQueueGiveFromISR>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d003      	beq.n	80097ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80097e4:	f06f 0302 	mvn.w	r3, #2
 80097e8:	617b      	str	r3, [r7, #20]
 80097ea:	e017      	b.n	800981c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d014      	beq.n	800981c <osSemaphoreRelease+0x78>
 80097f2:	4b0d      	ldr	r3, [pc, #52]	; (8009828 <osSemaphoreRelease+0x84>)
 80097f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	e00b      	b.n	800981c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009804:	2300      	movs	r3, #0
 8009806:	2200      	movs	r2, #0
 8009808:	2100      	movs	r1, #0
 800980a:	6938      	ldr	r0, [r7, #16]
 800980c:	f000 fbd0 	bl	8009fb0 <xQueueGenericSend>
 8009810:	4603      	mov	r3, r0
 8009812:	2b01      	cmp	r3, #1
 8009814:	d002      	beq.n	800981c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009816:	f06f 0302 	mvn.w	r3, #2
 800981a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800981c:	697b      	ldr	r3, [r7, #20]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800982c:	b580      	push	{r7, lr}
 800982e:	b08a      	sub	sp, #40	; 0x28
 8009830:	af02      	add	r7, sp, #8
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009838:	2300      	movs	r3, #0
 800983a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800983c:	f3ef 8305 	mrs	r3, IPSR
 8009840:	613b      	str	r3, [r7, #16]
  return(result);
 8009842:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009844:	2b00      	cmp	r3, #0
 8009846:	d15f      	bne.n	8009908 <osMessageQueueNew+0xdc>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d05c      	beq.n	8009908 <osMessageQueueNew+0xdc>
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d059      	beq.n	8009908 <osMessageQueueNew+0xdc>
    mem = -1;
 8009854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009858:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d029      	beq.n	80098b4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d012      	beq.n	800988e <osMessageQueueNew+0x62>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	2b4f      	cmp	r3, #79	; 0x4f
 800986e:	d90e      	bls.n	800988e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00a      	beq.n	800988e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	695a      	ldr	r2, [r3, #20]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	429a      	cmp	r2, r3
 8009886:	d302      	bcc.n	800988e <osMessageQueueNew+0x62>
        mem = 1;
 8009888:	2301      	movs	r3, #1
 800988a:	61bb      	str	r3, [r7, #24]
 800988c:	e014      	b.n	80098b8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d110      	bne.n	80098b8 <osMessageQueueNew+0x8c>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10c      	bne.n	80098b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d108      	bne.n	80098b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d104      	bne.n	80098b8 <osMessageQueueNew+0x8c>
          mem = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	61bb      	str	r3, [r7, #24]
 80098b2:	e001      	b.n	80098b8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d10b      	bne.n	80098d6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691a      	ldr	r2, [r3, #16]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	2100      	movs	r1, #0
 80098c8:	9100      	str	r1, [sp, #0]
 80098ca:	68b9      	ldr	r1, [r7, #8]
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 fa2f 	bl	8009d30 <xQueueGenericCreateStatic>
 80098d2:	61f8      	str	r0, [r7, #28]
 80098d4:	e008      	b.n	80098e8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d105      	bne.n	80098e8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80098dc:	2200      	movs	r2, #0
 80098de:	68b9      	ldr	r1, [r7, #8]
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 fa9d 	bl	8009e20 <xQueueGenericCreate>
 80098e6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00c      	beq.n	8009908 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d003      	beq.n	80098fc <osMessageQueueNew+0xd0>
        name = attr->name;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	617b      	str	r3, [r7, #20]
 80098fa:	e001      	b.n	8009900 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009900:	6979      	ldr	r1, [r7, #20]
 8009902:	69f8      	ldr	r0, [r7, #28]
 8009904:	f001 f932 	bl	800ab6c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009908:	69fb      	ldr	r3, [r7, #28]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3720      	adds	r7, #32
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	603b      	str	r3, [r7, #0]
 8009920:	4613      	mov	r3, r2
 8009922:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009928:	2300      	movs	r3, #0
 800992a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800992c:	f3ef 8305 	mrs	r3, IPSR
 8009930:	617b      	str	r3, [r7, #20]
  return(result);
 8009932:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009934:	2b00      	cmp	r3, #0
 8009936:	d028      	beq.n	800998a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d005      	beq.n	800994a <osMessageQueuePut+0x36>
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <osMessageQueuePut+0x36>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800994a:	f06f 0303 	mvn.w	r3, #3
 800994e:	61fb      	str	r3, [r7, #28]
 8009950:	e038      	b.n	80099c4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009952:	2300      	movs	r3, #0
 8009954:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009956:	f107 0210 	add.w	r2, r7, #16
 800995a:	2300      	movs	r3, #0
 800995c:	68b9      	ldr	r1, [r7, #8]
 800995e:	69b8      	ldr	r0, [r7, #24]
 8009960:	f000 fc24 	bl	800a1ac <xQueueGenericSendFromISR>
 8009964:	4603      	mov	r3, r0
 8009966:	2b01      	cmp	r3, #1
 8009968:	d003      	beq.n	8009972 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800996a:	f06f 0302 	mvn.w	r3, #2
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	e028      	b.n	80099c4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d025      	beq.n	80099c4 <osMessageQueuePut+0xb0>
 8009978:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <osMessageQueuePut+0xbc>)
 800997a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	e01c      	b.n	80099c4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <osMessageQueuePut+0x82>
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d103      	bne.n	800999e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009996:	f06f 0303 	mvn.w	r3, #3
 800999a:	61fb      	str	r3, [r7, #28]
 800999c:	e012      	b.n	80099c4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800999e:	2300      	movs	r3, #0
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	68b9      	ldr	r1, [r7, #8]
 80099a4:	69b8      	ldr	r0, [r7, #24]
 80099a6:	f000 fb03 	bl	8009fb0 <xQueueGenericSend>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d009      	beq.n	80099c4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80099b6:	f06f 0301 	mvn.w	r3, #1
 80099ba:	61fb      	str	r3, [r7, #28]
 80099bc:	e002      	b.n	80099c4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80099be:	f06f 0302 	mvn.w	r3, #2
 80099c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80099c4:	69fb      	ldr	r3, [r7, #28]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	e000ed04 	.word	0xe000ed04

080099d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099ea:	f3ef 8305 	mrs	r3, IPSR
 80099ee:	617b      	str	r3, [r7, #20]
  return(result);
 80099f0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d028      	beq.n	8009a48 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d005      	beq.n	8009a08 <osMessageQueueGet+0x34>
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <osMessageQueueGet+0x34>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d003      	beq.n	8009a10 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009a08:	f06f 0303 	mvn.w	r3, #3
 8009a0c:	61fb      	str	r3, [r7, #28]
 8009a0e:	e037      	b.n	8009a80 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009a10:	2300      	movs	r3, #0
 8009a12:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009a14:	f107 0310 	add.w	r3, r7, #16
 8009a18:	461a      	mov	r2, r3
 8009a1a:	68b9      	ldr	r1, [r7, #8]
 8009a1c:	69b8      	ldr	r0, [r7, #24]
 8009a1e:	f000 fed9 	bl	800a7d4 <xQueueReceiveFromISR>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d003      	beq.n	8009a30 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009a28:	f06f 0302 	mvn.w	r3, #2
 8009a2c:	61fb      	str	r3, [r7, #28]
 8009a2e:	e027      	b.n	8009a80 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d024      	beq.n	8009a80 <osMessageQueueGet+0xac>
 8009a36:	4b15      	ldr	r3, [pc, #84]	; (8009a8c <osMessageQueueGet+0xb8>)
 8009a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	e01b      	b.n	8009a80 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <osMessageQueueGet+0x80>
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d103      	bne.n	8009a5c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009a54:	f06f 0303 	mvn.w	r3, #3
 8009a58:	61fb      	str	r3, [r7, #28]
 8009a5a:	e011      	b.n	8009a80 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	69b8      	ldr	r0, [r7, #24]
 8009a62:	f000 fccb 	bl	800a3fc <xQueueReceive>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d009      	beq.n	8009a80 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009a72:	f06f 0301 	mvn.w	r3, #1
 8009a76:	61fb      	str	r3, [r7, #28]
 8009a78:	e002      	b.n	8009a80 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009a7a:	f06f 0302 	mvn.w	r3, #2
 8009a7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a80:	69fb      	ldr	r3, [r7, #28]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3720      	adds	r7, #32
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	e000ed04 	.word	0xe000ed04

08009a90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	4a07      	ldr	r2, [pc, #28]	; (8009abc <vApplicationGetIdleTaskMemory+0x2c>)
 8009aa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	4a06      	ldr	r2, [pc, #24]	; (8009ac0 <vApplicationGetIdleTaskMemory+0x30>)
 8009aa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2280      	movs	r2, #128	; 0x80
 8009aac:	601a      	str	r2, [r3, #0]
}
 8009aae:	bf00      	nop
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	200005fc 	.word	0x200005fc
 8009ac0:	200006c0 	.word	0x200006c0

08009ac4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4a07      	ldr	r2, [pc, #28]	; (8009af0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ad4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	4a06      	ldr	r2, [pc, #24]	; (8009af4 <vApplicationGetTimerTaskMemory+0x30>)
 8009ada:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ae2:	601a      	str	r2, [r3, #0]
}
 8009ae4:	bf00      	nop
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	200008c0 	.word	0x200008c0
 8009af4:	20000984 	.word	0x20000984

08009af8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f103 0208 	add.w	r2, r3, #8
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f103 0208 	add.w	r2, r3, #8
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f103 0208 	add.w	r2, r3, #8
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b46:	bf00      	nop
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b52:	b480      	push	{r7}
 8009b54:	b085      	sub	sp, #20
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	689a      	ldr	r2, [r3, #8]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	1c5a      	adds	r2, r3, #1
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	601a      	str	r2, [r3, #0]
}
 8009b8e:	bf00      	nop
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b085      	sub	sp, #20
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bb0:	d103      	bne.n	8009bba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	e00c      	b.n	8009bd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3308      	adds	r3, #8
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	e002      	b.n	8009bc8 <vListInsert+0x2e>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d2f6      	bcs.n	8009bc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	601a      	str	r2, [r3, #0]
}
 8009c00:	bf00      	nop
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	6892      	ldr	r2, [r2, #8]
 8009c22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	6852      	ldr	r2, [r2, #4]
 8009c2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d103      	bne.n	8009c40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	689a      	ldr	r2, [r3, #8]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	1e5a      	subs	r2, r3, #1
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10a      	bne.n	8009c8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c86:	bf00      	nop
 8009c88:	e7fe      	b.n	8009c88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c8a:	f002 ffdb 	bl	800cc44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c9a:	fb01 f303 	mul.w	r3, r1, r3
 8009c9e:	441a      	add	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	68f9      	ldr	r1, [r7, #12]
 8009cbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cc0:	fb01 f303 	mul.w	r3, r1, r3
 8009cc4:	441a      	add	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	22ff      	movs	r2, #255	; 0xff
 8009cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	22ff      	movs	r2, #255	; 0xff
 8009cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d114      	bne.n	8009d0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d01a      	beq.n	8009d1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3310      	adds	r3, #16
 8009cec:	4618      	mov	r0, r3
 8009cee:	f001 fd79 	bl	800b7e4 <xTaskRemoveFromEventList>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d012      	beq.n	8009d1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009cf8:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <xQueueGenericReset+0xcc>)
 8009cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	e009      	b.n	8009d1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3310      	adds	r3, #16
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff fef2 	bl	8009af8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3324      	adds	r3, #36	; 0x24
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff feed 	bl	8009af8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d1e:	f002 ffc1 	bl	800cca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d22:	2301      	movs	r3, #1
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	e000ed04 	.word	0xe000ed04

08009d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08e      	sub	sp, #56	; 0x38
 8009d34:	af02      	add	r7, sp, #8
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10a      	bne.n	8009d5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d56:	bf00      	nop
 8009d58:	e7fe      	b.n	8009d58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10a      	bne.n	8009d76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d002      	beq.n	8009d82 <xQueueGenericCreateStatic+0x52>
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <xQueueGenericCreateStatic+0x56>
 8009d82:	2301      	movs	r3, #1
 8009d84:	e000      	b.n	8009d88 <xQueueGenericCreateStatic+0x58>
 8009d86:	2300      	movs	r3, #0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	623b      	str	r3, [r7, #32]
}
 8009d9e:	bf00      	nop
 8009da0:	e7fe      	b.n	8009da0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d102      	bne.n	8009dae <xQueueGenericCreateStatic+0x7e>
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <xQueueGenericCreateStatic+0x82>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e000      	b.n	8009db4 <xQueueGenericCreateStatic+0x84>
 8009db2:	2300      	movs	r3, #0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10a      	bne.n	8009dce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	61fb      	str	r3, [r7, #28]
}
 8009dca:	bf00      	nop
 8009dcc:	e7fe      	b.n	8009dcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009dce:	2350      	movs	r3, #80	; 0x50
 8009dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	2b50      	cmp	r3, #80	; 0x50
 8009dd6:	d00a      	beq.n	8009dee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	61bb      	str	r3, [r7, #24]
}
 8009dea:	bf00      	nop
 8009dec:	e7fe      	b.n	8009dec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009dee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00d      	beq.n	8009e16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	68b9      	ldr	r1, [r7, #8]
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 f83f 	bl	8009e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3730      	adds	r7, #48	; 0x30
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08a      	sub	sp, #40	; 0x28
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10a      	bne.n	8009e4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	613b      	str	r3, [r7, #16]
}
 8009e46:	bf00      	nop
 8009e48:	e7fe      	b.n	8009e48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	fb02 f303 	mul.w	r3, r2, r3
 8009e52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	3350      	adds	r3, #80	; 0x50
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f003 f815 	bl	800ce88 <pvPortMalloc>
 8009e5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d011      	beq.n	8009e8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	3350      	adds	r3, #80	; 0x50
 8009e6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e78:	79fa      	ldrb	r2, [r7, #7]
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 f805 	bl	8009e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3720      	adds	r7, #32
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d103      	bne.n	8009eb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	69ba      	ldr	r2, [r7, #24]
 8009eac:	601a      	str	r2, [r3, #0]
 8009eae:	e002      	b.n	8009eb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	69b8      	ldr	r0, [r7, #24]
 8009ec6:	f7ff fecb 	bl	8009c60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	78fa      	ldrb	r2, [r7, #3]
 8009ece:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ed2:	bf00      	nop
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b08a      	sub	sp, #40	; 0x28
 8009ede:	af02      	add	r7, sp, #8
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10a      	bne.n	8009f02 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	61bb      	str	r3, [r7, #24]
}
 8009efe:	bf00      	nop
 8009f00:	e7fe      	b.n	8009f00 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d90a      	bls.n	8009f20 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	617b      	str	r3, [r7, #20]
}
 8009f1c:	bf00      	nop
 8009f1e:	e7fe      	b.n	8009f1e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f20:	2302      	movs	r3, #2
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	2100      	movs	r1, #0
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f7ff ff00 	bl	8009d30 <xQueueGenericCreateStatic>
 8009f30:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f3e:	69fb      	ldr	r3, [r7, #28]
	}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3720      	adds	r7, #32
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	613b      	str	r3, [r7, #16]
}
 8009f6a:	bf00      	nop
 8009f6c:	e7fe      	b.n	8009f6c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d90a      	bls.n	8009f8c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	60fb      	str	r3, [r7, #12]
}
 8009f88:	bf00      	nop
 8009f8a:	e7fe      	b.n	8009f8a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	2100      	movs	r1, #0
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff ff45 	bl	8009e20 <xQueueGenericCreate>
 8009f96:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d002      	beq.n	8009fa4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009fa4:	697b      	ldr	r3, [r7, #20]
	}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08e      	sub	sp, #56	; 0x38
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <xQueueGenericSend+0x32>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d103      	bne.n	8009ff0 <xQueueGenericSend+0x40>
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <xQueueGenericSend+0x44>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e000      	b.n	8009ff6 <xQueueGenericSend+0x46>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10a      	bne.n	800a010 <xQueueGenericSend+0x60>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a00c:	bf00      	nop
 800a00e:	e7fe      	b.n	800a00e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d103      	bne.n	800a01e <xQueueGenericSend+0x6e>
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <xQueueGenericSend+0x72>
 800a01e:	2301      	movs	r3, #1
 800a020:	e000      	b.n	800a024 <xQueueGenericSend+0x74>
 800a022:	2300      	movs	r3, #0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <xQueueGenericSend+0x8e>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	623b      	str	r3, [r7, #32]
}
 800a03a:	bf00      	nop
 800a03c:	e7fe      	b.n	800a03c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a03e:	f001 fe67 	bl	800bd10 <xTaskGetSchedulerState>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d102      	bne.n	800a04e <xQueueGenericSend+0x9e>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <xQueueGenericSend+0xa2>
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <xQueueGenericSend+0xa4>
 800a052:	2300      	movs	r3, #0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <xQueueGenericSend+0xbe>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	61fb      	str	r3, [r7, #28]
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a06e:	f002 fde9 	bl	800cc44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d302      	bcc.n	800a084 <xQueueGenericSend+0xd4>
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b02      	cmp	r3, #2
 800a082:	d129      	bne.n	800a0d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a08a:	f000 fc5e 	bl	800a94a <prvCopyDataToQueue>
 800a08e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	2b00      	cmp	r3, #0
 800a096:	d010      	beq.n	800a0ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09a:	3324      	adds	r3, #36	; 0x24
 800a09c:	4618      	mov	r0, r3
 800a09e:	f001 fba1 	bl	800b7e4 <xTaskRemoveFromEventList>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d013      	beq.n	800a0d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0a8:	4b3f      	ldr	r3, [pc, #252]	; (800a1a8 <xQueueGenericSend+0x1f8>)
 800a0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	e00a      	b.n	800a0d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d007      	beq.n	800a0d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0c0:	4b39      	ldr	r3, [pc, #228]	; (800a1a8 <xQueueGenericSend+0x1f8>)
 800a0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0d0:	f002 fde8 	bl	800cca4 <vPortExitCritical>
				return pdPASS;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e063      	b.n	800a1a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d103      	bne.n	800a0e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0de:	f002 fde1 	bl	800cca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	e05c      	b.n	800a1a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d106      	bne.n	800a0fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0ec:	f107 0314 	add.w	r3, r7, #20
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 fbdb 	bl	800b8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0fa:	f002 fdd3 	bl	800cca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0fe:	f001 f889 	bl	800b214 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a102:	f002 fd9f 	bl	800cc44 <vPortEnterCritical>
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a10c:	b25b      	sxtb	r3, r3
 800a10e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a112:	d103      	bne.n	800a11c <xQueueGenericSend+0x16c>
 800a114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a122:	b25b      	sxtb	r3, r3
 800a124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a128:	d103      	bne.n	800a132 <xQueueGenericSend+0x182>
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a132:	f002 fdb7 	bl	800cca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a136:	1d3a      	adds	r2, r7, #4
 800a138:	f107 0314 	add.w	r3, r7, #20
 800a13c:	4611      	mov	r1, r2
 800a13e:	4618      	mov	r0, r3
 800a140:	f001 fbca 	bl	800b8d8 <xTaskCheckForTimeOut>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d124      	bne.n	800a194 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a14a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a14c:	f000 fcf5 	bl	800ab3a <prvIsQueueFull>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d018      	beq.n	800a188 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	3310      	adds	r3, #16
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f001 faf0 	bl	800b744 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a166:	f000 fc80 	bl	800aa6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a16a:	f001 f861 	bl	800b230 <xTaskResumeAll>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	f47f af7c 	bne.w	800a06e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a176:	4b0c      	ldr	r3, [pc, #48]	; (800a1a8 <xQueueGenericSend+0x1f8>)
 800a178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	e772      	b.n	800a06e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a18a:	f000 fc6e 	bl	800aa6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a18e:	f001 f84f 	bl	800b230 <xTaskResumeAll>
 800a192:	e76c      	b.n	800a06e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a196:	f000 fc68 	bl	800aa6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a19a:	f001 f849 	bl	800b230 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a19e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3738      	adds	r7, #56	; 0x38
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	e000ed04 	.word	0xe000ed04

0800a1ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b090      	sub	sp, #64	; 0x40
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d103      	bne.n	800a1e8 <xQueueGenericSendFromISR+0x3c>
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <xQueueGenericSendFromISR+0x40>
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e000      	b.n	800a1ee <xQueueGenericSendFromISR+0x42>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10a      	bne.n	800a208 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a204:	bf00      	nop
 800a206:	e7fe      	b.n	800a206 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d103      	bne.n	800a216 <xQueueGenericSendFromISR+0x6a>
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a212:	2b01      	cmp	r3, #1
 800a214:	d101      	bne.n	800a21a <xQueueGenericSendFromISR+0x6e>
 800a216:	2301      	movs	r3, #1
 800a218:	e000      	b.n	800a21c <xQueueGenericSendFromISR+0x70>
 800a21a:	2300      	movs	r3, #0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	623b      	str	r3, [r7, #32]
}
 800a232:	bf00      	nop
 800a234:	e7fe      	b.n	800a234 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a236:	f002 fde7 	bl	800ce08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a23a:	f3ef 8211 	mrs	r2, BASEPRI
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	61fa      	str	r2, [r7, #28]
 800a250:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a252:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a254:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25e:	429a      	cmp	r2, r3
 800a260:	d302      	bcc.n	800a268 <xQueueGenericSendFromISR+0xbc>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b02      	cmp	r3, #2
 800a266:	d12f      	bne.n	800a2c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a276:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	68b9      	ldr	r1, [r7, #8]
 800a27c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a27e:	f000 fb64 	bl	800a94a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a282:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a28a:	d112      	bne.n	800a2b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	2b00      	cmp	r3, #0
 800a292:	d016      	beq.n	800a2c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a296:	3324      	adds	r3, #36	; 0x24
 800a298:	4618      	mov	r0, r3
 800a29a:	f001 faa3 	bl	800b7e4 <xTaskRemoveFromEventList>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00e      	beq.n	800a2c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00b      	beq.n	800a2c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	e007      	b.n	800a2c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	b25a      	sxtb	r2, r3
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a2c6:	e001      	b.n	800a2cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3740      	adds	r7, #64	; 0x40
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b08e      	sub	sp, #56	; 0x38
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10a      	bne.n	800a30c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	623b      	str	r3, [r7, #32]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00a      	beq.n	800a32a <xQueueGiveFromISR+0x48>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	61fb      	str	r3, [r7, #28]
}
 800a326:	bf00      	nop
 800a328:	e7fe      	b.n	800a328 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d103      	bne.n	800a33a <xQueueGiveFromISR+0x58>
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <xQueueGiveFromISR+0x5c>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <xQueueGiveFromISR+0x5e>
 800a33e:	2300      	movs	r3, #0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10a      	bne.n	800a35a <xQueueGiveFromISR+0x78>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	61bb      	str	r3, [r7, #24]
}
 800a356:	bf00      	nop
 800a358:	e7fe      	b.n	800a358 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a35a:	f002 fd55 	bl	800ce08 <vPortValidateInterruptPriority>
	__asm volatile
 800a35e:	f3ef 8211 	mrs	r2, BASEPRI
 800a362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	617a      	str	r2, [r7, #20]
 800a374:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a376:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a378:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a386:	429a      	cmp	r2, r3
 800a388:	d22b      	bcs.n	800a3e2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	1c5a      	adds	r2, r3, #1
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a39c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3a4:	d112      	bne.n	800a3cc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d016      	beq.n	800a3dc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b0:	3324      	adds	r3, #36	; 0x24
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f001 fa16 	bl	800b7e4 <xTaskRemoveFromEventList>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00e      	beq.n	800a3dc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00b      	beq.n	800a3dc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	e007      	b.n	800a3dc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	b25a      	sxtb	r2, r3
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	637b      	str	r3, [r7, #52]	; 0x34
 800a3e0:	e001      	b.n	800a3e6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f383 8811 	msr	BASEPRI, r3
}
 800a3f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3738      	adds	r7, #56	; 0x38
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b08c      	sub	sp, #48	; 0x30
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a408:	2300      	movs	r3, #0
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10a      	bne.n	800a42c <xQueueReceive+0x30>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	623b      	str	r3, [r7, #32]
}
 800a428:	bf00      	nop
 800a42a:	e7fe      	b.n	800a42a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d103      	bne.n	800a43a <xQueueReceive+0x3e>
 800a432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <xQueueReceive+0x42>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e000      	b.n	800a440 <xQueueReceive+0x44>
 800a43e:	2300      	movs	r3, #0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10a      	bne.n	800a45a <xQueueReceive+0x5e>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	61fb      	str	r3, [r7, #28]
}
 800a456:	bf00      	nop
 800a458:	e7fe      	b.n	800a458 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a45a:	f001 fc59 	bl	800bd10 <xTaskGetSchedulerState>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d102      	bne.n	800a46a <xQueueReceive+0x6e>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <xQueueReceive+0x72>
 800a46a:	2301      	movs	r3, #1
 800a46c:	e000      	b.n	800a470 <xQueueReceive+0x74>
 800a46e:	2300      	movs	r3, #0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10a      	bne.n	800a48a <xQueueReceive+0x8e>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	61bb      	str	r3, [r7, #24]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a48a:	f002 fbdb 	bl	800cc44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a492:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	2b00      	cmp	r3, #0
 800a498:	d01f      	beq.n	800a4da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a49a:	68b9      	ldr	r1, [r7, #8]
 800a49c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a49e:	f000 fabe 	bl	800aa1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	1e5a      	subs	r2, r3, #1
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00f      	beq.n	800a4d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	3310      	adds	r3, #16
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f001 f994 	bl	800b7e4 <xTaskRemoveFromEventList>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d007      	beq.n	800a4d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4c2:	4b3d      	ldr	r3, [pc, #244]	; (800a5b8 <xQueueReceive+0x1bc>)
 800a4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4d2:	f002 fbe7 	bl	800cca4 <vPortExitCritical>
				return pdPASS;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e069      	b.n	800a5ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d103      	bne.n	800a4e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4e0:	f002 fbe0 	bl	800cca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e062      	b.n	800a5ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4ee:	f107 0310 	add.w	r3, r7, #16
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f001 f9da 	bl	800b8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4fc:	f002 fbd2 	bl	800cca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a500:	f000 fe88 	bl	800b214 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a504:	f002 fb9e 	bl	800cc44 <vPortEnterCritical>
 800a508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a50e:	b25b      	sxtb	r3, r3
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a514:	d103      	bne.n	800a51e <xQueueReceive+0x122>
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a524:	b25b      	sxtb	r3, r3
 800a526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a52a:	d103      	bne.n	800a534 <xQueueReceive+0x138>
 800a52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a534:	f002 fbb6 	bl	800cca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a538:	1d3a      	adds	r2, r7, #4
 800a53a:	f107 0310 	add.w	r3, r7, #16
 800a53e:	4611      	mov	r1, r2
 800a540:	4618      	mov	r0, r3
 800a542:	f001 f9c9 	bl	800b8d8 <xTaskCheckForTimeOut>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d123      	bne.n	800a594 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a54c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a54e:	f000 fade 	bl	800ab0e <prvIsQueueEmpty>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d017      	beq.n	800a588 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55a:	3324      	adds	r3, #36	; 0x24
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	4611      	mov	r1, r2
 800a560:	4618      	mov	r0, r3
 800a562:	f001 f8ef 	bl	800b744 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a568:	f000 fa7f 	bl	800aa6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a56c:	f000 fe60 	bl	800b230 <xTaskResumeAll>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d189      	bne.n	800a48a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a576:	4b10      	ldr	r3, [pc, #64]	; (800a5b8 <xQueueReceive+0x1bc>)
 800a578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	e780      	b.n	800a48a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a58a:	f000 fa6e 	bl	800aa6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a58e:	f000 fe4f 	bl	800b230 <xTaskResumeAll>
 800a592:	e77a      	b.n	800a48a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a596:	f000 fa68 	bl	800aa6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a59a:	f000 fe49 	bl	800b230 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a59e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a0:	f000 fab5 	bl	800ab0e <prvIsQueueEmpty>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f43f af6f 	beq.w	800a48a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3730      	adds	r7, #48	; 0x30
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	e000ed04 	.word	0xe000ed04

0800a5bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08e      	sub	sp, #56	; 0x38
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10a      	bne.n	800a5ee <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	623b      	str	r3, [r7, #32]
}
 800a5ea:	bf00      	nop
 800a5ec:	e7fe      	b.n	800a5ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00a      	beq.n	800a60c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	61fb      	str	r3, [r7, #28]
}
 800a608:	bf00      	nop
 800a60a:	e7fe      	b.n	800a60a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a60c:	f001 fb80 	bl	800bd10 <xTaskGetSchedulerState>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d102      	bne.n	800a61c <xQueueSemaphoreTake+0x60>
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <xQueueSemaphoreTake+0x64>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e000      	b.n	800a622 <xQueueSemaphoreTake+0x66>
 800a620:	2300      	movs	r3, #0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10a      	bne.n	800a63c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	61bb      	str	r3, [r7, #24]
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a63c:	f002 fb02 	bl	800cc44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a644:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d024      	beq.n	800a696 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	1e5a      	subs	r2, r3, #1
 800a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a652:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d104      	bne.n	800a666 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a65c:	f001 fe0e 	bl	800c27c <pvTaskIncrementMutexHeldCount>
 800a660:	4602      	mov	r2, r0
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00f      	beq.n	800a68e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	3310      	adds	r3, #16
 800a672:	4618      	mov	r0, r3
 800a674:	f001 f8b6 	bl	800b7e4 <xTaskRemoveFromEventList>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d007      	beq.n	800a68e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a67e:	4b54      	ldr	r3, [pc, #336]	; (800a7d0 <xQueueSemaphoreTake+0x214>)
 800a680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a684:	601a      	str	r2, [r3, #0]
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a68e:	f002 fb09 	bl	800cca4 <vPortExitCritical>
				return pdPASS;
 800a692:	2301      	movs	r3, #1
 800a694:	e097      	b.n	800a7c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d111      	bne.n	800a6c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00a      	beq.n	800a6b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	617b      	str	r3, [r7, #20]
}
 800a6b4:	bf00      	nop
 800a6b6:	e7fe      	b.n	800a6b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a6b8:	f002 faf4 	bl	800cca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e082      	b.n	800a7c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d106      	bne.n	800a6d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6c6:	f107 030c 	add.w	r3, r7, #12
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f001 f8ee 	bl	800b8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6d4:	f002 fae6 	bl	800cca4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6d8:	f000 fd9c 	bl	800b214 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6dc:	f002 fab2 	bl	800cc44 <vPortEnterCritical>
 800a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6e6:	b25b      	sxtb	r3, r3
 800a6e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6ec:	d103      	bne.n	800a6f6 <xQueueSemaphoreTake+0x13a>
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6fc:	b25b      	sxtb	r3, r3
 800a6fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a702:	d103      	bne.n	800a70c <xQueueSemaphoreTake+0x150>
 800a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a706:	2200      	movs	r2, #0
 800a708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a70c:	f002 faca 	bl	800cca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a710:	463a      	mov	r2, r7
 800a712:	f107 030c 	add.w	r3, r7, #12
 800a716:	4611      	mov	r1, r2
 800a718:	4618      	mov	r0, r3
 800a71a:	f001 f8dd 	bl	800b8d8 <xTaskCheckForTimeOut>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d132      	bne.n	800a78a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a726:	f000 f9f2 	bl	800ab0e <prvIsQueueEmpty>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d026      	beq.n	800a77e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d109      	bne.n	800a74c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a738:	f002 fa84 	bl	800cc44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	4618      	mov	r0, r3
 800a742:	f001 fb03 	bl	800bd4c <xTaskPriorityInherit>
 800a746:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a748:	f002 faac 	bl	800cca4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74e:	3324      	adds	r3, #36	; 0x24
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	4611      	mov	r1, r2
 800a754:	4618      	mov	r0, r3
 800a756:	f000 fff5 	bl	800b744 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a75a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a75c:	f000 f985 	bl	800aa6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a760:	f000 fd66 	bl	800b230 <xTaskResumeAll>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	f47f af68 	bne.w	800a63c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a76c:	4b18      	ldr	r3, [pc, #96]	; (800a7d0 <xQueueSemaphoreTake+0x214>)
 800a76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	e75e      	b.n	800a63c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a77e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a780:	f000 f973 	bl	800aa6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a784:	f000 fd54 	bl	800b230 <xTaskResumeAll>
 800a788:	e758      	b.n	800a63c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a78a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a78c:	f000 f96d 	bl	800aa6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a790:	f000 fd4e 	bl	800b230 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a796:	f000 f9ba 	bl	800ab0e <prvIsQueueEmpty>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f43f af4d 	beq.w	800a63c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00d      	beq.n	800a7c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a7a8:	f002 fa4c 	bl	800cc44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a7ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7ae:	f000 f8b4 	bl	800a91a <prvGetDisinheritPriorityAfterTimeout>
 800a7b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f001 fb9c 	bl	800bef8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a7c0:	f002 fa70 	bl	800cca4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3738      	adds	r7, #56	; 0x38
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	e000ed04 	.word	0xe000ed04

0800a7d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08e      	sub	sp, #56	; 0x38
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10a      	bne.n	800a800 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	623b      	str	r3, [r7, #32]
}
 800a7fc:	bf00      	nop
 800a7fe:	e7fe      	b.n	800a7fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d103      	bne.n	800a80e <xQueueReceiveFromISR+0x3a>
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <xQueueReceiveFromISR+0x3e>
 800a80e:	2301      	movs	r3, #1
 800a810:	e000      	b.n	800a814 <xQueueReceiveFromISR+0x40>
 800a812:	2300      	movs	r3, #0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10a      	bne.n	800a82e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	61fb      	str	r3, [r7, #28]
}
 800a82a:	bf00      	nop
 800a82c:	e7fe      	b.n	800a82c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a82e:	f002 faeb 	bl	800ce08 <vPortValidateInterruptPriority>
	__asm volatile
 800a832:	f3ef 8211 	mrs	r2, BASEPRI
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	61ba      	str	r2, [r7, #24]
 800a848:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a84a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a84c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a852:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	2b00      	cmp	r3, #0
 800a858:	d02f      	beq.n	800a8ba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a864:	68b9      	ldr	r1, [r7, #8]
 800a866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a868:	f000 f8d9 	bl	800aa1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86e:	1e5a      	subs	r2, r3, #1
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a874:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a87c:	d112      	bne.n	800a8a4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d016      	beq.n	800a8b4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	3310      	adds	r3, #16
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 ffaa 	bl	800b7e4 <xTaskRemoveFromEventList>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00e      	beq.n	800a8b4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00b      	beq.n	800a8b4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	601a      	str	r2, [r3, #0]
 800a8a2:	e007      	b.n	800a8b4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	b25a      	sxtb	r2, r3
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a8b8:	e001      	b.n	800a8be <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	f383 8811 	msr	BASEPRI, r3
}
 800a8c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3738      	adds	r7, #56	; 0x38
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10a      	bne.n	800a8fc <vQueueDelete+0x28>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	60bb      	str	r3, [r7, #8]
}
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f000 f95f 	bl	800abc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d102      	bne.n	800a912 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f002 fb87 	bl	800d020 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a912:	bf00      	nop
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a91a:	b480      	push	{r7}
 800a91c:	b085      	sub	sp, #20
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a926:	2b00      	cmp	r3, #0
 800a928:	d006      	beq.n	800a938 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a934:	60fb      	str	r3, [r7, #12]
 800a936:	e001      	b.n	800a93c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a93c:	68fb      	ldr	r3, [r7, #12]
	}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b086      	sub	sp, #24
 800a94e:	af00      	add	r7, sp, #0
 800a950:	60f8      	str	r0, [r7, #12]
 800a952:	60b9      	str	r1, [r7, #8]
 800a954:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a956:	2300      	movs	r3, #0
 800a958:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10d      	bne.n	800a984 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d14d      	bne.n	800aa0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	4618      	mov	r0, r3
 800a976:	f001 fa51 	bl	800be1c <xTaskPriorityDisinherit>
 800a97a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	609a      	str	r2, [r3, #8]
 800a982:	e043      	b.n	800aa0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d119      	bne.n	800a9be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6858      	ldr	r0, [r3, #4]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a992:	461a      	mov	r2, r3
 800a994:	68b9      	ldr	r1, [r7, #8]
 800a996:	f003 f9db 	bl	800dd50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a2:	441a      	add	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d32b      	bcc.n	800aa0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	605a      	str	r2, [r3, #4]
 800a9bc:	e026      	b.n	800aa0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	68d8      	ldr	r0, [r3, #12]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	68b9      	ldr	r1, [r7, #8]
 800a9ca:	f003 f9c1 	bl	800dd50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	68da      	ldr	r2, [r3, #12]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	425b      	negs	r3, r3
 800a9d8:	441a      	add	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	68da      	ldr	r2, [r3, #12]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d207      	bcs.n	800a9fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	689a      	ldr	r2, [r3, #8]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	425b      	negs	r3, r3
 800a9f4:	441a      	add	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d105      	bne.n	800aa0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d002      	beq.n	800aa0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	1c5a      	adds	r2, r3, #1
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa14:	697b      	ldr	r3, [r7, #20]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d018      	beq.n	800aa62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68da      	ldr	r2, [r3, #12]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa38:	441a      	add	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68da      	ldr	r2, [r3, #12]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d303      	bcc.n	800aa52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68d9      	ldr	r1, [r3, #12]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	6838      	ldr	r0, [r7, #0]
 800aa5e:	f003 f977 	bl	800dd50 <memcpy>
	}
}
 800aa62:	bf00      	nop
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa72:	f002 f8e7 	bl	800cc44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa7e:	e011      	b.n	800aaa4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d012      	beq.n	800aaae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	3324      	adds	r3, #36	; 0x24
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 fea9 	bl	800b7e4 <xTaskRemoveFromEventList>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa98:	f000 ff80 	bl	800b99c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aaa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dce9      	bgt.n	800aa80 <prvUnlockQueue+0x16>
 800aaac:	e000      	b.n	800aab0 <prvUnlockQueue+0x46>
					break;
 800aaae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	22ff      	movs	r2, #255	; 0xff
 800aab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aab8:	f002 f8f4 	bl	800cca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aabc:	f002 f8c2 	bl	800cc44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aac6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aac8:	e011      	b.n	800aaee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d012      	beq.n	800aaf8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3310      	adds	r3, #16
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 fe84 	bl	800b7e4 <xTaskRemoveFromEventList>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aae2:	f000 ff5b 	bl	800b99c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aaee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	dce9      	bgt.n	800aaca <prvUnlockQueue+0x60>
 800aaf6:	e000      	b.n	800aafa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aaf8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	22ff      	movs	r2, #255	; 0xff
 800aafe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab02:	f002 f8cf 	bl	800cca4 <vPortExitCritical>
}
 800ab06:	bf00      	nop
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab16:	f002 f895 	bl	800cc44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d102      	bne.n	800ab28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab22:	2301      	movs	r3, #1
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	e001      	b.n	800ab2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab2c:	f002 f8ba 	bl	800cca4 <vPortExitCritical>

	return xReturn;
 800ab30:	68fb      	ldr	r3, [r7, #12]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b084      	sub	sp, #16
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab42:	f002 f87f 	bl	800cc44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d102      	bne.n	800ab58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab52:	2301      	movs	r3, #1
 800ab54:	60fb      	str	r3, [r7, #12]
 800ab56:	e001      	b.n	800ab5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab5c:	f002 f8a2 	bl	800cca4 <vPortExitCritical>

	return xReturn;
 800ab60:	68fb      	ldr	r3, [r7, #12]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
	...

0800ab6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab76:	2300      	movs	r3, #0
 800ab78:	60fb      	str	r3, [r7, #12]
 800ab7a:	e014      	b.n	800aba6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab7c:	4a0f      	ldr	r2, [pc, #60]	; (800abbc <vQueueAddToRegistry+0x50>)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10b      	bne.n	800aba0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab88:	490c      	ldr	r1, [pc, #48]	; (800abbc <vQueueAddToRegistry+0x50>)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab92:	4a0a      	ldr	r2, [pc, #40]	; (800abbc <vQueueAddToRegistry+0x50>)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	4413      	add	r3, r2
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab9e:	e006      	b.n	800abae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3301      	adds	r3, #1
 800aba4:	60fb      	str	r3, [r7, #12]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b07      	cmp	r3, #7
 800abaa:	d9e7      	bls.n	800ab7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800abac:	bf00      	nop
 800abae:	bf00      	nop
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	2000a980 	.word	0x2000a980

0800abc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abc8:	2300      	movs	r3, #0
 800abca:	60fb      	str	r3, [r7, #12]
 800abcc:	e016      	b.n	800abfc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800abce:	4a10      	ldr	r2, [pc, #64]	; (800ac10 <vQueueUnregisterQueue+0x50>)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	00db      	lsls	r3, r3, #3
 800abd4:	4413      	add	r3, r2
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d10b      	bne.n	800abf6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800abde:	4a0c      	ldr	r2, [pc, #48]	; (800ac10 <vQueueUnregisterQueue+0x50>)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2100      	movs	r1, #0
 800abe4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800abe8:	4a09      	ldr	r2, [pc, #36]	; (800ac10 <vQueueUnregisterQueue+0x50>)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	4413      	add	r3, r2
 800abf0:	2200      	movs	r2, #0
 800abf2:	605a      	str	r2, [r3, #4]
				break;
 800abf4:	e006      	b.n	800ac04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3301      	adds	r3, #1
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b07      	cmp	r3, #7
 800ac00:	d9e5      	bls.n	800abce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ac02:	bf00      	nop
 800ac04:	bf00      	nop
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	2000a980 	.word	0x2000a980

0800ac14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac24:	f002 f80e 	bl	800cc44 <vPortEnterCritical>
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac2e:	b25b      	sxtb	r3, r3
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac34:	d103      	bne.n	800ac3e <vQueueWaitForMessageRestricted+0x2a>
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac44:	b25b      	sxtb	r3, r3
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac4a:	d103      	bne.n	800ac54 <vQueueWaitForMessageRestricted+0x40>
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac54:	f002 f826 	bl	800cca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	3324      	adds	r3, #36	; 0x24
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 fd8f 	bl	800b78c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac6e:	6978      	ldr	r0, [r7, #20]
 800ac70:	f7ff fefb 	bl	800aa6a <prvUnlockQueue>
	}
 800ac74:	bf00      	nop
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08e      	sub	sp, #56	; 0x38
 800ac80:	af04      	add	r7, sp, #16
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10a      	bne.n	800aca6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	623b      	str	r3, [r7, #32]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10a      	bne.n	800acc2 <xTaskCreateStatic+0x46>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	61fb      	str	r3, [r7, #28]
}
 800acbe:	bf00      	nop
 800acc0:	e7fe      	b.n	800acc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acc2:	23c4      	movs	r3, #196	; 0xc4
 800acc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2bc4      	cmp	r3, #196	; 0xc4
 800acca:	d00a      	beq.n	800ace2 <xTaskCreateStatic+0x66>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	61bb      	str	r3, [r7, #24]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ace2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ace4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d01e      	beq.n	800ad28 <xTaskCreateStatic+0xac>
 800acea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01b      	beq.n	800ad28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfc:	2202      	movs	r2, #2
 800acfe:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad02:	2300      	movs	r3, #0
 800ad04:	9303      	str	r3, [sp, #12]
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	9302      	str	r3, [sp, #8]
 800ad0a:	f107 0314 	add.w	r3, r7, #20
 800ad0e:	9301      	str	r3, [sp, #4]
 800ad10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f000 f850 	bl	800adc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad22:	f000 f8f9 	bl	800af18 <prvAddNewTaskToReadyList>
 800ad26:	e001      	b.n	800ad2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad2c:	697b      	ldr	r3, [r7, #20]
	}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3728      	adds	r7, #40	; 0x28
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b08c      	sub	sp, #48	; 0x30
 800ad3a:	af04      	add	r7, sp, #16
 800ad3c:	60f8      	str	r0, [r7, #12]
 800ad3e:	60b9      	str	r1, [r7, #8]
 800ad40:	603b      	str	r3, [r7, #0]
 800ad42:	4613      	mov	r3, r2
 800ad44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad46:	88fb      	ldrh	r3, [r7, #6]
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f002 f89c 	bl	800ce88 <pvPortMalloc>
 800ad50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00e      	beq.n	800ad76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad58:	20c4      	movs	r0, #196	; 0xc4
 800ad5a:	f002 f895 	bl	800ce88 <pvPortMalloc>
 800ad5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	631a      	str	r2, [r3, #48]	; 0x30
 800ad6c:	e005      	b.n	800ad7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad6e:	6978      	ldr	r0, [r7, #20]
 800ad70:	f002 f956 	bl	800d020 <vPortFree>
 800ad74:	e001      	b.n	800ad7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d017      	beq.n	800adb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad88:	88fa      	ldrh	r2, [r7, #6]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	9303      	str	r3, [sp, #12]
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	9302      	str	r3, [sp, #8]
 800ad92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad98:	9300      	str	r3, [sp, #0]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	68b9      	ldr	r1, [r7, #8]
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f000 f80e 	bl	800adc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ada4:	69f8      	ldr	r0, [r7, #28]
 800ada6:	f000 f8b7 	bl	800af18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adaa:	2301      	movs	r3, #1
 800adac:	61bb      	str	r3, [r7, #24]
 800adae:	e002      	b.n	800adb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adb6:	69bb      	ldr	r3, [r7, #24]
	}
 800adb8:	4618      	mov	r0, r3
 800adba:	3720      	adds	r7, #32
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	461a      	mov	r2, r3
 800add8:	21a5      	movs	r1, #165	; 0xa5
 800adda:	f002 ffc7 	bl	800dd6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ade8:	3b01      	subs	r3, #1
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	f023 0307 	bic.w	r3, r3, #7
 800adf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	f003 0307 	and.w	r3, r3, #7
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00a      	beq.n	800ae18 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ae02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae06:	f383 8811 	msr	BASEPRI, r3
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	617b      	str	r3, [r7, #20]
}
 800ae14:	bf00      	nop
 800ae16:	e7fe      	b.n	800ae16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d01f      	beq.n	800ae5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae1e:	2300      	movs	r3, #0
 800ae20:	61fb      	str	r3, [r7, #28]
 800ae22:	e012      	b.n	800ae4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	4413      	add	r3, r2
 800ae2a:	7819      	ldrb	r1, [r3, #0]
 800ae2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	4413      	add	r3, r2
 800ae32:	3334      	adds	r3, #52	; 0x34
 800ae34:	460a      	mov	r2, r1
 800ae36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d006      	beq.n	800ae52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	3301      	adds	r3, #1
 800ae48:	61fb      	str	r3, [r7, #28]
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	2b0f      	cmp	r3, #15
 800ae4e:	d9e9      	bls.n	800ae24 <prvInitialiseNewTask+0x64>
 800ae50:	e000      	b.n	800ae54 <prvInitialiseNewTask+0x94>
			{
				break;
 800ae52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae5c:	e003      	b.n	800ae66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae68:	2b37      	cmp	r3, #55	; 0x37
 800ae6a:	d901      	bls.n	800ae70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae6c:	2337      	movs	r3, #55	; 0x37
 800ae6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7e:	2200      	movs	r2, #0
 800ae80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae84:	3304      	adds	r3, #4
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fe fe56 	bl	8009b38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	3318      	adds	r3, #24
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fe fe51 	bl	8009b38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	2200      	movs	r2, #0
 800aeb0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	2200      	movs	r2, #0
 800aebc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	335c      	adds	r3, #92	; 0x5c
 800aecc:	2260      	movs	r2, #96	; 0x60
 800aece:	2100      	movs	r1, #0
 800aed0:	4618      	mov	r0, r3
 800aed2:	f002 ff4b 	bl	800dd6c <memset>
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	4a0c      	ldr	r2, [pc, #48]	; (800af0c <prvInitialiseNewTask+0x14c>)
 800aeda:	661a      	str	r2, [r3, #96]	; 0x60
 800aedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aede:	4a0c      	ldr	r2, [pc, #48]	; (800af10 <prvInitialiseNewTask+0x150>)
 800aee0:	665a      	str	r2, [r3, #100]	; 0x64
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	4a0b      	ldr	r2, [pc, #44]	; (800af14 <prvInitialiseNewTask+0x154>)
 800aee6:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	68f9      	ldr	r1, [r7, #12]
 800aeec:	69b8      	ldr	r0, [r7, #24]
 800aeee:	f001 fd7b 	bl	800c9e8 <pxPortInitialiseStack>
 800aef2:	4602      	mov	r2, r0
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d002      	beq.n	800af04 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af04:	bf00      	nop
 800af06:	3720      	adds	r7, #32
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	0800eab8 	.word	0x0800eab8
 800af10:	0800ead8 	.word	0x0800ead8
 800af14:	0800ea98 	.word	0x0800ea98

0800af18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af20:	f001 fe90 	bl	800cc44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af24:	4b2d      	ldr	r3, [pc, #180]	; (800afdc <prvAddNewTaskToReadyList+0xc4>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3301      	adds	r3, #1
 800af2a:	4a2c      	ldr	r2, [pc, #176]	; (800afdc <prvAddNewTaskToReadyList+0xc4>)
 800af2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af2e:	4b2c      	ldr	r3, [pc, #176]	; (800afe0 <prvAddNewTaskToReadyList+0xc8>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d109      	bne.n	800af4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af36:	4a2a      	ldr	r2, [pc, #168]	; (800afe0 <prvAddNewTaskToReadyList+0xc8>)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af3c:	4b27      	ldr	r3, [pc, #156]	; (800afdc <prvAddNewTaskToReadyList+0xc4>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d110      	bne.n	800af66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af44:	f000 fd4e 	bl	800b9e4 <prvInitialiseTaskLists>
 800af48:	e00d      	b.n	800af66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af4a:	4b26      	ldr	r3, [pc, #152]	; (800afe4 <prvAddNewTaskToReadyList+0xcc>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d109      	bne.n	800af66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af52:	4b23      	ldr	r3, [pc, #140]	; (800afe0 <prvAddNewTaskToReadyList+0xc8>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d802      	bhi.n	800af66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af60:	4a1f      	ldr	r2, [pc, #124]	; (800afe0 <prvAddNewTaskToReadyList+0xc8>)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af66:	4b20      	ldr	r3, [pc, #128]	; (800afe8 <prvAddNewTaskToReadyList+0xd0>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3301      	adds	r3, #1
 800af6c:	4a1e      	ldr	r2, [pc, #120]	; (800afe8 <prvAddNewTaskToReadyList+0xd0>)
 800af6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af70:	4b1d      	ldr	r3, [pc, #116]	; (800afe8 <prvAddNewTaskToReadyList+0xd0>)
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af7c:	4b1b      	ldr	r3, [pc, #108]	; (800afec <prvAddNewTaskToReadyList+0xd4>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	429a      	cmp	r2, r3
 800af82:	d903      	bls.n	800af8c <prvAddNewTaskToReadyList+0x74>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af88:	4a18      	ldr	r2, [pc, #96]	; (800afec <prvAddNewTaskToReadyList+0xd4>)
 800af8a:	6013      	str	r3, [r2, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af90:	4613      	mov	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4413      	add	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4a15      	ldr	r2, [pc, #84]	; (800aff0 <prvAddNewTaskToReadyList+0xd8>)
 800af9a:	441a      	add	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	3304      	adds	r3, #4
 800afa0:	4619      	mov	r1, r3
 800afa2:	4610      	mov	r0, r2
 800afa4:	f7fe fdd5 	bl	8009b52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800afa8:	f001 fe7c 	bl	800cca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afac:	4b0d      	ldr	r3, [pc, #52]	; (800afe4 <prvAddNewTaskToReadyList+0xcc>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00e      	beq.n	800afd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800afb4:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <prvAddNewTaskToReadyList+0xc8>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d207      	bcs.n	800afd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800afc2:	4b0c      	ldr	r3, [pc, #48]	; (800aff4 <prvAddNewTaskToReadyList+0xdc>)
 800afc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc8:	601a      	str	r2, [r3, #0]
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afd2:	bf00      	nop
 800afd4:	3708      	adds	r7, #8
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	20001258 	.word	0x20001258
 800afe0:	20000d84 	.word	0x20000d84
 800afe4:	20001264 	.word	0x20001264
 800afe8:	20001274 	.word	0x20001274
 800afec:	20001260 	.word	0x20001260
 800aff0:	20000d88 	.word	0x20000d88
 800aff4:	e000ed04 	.word	0xe000ed04

0800aff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b000:	2300      	movs	r3, #0
 800b002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d017      	beq.n	800b03a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b00a:	4b13      	ldr	r3, [pc, #76]	; (800b058 <vTaskDelay+0x60>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00a      	beq.n	800b028 <vTaskDelay+0x30>
	__asm volatile
 800b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	60bb      	str	r3, [r7, #8]
}
 800b024:	bf00      	nop
 800b026:	e7fe      	b.n	800b026 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b028:	f000 f8f4 	bl	800b214 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b02c:	2100      	movs	r1, #0
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f001 f938 	bl	800c2a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b034:	f000 f8fc 	bl	800b230 <xTaskResumeAll>
 800b038:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d107      	bne.n	800b050 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b040:	4b06      	ldr	r3, [pc, #24]	; (800b05c <vTaskDelay+0x64>)
 800b042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b050:	bf00      	nop
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	20001280 	.word	0x20001280
 800b05c:	e000ed04 	.word	0xe000ed04

0800b060 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800b060:	b580      	push	{r7, lr}
 800b062:	b088      	sub	sp, #32
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10a      	bne.n	800b088 <eTaskGetState+0x28>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	60bb      	str	r3, [r7, #8]
}
 800b084:	bf00      	nop
 800b086:	e7fe      	b.n	800b086 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800b088:	4b23      	ldr	r3, [pc, #140]	; (800b118 <eTaskGetState+0xb8>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	69ba      	ldr	r2, [r7, #24]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d102      	bne.n	800b098 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800b092:	2300      	movs	r3, #0
 800b094:	77fb      	strb	r3, [r7, #31]
 800b096:	e03a      	b.n	800b10e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800b098:	f001 fdd4 	bl	800cc44 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	695b      	ldr	r3, [r3, #20]
 800b0a0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800b0a2:	4b1e      	ldr	r3, [pc, #120]	; (800b11c <eTaskGetState+0xbc>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800b0a8:	4b1d      	ldr	r3, [pc, #116]	; (800b120 <eTaskGetState+0xc0>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800b0ae:	f001 fdf9 	bl	800cca4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d003      	beq.n	800b0c2 <eTaskGetState+0x62>
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d102      	bne.n	800b0c8 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	77fb      	strb	r3, [r7, #31]
 800b0c6:	e022      	b.n	800b10e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	4a16      	ldr	r2, [pc, #88]	; (800b124 <eTaskGetState+0xc4>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d112      	bne.n	800b0f6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10b      	bne.n	800b0f0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d102      	bne.n	800b0ea <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	77fb      	strb	r3, [r7, #31]
 800b0e8:	e011      	b.n	800b10e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800b0ea:	2303      	movs	r3, #3
 800b0ec:	77fb      	strb	r3, [r7, #31]
 800b0ee:	e00e      	b.n	800b10e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	77fb      	strb	r3, [r7, #31]
 800b0f4:	e00b      	b.n	800b10e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	4a0b      	ldr	r2, [pc, #44]	; (800b128 <eTaskGetState+0xc8>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d002      	beq.n	800b104 <eTaskGetState+0xa4>
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d102      	bne.n	800b10a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800b104:	2304      	movs	r3, #4
 800b106:	77fb      	strb	r3, [r7, #31]
 800b108:	e001      	b.n	800b10e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800b10a:	2301      	movs	r3, #1
 800b10c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800b10e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b110:	4618      	mov	r0, r3
 800b112:	3720      	adds	r7, #32
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	20000d84 	.word	0x20000d84
 800b11c:	20001210 	.word	0x20001210
 800b120:	20001214 	.word	0x20001214
 800b124:	20001244 	.word	0x20001244
 800b128:	2000122c 	.word	0x2000122c

0800b12c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08a      	sub	sp, #40	; 0x28
 800b130:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b132:	2300      	movs	r3, #0
 800b134:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b136:	2300      	movs	r3, #0
 800b138:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b13a:	463a      	mov	r2, r7
 800b13c:	1d39      	adds	r1, r7, #4
 800b13e:	f107 0308 	add.w	r3, r7, #8
 800b142:	4618      	mov	r0, r3
 800b144:	f7fe fca4 	bl	8009a90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b148:	6839      	ldr	r1, [r7, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	9202      	str	r2, [sp, #8]
 800b150:	9301      	str	r3, [sp, #4]
 800b152:	2300      	movs	r3, #0
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	2300      	movs	r3, #0
 800b158:	460a      	mov	r2, r1
 800b15a:	4925      	ldr	r1, [pc, #148]	; (800b1f0 <vTaskStartScheduler+0xc4>)
 800b15c:	4825      	ldr	r0, [pc, #148]	; (800b1f4 <vTaskStartScheduler+0xc8>)
 800b15e:	f7ff fd8d 	bl	800ac7c <xTaskCreateStatic>
 800b162:	4603      	mov	r3, r0
 800b164:	4a24      	ldr	r2, [pc, #144]	; (800b1f8 <vTaskStartScheduler+0xcc>)
 800b166:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b168:	4b23      	ldr	r3, [pc, #140]	; (800b1f8 <vTaskStartScheduler+0xcc>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d002      	beq.n	800b176 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b170:	2301      	movs	r3, #1
 800b172:	617b      	str	r3, [r7, #20]
 800b174:	e001      	b.n	800b17a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b176:	2300      	movs	r3, #0
 800b178:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d102      	bne.n	800b186 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b180:	f001 f8e4 	bl	800c34c <xTimerCreateTimerTask>
 800b184:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d11e      	bne.n	800b1ca <vTaskStartScheduler+0x9e>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	613b      	str	r3, [r7, #16]
}
 800b19e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1a0:	4b16      	ldr	r3, [pc, #88]	; (800b1fc <vTaskStartScheduler+0xd0>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	335c      	adds	r3, #92	; 0x5c
 800b1a6:	4a16      	ldr	r2, [pc, #88]	; (800b200 <vTaskStartScheduler+0xd4>)
 800b1a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1aa:	4b16      	ldr	r3, [pc, #88]	; (800b204 <vTaskStartScheduler+0xd8>)
 800b1ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1b2:	4b15      	ldr	r3, [pc, #84]	; (800b208 <vTaskStartScheduler+0xdc>)
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1b8:	4b14      	ldr	r3, [pc, #80]	; (800b20c <vTaskStartScheduler+0xe0>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b1be:	4b14      	ldr	r3, [pc, #80]	; (800b210 <vTaskStartScheduler+0xe4>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1c4:	f001 fc9c 	bl	800cb00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1c8:	e00e      	b.n	800b1e8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1d0:	d10a      	bne.n	800b1e8 <vTaskStartScheduler+0xbc>
	__asm volatile
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	60fb      	str	r3, [r7, #12]
}
 800b1e4:	bf00      	nop
 800b1e6:	e7fe      	b.n	800b1e6 <vTaskStartScheduler+0xba>
}
 800b1e8:	bf00      	nop
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	0800e8d4 	.word	0x0800e8d4
 800b1f4:	0800b9b5 	.word	0x0800b9b5
 800b1f8:	2000127c 	.word	0x2000127c
 800b1fc:	20000d84 	.word	0x20000d84
 800b200:	20000184 	.word	0x20000184
 800b204:	20001278 	.word	0x20001278
 800b208:	20001264 	.word	0x20001264
 800b20c:	2000125c 	.word	0x2000125c
 800b210:	2000a3ec 	.word	0x2000a3ec

0800b214 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b214:	b480      	push	{r7}
 800b216:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b218:	4b04      	ldr	r3, [pc, #16]	; (800b22c <vTaskSuspendAll+0x18>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3301      	adds	r3, #1
 800b21e:	4a03      	ldr	r2, [pc, #12]	; (800b22c <vTaskSuspendAll+0x18>)
 800b220:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b222:	bf00      	nop
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	20001280 	.word	0x20001280

0800b230 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b236:	2300      	movs	r3, #0
 800b238:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b23a:	2300      	movs	r3, #0
 800b23c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b23e:	4b42      	ldr	r3, [pc, #264]	; (800b348 <xTaskResumeAll+0x118>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10a      	bne.n	800b25c <xTaskResumeAll+0x2c>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	603b      	str	r3, [r7, #0]
}
 800b258:	bf00      	nop
 800b25a:	e7fe      	b.n	800b25a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b25c:	f001 fcf2 	bl	800cc44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b260:	4b39      	ldr	r3, [pc, #228]	; (800b348 <xTaskResumeAll+0x118>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	3b01      	subs	r3, #1
 800b266:	4a38      	ldr	r2, [pc, #224]	; (800b348 <xTaskResumeAll+0x118>)
 800b268:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b26a:	4b37      	ldr	r3, [pc, #220]	; (800b348 <xTaskResumeAll+0x118>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d162      	bne.n	800b338 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b272:	4b36      	ldr	r3, [pc, #216]	; (800b34c <xTaskResumeAll+0x11c>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d05e      	beq.n	800b338 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b27a:	e02f      	b.n	800b2dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b27c:	4b34      	ldr	r3, [pc, #208]	; (800b350 <xTaskResumeAll+0x120>)
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	3318      	adds	r3, #24
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fe fcbf 	bl	8009c0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3304      	adds	r3, #4
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe fcba 	bl	8009c0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b29c:	4b2d      	ldr	r3, [pc, #180]	; (800b354 <xTaskResumeAll+0x124>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d903      	bls.n	800b2ac <xTaskResumeAll+0x7c>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a8:	4a2a      	ldr	r2, [pc, #168]	; (800b354 <xTaskResumeAll+0x124>)
 800b2aa:	6013      	str	r3, [r2, #0]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4413      	add	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4a27      	ldr	r2, [pc, #156]	; (800b358 <xTaskResumeAll+0x128>)
 800b2ba:	441a      	add	r2, r3
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	f7fe fc45 	bl	8009b52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2cc:	4b23      	ldr	r3, [pc, #140]	; (800b35c <xTaskResumeAll+0x12c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d302      	bcc.n	800b2dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b2d6:	4b22      	ldr	r3, [pc, #136]	; (800b360 <xTaskResumeAll+0x130>)
 800b2d8:	2201      	movs	r2, #1
 800b2da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2dc:	4b1c      	ldr	r3, [pc, #112]	; (800b350 <xTaskResumeAll+0x120>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1cb      	bne.n	800b27c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d001      	beq.n	800b2ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2ea:	f000 fcf1 	bl	800bcd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b2ee:	4b1d      	ldr	r3, [pc, #116]	; (800b364 <xTaskResumeAll+0x134>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d010      	beq.n	800b31c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2fa:	f000 f8d7 	bl	800b4ac <xTaskIncrementTick>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b304:	4b16      	ldr	r3, [pc, #88]	; (800b360 <xTaskResumeAll+0x130>)
 800b306:	2201      	movs	r2, #1
 800b308:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1f1      	bne.n	800b2fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b316:	4b13      	ldr	r3, [pc, #76]	; (800b364 <xTaskResumeAll+0x134>)
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b31c:	4b10      	ldr	r3, [pc, #64]	; (800b360 <xTaskResumeAll+0x130>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d009      	beq.n	800b338 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b324:	2301      	movs	r3, #1
 800b326:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b328:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <xTaskResumeAll+0x138>)
 800b32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b338:	f001 fcb4 	bl	800cca4 <vPortExitCritical>

	return xAlreadyYielded;
 800b33c:	68bb      	ldr	r3, [r7, #8]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20001280 	.word	0x20001280
 800b34c:	20001258 	.word	0x20001258
 800b350:	20001218 	.word	0x20001218
 800b354:	20001260 	.word	0x20001260
 800b358:	20000d88 	.word	0x20000d88
 800b35c:	20000d84 	.word	0x20000d84
 800b360:	2000126c 	.word	0x2000126c
 800b364:	20001268 	.word	0x20001268
 800b368:	e000ed04 	.word	0xe000ed04

0800b36c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b372:	4b05      	ldr	r3, [pc, #20]	; (800b388 <xTaskGetTickCount+0x1c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b378:	687b      	ldr	r3, [r7, #4]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	2000125c 	.word	0x2000125c

0800b38c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800b398:	2300      	movs	r3, #0
 800b39a:	617b      	str	r3, [r7, #20]
 800b39c:	2338      	movs	r3, #56	; 0x38
 800b39e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800b3a0:	f7ff ff38 	bl	800b214 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800b3a4:	4b3a      	ldr	r3, [pc, #232]	; (800b490 <uxTaskGetSystemState+0x104>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d369      	bcc.n	800b482 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800b3b4:	697a      	ldr	r2, [r7, #20]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	00db      	lsls	r3, r3, #3
 800b3ba:	4413      	add	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	461a      	mov	r2, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	1898      	adds	r0, r3, r2
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	4413      	add	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4a31      	ldr	r2, [pc, #196]	; (800b494 <uxTaskGetSystemState+0x108>)
 800b3d0:	4413      	add	r3, r2
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	f000 fbd9 	bl	800bb8c <prvListTasksWithinSingleList>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	4413      	add	r3, r2
 800b3e0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1e2      	bne.n	800b3ae <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800b3e8:	697a      	ldr	r2, [r7, #20]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	00db      	lsls	r3, r3, #3
 800b3ee:	4413      	add	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	4a27      	ldr	r2, [pc, #156]	; (800b498 <uxTaskGetSystemState+0x10c>)
 800b3fa:	6811      	ldr	r1, [r2, #0]
 800b3fc:	2202      	movs	r2, #2
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 fbc4 	bl	800bb8c <prvListTasksWithinSingleList>
 800b404:	4602      	mov	r2, r0
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	4413      	add	r3, r2
 800b40a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	4613      	mov	r3, r2
 800b410:	00db      	lsls	r3, r3, #3
 800b412:	4413      	add	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	461a      	mov	r2, r3
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	4413      	add	r3, r2
 800b41c:	4a1f      	ldr	r2, [pc, #124]	; (800b49c <uxTaskGetSystemState+0x110>)
 800b41e:	6811      	ldr	r1, [r2, #0]
 800b420:	2202      	movs	r2, #2
 800b422:	4618      	mov	r0, r3
 800b424:	f000 fbb2 	bl	800bb8c <prvListTasksWithinSingleList>
 800b428:	4602      	mov	r2, r0
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	4413      	add	r3, r2
 800b42e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800b430:	697a      	ldr	r2, [r7, #20]
 800b432:	4613      	mov	r3, r2
 800b434:	00db      	lsls	r3, r3, #3
 800b436:	4413      	add	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	461a      	mov	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	4413      	add	r3, r2
 800b440:	2204      	movs	r2, #4
 800b442:	4917      	ldr	r1, [pc, #92]	; (800b4a0 <uxTaskGetSystemState+0x114>)
 800b444:	4618      	mov	r0, r3
 800b446:	f000 fba1 	bl	800bb8c <prvListTasksWithinSingleList>
 800b44a:	4602      	mov	r2, r0
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	4413      	add	r3, r2
 800b450:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	4613      	mov	r3, r2
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	4413      	add	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	461a      	mov	r2, r3
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	4413      	add	r3, r2
 800b462:	2203      	movs	r2, #3
 800b464:	490f      	ldr	r1, [pc, #60]	; (800b4a4 <uxTaskGetSystemState+0x118>)
 800b466:	4618      	mov	r0, r3
 800b468:	f000 fb90 	bl	800bb8c <prvListTasksWithinSingleList>
 800b46c:	4602      	mov	r2, r0
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	4413      	add	r3, r2
 800b472:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b47a:	4b0b      	ldr	r3, [pc, #44]	; (800b4a8 <uxTaskGetSystemState+0x11c>)
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800b482:	f7ff fed5 	bl	800b230 <xTaskResumeAll>

		return uxTask;
 800b486:	697b      	ldr	r3, [r7, #20]
	}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	20001258 	.word	0x20001258
 800b494:	20000d88 	.word	0x20000d88
 800b498:	20001210 	.word	0x20001210
 800b49c:	20001214 	.word	0x20001214
 800b4a0:	2000122c 	.word	0x2000122c
 800b4a4:	20001244 	.word	0x20001244
 800b4a8:	2000a3ec 	.word	0x2000a3ec

0800b4ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4b6:	4b4f      	ldr	r3, [pc, #316]	; (800b5f4 <xTaskIncrementTick+0x148>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f040 808f 	bne.w	800b5de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4c0:	4b4d      	ldr	r3, [pc, #308]	; (800b5f8 <xTaskIncrementTick+0x14c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4c8:	4a4b      	ldr	r2, [pc, #300]	; (800b5f8 <xTaskIncrementTick+0x14c>)
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d120      	bne.n	800b516 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b4d4:	4b49      	ldr	r3, [pc, #292]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00a      	beq.n	800b4f4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	603b      	str	r3, [r7, #0]
}
 800b4f0:	bf00      	nop
 800b4f2:	e7fe      	b.n	800b4f2 <xTaskIncrementTick+0x46>
 800b4f4:	4b41      	ldr	r3, [pc, #260]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	60fb      	str	r3, [r7, #12]
 800b4fa:	4b41      	ldr	r3, [pc, #260]	; (800b600 <xTaskIncrementTick+0x154>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a3f      	ldr	r2, [pc, #252]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	4a3f      	ldr	r2, [pc, #252]	; (800b600 <xTaskIncrementTick+0x154>)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6013      	str	r3, [r2, #0]
 800b508:	4b3e      	ldr	r3, [pc, #248]	; (800b604 <xTaskIncrementTick+0x158>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3301      	adds	r3, #1
 800b50e:	4a3d      	ldr	r2, [pc, #244]	; (800b604 <xTaskIncrementTick+0x158>)
 800b510:	6013      	str	r3, [r2, #0]
 800b512:	f000 fbdd 	bl	800bcd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b516:	4b3c      	ldr	r3, [pc, #240]	; (800b608 <xTaskIncrementTick+0x15c>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	693a      	ldr	r2, [r7, #16]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d349      	bcc.n	800b5b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b520:	4b36      	ldr	r3, [pc, #216]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d104      	bne.n	800b534 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b52a:	4b37      	ldr	r3, [pc, #220]	; (800b608 <xTaskIncrementTick+0x15c>)
 800b52c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b530:	601a      	str	r2, [r3, #0]
					break;
 800b532:	e03f      	b.n	800b5b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b534:	4b31      	ldr	r3, [pc, #196]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b544:	693a      	ldr	r2, [r7, #16]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d203      	bcs.n	800b554 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b54c:	4a2e      	ldr	r2, [pc, #184]	; (800b608 <xTaskIncrementTick+0x15c>)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b552:	e02f      	b.n	800b5b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	3304      	adds	r3, #4
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe fb57 	bl	8009c0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b562:	2b00      	cmp	r3, #0
 800b564:	d004      	beq.n	800b570 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	3318      	adds	r3, #24
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fe fb4e 	bl	8009c0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b574:	4b25      	ldr	r3, [pc, #148]	; (800b60c <xTaskIncrementTick+0x160>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d903      	bls.n	800b584 <xTaskIncrementTick+0xd8>
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b580:	4a22      	ldr	r2, [pc, #136]	; (800b60c <xTaskIncrementTick+0x160>)
 800b582:	6013      	str	r3, [r2, #0]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b588:	4613      	mov	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	4413      	add	r3, r2
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4a1f      	ldr	r2, [pc, #124]	; (800b610 <xTaskIncrementTick+0x164>)
 800b592:	441a      	add	r2, r3
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	3304      	adds	r3, #4
 800b598:	4619      	mov	r1, r3
 800b59a:	4610      	mov	r0, r2
 800b59c:	f7fe fad9 	bl	8009b52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a4:	4b1b      	ldr	r3, [pc, #108]	; (800b614 <xTaskIncrementTick+0x168>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d3b8      	bcc.n	800b520 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5b2:	e7b5      	b.n	800b520 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5b4:	4b17      	ldr	r3, [pc, #92]	; (800b614 <xTaskIncrementTick+0x168>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ba:	4915      	ldr	r1, [pc, #84]	; (800b610 <xTaskIncrementTick+0x164>)
 800b5bc:	4613      	mov	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	440b      	add	r3, r1
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d901      	bls.n	800b5d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b5d0:	4b11      	ldr	r3, [pc, #68]	; (800b618 <xTaskIncrementTick+0x16c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d007      	beq.n	800b5e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	617b      	str	r3, [r7, #20]
 800b5dc:	e004      	b.n	800b5e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5de:	4b0f      	ldr	r3, [pc, #60]	; (800b61c <xTaskIncrementTick+0x170>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	4a0d      	ldr	r2, [pc, #52]	; (800b61c <xTaskIncrementTick+0x170>)
 800b5e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5e8:	697b      	ldr	r3, [r7, #20]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20001280 	.word	0x20001280
 800b5f8:	2000125c 	.word	0x2000125c
 800b5fc:	20001210 	.word	0x20001210
 800b600:	20001214 	.word	0x20001214
 800b604:	20001270 	.word	0x20001270
 800b608:	20001278 	.word	0x20001278
 800b60c:	20001260 	.word	0x20001260
 800b610:	20000d88 	.word	0x20000d88
 800b614:	20000d84 	.word	0x20000d84
 800b618:	2000126c 	.word	0x2000126c
 800b61c:	20001268 	.word	0x20001268

0800b620 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b626:	4b3e      	ldr	r3, [pc, #248]	; (800b720 <vTaskSwitchContext+0x100>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b62e:	4b3d      	ldr	r3, [pc, #244]	; (800b724 <vTaskSwitchContext+0x104>)
 800b630:	2201      	movs	r2, #1
 800b632:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b634:	e06f      	b.n	800b716 <vTaskSwitchContext+0xf6>
		xYieldPending = pdFALSE;
 800b636:	4b3b      	ldr	r3, [pc, #236]	; (800b724 <vTaskSwitchContext+0x104>)
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b63c:	4b3a      	ldr	r3, [pc, #232]	; (800b728 <vTaskSwitchContext+0x108>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a3a      	ldr	r2, [pc, #232]	; (800b72c <vTaskSwitchContext+0x10c>)
 800b642:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b644:	4b39      	ldr	r3, [pc, #228]	; (800b72c <vTaskSwitchContext+0x10c>)
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	4b39      	ldr	r3, [pc, #228]	; (800b730 <vTaskSwitchContext+0x110>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d909      	bls.n	800b664 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b650:	4b38      	ldr	r3, [pc, #224]	; (800b734 <vTaskSwitchContext+0x114>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800b656:	4a35      	ldr	r2, [pc, #212]	; (800b72c <vTaskSwitchContext+0x10c>)
 800b658:	6810      	ldr	r0, [r2, #0]
 800b65a:	4a35      	ldr	r2, [pc, #212]	; (800b730 <vTaskSwitchContext+0x110>)
 800b65c:	6812      	ldr	r2, [r2, #0]
 800b65e:	1a82      	subs	r2, r0, r2
 800b660:	440a      	add	r2, r1
 800b662:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b664:	4b31      	ldr	r3, [pc, #196]	; (800b72c <vTaskSwitchContext+0x10c>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a31      	ldr	r2, [pc, #196]	; (800b730 <vTaskSwitchContext+0x110>)
 800b66a:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b66c:	4b31      	ldr	r3, [pc, #196]	; (800b734 <vTaskSwitchContext+0x114>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	4b30      	ldr	r3, [pc, #192]	; (800b734 <vTaskSwitchContext+0x114>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b678:	429a      	cmp	r2, r3
 800b67a:	d808      	bhi.n	800b68e <vTaskSwitchContext+0x6e>
 800b67c:	4b2d      	ldr	r3, [pc, #180]	; (800b734 <vTaskSwitchContext+0x114>)
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	4b2c      	ldr	r3, [pc, #176]	; (800b734 <vTaskSwitchContext+0x114>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3334      	adds	r3, #52	; 0x34
 800b686:	4619      	mov	r1, r3
 800b688:	4610      	mov	r0, r2
 800b68a:	f7f4 ff75 	bl	8000578 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b68e:	4b2a      	ldr	r3, [pc, #168]	; (800b738 <vTaskSwitchContext+0x118>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	60fb      	str	r3, [r7, #12]
 800b694:	e010      	b.n	800b6b8 <vTaskSwitchContext+0x98>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d10a      	bne.n	800b6b2 <vTaskSwitchContext+0x92>
	__asm volatile
 800b69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a0:	f383 8811 	msr	BASEPRI, r3
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	607b      	str	r3, [r7, #4]
}
 800b6ae:	bf00      	nop
 800b6b0:	e7fe      	b.n	800b6b0 <vTaskSwitchContext+0x90>
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	4920      	ldr	r1, [pc, #128]	; (800b73c <vTaskSwitchContext+0x11c>)
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4413      	add	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	440b      	add	r3, r1
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d0e4      	beq.n	800b696 <vTaskSwitchContext+0x76>
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4a19      	ldr	r2, [pc, #100]	; (800b73c <vTaskSwitchContext+0x11c>)
 800b6d8:	4413      	add	r3, r2
 800b6da:	60bb      	str	r3, [r7, #8]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	685a      	ldr	r2, [r3, #4]
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	605a      	str	r2, [r3, #4]
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	3308      	adds	r3, #8
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d104      	bne.n	800b6fc <vTaskSwitchContext+0xdc>
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	605a      	str	r2, [r3, #4]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	4a0c      	ldr	r2, [pc, #48]	; (800b734 <vTaskSwitchContext+0x114>)
 800b704:	6013      	str	r3, [r2, #0]
 800b706:	4a0c      	ldr	r2, [pc, #48]	; (800b738 <vTaskSwitchContext+0x118>)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b70c:	4b09      	ldr	r3, [pc, #36]	; (800b734 <vTaskSwitchContext+0x114>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	335c      	adds	r3, #92	; 0x5c
 800b712:	4a0b      	ldr	r2, [pc, #44]	; (800b740 <vTaskSwitchContext+0x120>)
 800b714:	6013      	str	r3, [r2, #0]
}
 800b716:	bf00      	nop
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	20001280 	.word	0x20001280
 800b724:	2000126c 	.word	0x2000126c
 800b728:	2000a3ec 	.word	0x2000a3ec
 800b72c:	20001288 	.word	0x20001288
 800b730:	20001284 	.word	0x20001284
 800b734:	20000d84 	.word	0x20000d84
 800b738:	20001260 	.word	0x20001260
 800b73c:	20000d88 	.word	0x20000d88
 800b740:	20000184 	.word	0x20000184

0800b744 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10a      	bne.n	800b76a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	60fb      	str	r3, [r7, #12]
}
 800b766:	bf00      	nop
 800b768:	e7fe      	b.n	800b768 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b76a:	4b07      	ldr	r3, [pc, #28]	; (800b788 <vTaskPlaceOnEventList+0x44>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3318      	adds	r3, #24
 800b770:	4619      	mov	r1, r3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7fe fa11 	bl	8009b9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b778:	2101      	movs	r1, #1
 800b77a:	6838      	ldr	r0, [r7, #0]
 800b77c:	f000 fd92 	bl	800c2a4 <prvAddCurrentTaskToDelayedList>
}
 800b780:	bf00      	nop
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	20000d84 	.word	0x20000d84

0800b78c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d10a      	bne.n	800b7b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	617b      	str	r3, [r7, #20]
}
 800b7b0:	bf00      	nop
 800b7b2:	e7fe      	b.n	800b7b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7b4:	4b0a      	ldr	r3, [pc, #40]	; (800b7e0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3318      	adds	r3, #24
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f7fe f9c8 	bl	8009b52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d002      	beq.n	800b7ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b7c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7ce:	6879      	ldr	r1, [r7, #4]
 800b7d0:	68b8      	ldr	r0, [r7, #8]
 800b7d2:	f000 fd67 	bl	800c2a4 <prvAddCurrentTaskToDelayedList>
	}
 800b7d6:	bf00      	nop
 800b7d8:	3718      	adds	r7, #24
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	20000d84 	.word	0x20000d84

0800b7e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10a      	bne.n	800b810 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fe:	f383 8811 	msr	BASEPRI, r3
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	60fb      	str	r3, [r7, #12]
}
 800b80c:	bf00      	nop
 800b80e:	e7fe      	b.n	800b80e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	3318      	adds	r3, #24
 800b814:	4618      	mov	r0, r3
 800b816:	f7fe f9f9 	bl	8009c0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b81a:	4b1e      	ldr	r3, [pc, #120]	; (800b894 <xTaskRemoveFromEventList+0xb0>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d11d      	bne.n	800b85e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	3304      	adds	r3, #4
 800b826:	4618      	mov	r0, r3
 800b828:	f7fe f9f0 	bl	8009c0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b830:	4b19      	ldr	r3, [pc, #100]	; (800b898 <xTaskRemoveFromEventList+0xb4>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	429a      	cmp	r2, r3
 800b836:	d903      	bls.n	800b840 <xTaskRemoveFromEventList+0x5c>
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83c:	4a16      	ldr	r2, [pc, #88]	; (800b898 <xTaskRemoveFromEventList+0xb4>)
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b844:	4613      	mov	r3, r2
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	4413      	add	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	4a13      	ldr	r2, [pc, #76]	; (800b89c <xTaskRemoveFromEventList+0xb8>)
 800b84e:	441a      	add	r2, r3
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	3304      	adds	r3, #4
 800b854:	4619      	mov	r1, r3
 800b856:	4610      	mov	r0, r2
 800b858:	f7fe f97b 	bl	8009b52 <vListInsertEnd>
 800b85c:	e005      	b.n	800b86a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	3318      	adds	r3, #24
 800b862:	4619      	mov	r1, r3
 800b864:	480e      	ldr	r0, [pc, #56]	; (800b8a0 <xTaskRemoveFromEventList+0xbc>)
 800b866:	f7fe f974 	bl	8009b52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86e:	4b0d      	ldr	r3, [pc, #52]	; (800b8a4 <xTaskRemoveFromEventList+0xc0>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b874:	429a      	cmp	r2, r3
 800b876:	d905      	bls.n	800b884 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b878:	2301      	movs	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b87c:	4b0a      	ldr	r3, [pc, #40]	; (800b8a8 <xTaskRemoveFromEventList+0xc4>)
 800b87e:	2201      	movs	r2, #1
 800b880:	601a      	str	r2, [r3, #0]
 800b882:	e001      	b.n	800b888 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b884:	2300      	movs	r3, #0
 800b886:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b888:	697b      	ldr	r3, [r7, #20]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3718      	adds	r7, #24
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	20001280 	.word	0x20001280
 800b898:	20001260 	.word	0x20001260
 800b89c:	20000d88 	.word	0x20000d88
 800b8a0:	20001218 	.word	0x20001218
 800b8a4:	20000d84 	.word	0x20000d84
 800b8a8:	2000126c 	.word	0x2000126c

0800b8ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8b4:	4b06      	ldr	r3, [pc, #24]	; (800b8d0 <vTaskInternalSetTimeOutState+0x24>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8bc:	4b05      	ldr	r3, [pc, #20]	; (800b8d4 <vTaskInternalSetTimeOutState+0x28>)
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	605a      	str	r2, [r3, #4]
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	20001270 	.word	0x20001270
 800b8d4:	2000125c 	.word	0x2000125c

0800b8d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10a      	bne.n	800b8fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	613b      	str	r3, [r7, #16]
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10a      	bne.n	800b91a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	60fb      	str	r3, [r7, #12]
}
 800b916:	bf00      	nop
 800b918:	e7fe      	b.n	800b918 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b91a:	f001 f993 	bl	800cc44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b91e:	4b1d      	ldr	r3, [pc, #116]	; (800b994 <xTaskCheckForTimeOut+0xbc>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	69ba      	ldr	r2, [r7, #24]
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b936:	d102      	bne.n	800b93e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b938:	2300      	movs	r3, #0
 800b93a:	61fb      	str	r3, [r7, #28]
 800b93c:	e023      	b.n	800b986 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	4b15      	ldr	r3, [pc, #84]	; (800b998 <xTaskCheckForTimeOut+0xc0>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	429a      	cmp	r2, r3
 800b948:	d007      	beq.n	800b95a <xTaskCheckForTimeOut+0x82>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	69ba      	ldr	r2, [r7, #24]
 800b950:	429a      	cmp	r2, r3
 800b952:	d302      	bcc.n	800b95a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b954:	2301      	movs	r3, #1
 800b956:	61fb      	str	r3, [r7, #28]
 800b958:	e015      	b.n	800b986 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	429a      	cmp	r2, r3
 800b962:	d20b      	bcs.n	800b97c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	1ad2      	subs	r2, r2, r3
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff ff9b 	bl	800b8ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b976:	2300      	movs	r3, #0
 800b978:	61fb      	str	r3, [r7, #28]
 800b97a:	e004      	b.n	800b986 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2200      	movs	r2, #0
 800b980:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b982:	2301      	movs	r3, #1
 800b984:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b986:	f001 f98d 	bl	800cca4 <vPortExitCritical>

	return xReturn;
 800b98a:	69fb      	ldr	r3, [r7, #28]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3720      	adds	r7, #32
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	2000125c 	.word	0x2000125c
 800b998:	20001270 	.word	0x20001270

0800b99c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9a0:	4b03      	ldr	r3, [pc, #12]	; (800b9b0 <vTaskMissedYield+0x14>)
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	601a      	str	r2, [r3, #0]
}
 800b9a6:	bf00      	nop
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	2000126c 	.word	0x2000126c

0800b9b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9bc:	f000 f852 	bl	800ba64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9c0:	4b06      	ldr	r3, [pc, #24]	; (800b9dc <prvIdleTask+0x28>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d9f9      	bls.n	800b9bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9c8:	4b05      	ldr	r3, [pc, #20]	; (800b9e0 <prvIdleTask+0x2c>)
 800b9ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ce:	601a      	str	r2, [r3, #0]
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b9d8:	e7f0      	b.n	800b9bc <prvIdleTask+0x8>
 800b9da:	bf00      	nop
 800b9dc:	20000d88 	.word	0x20000d88
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	607b      	str	r3, [r7, #4]
 800b9ee:	e00c      	b.n	800ba0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4a12      	ldr	r2, [pc, #72]	; (800ba44 <prvInitialiseTaskLists+0x60>)
 800b9fc:	4413      	add	r3, r2
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe f87a 	bl	8009af8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	3301      	adds	r3, #1
 800ba08:	607b      	str	r3, [r7, #4]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b37      	cmp	r3, #55	; 0x37
 800ba0e:	d9ef      	bls.n	800b9f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba10:	480d      	ldr	r0, [pc, #52]	; (800ba48 <prvInitialiseTaskLists+0x64>)
 800ba12:	f7fe f871 	bl	8009af8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba16:	480d      	ldr	r0, [pc, #52]	; (800ba4c <prvInitialiseTaskLists+0x68>)
 800ba18:	f7fe f86e 	bl	8009af8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba1c:	480c      	ldr	r0, [pc, #48]	; (800ba50 <prvInitialiseTaskLists+0x6c>)
 800ba1e:	f7fe f86b 	bl	8009af8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba22:	480c      	ldr	r0, [pc, #48]	; (800ba54 <prvInitialiseTaskLists+0x70>)
 800ba24:	f7fe f868 	bl	8009af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba28:	480b      	ldr	r0, [pc, #44]	; (800ba58 <prvInitialiseTaskLists+0x74>)
 800ba2a:	f7fe f865 	bl	8009af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba2e:	4b0b      	ldr	r3, [pc, #44]	; (800ba5c <prvInitialiseTaskLists+0x78>)
 800ba30:	4a05      	ldr	r2, [pc, #20]	; (800ba48 <prvInitialiseTaskLists+0x64>)
 800ba32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba34:	4b0a      	ldr	r3, [pc, #40]	; (800ba60 <prvInitialiseTaskLists+0x7c>)
 800ba36:	4a05      	ldr	r2, [pc, #20]	; (800ba4c <prvInitialiseTaskLists+0x68>)
 800ba38:	601a      	str	r2, [r3, #0]
}
 800ba3a:	bf00      	nop
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20000d88 	.word	0x20000d88
 800ba48:	200011e8 	.word	0x200011e8
 800ba4c:	200011fc 	.word	0x200011fc
 800ba50:	20001218 	.word	0x20001218
 800ba54:	2000122c 	.word	0x2000122c
 800ba58:	20001244 	.word	0x20001244
 800ba5c:	20001210 	.word	0x20001210
 800ba60:	20001214 	.word	0x20001214

0800ba64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba6a:	e019      	b.n	800baa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba6c:	f001 f8ea 	bl	800cc44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba70:	4b10      	ldr	r3, [pc, #64]	; (800bab4 <prvCheckTasksWaitingTermination+0x50>)
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fe f8c5 	bl	8009c0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba82:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <prvCheckTasksWaitingTermination+0x54>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3b01      	subs	r3, #1
 800ba88:	4a0b      	ldr	r2, [pc, #44]	; (800bab8 <prvCheckTasksWaitingTermination+0x54>)
 800ba8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba8c:	4b0b      	ldr	r3, [pc, #44]	; (800babc <prvCheckTasksWaitingTermination+0x58>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	4a0a      	ldr	r2, [pc, #40]	; (800babc <prvCheckTasksWaitingTermination+0x58>)
 800ba94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba96:	f001 f905 	bl	800cca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f8e4 	bl	800bc68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baa0:	4b06      	ldr	r3, [pc, #24]	; (800babc <prvCheckTasksWaitingTermination+0x58>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e1      	bne.n	800ba6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800baa8:	bf00      	nop
 800baaa:	bf00      	nop
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	2000122c 	.word	0x2000122c
 800bab8:	20001258 	.word	0x20001258
 800babc:	20001240 	.word	0x20001240

0800bac0 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d102      	bne.n	800bada <vTaskGetInfo+0x1a>
 800bad4:	4b2c      	ldr	r3, [pc, #176]	; (800bb88 <vTaskGetInfo+0xc8>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	e000      	b.n	800badc <vTaskGetInfo+0x1c>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	697a      	ldr	r2, [r7, #20]
 800bae2:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800bb16:	78fb      	ldrb	r3, [r7, #3]
 800bb18:	2b05      	cmp	r3, #5
 800bb1a:	d01a      	beq.n	800bb52 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800bb1c:	4b1a      	ldr	r3, [pc, #104]	; (800bb88 <vTaskGetInfo+0xc8>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d103      	bne.n	800bb2e <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	731a      	strb	r2, [r3, #12]
 800bb2c:	e018      	b.n	800bb60 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	78fa      	ldrb	r2, [r7, #3]
 800bb32:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800bb34:	78fb      	ldrb	r3, [r7, #3]
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	d112      	bne.n	800bb60 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800bb3a:	f7ff fb6b 	bl	800b214 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	2202      	movs	r2, #2
 800bb4a:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800bb4c:	f7ff fb70 	bl	800b230 <xTaskResumeAll>
 800bb50:	e006      	b.n	800bb60 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800bb52:	6978      	ldr	r0, [r7, #20]
 800bb54:	f7ff fa84 	bl	800b060 <eTaskGetState>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d009      	beq.n	800bb7a <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 f860 	bl	800bc30 <prvTaskCheckFreeStackSpace>
 800bb70:	4603      	mov	r3, r0
 800bb72:	461a      	mov	r2, r3
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800bb78:	e002      	b.n	800bb80 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	841a      	strh	r2, [r3, #32]
	}
 800bb80:	bf00      	nop
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	20000d84 	.word	0x20000d84

0800bb8c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08a      	sub	sp, #40	; 0x28
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	4613      	mov	r3, r2
 800bb98:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d03f      	beq.n	800bc26 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	623b      	str	r3, [r7, #32]
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	605a      	str	r2, [r3, #4]
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
 800bbb6:	685a      	ldr	r2, [r3, #4]
 800bbb8:	6a3b      	ldr	r3, [r7, #32]
 800bbba:	3308      	adds	r3, #8
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d104      	bne.n	800bbca <prvListTasksWithinSingleList+0x3e>
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	605a      	str	r2, [r3, #4]
 800bbca:	6a3b      	ldr	r3, [r7, #32]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	61bb      	str	r3, [r7, #24]
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	685a      	ldr	r2, [r3, #4]
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	605a      	str	r2, [r3, #4]
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	685a      	ldr	r2, [r3, #4]
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	3308      	adds	r3, #8
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d104      	bne.n	800bbf6 <prvListTasksWithinSingleList+0x6a>
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	605a      	str	r2, [r3, #4]
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800bbfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc00:	4613      	mov	r3, r2
 800bc02:	00db      	lsls	r3, r3, #3
 800bc04:	4413      	add	r3, r2
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	461a      	mov	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	1899      	adds	r1, r3, r2
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	2201      	movs	r2, #1
 800bc12:	6978      	ldr	r0, [r7, #20]
 800bc14:	f7ff ff54 	bl	800bac0 <vTaskGetInfo>
				uxTask++;
 800bc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d1d5      	bne.n	800bbd2 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800bc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3728      	adds	r7, #40	; 0x28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bc3c:	e005      	b.n	800bc4a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	3301      	adds	r3, #1
 800bc42:	607b      	str	r3, [r7, #4]
			ulCount++;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	3301      	adds	r3, #1
 800bc48:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	2ba5      	cmp	r3, #165	; 0xa5
 800bc50:	d0f5      	beq.n	800bc3e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	089b      	lsrs	r3, r3, #2
 800bc56:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	b29b      	uxth	r3, r3
	}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3714      	adds	r7, #20
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	335c      	adds	r3, #92	; 0x5c
 800bc74:	4618      	mov	r0, r3
 800bc76:	f002 f8e9 	bl	800de4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d108      	bne.n	800bc96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f001 f9c9 	bl	800d020 <vPortFree>
				vPortFree( pxTCB );
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f001 f9c6 	bl	800d020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc94:	e018      	b.n	800bcc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d103      	bne.n	800bca8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f001 f9bd 	bl	800d020 <vPortFree>
	}
 800bca6:	e00f      	b.n	800bcc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	d00a      	beq.n	800bcc8 <prvDeleteTCB+0x60>
	__asm volatile
 800bcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	60fb      	str	r3, [r7, #12]
}
 800bcc4:	bf00      	nop
 800bcc6:	e7fe      	b.n	800bcc6 <prvDeleteTCB+0x5e>
	}
 800bcc8:	bf00      	nop
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcd6:	4b0c      	ldr	r3, [pc, #48]	; (800bd08 <prvResetNextTaskUnblockTime+0x38>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d104      	bne.n	800bcea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bce0:	4b0a      	ldr	r3, [pc, #40]	; (800bd0c <prvResetNextTaskUnblockTime+0x3c>)
 800bce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bce6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bce8:	e008      	b.n	800bcfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcea:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <prvResetNextTaskUnblockTime+0x38>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	4a04      	ldr	r2, [pc, #16]	; (800bd0c <prvResetNextTaskUnblockTime+0x3c>)
 800bcfa:	6013      	str	r3, [r2, #0]
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	20001210 	.word	0x20001210
 800bd0c:	20001278 	.word	0x20001278

0800bd10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd16:	4b0b      	ldr	r3, [pc, #44]	; (800bd44 <xTaskGetSchedulerState+0x34>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d102      	bne.n	800bd24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	607b      	str	r3, [r7, #4]
 800bd22:	e008      	b.n	800bd36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd24:	4b08      	ldr	r3, [pc, #32]	; (800bd48 <xTaskGetSchedulerState+0x38>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d102      	bne.n	800bd32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	607b      	str	r3, [r7, #4]
 800bd30:	e001      	b.n	800bd36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd32:	2300      	movs	r3, #0
 800bd34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd36:	687b      	ldr	r3, [r7, #4]
	}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	20001264 	.word	0x20001264
 800bd48:	20001280 	.word	0x20001280

0800bd4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d051      	beq.n	800be06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd66:	4b2a      	ldr	r3, [pc, #168]	; (800be10 <xTaskPriorityInherit+0xc4>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d241      	bcs.n	800bdf4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	699b      	ldr	r3, [r3, #24]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	db06      	blt.n	800bd86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd78:	4b25      	ldr	r3, [pc, #148]	; (800be10 <xTaskPriorityInherit+0xc4>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	6959      	ldr	r1, [r3, #20]
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd8e:	4613      	mov	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4a1f      	ldr	r2, [pc, #124]	; (800be14 <xTaskPriorityInherit+0xc8>)
 800bd98:	4413      	add	r3, r2
 800bd9a:	4299      	cmp	r1, r3
 800bd9c:	d122      	bne.n	800bde4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	3304      	adds	r3, #4
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fd ff32 	bl	8009c0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bda8:	4b19      	ldr	r3, [pc, #100]	; (800be10 <xTaskPriorityInherit+0xc4>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb6:	4b18      	ldr	r3, [pc, #96]	; (800be18 <xTaskPriorityInherit+0xcc>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d903      	bls.n	800bdc6 <xTaskPriorityInherit+0x7a>
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc2:	4a15      	ldr	r2, [pc, #84]	; (800be18 <xTaskPriorityInherit+0xcc>)
 800bdc4:	6013      	str	r3, [r2, #0]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdca:	4613      	mov	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4a10      	ldr	r2, [pc, #64]	; (800be14 <xTaskPriorityInherit+0xc8>)
 800bdd4:	441a      	add	r2, r3
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	3304      	adds	r3, #4
 800bdda:	4619      	mov	r1, r3
 800bddc:	4610      	mov	r0, r2
 800bdde:	f7fd feb8 	bl	8009b52 <vListInsertEnd>
 800bde2:	e004      	b.n	800bdee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bde4:	4b0a      	ldr	r3, [pc, #40]	; (800be10 <xTaskPriorityInherit+0xc4>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	60fb      	str	r3, [r7, #12]
 800bdf2:	e008      	b.n	800be06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdf8:	4b05      	ldr	r3, [pc, #20]	; (800be10 <xTaskPriorityInherit+0xc4>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d201      	bcs.n	800be06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800be02:	2301      	movs	r3, #1
 800be04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be06:	68fb      	ldr	r3, [r7, #12]
	}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	20000d84 	.word	0x20000d84
 800be14:	20000d88 	.word	0x20000d88
 800be18:	20001260 	.word	0x20001260

0800be1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be28:	2300      	movs	r3, #0
 800be2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d056      	beq.n	800bee0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be32:	4b2e      	ldr	r3, [pc, #184]	; (800beec <xTaskPriorityDisinherit+0xd0>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d00a      	beq.n	800be52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800be3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	60fb      	str	r3, [r7, #12]
}
 800be4e:	bf00      	nop
 800be50:	e7fe      	b.n	800be50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be56:	2b00      	cmp	r3, #0
 800be58:	d10a      	bne.n	800be70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	60bb      	str	r3, [r7, #8]
}
 800be6c:	bf00      	nop
 800be6e:	e7fe      	b.n	800be6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be74:	1e5a      	subs	r2, r3, #1
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be82:	429a      	cmp	r2, r3
 800be84:	d02c      	beq.n	800bee0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d128      	bne.n	800bee0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	3304      	adds	r3, #4
 800be92:	4618      	mov	r0, r3
 800be94:	f7fd feba 	bl	8009c0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb0:	4b0f      	ldr	r3, [pc, #60]	; (800bef0 <xTaskPriorityDisinherit+0xd4>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d903      	bls.n	800bec0 <xTaskPriorityDisinherit+0xa4>
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bebc:	4a0c      	ldr	r2, [pc, #48]	; (800bef0 <xTaskPriorityDisinherit+0xd4>)
 800bebe:	6013      	str	r3, [r2, #0]
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec4:	4613      	mov	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4413      	add	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4a09      	ldr	r2, [pc, #36]	; (800bef4 <xTaskPriorityDisinherit+0xd8>)
 800bece:	441a      	add	r2, r3
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	3304      	adds	r3, #4
 800bed4:	4619      	mov	r1, r3
 800bed6:	4610      	mov	r0, r2
 800bed8:	f7fd fe3b 	bl	8009b52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bedc:	2301      	movs	r3, #1
 800bede:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bee0:	697b      	ldr	r3, [r7, #20]
	}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3718      	adds	r7, #24
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	20000d84 	.word	0x20000d84
 800bef0:	20001260 	.word	0x20001260
 800bef4:	20000d88 	.word	0x20000d88

0800bef8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b088      	sub	sp, #32
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf06:	2301      	movs	r3, #1
 800bf08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d06a      	beq.n	800bfe6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10a      	bne.n	800bf2e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1c:	f383 8811 	msr	BASEPRI, r3
 800bf20:	f3bf 8f6f 	isb	sy
 800bf24:	f3bf 8f4f 	dsb	sy
 800bf28:	60fb      	str	r3, [r7, #12]
}
 800bf2a:	bf00      	nop
 800bf2c:	e7fe      	b.n	800bf2c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf32:	683a      	ldr	r2, [r7, #0]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d902      	bls.n	800bf3e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	61fb      	str	r3, [r7, #28]
 800bf3c:	e002      	b.n	800bf44 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf42:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	69fa      	ldr	r2, [r7, #28]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d04b      	beq.n	800bfe6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf52:	697a      	ldr	r2, [r7, #20]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d146      	bne.n	800bfe6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bf58:	4b25      	ldr	r3, [pc, #148]	; (800bff0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	69ba      	ldr	r2, [r7, #24]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d10a      	bne.n	800bf78 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	60bb      	str	r3, [r7, #8]
}
 800bf74:	bf00      	nop
 800bf76:	e7fe      	b.n	800bf76 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	69fa      	ldr	r2, [r7, #28]
 800bf82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	699b      	ldr	r3, [r3, #24]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	db04      	blt.n	800bf96 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	6959      	ldr	r1, [r3, #20]
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4a13      	ldr	r2, [pc, #76]	; (800bff4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bfa6:	4413      	add	r3, r2
 800bfa8:	4299      	cmp	r1, r3
 800bfaa:	d11c      	bne.n	800bfe6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	3304      	adds	r3, #4
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fd fe2b 	bl	8009c0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfba:	4b0f      	ldr	r3, [pc, #60]	; (800bff8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d903      	bls.n	800bfca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc6:	4a0c      	ldr	r2, [pc, #48]	; (800bff8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bfc8:	6013      	str	r3, [r2, #0]
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfce:	4613      	mov	r3, r2
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	4413      	add	r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4a07      	ldr	r2, [pc, #28]	; (800bff4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bfd8:	441a      	add	r2, r3
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	3304      	adds	r3, #4
 800bfde:	4619      	mov	r1, r3
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	f7fd fdb6 	bl	8009b52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bfe6:	bf00      	nop
 800bfe8:	3720      	adds	r7, #32
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	20000d84 	.word	0x20000d84
 800bff4:	20000d88 	.word	0x20000d88
 800bff8:	20001260 	.word	0x20001260

0800bffc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800c006:	6839      	ldr	r1, [r7, #0]
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f001 ffba 	bl	800df82 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7f4 f8de 	bl	80001d0 <strlen>
 800c014:	60f8      	str	r0, [r7, #12]
 800c016:	e007      	b.n	800c028 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	4413      	add	r3, r2
 800c01e:	2220      	movs	r2, #32
 800c020:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3301      	adds	r3, #1
 800c026:	60fb      	str	r3, [r7, #12]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2b0e      	cmp	r3, #14
 800c02c:	d9f4      	bls.n	800c018 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	4413      	add	r3, r2
 800c034:	2200      	movs	r2, #0
 800c036:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	4413      	add	r3, r2
	}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800c048:	b590      	push	{r4, r7, lr}
 800c04a:	b089      	sub	sp, #36	; 0x24
 800c04c:	af02      	add	r7, sp, #8
 800c04e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800c056:	4b45      	ldr	r3, [pc, #276]	; (800c16c <vTaskList+0x124>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800c05c:	4b43      	ldr	r3, [pc, #268]	; (800c16c <vTaskList+0x124>)
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	4613      	mov	r3, r2
 800c062:	00db      	lsls	r3, r3, #3
 800c064:	4413      	add	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 ff0d 	bl	800ce88 <pvPortMalloc>
 800c06e:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d076      	beq.n	800c164 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800c076:	2200      	movs	r2, #0
 800c078:	68f9      	ldr	r1, [r7, #12]
 800c07a:	68b8      	ldr	r0, [r7, #8]
 800c07c:	f7ff f986 	bl	800b38c <uxTaskGetSystemState>
 800c080:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800c082:	2300      	movs	r3, #0
 800c084:	617b      	str	r3, [r7, #20]
 800c086:	e066      	b.n	800c156 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800c088:	697a      	ldr	r2, [r7, #20]
 800c08a:	4613      	mov	r3, r2
 800c08c:	00db      	lsls	r3, r3, #3
 800c08e:	4413      	add	r3, r2
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	461a      	mov	r2, r3
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	4413      	add	r3, r2
 800c098:	7b1b      	ldrb	r3, [r3, #12]
 800c09a:	2b04      	cmp	r3, #4
 800c09c:	d81b      	bhi.n	800c0d6 <vTaskList+0x8e>
 800c09e:	a201      	add	r2, pc, #4	; (adr r2, 800c0a4 <vTaskList+0x5c>)
 800c0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a4:	0800c0b9 	.word	0x0800c0b9
 800c0a8:	0800c0bf 	.word	0x0800c0bf
 800c0ac:	0800c0c5 	.word	0x0800c0c5
 800c0b0:	0800c0cb 	.word	0x0800c0cb
 800c0b4:	0800c0d1 	.word	0x0800c0d1
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800c0b8:	2358      	movs	r3, #88	; 0x58
 800c0ba:	74fb      	strb	r3, [r7, #19]
										break;
 800c0bc:	e00e      	b.n	800c0dc <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800c0be:	2352      	movs	r3, #82	; 0x52
 800c0c0:	74fb      	strb	r3, [r7, #19]
										break;
 800c0c2:	e00b      	b.n	800c0dc <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800c0c4:	2342      	movs	r3, #66	; 0x42
 800c0c6:	74fb      	strb	r3, [r7, #19]
										break;
 800c0c8:	e008      	b.n	800c0dc <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800c0ca:	2353      	movs	r3, #83	; 0x53
 800c0cc:	74fb      	strb	r3, [r7, #19]
										break;
 800c0ce:	e005      	b.n	800c0dc <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800c0d0:	2344      	movs	r3, #68	; 0x44
 800c0d2:	74fb      	strb	r3, [r7, #19]
										break;
 800c0d4:	e002      	b.n	800c0dc <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	74fb      	strb	r3, [r7, #19]
										break;
 800c0da:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800c0dc:	697a      	ldr	r2, [r7, #20]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	00db      	lsls	r3, r3, #3
 800c0e2:	4413      	add	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f7ff ff83 	bl	800bffc <prvWriteNameToBuffer>
 800c0f6:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c0f8:	7cf9      	ldrb	r1, [r7, #19]
 800c0fa:	697a      	ldr	r2, [r7, #20]
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	00db      	lsls	r3, r3, #3
 800c100:	4413      	add	r3, r2
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	461a      	mov	r2, r3
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	4413      	add	r3, r2
 800c10a:	6918      	ldr	r0, [r3, #16]
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	4613      	mov	r3, r2
 800c110:	00db      	lsls	r3, r3, #3
 800c112:	4413      	add	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	461a      	mov	r2, r3
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	4413      	add	r3, r2
 800c11c:	8c1b      	ldrh	r3, [r3, #32]
 800c11e:	461c      	mov	r4, r3
 800c120:	697a      	ldr	r2, [r7, #20]
 800c122:	4613      	mov	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	4413      	add	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	461a      	mov	r2, r3
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	4413      	add	r3, r2
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	9301      	str	r3, [sp, #4]
 800c134:	9400      	str	r4, [sp, #0]
 800c136:	4603      	mov	r3, r0
 800c138:	460a      	mov	r2, r1
 800c13a:	490d      	ldr	r1, [pc, #52]	; (800c170 <vTaskList+0x128>)
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f001 fef1 	bl	800df24 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7f4 f844 	bl	80001d0 <strlen>
 800c148:	4602      	mov	r2, r0
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	4413      	add	r3, r2
 800c14e:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	3301      	adds	r3, #1
 800c154:	617b      	str	r3, [r7, #20]
 800c156:	697a      	ldr	r2, [r7, #20]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d394      	bcc.n	800c088 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800c15e:	68b8      	ldr	r0, [r7, #8]
 800c160:	f000 ff5e 	bl	800d020 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c164:	bf00      	nop
 800c166:	371c      	adds	r7, #28
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd90      	pop	{r4, r7, pc}
 800c16c:	20001258 	.word	0x20001258
 800c170:	0800e8dc 	.word	0x0800e8dc

0800c174 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800c174:	b580      	push	{r7, lr}
 800c176:	b088      	sub	sp, #32
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800c182:	4b3a      	ldr	r3, [pc, #232]	; (800c26c <vTaskGetRunTimeStats+0xf8>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800c188:	4b38      	ldr	r3, [pc, #224]	; (800c26c <vTaskGetRunTimeStats+0xf8>)
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	4613      	mov	r3, r2
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	4413      	add	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4618      	mov	r0, r3
 800c196:	f000 fe77 	bl	800ce88 <pvPortMalloc>
 800c19a:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d05f      	beq.n	800c262 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800c1a2:	f107 030c 	add.w	r3, r7, #12
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	69b9      	ldr	r1, [r7, #24]
 800c1aa:	6978      	ldr	r0, [r7, #20]
 800c1ac:	f7ff f8ee 	bl	800b38c <uxTaskGetSystemState>
 800c1b0:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	4a2e      	ldr	r2, [pc, #184]	; (800c270 <vTaskGetRunTimeStats+0xfc>)
 800c1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ba:	095b      	lsrs	r3, r3, #5
 800c1bc:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d04b      	beq.n	800c25c <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	61fb      	str	r3, [r7, #28]
 800c1c8:	e044      	b.n	800c254 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800c1ca:	69fa      	ldr	r2, [r7, #28]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	00db      	lsls	r3, r3, #3
 800c1d0:	4413      	add	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	4413      	add	r3, r2
 800c1da:	699a      	ldr	r2, [r3, #24]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1e2:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800c1e4:	69fa      	ldr	r2, [r7, #28]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	00db      	lsls	r3, r3, #3
 800c1ea:	4413      	add	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7ff feff 	bl	800bffc <prvWriteNameToBuffer>
 800c1fe:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00e      	beq.n	800c224 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c206:	69fa      	ldr	r2, [r7, #28]
 800c208:	4613      	mov	r3, r2
 800c20a:	00db      	lsls	r3, r3, #3
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	461a      	mov	r2, r3
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	4413      	add	r3, r2
 800c216:	699a      	ldr	r2, [r3, #24]
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	4916      	ldr	r1, [pc, #88]	; (800c274 <vTaskGetRunTimeStats+0x100>)
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f001 fe81 	bl	800df24 <siprintf>
 800c222:	e00d      	b.n	800c240 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c224:	69fa      	ldr	r2, [r7, #28]
 800c226:	4613      	mov	r3, r2
 800c228:	00db      	lsls	r3, r3, #3
 800c22a:	4413      	add	r3, r2
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	461a      	mov	r2, r3
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	4413      	add	r3, r2
 800c234:	699b      	ldr	r3, [r3, #24]
 800c236:	461a      	mov	r2, r3
 800c238:	490f      	ldr	r1, [pc, #60]	; (800c278 <vTaskGetRunTimeStats+0x104>)
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f001 fe72 	bl	800df24 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7f3 ffc5 	bl	80001d0 <strlen>
 800c246:	4602      	mov	r2, r0
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4413      	add	r3, r2
 800c24c:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	3301      	adds	r3, #1
 800c252:	61fb      	str	r3, [r7, #28]
 800c254:	69fa      	ldr	r2, [r7, #28]
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d3b6      	bcc.n	800c1ca <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800c25c:	6978      	ldr	r0, [r7, #20]
 800c25e:	f000 fedf 	bl	800d020 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c262:	bf00      	nop
 800c264:	3720      	adds	r7, #32
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	20001258 	.word	0x20001258
 800c270:	51eb851f 	.word	0x51eb851f
 800c274:	0800e8ec 	.word	0x0800e8ec
 800c278:	0800e8f8 	.word	0x0800e8f8

0800c27c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c27c:	b480      	push	{r7}
 800c27e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c280:	4b07      	ldr	r3, [pc, #28]	; (800c2a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d004      	beq.n	800c292 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c288:	4b05      	ldr	r3, [pc, #20]	; (800c2a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c28e:	3201      	adds	r2, #1
 800c290:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c292:	4b03      	ldr	r3, [pc, #12]	; (800c2a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c294:	681b      	ldr	r3, [r3, #0]
	}
 800c296:	4618      	mov	r0, r3
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	20000d84 	.word	0x20000d84

0800c2a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2ae:	4b21      	ldr	r3, [pc, #132]	; (800c334 <prvAddCurrentTaskToDelayedList+0x90>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2b4:	4b20      	ldr	r3, [pc, #128]	; (800c338 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fd fca6 	bl	8009c0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2c6:	d10a      	bne.n	800c2de <prvAddCurrentTaskToDelayedList+0x3a>
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d007      	beq.n	800c2de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2ce:	4b1a      	ldr	r3, [pc, #104]	; (800c338 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	4819      	ldr	r0, [pc, #100]	; (800c33c <prvAddCurrentTaskToDelayedList+0x98>)
 800c2d8:	f7fd fc3b 	bl	8009b52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2dc:	e026      	b.n	800c32c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2e6:	4b14      	ldr	r3, [pc, #80]	; (800c338 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d209      	bcs.n	800c30a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2f6:	4b12      	ldr	r3, [pc, #72]	; (800c340 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	4b0f      	ldr	r3, [pc, #60]	; (800c338 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3304      	adds	r3, #4
 800c300:	4619      	mov	r1, r3
 800c302:	4610      	mov	r0, r2
 800c304:	f7fd fc49 	bl	8009b9a <vListInsert>
}
 800c308:	e010      	b.n	800c32c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c30a:	4b0e      	ldr	r3, [pc, #56]	; (800c344 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <prvAddCurrentTaskToDelayedList+0x94>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3304      	adds	r3, #4
 800c314:	4619      	mov	r1, r3
 800c316:	4610      	mov	r0, r2
 800c318:	f7fd fc3f 	bl	8009b9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c31c:	4b0a      	ldr	r3, [pc, #40]	; (800c348 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	429a      	cmp	r2, r3
 800c324:	d202      	bcs.n	800c32c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c326:	4a08      	ldr	r2, [pc, #32]	; (800c348 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	6013      	str	r3, [r2, #0]
}
 800c32c:	bf00      	nop
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	2000125c 	.word	0x2000125c
 800c338:	20000d84 	.word	0x20000d84
 800c33c:	20001244 	.word	0x20001244
 800c340:	20001214 	.word	0x20001214
 800c344:	20001210 	.word	0x20001210
 800c348:	20001278 	.word	0x20001278

0800c34c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b08a      	sub	sp, #40	; 0x28
 800c350:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c352:	2300      	movs	r3, #0
 800c354:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c356:	f000 fb07 	bl	800c968 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c35a:	4b1c      	ldr	r3, [pc, #112]	; (800c3cc <xTimerCreateTimerTask+0x80>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d021      	beq.n	800c3a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c362:	2300      	movs	r3, #0
 800c364:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c366:	2300      	movs	r3, #0
 800c368:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c36a:	1d3a      	adds	r2, r7, #4
 800c36c:	f107 0108 	add.w	r1, r7, #8
 800c370:	f107 030c 	add.w	r3, r7, #12
 800c374:	4618      	mov	r0, r3
 800c376:	f7fd fba5 	bl	8009ac4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c37a:	6879      	ldr	r1, [r7, #4]
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	9202      	str	r2, [sp, #8]
 800c382:	9301      	str	r3, [sp, #4]
 800c384:	2302      	movs	r3, #2
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	2300      	movs	r3, #0
 800c38a:	460a      	mov	r2, r1
 800c38c:	4910      	ldr	r1, [pc, #64]	; (800c3d0 <xTimerCreateTimerTask+0x84>)
 800c38e:	4811      	ldr	r0, [pc, #68]	; (800c3d4 <xTimerCreateTimerTask+0x88>)
 800c390:	f7fe fc74 	bl	800ac7c <xTaskCreateStatic>
 800c394:	4603      	mov	r3, r0
 800c396:	4a10      	ldr	r2, [pc, #64]	; (800c3d8 <xTimerCreateTimerTask+0x8c>)
 800c398:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c39a:	4b0f      	ldr	r3, [pc, #60]	; (800c3d8 <xTimerCreateTimerTask+0x8c>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d001      	beq.n	800c3a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10a      	bne.n	800c3c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	613b      	str	r3, [r7, #16]
}
 800c3be:	bf00      	nop
 800c3c0:	e7fe      	b.n	800c3c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c3c2:	697b      	ldr	r3, [r7, #20]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3718      	adds	r7, #24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	200012bc 	.word	0x200012bc
 800c3d0:	0800e904 	.word	0x0800e904
 800c3d4:	0800c511 	.word	0x0800c511
 800c3d8:	200012c0 	.word	0x200012c0

0800c3dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b08a      	sub	sp, #40	; 0x28
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
 800c3e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d10a      	bne.n	800c40a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f8:	f383 8811 	msr	BASEPRI, r3
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	623b      	str	r3, [r7, #32]
}
 800c406:	bf00      	nop
 800c408:	e7fe      	b.n	800c408 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c40a:	4b1a      	ldr	r3, [pc, #104]	; (800c474 <xTimerGenericCommand+0x98>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d02a      	beq.n	800c468 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	2b05      	cmp	r3, #5
 800c422:	dc18      	bgt.n	800c456 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c424:	f7ff fc74 	bl	800bd10 <xTaskGetSchedulerState>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d109      	bne.n	800c442 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c42e:	4b11      	ldr	r3, [pc, #68]	; (800c474 <xTimerGenericCommand+0x98>)
 800c430:	6818      	ldr	r0, [r3, #0]
 800c432:	f107 0110 	add.w	r1, r7, #16
 800c436:	2300      	movs	r3, #0
 800c438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c43a:	f7fd fdb9 	bl	8009fb0 <xQueueGenericSend>
 800c43e:	6278      	str	r0, [r7, #36]	; 0x24
 800c440:	e012      	b.n	800c468 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c442:	4b0c      	ldr	r3, [pc, #48]	; (800c474 <xTimerGenericCommand+0x98>)
 800c444:	6818      	ldr	r0, [r3, #0]
 800c446:	f107 0110 	add.w	r1, r7, #16
 800c44a:	2300      	movs	r3, #0
 800c44c:	2200      	movs	r2, #0
 800c44e:	f7fd fdaf 	bl	8009fb0 <xQueueGenericSend>
 800c452:	6278      	str	r0, [r7, #36]	; 0x24
 800c454:	e008      	b.n	800c468 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c456:	4b07      	ldr	r3, [pc, #28]	; (800c474 <xTimerGenericCommand+0x98>)
 800c458:	6818      	ldr	r0, [r3, #0]
 800c45a:	f107 0110 	add.w	r1, r7, #16
 800c45e:	2300      	movs	r3, #0
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	f7fd fea3 	bl	800a1ac <xQueueGenericSendFromISR>
 800c466:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3728      	adds	r7, #40	; 0x28
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	200012bc 	.word	0x200012bc

0800c478 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b088      	sub	sp, #32
 800c47c:	af02      	add	r7, sp, #8
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c482:	4b22      	ldr	r3, [pc, #136]	; (800c50c <prvProcessExpiredTimer+0x94>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	3304      	adds	r3, #4
 800c490:	4618      	mov	r0, r3
 800c492:	f7fd fbbb 	bl	8009c0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c49c:	f003 0304 	and.w	r3, r3, #4
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d022      	beq.n	800c4ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	699a      	ldr	r2, [r3, #24]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	18d1      	adds	r1, r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	6978      	ldr	r0, [r7, #20]
 800c4b2:	f000 f8d1 	bl	800c658 <prvInsertTimerInActiveList>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d01f      	beq.n	800c4fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4bc:	2300      	movs	r3, #0
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	6978      	ldr	r0, [r7, #20]
 800c4c8:	f7ff ff88 	bl	800c3dc <xTimerGenericCommand>
 800c4cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d113      	bne.n	800c4fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	60fb      	str	r3, [r7, #12]
}
 800c4e6:	bf00      	nop
 800c4e8:	e7fe      	b.n	800c4e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4f0:	f023 0301 	bic.w	r3, r3, #1
 800c4f4:	b2da      	uxtb	r2, r3
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	6a1b      	ldr	r3, [r3, #32]
 800c500:	6978      	ldr	r0, [r7, #20]
 800c502:	4798      	blx	r3
}
 800c504:	bf00      	nop
 800c506:	3718      	adds	r7, #24
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	200012b4 	.word	0x200012b4

0800c510 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c518:	f107 0308 	add.w	r3, r7, #8
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 f857 	bl	800c5d0 <prvGetNextExpireTime>
 800c522:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	4619      	mov	r1, r3
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f000 f803 	bl	800c534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c52e:	f000 f8d5 	bl	800c6dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c532:	e7f1      	b.n	800c518 <prvTimerTask+0x8>

0800c534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c53e:	f7fe fe69 	bl	800b214 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c542:	f107 0308 	add.w	r3, r7, #8
 800c546:	4618      	mov	r0, r3
 800c548:	f000 f866 	bl	800c618 <prvSampleTimeNow>
 800c54c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d130      	bne.n	800c5b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10a      	bne.n	800c570 <prvProcessTimerOrBlockTask+0x3c>
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d806      	bhi.n	800c570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c562:	f7fe fe65 	bl	800b230 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c566:	68f9      	ldr	r1, [r7, #12]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff ff85 	bl	800c478 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c56e:	e024      	b.n	800c5ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d008      	beq.n	800c588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c576:	4b13      	ldr	r3, [pc, #76]	; (800c5c4 <prvProcessTimerOrBlockTask+0x90>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <prvProcessTimerOrBlockTask+0x50>
 800c580:	2301      	movs	r3, #1
 800c582:	e000      	b.n	800c586 <prvProcessTimerOrBlockTask+0x52>
 800c584:	2300      	movs	r3, #0
 800c586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c588:	4b0f      	ldr	r3, [pc, #60]	; (800c5c8 <prvProcessTimerOrBlockTask+0x94>)
 800c58a:	6818      	ldr	r0, [r3, #0]
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	683a      	ldr	r2, [r7, #0]
 800c594:	4619      	mov	r1, r3
 800c596:	f7fe fb3d 	bl	800ac14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c59a:	f7fe fe49 	bl	800b230 <xTaskResumeAll>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c5a4:	4b09      	ldr	r3, [pc, #36]	; (800c5cc <prvProcessTimerOrBlockTask+0x98>)
 800c5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5aa:	601a      	str	r2, [r3, #0]
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	f3bf 8f6f 	isb	sy
}
 800c5b4:	e001      	b.n	800c5ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c5b6:	f7fe fe3b 	bl	800b230 <xTaskResumeAll>
}
 800c5ba:	bf00      	nop
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	200012b8 	.word	0x200012b8
 800c5c8:	200012bc 	.word	0x200012bc
 800c5cc:	e000ed04 	.word	0xe000ed04

0800c5d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c5d8:	4b0e      	ldr	r3, [pc, #56]	; (800c614 <prvGetNextExpireTime+0x44>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <prvGetNextExpireTime+0x16>
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	e000      	b.n	800c5e8 <prvGetNextExpireTime+0x18>
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d105      	bne.n	800c600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5f4:	4b07      	ldr	r3, [pc, #28]	; (800c614 <prvGetNextExpireTime+0x44>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	e001      	b.n	800c604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c600:	2300      	movs	r3, #0
 800c602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c604:	68fb      	ldr	r3, [r7, #12]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	200012b4 	.word	0x200012b4

0800c618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c620:	f7fe fea4 	bl	800b36c <xTaskGetTickCount>
 800c624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c626:	4b0b      	ldr	r3, [pc, #44]	; (800c654 <prvSampleTimeNow+0x3c>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d205      	bcs.n	800c63c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c630:	f000 f936 	bl	800c8a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	601a      	str	r2, [r3, #0]
 800c63a:	e002      	b.n	800c642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c642:	4a04      	ldr	r2, [pc, #16]	; (800c654 <prvSampleTimeNow+0x3c>)
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c648:	68fb      	ldr	r3, [r7, #12]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	200012c4 	.word	0x200012c4

0800c658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
 800c664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c666:	2300      	movs	r3, #0
 800c668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d812      	bhi.n	800c6a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	1ad2      	subs	r2, r2, r3
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	699b      	ldr	r3, [r3, #24]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d302      	bcc.n	800c692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c68c:	2301      	movs	r3, #1
 800c68e:	617b      	str	r3, [r7, #20]
 800c690:	e01b      	b.n	800c6ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c692:	4b10      	ldr	r3, [pc, #64]	; (800c6d4 <prvInsertTimerInActiveList+0x7c>)
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	3304      	adds	r3, #4
 800c69a:	4619      	mov	r1, r3
 800c69c:	4610      	mov	r0, r2
 800c69e:	f7fd fa7c 	bl	8009b9a <vListInsert>
 800c6a2:	e012      	b.n	800c6ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d206      	bcs.n	800c6ba <prvInsertTimerInActiveList+0x62>
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d302      	bcc.n	800c6ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	617b      	str	r3, [r7, #20]
 800c6b8:	e007      	b.n	800c6ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6ba:	4b07      	ldr	r3, [pc, #28]	; (800c6d8 <prvInsertTimerInActiveList+0x80>)
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	f7fd fa68 	bl	8009b9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c6ca:	697b      	ldr	r3, [r7, #20]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3718      	adds	r7, #24
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	200012b8 	.word	0x200012b8
 800c6d8:	200012b4 	.word	0x200012b4

0800c6dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b08e      	sub	sp, #56	; 0x38
 800c6e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6e2:	e0ca      	b.n	800c87a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	da18      	bge.n	800c71c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c6ea:	1d3b      	adds	r3, r7, #4
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d10a      	bne.n	800c70c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	61fb      	str	r3, [r7, #28]
}
 800c708:	bf00      	nop
 800c70a:	e7fe      	b.n	800c70a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c712:	6850      	ldr	r0, [r2, #4]
 800c714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c716:	6892      	ldr	r2, [r2, #8]
 800c718:	4611      	mov	r1, r2
 800c71a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f2c0 80aa 	blt.w	800c878 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d004      	beq.n	800c73a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	3304      	adds	r3, #4
 800c734:	4618      	mov	r0, r3
 800c736:	f7fd fa69 	bl	8009c0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c73a:	463b      	mov	r3, r7
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff ff6b 	bl	800c618 <prvSampleTimeNow>
 800c742:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b09      	cmp	r3, #9
 800c748:	f200 8097 	bhi.w	800c87a <prvProcessReceivedCommands+0x19e>
 800c74c:	a201      	add	r2, pc, #4	; (adr r2, 800c754 <prvProcessReceivedCommands+0x78>)
 800c74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c752:	bf00      	nop
 800c754:	0800c77d 	.word	0x0800c77d
 800c758:	0800c77d 	.word	0x0800c77d
 800c75c:	0800c77d 	.word	0x0800c77d
 800c760:	0800c7f1 	.word	0x0800c7f1
 800c764:	0800c805 	.word	0x0800c805
 800c768:	0800c84f 	.word	0x0800c84f
 800c76c:	0800c77d 	.word	0x0800c77d
 800c770:	0800c77d 	.word	0x0800c77d
 800c774:	0800c7f1 	.word	0x0800c7f1
 800c778:	0800c805 	.word	0x0800c805
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c782:	f043 0301 	orr.w	r3, r3, #1
 800c786:	b2da      	uxtb	r2, r3
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c78e:	68ba      	ldr	r2, [r7, #8]
 800c790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	18d1      	adds	r1, r2, r3
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c79a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c79c:	f7ff ff5c 	bl	800c658 <prvInsertTimerInActiveList>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d069      	beq.n	800c87a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7b4:	f003 0304 	and.w	r3, r3, #4
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d05e      	beq.n	800c87a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	441a      	add	r2, r3
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ce:	f7ff fe05 	bl	800c3dc <xTimerGenericCommand>
 800c7d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d14f      	bne.n	800c87a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	61bb      	str	r3, [r7, #24]
}
 800c7ec:	bf00      	nop
 800c7ee:	e7fe      	b.n	800c7ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f6:	f023 0301 	bic.w	r3, r3, #1
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c802:	e03a      	b.n	800c87a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c80a:	f043 0301 	orr.w	r3, r3, #1
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10a      	bne.n	800c83a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	617b      	str	r3, [r7, #20]
}
 800c836:	bf00      	nop
 800c838:	e7fe      	b.n	800c838 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	699a      	ldr	r2, [r3, #24]
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	18d1      	adds	r1, r2, r3
 800c842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c848:	f7ff ff06 	bl	800c658 <prvInsertTimerInActiveList>
					break;
 800c84c:	e015      	b.n	800c87a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c854:	f003 0302 	and.w	r3, r3, #2
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d103      	bne.n	800c864 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c85c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c85e:	f000 fbdf 	bl	800d020 <vPortFree>
 800c862:	e00a      	b.n	800c87a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c86a:	f023 0301 	bic.w	r3, r3, #1
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c876:	e000      	b.n	800c87a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c878:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c87a:	4b08      	ldr	r3, [pc, #32]	; (800c89c <prvProcessReceivedCommands+0x1c0>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	1d39      	adds	r1, r7, #4
 800c880:	2200      	movs	r2, #0
 800c882:	4618      	mov	r0, r3
 800c884:	f7fd fdba 	bl	800a3fc <xQueueReceive>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f47f af2a 	bne.w	800c6e4 <prvProcessReceivedCommands+0x8>
	}
}
 800c890:	bf00      	nop
 800c892:	bf00      	nop
 800c894:	3730      	adds	r7, #48	; 0x30
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	200012bc 	.word	0x200012bc

0800c8a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b088      	sub	sp, #32
 800c8a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8a6:	e048      	b.n	800c93a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8a8:	4b2d      	ldr	r3, [pc, #180]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8b2:	4b2b      	ldr	r3, [pc, #172]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	3304      	adds	r3, #4
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fd f9a3 	bl	8009c0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8d4:	f003 0304 	and.w	r3, r3, #4
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d02e      	beq.n	800c93a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	699b      	ldr	r3, [r3, #24]
 800c8e0:	693a      	ldr	r2, [r7, #16]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d90e      	bls.n	800c90c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8fa:	4b19      	ldr	r3, [pc, #100]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	3304      	adds	r3, #4
 800c902:	4619      	mov	r1, r3
 800c904:	4610      	mov	r0, r2
 800c906:	f7fd f948 	bl	8009b9a <vListInsert>
 800c90a:	e016      	b.n	800c93a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c90c:	2300      	movs	r3, #0
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	2300      	movs	r3, #0
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	2100      	movs	r1, #0
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f7ff fd60 	bl	800c3dc <xTimerGenericCommand>
 800c91c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10a      	bne.n	800c93a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	603b      	str	r3, [r7, #0]
}
 800c936:	bf00      	nop
 800c938:	e7fe      	b.n	800c938 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c93a:	4b09      	ldr	r3, [pc, #36]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1b1      	bne.n	800c8a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c944:	4b06      	ldr	r3, [pc, #24]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c94a:	4b06      	ldr	r3, [pc, #24]	; (800c964 <prvSwitchTimerLists+0xc4>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a04      	ldr	r2, [pc, #16]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c950:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c952:	4a04      	ldr	r2, [pc, #16]	; (800c964 <prvSwitchTimerLists+0xc4>)
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	6013      	str	r3, [r2, #0]
}
 800c958:	bf00      	nop
 800c95a:	3718      	adds	r7, #24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	200012b4 	.word	0x200012b4
 800c964:	200012b8 	.word	0x200012b8

0800c968 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c96e:	f000 f969 	bl	800cc44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c972:	4b15      	ldr	r3, [pc, #84]	; (800c9c8 <prvCheckForValidListAndQueue+0x60>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d120      	bne.n	800c9bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c97a:	4814      	ldr	r0, [pc, #80]	; (800c9cc <prvCheckForValidListAndQueue+0x64>)
 800c97c:	f7fd f8bc 	bl	8009af8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c980:	4813      	ldr	r0, [pc, #76]	; (800c9d0 <prvCheckForValidListAndQueue+0x68>)
 800c982:	f7fd f8b9 	bl	8009af8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c986:	4b13      	ldr	r3, [pc, #76]	; (800c9d4 <prvCheckForValidListAndQueue+0x6c>)
 800c988:	4a10      	ldr	r2, [pc, #64]	; (800c9cc <prvCheckForValidListAndQueue+0x64>)
 800c98a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c98c:	4b12      	ldr	r3, [pc, #72]	; (800c9d8 <prvCheckForValidListAndQueue+0x70>)
 800c98e:	4a10      	ldr	r2, [pc, #64]	; (800c9d0 <prvCheckForValidListAndQueue+0x68>)
 800c990:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c992:	2300      	movs	r3, #0
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	4b11      	ldr	r3, [pc, #68]	; (800c9dc <prvCheckForValidListAndQueue+0x74>)
 800c998:	4a11      	ldr	r2, [pc, #68]	; (800c9e0 <prvCheckForValidListAndQueue+0x78>)
 800c99a:	2110      	movs	r1, #16
 800c99c:	200a      	movs	r0, #10
 800c99e:	f7fd f9c7 	bl	8009d30 <xQueueGenericCreateStatic>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	4a08      	ldr	r2, [pc, #32]	; (800c9c8 <prvCheckForValidListAndQueue+0x60>)
 800c9a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9a8:	4b07      	ldr	r3, [pc, #28]	; (800c9c8 <prvCheckForValidListAndQueue+0x60>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d005      	beq.n	800c9bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9b0:	4b05      	ldr	r3, [pc, #20]	; (800c9c8 <prvCheckForValidListAndQueue+0x60>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	490b      	ldr	r1, [pc, #44]	; (800c9e4 <prvCheckForValidListAndQueue+0x7c>)
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fe f8d8 	bl	800ab6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9bc:	f000 f972 	bl	800cca4 <vPortExitCritical>
}
 800c9c0:	bf00      	nop
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	200012bc 	.word	0x200012bc
 800c9cc:	2000128c 	.word	0x2000128c
 800c9d0:	200012a0 	.word	0x200012a0
 800c9d4:	200012b4 	.word	0x200012b4
 800c9d8:	200012b8 	.word	0x200012b8
 800c9dc:	20001368 	.word	0x20001368
 800c9e0:	200012c8 	.word	0x200012c8
 800c9e4:	0800e90c 	.word	0x0800e90c

0800c9e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	3b04      	subs	r3, #4
 800c9f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	3b04      	subs	r3, #4
 800ca06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	f023 0201 	bic.w	r2, r3, #1
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	3b04      	subs	r3, #4
 800ca16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca18:	4a0c      	ldr	r2, [pc, #48]	; (800ca4c <pxPortInitialiseStack+0x64>)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	3b14      	subs	r3, #20
 800ca22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	3b04      	subs	r3, #4
 800ca2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f06f 0202 	mvn.w	r2, #2
 800ca36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	3b20      	subs	r3, #32
 800ca3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3714      	adds	r7, #20
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr
 800ca4c:	0800ca51 	.word	0x0800ca51

0800ca50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca56:	2300      	movs	r3, #0
 800ca58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca5a:	4b12      	ldr	r3, [pc, #72]	; (800caa4 <prvTaskExitError+0x54>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca62:	d00a      	beq.n	800ca7a <prvTaskExitError+0x2a>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	60fb      	str	r3, [r7, #12]
}
 800ca76:	bf00      	nop
 800ca78:	e7fe      	b.n	800ca78 <prvTaskExitError+0x28>
	__asm volatile
 800ca7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca7e:	f383 8811 	msr	BASEPRI, r3
 800ca82:	f3bf 8f6f 	isb	sy
 800ca86:	f3bf 8f4f 	dsb	sy
 800ca8a:	60bb      	str	r3, [r7, #8]
}
 800ca8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca8e:	bf00      	nop
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d0fc      	beq.n	800ca90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca96:	bf00      	nop
 800ca98:	bf00      	nop
 800ca9a:	3714      	adds	r7, #20
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr
 800caa4:	2000011c 	.word	0x2000011c
	...

0800cab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cab0:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <pxCurrentTCBConst2>)
 800cab2:	6819      	ldr	r1, [r3, #0]
 800cab4:	6808      	ldr	r0, [r1, #0]
 800cab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caba:	f380 8809 	msr	PSP, r0
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f04f 0000 	mov.w	r0, #0
 800cac6:	f380 8811 	msr	BASEPRI, r0
 800caca:	4770      	bx	lr
 800cacc:	f3af 8000 	nop.w

0800cad0 <pxCurrentTCBConst2>:
 800cad0:	20000d84 	.word	0x20000d84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cad4:	bf00      	nop
 800cad6:	bf00      	nop

0800cad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cad8:	4808      	ldr	r0, [pc, #32]	; (800cafc <prvPortStartFirstTask+0x24>)
 800cada:	6800      	ldr	r0, [r0, #0]
 800cadc:	6800      	ldr	r0, [r0, #0]
 800cade:	f380 8808 	msr	MSP, r0
 800cae2:	f04f 0000 	mov.w	r0, #0
 800cae6:	f380 8814 	msr	CONTROL, r0
 800caea:	b662      	cpsie	i
 800caec:	b661      	cpsie	f
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	df00      	svc	0
 800caf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cafa:	bf00      	nop
 800cafc:	e000ed08 	.word	0xe000ed08

0800cb00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb06:	4b46      	ldr	r3, [pc, #280]	; (800cc20 <xPortStartScheduler+0x120>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a46      	ldr	r2, [pc, #280]	; (800cc24 <xPortStartScheduler+0x124>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d10a      	bne.n	800cb26 <xPortStartScheduler+0x26>
	__asm volatile
 800cb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	613b      	str	r3, [r7, #16]
}
 800cb22:	bf00      	nop
 800cb24:	e7fe      	b.n	800cb24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb26:	4b3e      	ldr	r3, [pc, #248]	; (800cc20 <xPortStartScheduler+0x120>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a3f      	ldr	r2, [pc, #252]	; (800cc28 <xPortStartScheduler+0x128>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d10a      	bne.n	800cb46 <xPortStartScheduler+0x46>
	__asm volatile
 800cb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb34:	f383 8811 	msr	BASEPRI, r3
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	60fb      	str	r3, [r7, #12]
}
 800cb42:	bf00      	nop
 800cb44:	e7fe      	b.n	800cb44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb46:	4b39      	ldr	r3, [pc, #228]	; (800cc2c <xPortStartScheduler+0x12c>)
 800cb48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	22ff      	movs	r2, #255	; 0xff
 800cb56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb60:	78fb      	ldrb	r3, [r7, #3]
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb68:	b2da      	uxtb	r2, r3
 800cb6a:	4b31      	ldr	r3, [pc, #196]	; (800cc30 <xPortStartScheduler+0x130>)
 800cb6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb6e:	4b31      	ldr	r3, [pc, #196]	; (800cc34 <xPortStartScheduler+0x134>)
 800cb70:	2207      	movs	r2, #7
 800cb72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb74:	e009      	b.n	800cb8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cb76:	4b2f      	ldr	r3, [pc, #188]	; (800cc34 <xPortStartScheduler+0x134>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	4a2d      	ldr	r2, [pc, #180]	; (800cc34 <xPortStartScheduler+0x134>)
 800cb7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb80:	78fb      	ldrb	r3, [r7, #3]
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb8a:	78fb      	ldrb	r3, [r7, #3]
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb92:	2b80      	cmp	r3, #128	; 0x80
 800cb94:	d0ef      	beq.n	800cb76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb96:	4b27      	ldr	r3, [pc, #156]	; (800cc34 <xPortStartScheduler+0x134>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f1c3 0307 	rsb	r3, r3, #7
 800cb9e:	2b04      	cmp	r3, #4
 800cba0:	d00a      	beq.n	800cbb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba6:	f383 8811 	msr	BASEPRI, r3
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	f3bf 8f4f 	dsb	sy
 800cbb2:	60bb      	str	r3, [r7, #8]
}
 800cbb4:	bf00      	nop
 800cbb6:	e7fe      	b.n	800cbb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbb8:	4b1e      	ldr	r3, [pc, #120]	; (800cc34 <xPortStartScheduler+0x134>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	021b      	lsls	r3, r3, #8
 800cbbe:	4a1d      	ldr	r2, [pc, #116]	; (800cc34 <xPortStartScheduler+0x134>)
 800cbc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cbc2:	4b1c      	ldr	r3, [pc, #112]	; (800cc34 <xPortStartScheduler+0x134>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cbca:	4a1a      	ldr	r2, [pc, #104]	; (800cc34 <xPortStartScheduler+0x134>)
 800cbcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbd6:	4b18      	ldr	r3, [pc, #96]	; (800cc38 <xPortStartScheduler+0x138>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a17      	ldr	r2, [pc, #92]	; (800cc38 <xPortStartScheduler+0x138>)
 800cbdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cbe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbe2:	4b15      	ldr	r3, [pc, #84]	; (800cc38 <xPortStartScheduler+0x138>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a14      	ldr	r2, [pc, #80]	; (800cc38 <xPortStartScheduler+0x138>)
 800cbe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cbec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cbee:	f000 f8dd 	bl	800cdac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cbf2:	4b12      	ldr	r3, [pc, #72]	; (800cc3c <xPortStartScheduler+0x13c>)
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cbf8:	f000 f8fc 	bl	800cdf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cbfc:	4b10      	ldr	r3, [pc, #64]	; (800cc40 <xPortStartScheduler+0x140>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a0f      	ldr	r2, [pc, #60]	; (800cc40 <xPortStartScheduler+0x140>)
 800cc02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc08:	f7ff ff66 	bl	800cad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc0c:	f7fe fd08 	bl	800b620 <vTaskSwitchContext>
	prvTaskExitError();
 800cc10:	f7ff ff1e 	bl	800ca50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3718      	adds	r7, #24
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	e000ed00 	.word	0xe000ed00
 800cc24:	410fc271 	.word	0x410fc271
 800cc28:	410fc270 	.word	0x410fc270
 800cc2c:	e000e400 	.word	0xe000e400
 800cc30:	200013b8 	.word	0x200013b8
 800cc34:	200013bc 	.word	0x200013bc
 800cc38:	e000ed20 	.word	0xe000ed20
 800cc3c:	2000011c 	.word	0x2000011c
 800cc40:	e000ef34 	.word	0xe000ef34

0800cc44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
	__asm volatile
 800cc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4e:	f383 8811 	msr	BASEPRI, r3
 800cc52:	f3bf 8f6f 	isb	sy
 800cc56:	f3bf 8f4f 	dsb	sy
 800cc5a:	607b      	str	r3, [r7, #4]
}
 800cc5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc5e:	4b0f      	ldr	r3, [pc, #60]	; (800cc9c <vPortEnterCritical+0x58>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	3301      	adds	r3, #1
 800cc64:	4a0d      	ldr	r2, [pc, #52]	; (800cc9c <vPortEnterCritical+0x58>)
 800cc66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc68:	4b0c      	ldr	r3, [pc, #48]	; (800cc9c <vPortEnterCritical+0x58>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d10f      	bne.n	800cc90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc70:	4b0b      	ldr	r3, [pc, #44]	; (800cca0 <vPortEnterCritical+0x5c>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00a      	beq.n	800cc90 <vPortEnterCritical+0x4c>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	603b      	str	r3, [r7, #0]
}
 800cc8c:	bf00      	nop
 800cc8e:	e7fe      	b.n	800cc8e <vPortEnterCritical+0x4a>
	}
}
 800cc90:	bf00      	nop
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	2000011c 	.word	0x2000011c
 800cca0:	e000ed04 	.word	0xe000ed04

0800cca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccaa:	4b12      	ldr	r3, [pc, #72]	; (800ccf4 <vPortExitCritical+0x50>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d10a      	bne.n	800ccc8 <vPortExitCritical+0x24>
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb6:	f383 8811 	msr	BASEPRI, r3
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	607b      	str	r3, [r7, #4]
}
 800ccc4:	bf00      	nop
 800ccc6:	e7fe      	b.n	800ccc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ccc8:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <vPortExitCritical+0x50>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	3b01      	subs	r3, #1
 800ccce:	4a09      	ldr	r2, [pc, #36]	; (800ccf4 <vPortExitCritical+0x50>)
 800ccd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ccd2:	4b08      	ldr	r3, [pc, #32]	; (800ccf4 <vPortExitCritical+0x50>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d105      	bne.n	800cce6 <vPortExitCritical+0x42>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	f383 8811 	msr	BASEPRI, r3
}
 800cce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cce6:	bf00      	nop
 800cce8:	370c      	adds	r7, #12
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	2000011c 	.word	0x2000011c
	...

0800cd00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd00:	f3ef 8009 	mrs	r0, PSP
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	4b15      	ldr	r3, [pc, #84]	; (800cd60 <pxCurrentTCBConst>)
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	f01e 0f10 	tst.w	lr, #16
 800cd10:	bf08      	it	eq
 800cd12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1a:	6010      	str	r0, [r2, #0]
 800cd1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd24:	f380 8811 	msr	BASEPRI, r0
 800cd28:	f3bf 8f4f 	dsb	sy
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f7fe fc76 	bl	800b620 <vTaskSwitchContext>
 800cd34:	f04f 0000 	mov.w	r0, #0
 800cd38:	f380 8811 	msr	BASEPRI, r0
 800cd3c:	bc09      	pop	{r0, r3}
 800cd3e:	6819      	ldr	r1, [r3, #0]
 800cd40:	6808      	ldr	r0, [r1, #0]
 800cd42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd46:	f01e 0f10 	tst.w	lr, #16
 800cd4a:	bf08      	it	eq
 800cd4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd50:	f380 8809 	msr	PSP, r0
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	f3af 8000 	nop.w

0800cd60 <pxCurrentTCBConst>:
 800cd60:	20000d84 	.word	0x20000d84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd64:	bf00      	nop
 800cd66:	bf00      	nop

0800cd68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	607b      	str	r3, [r7, #4]
}
 800cd80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd82:	f7fe fb93 	bl	800b4ac <xTaskIncrementTick>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d003      	beq.n	800cd94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd8c:	4b06      	ldr	r3, [pc, #24]	; (800cda8 <xPortSysTickHandler+0x40>)
 800cd8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd92:	601a      	str	r2, [r3, #0]
 800cd94:	2300      	movs	r3, #0
 800cd96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	f383 8811 	msr	BASEPRI, r3
}
 800cd9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cda0:	bf00      	nop
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	e000ed04 	.word	0xe000ed04

0800cdac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cdac:	b480      	push	{r7}
 800cdae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdb0:	4b0b      	ldr	r3, [pc, #44]	; (800cde0 <vPortSetupTimerInterrupt+0x34>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdb6:	4b0b      	ldr	r3, [pc, #44]	; (800cde4 <vPortSetupTimerInterrupt+0x38>)
 800cdb8:	2200      	movs	r2, #0
 800cdba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdbc:	4b0a      	ldr	r3, [pc, #40]	; (800cde8 <vPortSetupTimerInterrupt+0x3c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a0a      	ldr	r2, [pc, #40]	; (800cdec <vPortSetupTimerInterrupt+0x40>)
 800cdc2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdc6:	099b      	lsrs	r3, r3, #6
 800cdc8:	4a09      	ldr	r2, [pc, #36]	; (800cdf0 <vPortSetupTimerInterrupt+0x44>)
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdce:	4b04      	ldr	r3, [pc, #16]	; (800cde0 <vPortSetupTimerInterrupt+0x34>)
 800cdd0:	2207      	movs	r2, #7
 800cdd2:	601a      	str	r2, [r3, #0]
}
 800cdd4:	bf00      	nop
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	e000e010 	.word	0xe000e010
 800cde4:	e000e018 	.word	0xe000e018
 800cde8:	20000000 	.word	0x20000000
 800cdec:	10624dd3 	.word	0x10624dd3
 800cdf0:	e000e014 	.word	0xe000e014

0800cdf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cdf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce04 <vPortEnableVFP+0x10>
 800cdf8:	6801      	ldr	r1, [r0, #0]
 800cdfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cdfe:	6001      	str	r1, [r0, #0]
 800ce00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce02:	bf00      	nop
 800ce04:	e000ed88 	.word	0xe000ed88

0800ce08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce0e:	f3ef 8305 	mrs	r3, IPSR
 800ce12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2b0f      	cmp	r3, #15
 800ce18:	d914      	bls.n	800ce44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce1a:	4a17      	ldr	r2, [pc, #92]	; (800ce78 <vPortValidateInterruptPriority+0x70>)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	4413      	add	r3, r2
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce24:	4b15      	ldr	r3, [pc, #84]	; (800ce7c <vPortValidateInterruptPriority+0x74>)
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	7afa      	ldrb	r2, [r7, #11]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d20a      	bcs.n	800ce44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ce2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce32:	f383 8811 	msr	BASEPRI, r3
 800ce36:	f3bf 8f6f 	isb	sy
 800ce3a:	f3bf 8f4f 	dsb	sy
 800ce3e:	607b      	str	r3, [r7, #4]
}
 800ce40:	bf00      	nop
 800ce42:	e7fe      	b.n	800ce42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce44:	4b0e      	ldr	r3, [pc, #56]	; (800ce80 <vPortValidateInterruptPriority+0x78>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce4c:	4b0d      	ldr	r3, [pc, #52]	; (800ce84 <vPortValidateInterruptPriority+0x7c>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d90a      	bls.n	800ce6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce58:	f383 8811 	msr	BASEPRI, r3
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	603b      	str	r3, [r7, #0]
}
 800ce66:	bf00      	nop
 800ce68:	e7fe      	b.n	800ce68 <vPortValidateInterruptPriority+0x60>
	}
 800ce6a:	bf00      	nop
 800ce6c:	3714      	adds	r7, #20
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop
 800ce78:	e000e3f0 	.word	0xe000e3f0
 800ce7c:	200013b8 	.word	0x200013b8
 800ce80:	e000ed0c 	.word	0xe000ed0c
 800ce84:	200013bc 	.word	0x200013bc

0800ce88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b08a      	sub	sp, #40	; 0x28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce90:	2300      	movs	r3, #0
 800ce92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce94:	f7fe f9be 	bl	800b214 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce98:	4b5b      	ldr	r3, [pc, #364]	; (800d008 <pvPortMalloc+0x180>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d101      	bne.n	800cea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cea0:	f000 f92c 	bl	800d0fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cea4:	4b59      	ldr	r3, [pc, #356]	; (800d00c <pvPortMalloc+0x184>)
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	4013      	ands	r3, r2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f040 8093 	bne.w	800cfd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d01d      	beq.n	800cef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ceb8:	2208      	movs	r2, #8
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4413      	add	r3, r2
 800cebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f003 0307 	and.w	r3, r3, #7
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d014      	beq.n	800cef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f023 0307 	bic.w	r3, r3, #7
 800ced0:	3308      	adds	r3, #8
 800ced2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f003 0307 	and.w	r3, r3, #7
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00a      	beq.n	800cef4 <pvPortMalloc+0x6c>
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	617b      	str	r3, [r7, #20]
}
 800cef0:	bf00      	nop
 800cef2:	e7fe      	b.n	800cef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d06e      	beq.n	800cfd8 <pvPortMalloc+0x150>
 800cefa:	4b45      	ldr	r3, [pc, #276]	; (800d010 <pvPortMalloc+0x188>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d869      	bhi.n	800cfd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf04:	4b43      	ldr	r3, [pc, #268]	; (800d014 <pvPortMalloc+0x18c>)
 800cf06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf08:	4b42      	ldr	r3, [pc, #264]	; (800d014 <pvPortMalloc+0x18c>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf0e:	e004      	b.n	800cf1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d903      	bls.n	800cf2c <pvPortMalloc+0xa4>
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d1f1      	bne.n	800cf10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf2c:	4b36      	ldr	r3, [pc, #216]	; (800d008 <pvPortMalloc+0x180>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d050      	beq.n	800cfd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2208      	movs	r2, #8
 800cf3c:	4413      	add	r3, r2
 800cf3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	6a3b      	ldr	r3, [r7, #32]
 800cf46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4a:	685a      	ldr	r2, [r3, #4]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	1ad2      	subs	r2, r2, r3
 800cf50:	2308      	movs	r3, #8
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d91f      	bls.n	800cf98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	f003 0307 	and.w	r3, r3, #7
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00a      	beq.n	800cf80 <pvPortMalloc+0xf8>
	__asm volatile
 800cf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6e:	f383 8811 	msr	BASEPRI, r3
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	613b      	str	r3, [r7, #16]
}
 800cf7c:	bf00      	nop
 800cf7e:	e7fe      	b.n	800cf7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	1ad2      	subs	r2, r2, r3
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf92:	69b8      	ldr	r0, [r7, #24]
 800cf94:	f000 f914 	bl	800d1c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf98:	4b1d      	ldr	r3, [pc, #116]	; (800d010 <pvPortMalloc+0x188>)
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	4a1b      	ldr	r2, [pc, #108]	; (800d010 <pvPortMalloc+0x188>)
 800cfa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cfa6:	4b1a      	ldr	r3, [pc, #104]	; (800d010 <pvPortMalloc+0x188>)
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	4b1b      	ldr	r3, [pc, #108]	; (800d018 <pvPortMalloc+0x190>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d203      	bcs.n	800cfba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cfb2:	4b17      	ldr	r3, [pc, #92]	; (800d010 <pvPortMalloc+0x188>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a18      	ldr	r2, [pc, #96]	; (800d018 <pvPortMalloc+0x190>)
 800cfb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbc:	685a      	ldr	r2, [r3, #4]
 800cfbe:	4b13      	ldr	r3, [pc, #76]	; (800d00c <pvPortMalloc+0x184>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	431a      	orrs	r2, r3
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfca:	2200      	movs	r2, #0
 800cfcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cfce:	4b13      	ldr	r3, [pc, #76]	; (800d01c <pvPortMalloc+0x194>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	4a11      	ldr	r2, [pc, #68]	; (800d01c <pvPortMalloc+0x194>)
 800cfd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cfd8:	f7fe f92a 	bl	800b230 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	f003 0307 	and.w	r3, r3, #7
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00a      	beq.n	800cffc <pvPortMalloc+0x174>
	__asm volatile
 800cfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfea:	f383 8811 	msr	BASEPRI, r3
 800cfee:	f3bf 8f6f 	isb	sy
 800cff2:	f3bf 8f4f 	dsb	sy
 800cff6:	60fb      	str	r3, [r7, #12]
}
 800cff8:	bf00      	nop
 800cffa:	e7fe      	b.n	800cffa <pvPortMalloc+0x172>
	return pvReturn;
 800cffc:	69fb      	ldr	r3, [r7, #28]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3728      	adds	r7, #40	; 0x28
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	20004fc8 	.word	0x20004fc8
 800d00c:	20004fdc 	.word	0x20004fdc
 800d010:	20004fcc 	.word	0x20004fcc
 800d014:	20004fc0 	.word	0x20004fc0
 800d018:	20004fd0 	.word	0x20004fd0
 800d01c:	20004fd4 	.word	0x20004fd4

0800d020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d04d      	beq.n	800d0ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d032:	2308      	movs	r3, #8
 800d034:	425b      	negs	r3, r3
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	4413      	add	r3, r2
 800d03a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	685a      	ldr	r2, [r3, #4]
 800d044:	4b24      	ldr	r3, [pc, #144]	; (800d0d8 <vPortFree+0xb8>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4013      	ands	r3, r2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d10a      	bne.n	800d064 <vPortFree+0x44>
	__asm volatile
 800d04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d052:	f383 8811 	msr	BASEPRI, r3
 800d056:	f3bf 8f6f 	isb	sy
 800d05a:	f3bf 8f4f 	dsb	sy
 800d05e:	60fb      	str	r3, [r7, #12]
}
 800d060:	bf00      	nop
 800d062:	e7fe      	b.n	800d062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00a      	beq.n	800d082 <vPortFree+0x62>
	__asm volatile
 800d06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	60bb      	str	r3, [r7, #8]
}
 800d07e:	bf00      	nop
 800d080:	e7fe      	b.n	800d080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	4b14      	ldr	r3, [pc, #80]	; (800d0d8 <vPortFree+0xb8>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4013      	ands	r3, r2
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d01e      	beq.n	800d0ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d11a      	bne.n	800d0ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	685a      	ldr	r2, [r3, #4]
 800d09c:	4b0e      	ldr	r3, [pc, #56]	; (800d0d8 <vPortFree+0xb8>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	43db      	mvns	r3, r3
 800d0a2:	401a      	ands	r2, r3
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d0a8:	f7fe f8b4 	bl	800b214 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	4b0a      	ldr	r3, [pc, #40]	; (800d0dc <vPortFree+0xbc>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	4a09      	ldr	r2, [pc, #36]	; (800d0dc <vPortFree+0xbc>)
 800d0b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d0ba:	6938      	ldr	r0, [r7, #16]
 800d0bc:	f000 f880 	bl	800d1c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d0c0:	4b07      	ldr	r3, [pc, #28]	; (800d0e0 <vPortFree+0xc0>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	4a06      	ldr	r2, [pc, #24]	; (800d0e0 <vPortFree+0xc0>)
 800d0c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d0ca:	f7fe f8b1 	bl	800b230 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d0ce:	bf00      	nop
 800d0d0:	3718      	adds	r7, #24
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	20004fdc 	.word	0x20004fdc
 800d0dc:	20004fcc 	.word	0x20004fcc
 800d0e0:	20004fd8 	.word	0x20004fd8

0800d0e4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800d0e8:	4b03      	ldr	r3, [pc, #12]	; (800d0f8 <xPortGetFreeHeapSize+0x14>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	20004fcc 	.word	0x20004fcc

0800d0fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d102:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d106:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d108:	4b27      	ldr	r3, [pc, #156]	; (800d1a8 <prvHeapInit+0xac>)
 800d10a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f003 0307 	and.w	r3, r3, #7
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00c      	beq.n	800d130 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	3307      	adds	r3, #7
 800d11a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f023 0307 	bic.w	r3, r3, #7
 800d122:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d124:	68ba      	ldr	r2, [r7, #8]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	4a1f      	ldr	r2, [pc, #124]	; (800d1a8 <prvHeapInit+0xac>)
 800d12c:	4413      	add	r3, r2
 800d12e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d134:	4a1d      	ldr	r2, [pc, #116]	; (800d1ac <prvHeapInit+0xb0>)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d13a:	4b1c      	ldr	r3, [pc, #112]	; (800d1ac <prvHeapInit+0xb0>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	68ba      	ldr	r2, [r7, #8]
 800d144:	4413      	add	r3, r2
 800d146:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d148:	2208      	movs	r2, #8
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	1a9b      	subs	r3, r3, r2
 800d14e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f023 0307 	bic.w	r3, r3, #7
 800d156:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	4a15      	ldr	r2, [pc, #84]	; (800d1b0 <prvHeapInit+0xb4>)
 800d15c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d15e:	4b14      	ldr	r3, [pc, #80]	; (800d1b0 <prvHeapInit+0xb4>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2200      	movs	r2, #0
 800d164:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d166:	4b12      	ldr	r3, [pc, #72]	; (800d1b0 <prvHeapInit+0xb4>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2200      	movs	r2, #0
 800d16c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	1ad2      	subs	r2, r2, r3
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d17c:	4b0c      	ldr	r3, [pc, #48]	; (800d1b0 <prvHeapInit+0xb4>)
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	4a0a      	ldr	r2, [pc, #40]	; (800d1b4 <prvHeapInit+0xb8>)
 800d18a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	4a09      	ldr	r2, [pc, #36]	; (800d1b8 <prvHeapInit+0xbc>)
 800d192:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d194:	4b09      	ldr	r3, [pc, #36]	; (800d1bc <prvHeapInit+0xc0>)
 800d196:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d19a:	601a      	str	r2, [r3, #0]
}
 800d19c:	bf00      	nop
 800d19e:	3714      	adds	r7, #20
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr
 800d1a8:	200013c0 	.word	0x200013c0
 800d1ac:	20004fc0 	.word	0x20004fc0
 800d1b0:	20004fc8 	.word	0x20004fc8
 800d1b4:	20004fd0 	.word	0x20004fd0
 800d1b8:	20004fcc 	.word	0x20004fcc
 800d1bc:	20004fdc 	.word	0x20004fdc

0800d1c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d1c8:	4b28      	ldr	r3, [pc, #160]	; (800d26c <prvInsertBlockIntoFreeList+0xac>)
 800d1ca:	60fb      	str	r3, [r7, #12]
 800d1cc:	e002      	b.n	800d1d4 <prvInsertBlockIntoFreeList+0x14>
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d8f7      	bhi.n	800d1ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	68ba      	ldr	r2, [r7, #8]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d108      	bne.n	800d202 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	685a      	ldr	r2, [r3, #4]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	441a      	add	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	441a      	add	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	429a      	cmp	r2, r3
 800d214:	d118      	bne.n	800d248 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	4b15      	ldr	r3, [pc, #84]	; (800d270 <prvInsertBlockIntoFreeList+0xb0>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d00d      	beq.n	800d23e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	685a      	ldr	r2, [r3, #4]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	441a      	add	r2, r3
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	681a      	ldr	r2, [r3, #0]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	601a      	str	r2, [r3, #0]
 800d23c:	e008      	b.n	800d250 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d23e:	4b0c      	ldr	r3, [pc, #48]	; (800d270 <prvInsertBlockIntoFreeList+0xb0>)
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	601a      	str	r2, [r3, #0]
 800d246:	e003      	b.n	800d250 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	429a      	cmp	r2, r3
 800d256:	d002      	beq.n	800d25e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d25e:	bf00      	nop
 800d260:	3714      	adds	r7, #20
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	20004fc0 	.word	0x20004fc0
 800d270:	20004fc8 	.word	0x20004fc8

0800d274 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d278:	2200      	movs	r2, #0
 800d27a:	4912      	ldr	r1, [pc, #72]	; (800d2c4 <MX_USB_DEVICE_Init+0x50>)
 800d27c:	4812      	ldr	r0, [pc, #72]	; (800d2c8 <MX_USB_DEVICE_Init+0x54>)
 800d27e:	f7fa ff11 	bl	80080a4 <USBD_Init>
 800d282:	4603      	mov	r3, r0
 800d284:	2b00      	cmp	r3, #0
 800d286:	d001      	beq.n	800d28c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d288:	f7f3 ff66 	bl	8001158 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d28c:	490f      	ldr	r1, [pc, #60]	; (800d2cc <MX_USB_DEVICE_Init+0x58>)
 800d28e:	480e      	ldr	r0, [pc, #56]	; (800d2c8 <MX_USB_DEVICE_Init+0x54>)
 800d290:	f7fa ff38 	bl	8008104 <USBD_RegisterClass>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d001      	beq.n	800d29e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d29a:	f7f3 ff5d 	bl	8001158 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d29e:	490c      	ldr	r1, [pc, #48]	; (800d2d0 <MX_USB_DEVICE_Init+0x5c>)
 800d2a0:	4809      	ldr	r0, [pc, #36]	; (800d2c8 <MX_USB_DEVICE_Init+0x54>)
 800d2a2:	f7fa fe59 	bl	8007f58 <USBD_CDC_RegisterInterface>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d001      	beq.n	800d2b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d2ac:	f7f3 ff54 	bl	8001158 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d2b0:	4805      	ldr	r0, [pc, #20]	; (800d2c8 <MX_USB_DEVICE_Init+0x54>)
 800d2b2:	f7fa ff4e 	bl	8008152 <USBD_Start>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d001      	beq.n	800d2c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d2bc:	f7f3 ff4c 	bl	8001158 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d2c0:	bf00      	nop
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	20000134 	.word	0x20000134
 800d2c8:	2000a9c0 	.word	0x2000a9c0
 800d2cc:	20000018 	.word	0x20000018
 800d2d0:	20000120 	.word	0x20000120

0800d2d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d2d8:	2200      	movs	r2, #0
 800d2da:	4905      	ldr	r1, [pc, #20]	; (800d2f0 <CDC_Init_FS+0x1c>)
 800d2dc:	4805      	ldr	r0, [pc, #20]	; (800d2f4 <CDC_Init_FS+0x20>)
 800d2de:	f7fa fe50 	bl	8007f82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d2e2:	4905      	ldr	r1, [pc, #20]	; (800d2f8 <CDC_Init_FS+0x24>)
 800d2e4:	4803      	ldr	r0, [pc, #12]	; (800d2f4 <CDC_Init_FS+0x20>)
 800d2e6:	f7fa fe6a 	bl	8007fbe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d2ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	2000b490 	.word	0x2000b490
 800d2f4:	2000a9c0 	.word	0x2000a9c0
 800d2f8:	2000ac90 	.word	0x2000ac90

0800d2fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d300:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d302:	4618      	mov	r0, r3
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	4603      	mov	r3, r0
 800d314:	6039      	str	r1, [r7, #0]
 800d316:	71fb      	strb	r3, [r7, #7]
 800d318:	4613      	mov	r3, r2
 800d31a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d31c:	79fb      	ldrb	r3, [r7, #7]
 800d31e:	2b23      	cmp	r3, #35	; 0x23
 800d320:	d84a      	bhi.n	800d3b8 <CDC_Control_FS+0xac>
 800d322:	a201      	add	r2, pc, #4	; (adr r2, 800d328 <CDC_Control_FS+0x1c>)
 800d324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d328:	0800d3b9 	.word	0x0800d3b9
 800d32c:	0800d3b9 	.word	0x0800d3b9
 800d330:	0800d3b9 	.word	0x0800d3b9
 800d334:	0800d3b9 	.word	0x0800d3b9
 800d338:	0800d3b9 	.word	0x0800d3b9
 800d33c:	0800d3b9 	.word	0x0800d3b9
 800d340:	0800d3b9 	.word	0x0800d3b9
 800d344:	0800d3b9 	.word	0x0800d3b9
 800d348:	0800d3b9 	.word	0x0800d3b9
 800d34c:	0800d3b9 	.word	0x0800d3b9
 800d350:	0800d3b9 	.word	0x0800d3b9
 800d354:	0800d3b9 	.word	0x0800d3b9
 800d358:	0800d3b9 	.word	0x0800d3b9
 800d35c:	0800d3b9 	.word	0x0800d3b9
 800d360:	0800d3b9 	.word	0x0800d3b9
 800d364:	0800d3b9 	.word	0x0800d3b9
 800d368:	0800d3b9 	.word	0x0800d3b9
 800d36c:	0800d3b9 	.word	0x0800d3b9
 800d370:	0800d3b9 	.word	0x0800d3b9
 800d374:	0800d3b9 	.word	0x0800d3b9
 800d378:	0800d3b9 	.word	0x0800d3b9
 800d37c:	0800d3b9 	.word	0x0800d3b9
 800d380:	0800d3b9 	.word	0x0800d3b9
 800d384:	0800d3b9 	.word	0x0800d3b9
 800d388:	0800d3b9 	.word	0x0800d3b9
 800d38c:	0800d3b9 	.word	0x0800d3b9
 800d390:	0800d3b9 	.word	0x0800d3b9
 800d394:	0800d3b9 	.word	0x0800d3b9
 800d398:	0800d3b9 	.word	0x0800d3b9
 800d39c:	0800d3b9 	.word	0x0800d3b9
 800d3a0:	0800d3b9 	.word	0x0800d3b9
 800d3a4:	0800d3b9 	.word	0x0800d3b9
 800d3a8:	0800d3b9 	.word	0x0800d3b9
 800d3ac:	0800d3b9 	.word	0x0800d3b9
 800d3b0:	0800d3b9 	.word	0x0800d3b9
 800d3b4:	0800d3b9 	.word	0x0800d3b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d3b8:	bf00      	nop
  }

  return (USBD_OK);
 800d3ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d3d2:	6879      	ldr	r1, [r7, #4]
 800d3d4:	4805      	ldr	r0, [pc, #20]	; (800d3ec <CDC_Receive_FS+0x24>)
 800d3d6:	f7fa fdf2 	bl	8007fbe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d3da:	4804      	ldr	r0, [pc, #16]	; (800d3ec <CDC_Receive_FS+0x24>)
 800d3dc:	f7fa fe38 	bl	8008050 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d3e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3708      	adds	r7, #8
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	2000a9c0 	.word	0x2000a9c0

0800d3f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d400:	4b0d      	ldr	r3, [pc, #52]	; (800d438 <CDC_Transmit_FS+0x48>)
 800d402:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d406:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d412:	2301      	movs	r3, #1
 800d414:	e00b      	b.n	800d42e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d416:	887b      	ldrh	r3, [r7, #2]
 800d418:	461a      	mov	r2, r3
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	4806      	ldr	r0, [pc, #24]	; (800d438 <CDC_Transmit_FS+0x48>)
 800d41e:	f7fa fdb0 	bl	8007f82 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d422:	4805      	ldr	r0, [pc, #20]	; (800d438 <CDC_Transmit_FS+0x48>)
 800d424:	f7fa fde4 	bl	8007ff0 <USBD_CDC_TransmitPacket>
 800d428:	4603      	mov	r3, r0
 800d42a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	2000a9c0 	.word	0x2000a9c0

0800d43c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b087      	sub	sp, #28
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	4613      	mov	r3, r2
 800d448:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d44a:	2300      	movs	r3, #0
 800d44c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d44e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d452:	4618      	mov	r0, r3
 800d454:	371c      	adds	r7, #28
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
	...

0800d460 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	4603      	mov	r3, r0
 800d468:	6039      	str	r1, [r7, #0]
 800d46a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	2212      	movs	r2, #18
 800d470:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d472:	4b03      	ldr	r3, [pc, #12]	; (800d480 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d474:	4618      	mov	r0, r3
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr
 800d480:	20000150 	.word	0x20000150

0800d484 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	4603      	mov	r3, r0
 800d48c:	6039      	str	r1, [r7, #0]
 800d48e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	2204      	movs	r2, #4
 800d494:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d496:	4b03      	ldr	r3, [pc, #12]	; (800d4a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d498:	4618      	mov	r0, r3
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr
 800d4a4:	20000164 	.word	0x20000164

0800d4a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	6039      	str	r1, [r7, #0]
 800d4b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4b4:	79fb      	ldrb	r3, [r7, #7]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d105      	bne.n	800d4c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	4907      	ldr	r1, [pc, #28]	; (800d4dc <USBD_FS_ProductStrDescriptor+0x34>)
 800d4be:	4808      	ldr	r0, [pc, #32]	; (800d4e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d4c0:	f7fb fe79 	bl	80091b6 <USBD_GetString>
 800d4c4:	e004      	b.n	800d4d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d4c6:	683a      	ldr	r2, [r7, #0]
 800d4c8:	4904      	ldr	r1, [pc, #16]	; (800d4dc <USBD_FS_ProductStrDescriptor+0x34>)
 800d4ca:	4805      	ldr	r0, [pc, #20]	; (800d4e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d4cc:	f7fb fe73 	bl	80091b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4d0:	4b02      	ldr	r3, [pc, #8]	; (800d4dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3708      	adds	r7, #8
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	2000bc90 	.word	0x2000bc90
 800d4e0:	0800e914 	.word	0x0800e914

0800d4e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	6039      	str	r1, [r7, #0]
 800d4ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d4f0:	683a      	ldr	r2, [r7, #0]
 800d4f2:	4904      	ldr	r1, [pc, #16]	; (800d504 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d4f4:	4804      	ldr	r0, [pc, #16]	; (800d508 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d4f6:	f7fb fe5e 	bl	80091b6 <USBD_GetString>
  return USBD_StrDesc;
 800d4fa:	4b02      	ldr	r3, [pc, #8]	; (800d504 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	2000bc90 	.word	0x2000bc90
 800d508:	0800e92c 	.word	0x0800e92c

0800d50c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	4603      	mov	r3, r0
 800d514:	6039      	str	r1, [r7, #0]
 800d516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	221a      	movs	r2, #26
 800d51c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d51e:	f000 f843 	bl	800d5a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d522:	4b02      	ldr	r3, [pc, #8]	; (800d52c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d524:	4618      	mov	r0, r3
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	20000168 	.word	0x20000168

0800d530 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	4603      	mov	r3, r0
 800d538:	6039      	str	r1, [r7, #0]
 800d53a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d53c:	79fb      	ldrb	r3, [r7, #7]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d105      	bne.n	800d54e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d542:	683a      	ldr	r2, [r7, #0]
 800d544:	4907      	ldr	r1, [pc, #28]	; (800d564 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d546:	4808      	ldr	r0, [pc, #32]	; (800d568 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d548:	f7fb fe35 	bl	80091b6 <USBD_GetString>
 800d54c:	e004      	b.n	800d558 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d54e:	683a      	ldr	r2, [r7, #0]
 800d550:	4904      	ldr	r1, [pc, #16]	; (800d564 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d552:	4805      	ldr	r0, [pc, #20]	; (800d568 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d554:	f7fb fe2f 	bl	80091b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d558:	4b02      	ldr	r3, [pc, #8]	; (800d564 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	2000bc90 	.word	0x2000bc90
 800d568:	0800e940 	.word	0x0800e940

0800d56c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	4603      	mov	r3, r0
 800d574:	6039      	str	r1, [r7, #0]
 800d576:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d578:	79fb      	ldrb	r3, [r7, #7]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d105      	bne.n	800d58a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	4907      	ldr	r1, [pc, #28]	; (800d5a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d582:	4808      	ldr	r0, [pc, #32]	; (800d5a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d584:	f7fb fe17 	bl	80091b6 <USBD_GetString>
 800d588:	e004      	b.n	800d594 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	4904      	ldr	r1, [pc, #16]	; (800d5a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d58e:	4805      	ldr	r0, [pc, #20]	; (800d5a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d590:	f7fb fe11 	bl	80091b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d594:	4b02      	ldr	r3, [pc, #8]	; (800d5a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d596:	4618      	mov	r0, r3
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	2000bc90 	.word	0x2000bc90
 800d5a4:	0800e94c 	.word	0x0800e94c

0800d5a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d5ae:	4b0f      	ldr	r3, [pc, #60]	; (800d5ec <Get_SerialNum+0x44>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d5b4:	4b0e      	ldr	r3, [pc, #56]	; (800d5f0 <Get_SerialNum+0x48>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d5ba:	4b0e      	ldr	r3, [pc, #56]	; (800d5f4 <Get_SerialNum+0x4c>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d009      	beq.n	800d5e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d5ce:	2208      	movs	r2, #8
 800d5d0:	4909      	ldr	r1, [pc, #36]	; (800d5f8 <Get_SerialNum+0x50>)
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f000 f814 	bl	800d600 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d5d8:	2204      	movs	r2, #4
 800d5da:	4908      	ldr	r1, [pc, #32]	; (800d5fc <Get_SerialNum+0x54>)
 800d5dc:	68b8      	ldr	r0, [r7, #8]
 800d5de:	f000 f80f 	bl	800d600 <IntToUnicode>
  }
}
 800d5e2:	bf00      	nop
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	1fff7a10 	.word	0x1fff7a10
 800d5f0:	1fff7a14 	.word	0x1fff7a14
 800d5f4:	1fff7a18 	.word	0x1fff7a18
 800d5f8:	2000016a 	.word	0x2000016a
 800d5fc:	2000017a 	.word	0x2000017a

0800d600 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d600:	b480      	push	{r7}
 800d602:	b087      	sub	sp, #28
 800d604:	af00      	add	r7, sp, #0
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	4613      	mov	r3, r2
 800d60c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d60e:	2300      	movs	r3, #0
 800d610:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d612:	2300      	movs	r3, #0
 800d614:	75fb      	strb	r3, [r7, #23]
 800d616:	e027      	b.n	800d668 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	0f1b      	lsrs	r3, r3, #28
 800d61c:	2b09      	cmp	r3, #9
 800d61e:	d80b      	bhi.n	800d638 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	0f1b      	lsrs	r3, r3, #28
 800d624:	b2da      	uxtb	r2, r3
 800d626:	7dfb      	ldrb	r3, [r7, #23]
 800d628:	005b      	lsls	r3, r3, #1
 800d62a:	4619      	mov	r1, r3
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	440b      	add	r3, r1
 800d630:	3230      	adds	r2, #48	; 0x30
 800d632:	b2d2      	uxtb	r2, r2
 800d634:	701a      	strb	r2, [r3, #0]
 800d636:	e00a      	b.n	800d64e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	0f1b      	lsrs	r3, r3, #28
 800d63c:	b2da      	uxtb	r2, r3
 800d63e:	7dfb      	ldrb	r3, [r7, #23]
 800d640:	005b      	lsls	r3, r3, #1
 800d642:	4619      	mov	r1, r3
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	440b      	add	r3, r1
 800d648:	3237      	adds	r2, #55	; 0x37
 800d64a:	b2d2      	uxtb	r2, r2
 800d64c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	011b      	lsls	r3, r3, #4
 800d652:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d654:	7dfb      	ldrb	r3, [r7, #23]
 800d656:	005b      	lsls	r3, r3, #1
 800d658:	3301      	adds	r3, #1
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	4413      	add	r3, r2
 800d65e:	2200      	movs	r2, #0
 800d660:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d662:	7dfb      	ldrb	r3, [r7, #23]
 800d664:	3301      	adds	r3, #1
 800d666:	75fb      	strb	r3, [r7, #23]
 800d668:	7dfa      	ldrb	r2, [r7, #23]
 800d66a:	79fb      	ldrb	r3, [r7, #7]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d3d3      	bcc.n	800d618 <IntToUnicode+0x18>
  }
}
 800d670:	bf00      	nop
 800d672:	bf00      	nop
 800d674:	371c      	adds	r7, #28
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
	...

0800d680 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b08a      	sub	sp, #40	; 0x28
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d688:	f107 0314 	add.w	r3, r7, #20
 800d68c:	2200      	movs	r2, #0
 800d68e:	601a      	str	r2, [r3, #0]
 800d690:	605a      	str	r2, [r3, #4]
 800d692:	609a      	str	r2, [r3, #8]
 800d694:	60da      	str	r2, [r3, #12]
 800d696:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6a0:	d147      	bne.n	800d732 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	613b      	str	r3, [r7, #16]
 800d6a6:	4b25      	ldr	r3, [pc, #148]	; (800d73c <HAL_PCD_MspInit+0xbc>)
 800d6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6aa:	4a24      	ldr	r2, [pc, #144]	; (800d73c <HAL_PCD_MspInit+0xbc>)
 800d6ac:	f043 0301 	orr.w	r3, r3, #1
 800d6b0:	6313      	str	r3, [r2, #48]	; 0x30
 800d6b2:	4b22      	ldr	r3, [pc, #136]	; (800d73c <HAL_PCD_MspInit+0xbc>)
 800d6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b6:	f003 0301 	and.w	r3, r3, #1
 800d6ba:	613b      	str	r3, [r7, #16]
 800d6bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d6be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d6cc:	f107 0314 	add.w	r3, r7, #20
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	481b      	ldr	r0, [pc, #108]	; (800d740 <HAL_PCD_MspInit+0xc0>)
 800d6d4:	f7f4 fe6a 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d6d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d6dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6de:	2302      	movs	r3, #2
 800d6e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d6ea:	230a      	movs	r3, #10
 800d6ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6ee:	f107 0314 	add.w	r3, r7, #20
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	4812      	ldr	r0, [pc, #72]	; (800d740 <HAL_PCD_MspInit+0xc0>)
 800d6f6:	f7f4 fe59 	bl	80023ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d6fa:	4b10      	ldr	r3, [pc, #64]	; (800d73c <HAL_PCD_MspInit+0xbc>)
 800d6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6fe:	4a0f      	ldr	r2, [pc, #60]	; (800d73c <HAL_PCD_MspInit+0xbc>)
 800d700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d704:	6353      	str	r3, [r2, #52]	; 0x34
 800d706:	2300      	movs	r3, #0
 800d708:	60fb      	str	r3, [r7, #12]
 800d70a:	4b0c      	ldr	r3, [pc, #48]	; (800d73c <HAL_PCD_MspInit+0xbc>)
 800d70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d70e:	4a0b      	ldr	r2, [pc, #44]	; (800d73c <HAL_PCD_MspInit+0xbc>)
 800d710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d714:	6453      	str	r3, [r2, #68]	; 0x44
 800d716:	4b09      	ldr	r3, [pc, #36]	; (800d73c <HAL_PCD_MspInit+0xbc>)
 800d718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d71a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d71e:	60fb      	str	r3, [r7, #12]
 800d720:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d722:	2200      	movs	r2, #0
 800d724:	2105      	movs	r1, #5
 800d726:	2043      	movs	r0, #67	; 0x43
 800d728:	f7f4 fe16 	bl	8002358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d72c:	2043      	movs	r0, #67	; 0x43
 800d72e:	f7f4 fe2f 	bl	8002390 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d732:	bf00      	nop
 800d734:	3728      	adds	r7, #40	; 0x28
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	40023800 	.word	0x40023800
 800d740:	40020000 	.word	0x40020000

0800d744 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d758:	4619      	mov	r1, r3
 800d75a:	4610      	mov	r0, r2
 800d75c:	f7fa fd44 	bl	80081e8 <USBD_LL_SetupStage>
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	460b      	mov	r3, r1
 800d772:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d77a:	78fa      	ldrb	r2, [r7, #3]
 800d77c:	6879      	ldr	r1, [r7, #4]
 800d77e:	4613      	mov	r3, r2
 800d780:	00db      	lsls	r3, r3, #3
 800d782:	1a9b      	subs	r3, r3, r2
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	440b      	add	r3, r1
 800d788:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	78fb      	ldrb	r3, [r7, #3]
 800d790:	4619      	mov	r1, r3
 800d792:	f7fa fd7e 	bl	8008292 <USBD_LL_DataOutStage>
}
 800d796:	bf00      	nop
 800d798:	3708      	adds	r7, #8
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}

0800d79e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d79e:	b580      	push	{r7, lr}
 800d7a0:	b082      	sub	sp, #8
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d7b0:	78fa      	ldrb	r2, [r7, #3]
 800d7b2:	6879      	ldr	r1, [r7, #4]
 800d7b4:	4613      	mov	r3, r2
 800d7b6:	00db      	lsls	r3, r3, #3
 800d7b8:	1a9b      	subs	r3, r3, r2
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	440b      	add	r3, r1
 800d7be:	3348      	adds	r3, #72	; 0x48
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	78fb      	ldrb	r3, [r7, #3]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	f7fa fdc7 	bl	8008358 <USBD_LL_DataInStage>
}
 800d7ca:	bf00      	nop
 800d7cc:	3708      	adds	r7, #8
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b082      	sub	sp, #8
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7fa fedb 	bl	800859c <USBD_LL_SOF>
}
 800d7e6:	bf00      	nop
 800d7e8:	3708      	adds	r7, #8
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b084      	sub	sp, #16
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d102      	bne.n	800d808 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d802:	2300      	movs	r3, #0
 800d804:	73fb      	strb	r3, [r7, #15]
 800d806:	e008      	b.n	800d81a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d102      	bne.n	800d816 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d810:	2301      	movs	r3, #1
 800d812:	73fb      	strb	r3, [r7, #15]
 800d814:	e001      	b.n	800d81a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d816:	f7f3 fc9f 	bl	8001158 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d820:	7bfa      	ldrb	r2, [r7, #15]
 800d822:	4611      	mov	r1, r2
 800d824:	4618      	mov	r0, r3
 800d826:	f7fa fe7b 	bl	8008520 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d830:	4618      	mov	r0, r3
 800d832:	f7fa fe27 	bl	8008484 <USBD_LL_Reset>
}
 800d836:	bf00      	nop
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
	...

0800d840 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fa fe76 	bl	8008540 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	6812      	ldr	r2, [r2, #0]
 800d862:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d866:	f043 0301 	orr.w	r3, r3, #1
 800d86a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6a1b      	ldr	r3, [r3, #32]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d005      	beq.n	800d880 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d874:	4b04      	ldr	r3, [pc, #16]	; (800d888 <HAL_PCD_SuspendCallback+0x48>)
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	4a03      	ldr	r2, [pc, #12]	; (800d888 <HAL_PCD_SuspendCallback+0x48>)
 800d87a:	f043 0306 	orr.w	r3, r3, #6
 800d87e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d880:	bf00      	nop
 800d882:	3708      	adds	r7, #8
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	e000ed00 	.word	0xe000ed00

0800d88c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fa fe66 	bl	800856c <USBD_LL_Resume>
}
 800d8a0:	bf00      	nop
 800d8a2:	3708      	adds	r7, #8
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8ba:	78fa      	ldrb	r2, [r7, #3]
 800d8bc:	4611      	mov	r1, r2
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fa feb4 	bl	800862c <USBD_LL_IsoOUTIncomplete>
}
 800d8c4:	bf00      	nop
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8de:	78fa      	ldrb	r2, [r7, #3]
 800d8e0:	4611      	mov	r1, r2
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fa fe7c 	bl	80085e0 <USBD_LL_IsoINIncomplete>
}
 800d8e8:	bf00      	nop
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fa feba 	bl	8008678 <USBD_LL_DevConnected>
}
 800d904:	bf00      	nop
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fa feb7 	bl	800868e <USBD_LL_DevDisconnected>
}
 800d920:	bf00      	nop
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d13c      	bne.n	800d9b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d938:	4a20      	ldr	r2, [pc, #128]	; (800d9bc <USBD_LL_Init+0x94>)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a1e      	ldr	r2, [pc, #120]	; (800d9bc <USBD_LL_Init+0x94>)
 800d944:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d948:	4b1c      	ldr	r3, [pc, #112]	; (800d9bc <USBD_LL_Init+0x94>)
 800d94a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d94e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d950:	4b1a      	ldr	r3, [pc, #104]	; (800d9bc <USBD_LL_Init+0x94>)
 800d952:	2204      	movs	r2, #4
 800d954:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d956:	4b19      	ldr	r3, [pc, #100]	; (800d9bc <USBD_LL_Init+0x94>)
 800d958:	2202      	movs	r2, #2
 800d95a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d95c:	4b17      	ldr	r3, [pc, #92]	; (800d9bc <USBD_LL_Init+0x94>)
 800d95e:	2200      	movs	r2, #0
 800d960:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d962:	4b16      	ldr	r3, [pc, #88]	; (800d9bc <USBD_LL_Init+0x94>)
 800d964:	2202      	movs	r2, #2
 800d966:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d968:	4b14      	ldr	r3, [pc, #80]	; (800d9bc <USBD_LL_Init+0x94>)
 800d96a:	2200      	movs	r2, #0
 800d96c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d96e:	4b13      	ldr	r3, [pc, #76]	; (800d9bc <USBD_LL_Init+0x94>)
 800d970:	2200      	movs	r2, #0
 800d972:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d974:	4b11      	ldr	r3, [pc, #68]	; (800d9bc <USBD_LL_Init+0x94>)
 800d976:	2200      	movs	r2, #0
 800d978:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d97a:	4b10      	ldr	r3, [pc, #64]	; (800d9bc <USBD_LL_Init+0x94>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d980:	4b0e      	ldr	r3, [pc, #56]	; (800d9bc <USBD_LL_Init+0x94>)
 800d982:	2200      	movs	r2, #0
 800d984:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d986:	480d      	ldr	r0, [pc, #52]	; (800d9bc <USBD_LL_Init+0x94>)
 800d988:	f7f5 fcdc 	bl	8003344 <HAL_PCD_Init>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d992:	f7f3 fbe1 	bl	8001158 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d996:	2180      	movs	r1, #128	; 0x80
 800d998:	4808      	ldr	r0, [pc, #32]	; (800d9bc <USBD_LL_Init+0x94>)
 800d99a:	f7f6 fe3a 	bl	8004612 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d99e:	2240      	movs	r2, #64	; 0x40
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	4806      	ldr	r0, [pc, #24]	; (800d9bc <USBD_LL_Init+0x94>)
 800d9a4:	f7f6 fdee 	bl	8004584 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d9a8:	2280      	movs	r2, #128	; 0x80
 800d9aa:	2101      	movs	r1, #1
 800d9ac:	4803      	ldr	r0, [pc, #12]	; (800d9bc <USBD_LL_Init+0x94>)
 800d9ae:	f7f6 fde9 	bl	8004584 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	2000be90 	.word	0x2000be90

0800d9c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7f5 fdd1 	bl	800357e <HAL_PCD_Start>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9e0:	7bfb      	ldrb	r3, [r7, #15]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f000 f942 	bl	800dc6c <USBD_Get_USB_Status>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b084      	sub	sp, #16
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
 800d9fe:	4608      	mov	r0, r1
 800da00:	4611      	mov	r1, r2
 800da02:	461a      	mov	r2, r3
 800da04:	4603      	mov	r3, r0
 800da06:	70fb      	strb	r3, [r7, #3]
 800da08:	460b      	mov	r3, r1
 800da0a:	70bb      	strb	r3, [r7, #2]
 800da0c:	4613      	mov	r3, r2
 800da0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da14:	2300      	movs	r3, #0
 800da16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da1e:	78bb      	ldrb	r3, [r7, #2]
 800da20:	883a      	ldrh	r2, [r7, #0]
 800da22:	78f9      	ldrb	r1, [r7, #3]
 800da24:	f7f6 f9b5 	bl	8003d92 <HAL_PCD_EP_Open>
 800da28:	4603      	mov	r3, r0
 800da2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da2c:	7bfb      	ldrb	r3, [r7, #15]
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 f91c 	bl	800dc6c <USBD_Get_USB_Status>
 800da34:	4603      	mov	r3, r0
 800da36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da38:	7bbb      	ldrb	r3, [r7, #14]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b084      	sub	sp, #16
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	460b      	mov	r3, r1
 800da4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da4e:	2300      	movs	r3, #0
 800da50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da52:	2300      	movs	r3, #0
 800da54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da5c:	78fa      	ldrb	r2, [r7, #3]
 800da5e:	4611      	mov	r1, r2
 800da60:	4618      	mov	r0, r3
 800da62:	f7f6 f9fe 	bl	8003e62 <HAL_PCD_EP_Close>
 800da66:	4603      	mov	r3, r0
 800da68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da6a:	7bfb      	ldrb	r3, [r7, #15]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f000 f8fd 	bl	800dc6c <USBD_Get_USB_Status>
 800da72:	4603      	mov	r3, r0
 800da74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da76:	7bbb      	ldrb	r3, [r7, #14]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	460b      	mov	r3, r1
 800da8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da8c:	2300      	movs	r3, #0
 800da8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da90:	2300      	movs	r3, #0
 800da92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da9a:	78fa      	ldrb	r2, [r7, #3]
 800da9c:	4611      	mov	r1, r2
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7f6 fad6 	bl	8004050 <HAL_PCD_EP_SetStall>
 800daa4:	4603      	mov	r3, r0
 800daa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daa8:	7bfb      	ldrb	r3, [r7, #15]
 800daaa:	4618      	mov	r0, r3
 800daac:	f000 f8de 	bl	800dc6c <USBD_Get_USB_Status>
 800dab0:	4603      	mov	r3, r0
 800dab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dab4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3710      	adds	r7, #16
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b084      	sub	sp, #16
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
 800dac6:	460b      	mov	r3, r1
 800dac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daca:	2300      	movs	r3, #0
 800dacc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dace:	2300      	movs	r3, #0
 800dad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dad8:	78fa      	ldrb	r2, [r7, #3]
 800dada:	4611      	mov	r1, r2
 800dadc:	4618      	mov	r0, r3
 800dade:	f7f6 fb1b 	bl	8004118 <HAL_PCD_EP_ClrStall>
 800dae2:	4603      	mov	r3, r0
 800dae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dae6:	7bfb      	ldrb	r3, [r7, #15]
 800dae8:	4618      	mov	r0, r3
 800daea:	f000 f8bf 	bl	800dc6c <USBD_Get_USB_Status>
 800daee:	4603      	mov	r3, r0
 800daf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	460b      	mov	r3, r1
 800db06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db14:	2b00      	cmp	r3, #0
 800db16:	da0b      	bge.n	800db30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db18:	78fb      	ldrb	r3, [r7, #3]
 800db1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db1e:	68f9      	ldr	r1, [r7, #12]
 800db20:	4613      	mov	r3, r2
 800db22:	00db      	lsls	r3, r3, #3
 800db24:	1a9b      	subs	r3, r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	440b      	add	r3, r1
 800db2a:	333e      	adds	r3, #62	; 0x3e
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	e00b      	b.n	800db48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db30:	78fb      	ldrb	r3, [r7, #3]
 800db32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db36:	68f9      	ldr	r1, [r7, #12]
 800db38:	4613      	mov	r3, r2
 800db3a:	00db      	lsls	r3, r3, #3
 800db3c:	1a9b      	subs	r3, r3, r2
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	440b      	add	r3, r1
 800db42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3714      	adds	r7, #20
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	460b      	mov	r3, r1
 800db5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db60:	2300      	movs	r3, #0
 800db62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db64:	2300      	movs	r3, #0
 800db66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db6e:	78fa      	ldrb	r2, [r7, #3]
 800db70:	4611      	mov	r1, r2
 800db72:	4618      	mov	r0, r3
 800db74:	f7f6 f8e8 	bl	8003d48 <HAL_PCD_SetAddress>
 800db78:	4603      	mov	r3, r0
 800db7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 f874 	bl	800dc6c <USBD_Get_USB_Status>
 800db84:	4603      	mov	r3, r0
 800db86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db88:	7bbb      	ldrb	r3, [r7, #14]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b086      	sub	sp, #24
 800db96:	af00      	add	r7, sp, #0
 800db98:	60f8      	str	r0, [r7, #12]
 800db9a:	607a      	str	r2, [r7, #4]
 800db9c:	603b      	str	r3, [r7, #0]
 800db9e:	460b      	mov	r3, r1
 800dba0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dba2:	2300      	movs	r3, #0
 800dba4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dba6:	2300      	movs	r3, #0
 800dba8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dbb0:	7af9      	ldrb	r1, [r7, #11]
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	f7f6 fa01 	bl	8003fbc <HAL_PCD_EP_Transmit>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbbe:	7dfb      	ldrb	r3, [r7, #23]
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f000 f853 	bl	800dc6c <USBD_Get_USB_Status>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbca:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3718      	adds	r7, #24
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b086      	sub	sp, #24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	607a      	str	r2, [r7, #4]
 800dbde:	603b      	str	r3, [r7, #0]
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dbf2:	7af9      	ldrb	r1, [r7, #11]
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	f7f6 f97d 	bl	8003ef6 <HAL_PCD_EP_Receive>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc00:	7dfb      	ldrb	r3, [r7, #23]
 800dc02:	4618      	mov	r0, r3
 800dc04:	f000 f832 	bl	800dc6c <USBD_Get_USB_Status>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc0c:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3718      	adds	r7, #24
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b082      	sub	sp, #8
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
 800dc1e:	460b      	mov	r3, r1
 800dc20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc28:	78fa      	ldrb	r2, [r7, #3]
 800dc2a:	4611      	mov	r1, r2
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7f6 f9ad 	bl	8003f8c <HAL_PCD_EP_GetRxCount>
 800dc32:	4603      	mov	r3, r0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc44:	4b03      	ldr	r3, [pc, #12]	; (800dc54 <USBD_static_malloc+0x18>)
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	370c      	adds	r7, #12
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop
 800dc54:	20004fe0 	.word	0x20004fe0

0800dc58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]

}
 800dc60:	bf00      	nop
 800dc62:	370c      	adds	r7, #12
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b085      	sub	sp, #20
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4603      	mov	r3, r0
 800dc74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc7a:	79fb      	ldrb	r3, [r7, #7]
 800dc7c:	2b03      	cmp	r3, #3
 800dc7e:	d817      	bhi.n	800dcb0 <USBD_Get_USB_Status+0x44>
 800dc80:	a201      	add	r2, pc, #4	; (adr r2, 800dc88 <USBD_Get_USB_Status+0x1c>)
 800dc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc86:	bf00      	nop
 800dc88:	0800dc99 	.word	0x0800dc99
 800dc8c:	0800dc9f 	.word	0x0800dc9f
 800dc90:	0800dca5 	.word	0x0800dca5
 800dc94:	0800dcab 	.word	0x0800dcab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc9c:	e00b      	b.n	800dcb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc9e:	2303      	movs	r3, #3
 800dca0:	73fb      	strb	r3, [r7, #15]
    break;
 800dca2:	e008      	b.n	800dcb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dca4:	2301      	movs	r3, #1
 800dca6:	73fb      	strb	r3, [r7, #15]
    break;
 800dca8:	e005      	b.n	800dcb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcaa:	2303      	movs	r3, #3
 800dcac:	73fb      	strb	r3, [r7, #15]
    break;
 800dcae:	e002      	b.n	800dcb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	73fb      	strb	r3, [r7, #15]
    break;
 800dcb4:	bf00      	nop
  }
  return usb_status;
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3714      	adds	r7, #20
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <__errno>:
 800dcc4:	4b01      	ldr	r3, [pc, #4]	; (800dccc <__errno+0x8>)
 800dcc6:	6818      	ldr	r0, [r3, #0]
 800dcc8:	4770      	bx	lr
 800dcca:	bf00      	nop
 800dccc:	20000184 	.word	0x20000184

0800dcd0 <__libc_init_array>:
 800dcd0:	b570      	push	{r4, r5, r6, lr}
 800dcd2:	4d0d      	ldr	r5, [pc, #52]	; (800dd08 <__libc_init_array+0x38>)
 800dcd4:	4c0d      	ldr	r4, [pc, #52]	; (800dd0c <__libc_init_array+0x3c>)
 800dcd6:	1b64      	subs	r4, r4, r5
 800dcd8:	10a4      	asrs	r4, r4, #2
 800dcda:	2600      	movs	r6, #0
 800dcdc:	42a6      	cmp	r6, r4
 800dcde:	d109      	bne.n	800dcf4 <__libc_init_array+0x24>
 800dce0:	4d0b      	ldr	r5, [pc, #44]	; (800dd10 <__libc_init_array+0x40>)
 800dce2:	4c0c      	ldr	r4, [pc, #48]	; (800dd14 <__libc_init_array+0x44>)
 800dce4:	f000 fd2c 	bl	800e740 <_init>
 800dce8:	1b64      	subs	r4, r4, r5
 800dcea:	10a4      	asrs	r4, r4, #2
 800dcec:	2600      	movs	r6, #0
 800dcee:	42a6      	cmp	r6, r4
 800dcf0:	d105      	bne.n	800dcfe <__libc_init_array+0x2e>
 800dcf2:	bd70      	pop	{r4, r5, r6, pc}
 800dcf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcf8:	4798      	blx	r3
 800dcfa:	3601      	adds	r6, #1
 800dcfc:	e7ee      	b.n	800dcdc <__libc_init_array+0xc>
 800dcfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd02:	4798      	blx	r3
 800dd04:	3601      	adds	r6, #1
 800dd06:	e7f2      	b.n	800dcee <__libc_init_array+0x1e>
 800dd08:	0800eb58 	.word	0x0800eb58
 800dd0c:	0800eb58 	.word	0x0800eb58
 800dd10:	0800eb58 	.word	0x0800eb58
 800dd14:	0800eb5c 	.word	0x0800eb5c

0800dd18 <__itoa>:
 800dd18:	1e93      	subs	r3, r2, #2
 800dd1a:	2b22      	cmp	r3, #34	; 0x22
 800dd1c:	b510      	push	{r4, lr}
 800dd1e:	460c      	mov	r4, r1
 800dd20:	d904      	bls.n	800dd2c <__itoa+0x14>
 800dd22:	2300      	movs	r3, #0
 800dd24:	700b      	strb	r3, [r1, #0]
 800dd26:	461c      	mov	r4, r3
 800dd28:	4620      	mov	r0, r4
 800dd2a:	bd10      	pop	{r4, pc}
 800dd2c:	2a0a      	cmp	r2, #10
 800dd2e:	d109      	bne.n	800dd44 <__itoa+0x2c>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	da07      	bge.n	800dd44 <__itoa+0x2c>
 800dd34:	232d      	movs	r3, #45	; 0x2d
 800dd36:	700b      	strb	r3, [r1, #0]
 800dd38:	4240      	negs	r0, r0
 800dd3a:	2101      	movs	r1, #1
 800dd3c:	4421      	add	r1, r4
 800dd3e:	f000 f929 	bl	800df94 <__utoa>
 800dd42:	e7f1      	b.n	800dd28 <__itoa+0x10>
 800dd44:	2100      	movs	r1, #0
 800dd46:	e7f9      	b.n	800dd3c <__itoa+0x24>

0800dd48 <itoa>:
 800dd48:	f7ff bfe6 	b.w	800dd18 <__itoa>

0800dd4c <__retarget_lock_acquire_recursive>:
 800dd4c:	4770      	bx	lr

0800dd4e <__retarget_lock_release_recursive>:
 800dd4e:	4770      	bx	lr

0800dd50 <memcpy>:
 800dd50:	440a      	add	r2, r1
 800dd52:	4291      	cmp	r1, r2
 800dd54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dd58:	d100      	bne.n	800dd5c <memcpy+0xc>
 800dd5a:	4770      	bx	lr
 800dd5c:	b510      	push	{r4, lr}
 800dd5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd66:	4291      	cmp	r1, r2
 800dd68:	d1f9      	bne.n	800dd5e <memcpy+0xe>
 800dd6a:	bd10      	pop	{r4, pc}

0800dd6c <memset>:
 800dd6c:	4402      	add	r2, r0
 800dd6e:	4603      	mov	r3, r0
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d100      	bne.n	800dd76 <memset+0xa>
 800dd74:	4770      	bx	lr
 800dd76:	f803 1b01 	strb.w	r1, [r3], #1
 800dd7a:	e7f9      	b.n	800dd70 <memset+0x4>

0800dd7c <_malloc_r>:
 800dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7e:	1ccd      	adds	r5, r1, #3
 800dd80:	f025 0503 	bic.w	r5, r5, #3
 800dd84:	3508      	adds	r5, #8
 800dd86:	2d0c      	cmp	r5, #12
 800dd88:	bf38      	it	cc
 800dd8a:	250c      	movcc	r5, #12
 800dd8c:	2d00      	cmp	r5, #0
 800dd8e:	4606      	mov	r6, r0
 800dd90:	db01      	blt.n	800dd96 <_malloc_r+0x1a>
 800dd92:	42a9      	cmp	r1, r5
 800dd94:	d903      	bls.n	800dd9e <_malloc_r+0x22>
 800dd96:	230c      	movs	r3, #12
 800dd98:	6033      	str	r3, [r6, #0]
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd9e:	f000 f93b 	bl	800e018 <__malloc_lock>
 800dda2:	4921      	ldr	r1, [pc, #132]	; (800de28 <_malloc_r+0xac>)
 800dda4:	680a      	ldr	r2, [r1, #0]
 800dda6:	4614      	mov	r4, r2
 800dda8:	b99c      	cbnz	r4, 800ddd2 <_malloc_r+0x56>
 800ddaa:	4f20      	ldr	r7, [pc, #128]	; (800de2c <_malloc_r+0xb0>)
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	b923      	cbnz	r3, 800ddba <_malloc_r+0x3e>
 800ddb0:	4621      	mov	r1, r4
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f000 f8a6 	bl	800df04 <_sbrk_r>
 800ddb8:	6038      	str	r0, [r7, #0]
 800ddba:	4629      	mov	r1, r5
 800ddbc:	4630      	mov	r0, r6
 800ddbe:	f000 f8a1 	bl	800df04 <_sbrk_r>
 800ddc2:	1c43      	adds	r3, r0, #1
 800ddc4:	d123      	bne.n	800de0e <_malloc_r+0x92>
 800ddc6:	230c      	movs	r3, #12
 800ddc8:	6033      	str	r3, [r6, #0]
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f000 f92a 	bl	800e024 <__malloc_unlock>
 800ddd0:	e7e3      	b.n	800dd9a <_malloc_r+0x1e>
 800ddd2:	6823      	ldr	r3, [r4, #0]
 800ddd4:	1b5b      	subs	r3, r3, r5
 800ddd6:	d417      	bmi.n	800de08 <_malloc_r+0x8c>
 800ddd8:	2b0b      	cmp	r3, #11
 800ddda:	d903      	bls.n	800dde4 <_malloc_r+0x68>
 800dddc:	6023      	str	r3, [r4, #0]
 800ddde:	441c      	add	r4, r3
 800dde0:	6025      	str	r5, [r4, #0]
 800dde2:	e004      	b.n	800ddee <_malloc_r+0x72>
 800dde4:	6863      	ldr	r3, [r4, #4]
 800dde6:	42a2      	cmp	r2, r4
 800dde8:	bf0c      	ite	eq
 800ddea:	600b      	streq	r3, [r1, #0]
 800ddec:	6053      	strne	r3, [r2, #4]
 800ddee:	4630      	mov	r0, r6
 800ddf0:	f000 f918 	bl	800e024 <__malloc_unlock>
 800ddf4:	f104 000b 	add.w	r0, r4, #11
 800ddf8:	1d23      	adds	r3, r4, #4
 800ddfa:	f020 0007 	bic.w	r0, r0, #7
 800ddfe:	1ac2      	subs	r2, r0, r3
 800de00:	d0cc      	beq.n	800dd9c <_malloc_r+0x20>
 800de02:	1a1b      	subs	r3, r3, r0
 800de04:	50a3      	str	r3, [r4, r2]
 800de06:	e7c9      	b.n	800dd9c <_malloc_r+0x20>
 800de08:	4622      	mov	r2, r4
 800de0a:	6864      	ldr	r4, [r4, #4]
 800de0c:	e7cc      	b.n	800dda8 <_malloc_r+0x2c>
 800de0e:	1cc4      	adds	r4, r0, #3
 800de10:	f024 0403 	bic.w	r4, r4, #3
 800de14:	42a0      	cmp	r0, r4
 800de16:	d0e3      	beq.n	800dde0 <_malloc_r+0x64>
 800de18:	1a21      	subs	r1, r4, r0
 800de1a:	4630      	mov	r0, r6
 800de1c:	f000 f872 	bl	800df04 <_sbrk_r>
 800de20:	3001      	adds	r0, #1
 800de22:	d1dd      	bne.n	800dde0 <_malloc_r+0x64>
 800de24:	e7cf      	b.n	800ddc6 <_malloc_r+0x4a>
 800de26:	bf00      	nop
 800de28:	20005200 	.word	0x20005200
 800de2c:	20005204 	.word	0x20005204

0800de30 <cleanup_glue>:
 800de30:	b538      	push	{r3, r4, r5, lr}
 800de32:	460c      	mov	r4, r1
 800de34:	6809      	ldr	r1, [r1, #0]
 800de36:	4605      	mov	r5, r0
 800de38:	b109      	cbz	r1, 800de3e <cleanup_glue+0xe>
 800de3a:	f7ff fff9 	bl	800de30 <cleanup_glue>
 800de3e:	4621      	mov	r1, r4
 800de40:	4628      	mov	r0, r5
 800de42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de46:	f000 b8f3 	b.w	800e030 <_free_r>
	...

0800de4c <_reclaim_reent>:
 800de4c:	4b2c      	ldr	r3, [pc, #176]	; (800df00 <_reclaim_reent+0xb4>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4283      	cmp	r3, r0
 800de52:	b570      	push	{r4, r5, r6, lr}
 800de54:	4604      	mov	r4, r0
 800de56:	d051      	beq.n	800defc <_reclaim_reent+0xb0>
 800de58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800de5a:	b143      	cbz	r3, 800de6e <_reclaim_reent+0x22>
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d14a      	bne.n	800def8 <_reclaim_reent+0xac>
 800de62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de64:	6819      	ldr	r1, [r3, #0]
 800de66:	b111      	cbz	r1, 800de6e <_reclaim_reent+0x22>
 800de68:	4620      	mov	r0, r4
 800de6a:	f000 f8e1 	bl	800e030 <_free_r>
 800de6e:	6961      	ldr	r1, [r4, #20]
 800de70:	b111      	cbz	r1, 800de78 <_reclaim_reent+0x2c>
 800de72:	4620      	mov	r0, r4
 800de74:	f000 f8dc 	bl	800e030 <_free_r>
 800de78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800de7a:	b111      	cbz	r1, 800de82 <_reclaim_reent+0x36>
 800de7c:	4620      	mov	r0, r4
 800de7e:	f000 f8d7 	bl	800e030 <_free_r>
 800de82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800de84:	b111      	cbz	r1, 800de8c <_reclaim_reent+0x40>
 800de86:	4620      	mov	r0, r4
 800de88:	f000 f8d2 	bl	800e030 <_free_r>
 800de8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800de8e:	b111      	cbz	r1, 800de96 <_reclaim_reent+0x4a>
 800de90:	4620      	mov	r0, r4
 800de92:	f000 f8cd 	bl	800e030 <_free_r>
 800de96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800de98:	b111      	cbz	r1, 800dea0 <_reclaim_reent+0x54>
 800de9a:	4620      	mov	r0, r4
 800de9c:	f000 f8c8 	bl	800e030 <_free_r>
 800dea0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dea2:	b111      	cbz	r1, 800deaa <_reclaim_reent+0x5e>
 800dea4:	4620      	mov	r0, r4
 800dea6:	f000 f8c3 	bl	800e030 <_free_r>
 800deaa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800deac:	b111      	cbz	r1, 800deb4 <_reclaim_reent+0x68>
 800deae:	4620      	mov	r0, r4
 800deb0:	f000 f8be 	bl	800e030 <_free_r>
 800deb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800deb6:	b111      	cbz	r1, 800debe <_reclaim_reent+0x72>
 800deb8:	4620      	mov	r0, r4
 800deba:	f000 f8b9 	bl	800e030 <_free_r>
 800debe:	69a3      	ldr	r3, [r4, #24]
 800dec0:	b1e3      	cbz	r3, 800defc <_reclaim_reent+0xb0>
 800dec2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dec4:	4620      	mov	r0, r4
 800dec6:	4798      	blx	r3
 800dec8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800deca:	b1b9      	cbz	r1, 800defc <_reclaim_reent+0xb0>
 800decc:	4620      	mov	r0, r4
 800dece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ded2:	f7ff bfad 	b.w	800de30 <cleanup_glue>
 800ded6:	5949      	ldr	r1, [r1, r5]
 800ded8:	b941      	cbnz	r1, 800deec <_reclaim_reent+0xa0>
 800deda:	3504      	adds	r5, #4
 800dedc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dede:	2d80      	cmp	r5, #128	; 0x80
 800dee0:	68d9      	ldr	r1, [r3, #12]
 800dee2:	d1f8      	bne.n	800ded6 <_reclaim_reent+0x8a>
 800dee4:	4620      	mov	r0, r4
 800dee6:	f000 f8a3 	bl	800e030 <_free_r>
 800deea:	e7ba      	b.n	800de62 <_reclaim_reent+0x16>
 800deec:	680e      	ldr	r6, [r1, #0]
 800deee:	4620      	mov	r0, r4
 800def0:	f000 f89e 	bl	800e030 <_free_r>
 800def4:	4631      	mov	r1, r6
 800def6:	e7ef      	b.n	800ded8 <_reclaim_reent+0x8c>
 800def8:	2500      	movs	r5, #0
 800defa:	e7ef      	b.n	800dedc <_reclaim_reent+0x90>
 800defc:	bd70      	pop	{r4, r5, r6, pc}
 800defe:	bf00      	nop
 800df00:	20000184 	.word	0x20000184

0800df04 <_sbrk_r>:
 800df04:	b538      	push	{r3, r4, r5, lr}
 800df06:	4d06      	ldr	r5, [pc, #24]	; (800df20 <_sbrk_r+0x1c>)
 800df08:	2300      	movs	r3, #0
 800df0a:	4604      	mov	r4, r0
 800df0c:	4608      	mov	r0, r1
 800df0e:	602b      	str	r3, [r5, #0]
 800df10:	f7f3 fbba 	bl	8001688 <_sbrk>
 800df14:	1c43      	adds	r3, r0, #1
 800df16:	d102      	bne.n	800df1e <_sbrk_r+0x1a>
 800df18:	682b      	ldr	r3, [r5, #0]
 800df1a:	b103      	cbz	r3, 800df1e <_sbrk_r+0x1a>
 800df1c:	6023      	str	r3, [r4, #0]
 800df1e:	bd38      	pop	{r3, r4, r5, pc}
 800df20:	2000c2a4 	.word	0x2000c2a4

0800df24 <siprintf>:
 800df24:	b40e      	push	{r1, r2, r3}
 800df26:	b500      	push	{lr}
 800df28:	b09c      	sub	sp, #112	; 0x70
 800df2a:	ab1d      	add	r3, sp, #116	; 0x74
 800df2c:	9002      	str	r0, [sp, #8]
 800df2e:	9006      	str	r0, [sp, #24]
 800df30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df34:	4809      	ldr	r0, [pc, #36]	; (800df5c <siprintf+0x38>)
 800df36:	9107      	str	r1, [sp, #28]
 800df38:	9104      	str	r1, [sp, #16]
 800df3a:	4909      	ldr	r1, [pc, #36]	; (800df60 <siprintf+0x3c>)
 800df3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800df40:	9105      	str	r1, [sp, #20]
 800df42:	6800      	ldr	r0, [r0, #0]
 800df44:	9301      	str	r3, [sp, #4]
 800df46:	a902      	add	r1, sp, #8
 800df48:	f000 f91e 	bl	800e188 <_svfiprintf_r>
 800df4c:	9b02      	ldr	r3, [sp, #8]
 800df4e:	2200      	movs	r2, #0
 800df50:	701a      	strb	r2, [r3, #0]
 800df52:	b01c      	add	sp, #112	; 0x70
 800df54:	f85d eb04 	ldr.w	lr, [sp], #4
 800df58:	b003      	add	sp, #12
 800df5a:	4770      	bx	lr
 800df5c:	20000184 	.word	0x20000184
 800df60:	ffff0208 	.word	0xffff0208

0800df64 <strcat>:
 800df64:	b510      	push	{r4, lr}
 800df66:	4602      	mov	r2, r0
 800df68:	7814      	ldrb	r4, [r2, #0]
 800df6a:	4613      	mov	r3, r2
 800df6c:	3201      	adds	r2, #1
 800df6e:	2c00      	cmp	r4, #0
 800df70:	d1fa      	bne.n	800df68 <strcat+0x4>
 800df72:	3b01      	subs	r3, #1
 800df74:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df78:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df7c:	2a00      	cmp	r2, #0
 800df7e:	d1f9      	bne.n	800df74 <strcat+0x10>
 800df80:	bd10      	pop	{r4, pc}

0800df82 <strcpy>:
 800df82:	4603      	mov	r3, r0
 800df84:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df88:	f803 2b01 	strb.w	r2, [r3], #1
 800df8c:	2a00      	cmp	r2, #0
 800df8e:	d1f9      	bne.n	800df84 <strcpy+0x2>
 800df90:	4770      	bx	lr
	...

0800df94 <__utoa>:
 800df94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df96:	4c1f      	ldr	r4, [pc, #124]	; (800e014 <__utoa+0x80>)
 800df98:	b08b      	sub	sp, #44	; 0x2c
 800df9a:	4605      	mov	r5, r0
 800df9c:	460b      	mov	r3, r1
 800df9e:	466e      	mov	r6, sp
 800dfa0:	f104 0c20 	add.w	ip, r4, #32
 800dfa4:	6820      	ldr	r0, [r4, #0]
 800dfa6:	6861      	ldr	r1, [r4, #4]
 800dfa8:	4637      	mov	r7, r6
 800dfaa:	c703      	stmia	r7!, {r0, r1}
 800dfac:	3408      	adds	r4, #8
 800dfae:	4564      	cmp	r4, ip
 800dfb0:	463e      	mov	r6, r7
 800dfb2:	d1f7      	bne.n	800dfa4 <__utoa+0x10>
 800dfb4:	7921      	ldrb	r1, [r4, #4]
 800dfb6:	7139      	strb	r1, [r7, #4]
 800dfb8:	1e91      	subs	r1, r2, #2
 800dfba:	6820      	ldr	r0, [r4, #0]
 800dfbc:	6038      	str	r0, [r7, #0]
 800dfbe:	2922      	cmp	r1, #34	; 0x22
 800dfc0:	f04f 0100 	mov.w	r1, #0
 800dfc4:	d904      	bls.n	800dfd0 <__utoa+0x3c>
 800dfc6:	7019      	strb	r1, [r3, #0]
 800dfc8:	460b      	mov	r3, r1
 800dfca:	4618      	mov	r0, r3
 800dfcc:	b00b      	add	sp, #44	; 0x2c
 800dfce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfd0:	1e58      	subs	r0, r3, #1
 800dfd2:	4684      	mov	ip, r0
 800dfd4:	fbb5 f7f2 	udiv	r7, r5, r2
 800dfd8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800dfdc:	fb02 5617 	mls	r6, r2, r7, r5
 800dfe0:	4476      	add	r6, lr
 800dfe2:	460c      	mov	r4, r1
 800dfe4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800dfe8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800dfec:	462e      	mov	r6, r5
 800dfee:	42b2      	cmp	r2, r6
 800dff0:	f101 0101 	add.w	r1, r1, #1
 800dff4:	463d      	mov	r5, r7
 800dff6:	d9ed      	bls.n	800dfd4 <__utoa+0x40>
 800dff8:	2200      	movs	r2, #0
 800dffa:	545a      	strb	r2, [r3, r1]
 800dffc:	1919      	adds	r1, r3, r4
 800dffe:	1aa5      	subs	r5, r4, r2
 800e000:	42aa      	cmp	r2, r5
 800e002:	dae2      	bge.n	800dfca <__utoa+0x36>
 800e004:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e008:	780e      	ldrb	r6, [r1, #0]
 800e00a:	7006      	strb	r6, [r0, #0]
 800e00c:	3201      	adds	r2, #1
 800e00e:	f801 5901 	strb.w	r5, [r1], #-1
 800e012:	e7f4      	b.n	800dffe <__utoa+0x6a>
 800e014:	0800eaf8 	.word	0x0800eaf8

0800e018 <__malloc_lock>:
 800e018:	4801      	ldr	r0, [pc, #4]	; (800e020 <__malloc_lock+0x8>)
 800e01a:	f7ff be97 	b.w	800dd4c <__retarget_lock_acquire_recursive>
 800e01e:	bf00      	nop
 800e020:	2000c29c 	.word	0x2000c29c

0800e024 <__malloc_unlock>:
 800e024:	4801      	ldr	r0, [pc, #4]	; (800e02c <__malloc_unlock+0x8>)
 800e026:	f7ff be92 	b.w	800dd4e <__retarget_lock_release_recursive>
 800e02a:	bf00      	nop
 800e02c:	2000c29c 	.word	0x2000c29c

0800e030 <_free_r>:
 800e030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e032:	2900      	cmp	r1, #0
 800e034:	d048      	beq.n	800e0c8 <_free_r+0x98>
 800e036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e03a:	9001      	str	r0, [sp, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f1a1 0404 	sub.w	r4, r1, #4
 800e042:	bfb8      	it	lt
 800e044:	18e4      	addlt	r4, r4, r3
 800e046:	f7ff ffe7 	bl	800e018 <__malloc_lock>
 800e04a:	4a20      	ldr	r2, [pc, #128]	; (800e0cc <_free_r+0x9c>)
 800e04c:	9801      	ldr	r0, [sp, #4]
 800e04e:	6813      	ldr	r3, [r2, #0]
 800e050:	4615      	mov	r5, r2
 800e052:	b933      	cbnz	r3, 800e062 <_free_r+0x32>
 800e054:	6063      	str	r3, [r4, #4]
 800e056:	6014      	str	r4, [r2, #0]
 800e058:	b003      	add	sp, #12
 800e05a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e05e:	f7ff bfe1 	b.w	800e024 <__malloc_unlock>
 800e062:	42a3      	cmp	r3, r4
 800e064:	d90b      	bls.n	800e07e <_free_r+0x4e>
 800e066:	6821      	ldr	r1, [r4, #0]
 800e068:	1862      	adds	r2, r4, r1
 800e06a:	4293      	cmp	r3, r2
 800e06c:	bf04      	itt	eq
 800e06e:	681a      	ldreq	r2, [r3, #0]
 800e070:	685b      	ldreq	r3, [r3, #4]
 800e072:	6063      	str	r3, [r4, #4]
 800e074:	bf04      	itt	eq
 800e076:	1852      	addeq	r2, r2, r1
 800e078:	6022      	streq	r2, [r4, #0]
 800e07a:	602c      	str	r4, [r5, #0]
 800e07c:	e7ec      	b.n	800e058 <_free_r+0x28>
 800e07e:	461a      	mov	r2, r3
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	b10b      	cbz	r3, 800e088 <_free_r+0x58>
 800e084:	42a3      	cmp	r3, r4
 800e086:	d9fa      	bls.n	800e07e <_free_r+0x4e>
 800e088:	6811      	ldr	r1, [r2, #0]
 800e08a:	1855      	adds	r5, r2, r1
 800e08c:	42a5      	cmp	r5, r4
 800e08e:	d10b      	bne.n	800e0a8 <_free_r+0x78>
 800e090:	6824      	ldr	r4, [r4, #0]
 800e092:	4421      	add	r1, r4
 800e094:	1854      	adds	r4, r2, r1
 800e096:	42a3      	cmp	r3, r4
 800e098:	6011      	str	r1, [r2, #0]
 800e09a:	d1dd      	bne.n	800e058 <_free_r+0x28>
 800e09c:	681c      	ldr	r4, [r3, #0]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	6053      	str	r3, [r2, #4]
 800e0a2:	4421      	add	r1, r4
 800e0a4:	6011      	str	r1, [r2, #0]
 800e0a6:	e7d7      	b.n	800e058 <_free_r+0x28>
 800e0a8:	d902      	bls.n	800e0b0 <_free_r+0x80>
 800e0aa:	230c      	movs	r3, #12
 800e0ac:	6003      	str	r3, [r0, #0]
 800e0ae:	e7d3      	b.n	800e058 <_free_r+0x28>
 800e0b0:	6825      	ldr	r5, [r4, #0]
 800e0b2:	1961      	adds	r1, r4, r5
 800e0b4:	428b      	cmp	r3, r1
 800e0b6:	bf04      	itt	eq
 800e0b8:	6819      	ldreq	r1, [r3, #0]
 800e0ba:	685b      	ldreq	r3, [r3, #4]
 800e0bc:	6063      	str	r3, [r4, #4]
 800e0be:	bf04      	itt	eq
 800e0c0:	1949      	addeq	r1, r1, r5
 800e0c2:	6021      	streq	r1, [r4, #0]
 800e0c4:	6054      	str	r4, [r2, #4]
 800e0c6:	e7c7      	b.n	800e058 <_free_r+0x28>
 800e0c8:	b003      	add	sp, #12
 800e0ca:	bd30      	pop	{r4, r5, pc}
 800e0cc:	20005200 	.word	0x20005200

0800e0d0 <__ssputs_r>:
 800e0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d4:	688e      	ldr	r6, [r1, #8]
 800e0d6:	429e      	cmp	r6, r3
 800e0d8:	4682      	mov	sl, r0
 800e0da:	460c      	mov	r4, r1
 800e0dc:	4690      	mov	r8, r2
 800e0de:	461f      	mov	r7, r3
 800e0e0:	d838      	bhi.n	800e154 <__ssputs_r+0x84>
 800e0e2:	898a      	ldrh	r2, [r1, #12]
 800e0e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e0e8:	d032      	beq.n	800e150 <__ssputs_r+0x80>
 800e0ea:	6825      	ldr	r5, [r4, #0]
 800e0ec:	6909      	ldr	r1, [r1, #16]
 800e0ee:	eba5 0901 	sub.w	r9, r5, r1
 800e0f2:	6965      	ldr	r5, [r4, #20]
 800e0f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	444b      	add	r3, r9
 800e100:	106d      	asrs	r5, r5, #1
 800e102:	429d      	cmp	r5, r3
 800e104:	bf38      	it	cc
 800e106:	461d      	movcc	r5, r3
 800e108:	0553      	lsls	r3, r2, #21
 800e10a:	d531      	bpl.n	800e170 <__ssputs_r+0xa0>
 800e10c:	4629      	mov	r1, r5
 800e10e:	f7ff fe35 	bl	800dd7c <_malloc_r>
 800e112:	4606      	mov	r6, r0
 800e114:	b950      	cbnz	r0, 800e12c <__ssputs_r+0x5c>
 800e116:	230c      	movs	r3, #12
 800e118:	f8ca 3000 	str.w	r3, [sl]
 800e11c:	89a3      	ldrh	r3, [r4, #12]
 800e11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e122:	81a3      	strh	r3, [r4, #12]
 800e124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e12c:	6921      	ldr	r1, [r4, #16]
 800e12e:	464a      	mov	r2, r9
 800e130:	f7ff fe0e 	bl	800dd50 <memcpy>
 800e134:	89a3      	ldrh	r3, [r4, #12]
 800e136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e13e:	81a3      	strh	r3, [r4, #12]
 800e140:	6126      	str	r6, [r4, #16]
 800e142:	6165      	str	r5, [r4, #20]
 800e144:	444e      	add	r6, r9
 800e146:	eba5 0509 	sub.w	r5, r5, r9
 800e14a:	6026      	str	r6, [r4, #0]
 800e14c:	60a5      	str	r5, [r4, #8]
 800e14e:	463e      	mov	r6, r7
 800e150:	42be      	cmp	r6, r7
 800e152:	d900      	bls.n	800e156 <__ssputs_r+0x86>
 800e154:	463e      	mov	r6, r7
 800e156:	4632      	mov	r2, r6
 800e158:	6820      	ldr	r0, [r4, #0]
 800e15a:	4641      	mov	r1, r8
 800e15c:	f000 faa8 	bl	800e6b0 <memmove>
 800e160:	68a3      	ldr	r3, [r4, #8]
 800e162:	6822      	ldr	r2, [r4, #0]
 800e164:	1b9b      	subs	r3, r3, r6
 800e166:	4432      	add	r2, r6
 800e168:	60a3      	str	r3, [r4, #8]
 800e16a:	6022      	str	r2, [r4, #0]
 800e16c:	2000      	movs	r0, #0
 800e16e:	e7db      	b.n	800e128 <__ssputs_r+0x58>
 800e170:	462a      	mov	r2, r5
 800e172:	f000 fab7 	bl	800e6e4 <_realloc_r>
 800e176:	4606      	mov	r6, r0
 800e178:	2800      	cmp	r0, #0
 800e17a:	d1e1      	bne.n	800e140 <__ssputs_r+0x70>
 800e17c:	6921      	ldr	r1, [r4, #16]
 800e17e:	4650      	mov	r0, sl
 800e180:	f7ff ff56 	bl	800e030 <_free_r>
 800e184:	e7c7      	b.n	800e116 <__ssputs_r+0x46>
	...

0800e188 <_svfiprintf_r>:
 800e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	4698      	mov	r8, r3
 800e18e:	898b      	ldrh	r3, [r1, #12]
 800e190:	061b      	lsls	r3, r3, #24
 800e192:	b09d      	sub	sp, #116	; 0x74
 800e194:	4607      	mov	r7, r0
 800e196:	460d      	mov	r5, r1
 800e198:	4614      	mov	r4, r2
 800e19a:	d50e      	bpl.n	800e1ba <_svfiprintf_r+0x32>
 800e19c:	690b      	ldr	r3, [r1, #16]
 800e19e:	b963      	cbnz	r3, 800e1ba <_svfiprintf_r+0x32>
 800e1a0:	2140      	movs	r1, #64	; 0x40
 800e1a2:	f7ff fdeb 	bl	800dd7c <_malloc_r>
 800e1a6:	6028      	str	r0, [r5, #0]
 800e1a8:	6128      	str	r0, [r5, #16]
 800e1aa:	b920      	cbnz	r0, 800e1b6 <_svfiprintf_r+0x2e>
 800e1ac:	230c      	movs	r3, #12
 800e1ae:	603b      	str	r3, [r7, #0]
 800e1b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1b4:	e0d1      	b.n	800e35a <_svfiprintf_r+0x1d2>
 800e1b6:	2340      	movs	r3, #64	; 0x40
 800e1b8:	616b      	str	r3, [r5, #20]
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e1be:	2320      	movs	r3, #32
 800e1c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1c8:	2330      	movs	r3, #48	; 0x30
 800e1ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e374 <_svfiprintf_r+0x1ec>
 800e1ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1d2:	f04f 0901 	mov.w	r9, #1
 800e1d6:	4623      	mov	r3, r4
 800e1d8:	469a      	mov	sl, r3
 800e1da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1de:	b10a      	cbz	r2, 800e1e4 <_svfiprintf_r+0x5c>
 800e1e0:	2a25      	cmp	r2, #37	; 0x25
 800e1e2:	d1f9      	bne.n	800e1d8 <_svfiprintf_r+0x50>
 800e1e4:	ebba 0b04 	subs.w	fp, sl, r4
 800e1e8:	d00b      	beq.n	800e202 <_svfiprintf_r+0x7a>
 800e1ea:	465b      	mov	r3, fp
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	f7ff ff6d 	bl	800e0d0 <__ssputs_r>
 800e1f6:	3001      	adds	r0, #1
 800e1f8:	f000 80aa 	beq.w	800e350 <_svfiprintf_r+0x1c8>
 800e1fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1fe:	445a      	add	r2, fp
 800e200:	9209      	str	r2, [sp, #36]	; 0x24
 800e202:	f89a 3000 	ldrb.w	r3, [sl]
 800e206:	2b00      	cmp	r3, #0
 800e208:	f000 80a2 	beq.w	800e350 <_svfiprintf_r+0x1c8>
 800e20c:	2300      	movs	r3, #0
 800e20e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e216:	f10a 0a01 	add.w	sl, sl, #1
 800e21a:	9304      	str	r3, [sp, #16]
 800e21c:	9307      	str	r3, [sp, #28]
 800e21e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e222:	931a      	str	r3, [sp, #104]	; 0x68
 800e224:	4654      	mov	r4, sl
 800e226:	2205      	movs	r2, #5
 800e228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e22c:	4851      	ldr	r0, [pc, #324]	; (800e374 <_svfiprintf_r+0x1ec>)
 800e22e:	f7f1 ffd7 	bl	80001e0 <memchr>
 800e232:	9a04      	ldr	r2, [sp, #16]
 800e234:	b9d8      	cbnz	r0, 800e26e <_svfiprintf_r+0xe6>
 800e236:	06d0      	lsls	r0, r2, #27
 800e238:	bf44      	itt	mi
 800e23a:	2320      	movmi	r3, #32
 800e23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e240:	0711      	lsls	r1, r2, #28
 800e242:	bf44      	itt	mi
 800e244:	232b      	movmi	r3, #43	; 0x2b
 800e246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e24a:	f89a 3000 	ldrb.w	r3, [sl]
 800e24e:	2b2a      	cmp	r3, #42	; 0x2a
 800e250:	d015      	beq.n	800e27e <_svfiprintf_r+0xf6>
 800e252:	9a07      	ldr	r2, [sp, #28]
 800e254:	4654      	mov	r4, sl
 800e256:	2000      	movs	r0, #0
 800e258:	f04f 0c0a 	mov.w	ip, #10
 800e25c:	4621      	mov	r1, r4
 800e25e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e262:	3b30      	subs	r3, #48	; 0x30
 800e264:	2b09      	cmp	r3, #9
 800e266:	d94e      	bls.n	800e306 <_svfiprintf_r+0x17e>
 800e268:	b1b0      	cbz	r0, 800e298 <_svfiprintf_r+0x110>
 800e26a:	9207      	str	r2, [sp, #28]
 800e26c:	e014      	b.n	800e298 <_svfiprintf_r+0x110>
 800e26e:	eba0 0308 	sub.w	r3, r0, r8
 800e272:	fa09 f303 	lsl.w	r3, r9, r3
 800e276:	4313      	orrs	r3, r2
 800e278:	9304      	str	r3, [sp, #16]
 800e27a:	46a2      	mov	sl, r4
 800e27c:	e7d2      	b.n	800e224 <_svfiprintf_r+0x9c>
 800e27e:	9b03      	ldr	r3, [sp, #12]
 800e280:	1d19      	adds	r1, r3, #4
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	9103      	str	r1, [sp, #12]
 800e286:	2b00      	cmp	r3, #0
 800e288:	bfbb      	ittet	lt
 800e28a:	425b      	neglt	r3, r3
 800e28c:	f042 0202 	orrlt.w	r2, r2, #2
 800e290:	9307      	strge	r3, [sp, #28]
 800e292:	9307      	strlt	r3, [sp, #28]
 800e294:	bfb8      	it	lt
 800e296:	9204      	strlt	r2, [sp, #16]
 800e298:	7823      	ldrb	r3, [r4, #0]
 800e29a:	2b2e      	cmp	r3, #46	; 0x2e
 800e29c:	d10c      	bne.n	800e2b8 <_svfiprintf_r+0x130>
 800e29e:	7863      	ldrb	r3, [r4, #1]
 800e2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800e2a2:	d135      	bne.n	800e310 <_svfiprintf_r+0x188>
 800e2a4:	9b03      	ldr	r3, [sp, #12]
 800e2a6:	1d1a      	adds	r2, r3, #4
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	9203      	str	r2, [sp, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	bfb8      	it	lt
 800e2b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e2b4:	3402      	adds	r4, #2
 800e2b6:	9305      	str	r3, [sp, #20]
 800e2b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e384 <_svfiprintf_r+0x1fc>
 800e2bc:	7821      	ldrb	r1, [r4, #0]
 800e2be:	2203      	movs	r2, #3
 800e2c0:	4650      	mov	r0, sl
 800e2c2:	f7f1 ff8d 	bl	80001e0 <memchr>
 800e2c6:	b140      	cbz	r0, 800e2da <_svfiprintf_r+0x152>
 800e2c8:	2340      	movs	r3, #64	; 0x40
 800e2ca:	eba0 000a 	sub.w	r0, r0, sl
 800e2ce:	fa03 f000 	lsl.w	r0, r3, r0
 800e2d2:	9b04      	ldr	r3, [sp, #16]
 800e2d4:	4303      	orrs	r3, r0
 800e2d6:	3401      	adds	r4, #1
 800e2d8:	9304      	str	r3, [sp, #16]
 800e2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2de:	4826      	ldr	r0, [pc, #152]	; (800e378 <_svfiprintf_r+0x1f0>)
 800e2e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2e4:	2206      	movs	r2, #6
 800e2e6:	f7f1 ff7b 	bl	80001e0 <memchr>
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d038      	beq.n	800e360 <_svfiprintf_r+0x1d8>
 800e2ee:	4b23      	ldr	r3, [pc, #140]	; (800e37c <_svfiprintf_r+0x1f4>)
 800e2f0:	bb1b      	cbnz	r3, 800e33a <_svfiprintf_r+0x1b2>
 800e2f2:	9b03      	ldr	r3, [sp, #12]
 800e2f4:	3307      	adds	r3, #7
 800e2f6:	f023 0307 	bic.w	r3, r3, #7
 800e2fa:	3308      	adds	r3, #8
 800e2fc:	9303      	str	r3, [sp, #12]
 800e2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e300:	4433      	add	r3, r6
 800e302:	9309      	str	r3, [sp, #36]	; 0x24
 800e304:	e767      	b.n	800e1d6 <_svfiprintf_r+0x4e>
 800e306:	fb0c 3202 	mla	r2, ip, r2, r3
 800e30a:	460c      	mov	r4, r1
 800e30c:	2001      	movs	r0, #1
 800e30e:	e7a5      	b.n	800e25c <_svfiprintf_r+0xd4>
 800e310:	2300      	movs	r3, #0
 800e312:	3401      	adds	r4, #1
 800e314:	9305      	str	r3, [sp, #20]
 800e316:	4619      	mov	r1, r3
 800e318:	f04f 0c0a 	mov.w	ip, #10
 800e31c:	4620      	mov	r0, r4
 800e31e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e322:	3a30      	subs	r2, #48	; 0x30
 800e324:	2a09      	cmp	r2, #9
 800e326:	d903      	bls.n	800e330 <_svfiprintf_r+0x1a8>
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d0c5      	beq.n	800e2b8 <_svfiprintf_r+0x130>
 800e32c:	9105      	str	r1, [sp, #20]
 800e32e:	e7c3      	b.n	800e2b8 <_svfiprintf_r+0x130>
 800e330:	fb0c 2101 	mla	r1, ip, r1, r2
 800e334:	4604      	mov	r4, r0
 800e336:	2301      	movs	r3, #1
 800e338:	e7f0      	b.n	800e31c <_svfiprintf_r+0x194>
 800e33a:	ab03      	add	r3, sp, #12
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	462a      	mov	r2, r5
 800e340:	4b0f      	ldr	r3, [pc, #60]	; (800e380 <_svfiprintf_r+0x1f8>)
 800e342:	a904      	add	r1, sp, #16
 800e344:	4638      	mov	r0, r7
 800e346:	f3af 8000 	nop.w
 800e34a:	1c42      	adds	r2, r0, #1
 800e34c:	4606      	mov	r6, r0
 800e34e:	d1d6      	bne.n	800e2fe <_svfiprintf_r+0x176>
 800e350:	89ab      	ldrh	r3, [r5, #12]
 800e352:	065b      	lsls	r3, r3, #25
 800e354:	f53f af2c 	bmi.w	800e1b0 <_svfiprintf_r+0x28>
 800e358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e35a:	b01d      	add	sp, #116	; 0x74
 800e35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e360:	ab03      	add	r3, sp, #12
 800e362:	9300      	str	r3, [sp, #0]
 800e364:	462a      	mov	r2, r5
 800e366:	4b06      	ldr	r3, [pc, #24]	; (800e380 <_svfiprintf_r+0x1f8>)
 800e368:	a904      	add	r1, sp, #16
 800e36a:	4638      	mov	r0, r7
 800e36c:	f000 f87a 	bl	800e464 <_printf_i>
 800e370:	e7eb      	b.n	800e34a <_svfiprintf_r+0x1c2>
 800e372:	bf00      	nop
 800e374:	0800eb1d 	.word	0x0800eb1d
 800e378:	0800eb27 	.word	0x0800eb27
 800e37c:	00000000 	.word	0x00000000
 800e380:	0800e0d1 	.word	0x0800e0d1
 800e384:	0800eb23 	.word	0x0800eb23

0800e388 <_printf_common>:
 800e388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e38c:	4616      	mov	r6, r2
 800e38e:	4699      	mov	r9, r3
 800e390:	688a      	ldr	r2, [r1, #8]
 800e392:	690b      	ldr	r3, [r1, #16]
 800e394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e398:	4293      	cmp	r3, r2
 800e39a:	bfb8      	it	lt
 800e39c:	4613      	movlt	r3, r2
 800e39e:	6033      	str	r3, [r6, #0]
 800e3a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3a4:	4607      	mov	r7, r0
 800e3a6:	460c      	mov	r4, r1
 800e3a8:	b10a      	cbz	r2, 800e3ae <_printf_common+0x26>
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	6033      	str	r3, [r6, #0]
 800e3ae:	6823      	ldr	r3, [r4, #0]
 800e3b0:	0699      	lsls	r1, r3, #26
 800e3b2:	bf42      	ittt	mi
 800e3b4:	6833      	ldrmi	r3, [r6, #0]
 800e3b6:	3302      	addmi	r3, #2
 800e3b8:	6033      	strmi	r3, [r6, #0]
 800e3ba:	6825      	ldr	r5, [r4, #0]
 800e3bc:	f015 0506 	ands.w	r5, r5, #6
 800e3c0:	d106      	bne.n	800e3d0 <_printf_common+0x48>
 800e3c2:	f104 0a19 	add.w	sl, r4, #25
 800e3c6:	68e3      	ldr	r3, [r4, #12]
 800e3c8:	6832      	ldr	r2, [r6, #0]
 800e3ca:	1a9b      	subs	r3, r3, r2
 800e3cc:	42ab      	cmp	r3, r5
 800e3ce:	dc26      	bgt.n	800e41e <_printf_common+0x96>
 800e3d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3d4:	1e13      	subs	r3, r2, #0
 800e3d6:	6822      	ldr	r2, [r4, #0]
 800e3d8:	bf18      	it	ne
 800e3da:	2301      	movne	r3, #1
 800e3dc:	0692      	lsls	r2, r2, #26
 800e3de:	d42b      	bmi.n	800e438 <_printf_common+0xb0>
 800e3e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3e4:	4649      	mov	r1, r9
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	47c0      	blx	r8
 800e3ea:	3001      	adds	r0, #1
 800e3ec:	d01e      	beq.n	800e42c <_printf_common+0xa4>
 800e3ee:	6823      	ldr	r3, [r4, #0]
 800e3f0:	68e5      	ldr	r5, [r4, #12]
 800e3f2:	6832      	ldr	r2, [r6, #0]
 800e3f4:	f003 0306 	and.w	r3, r3, #6
 800e3f8:	2b04      	cmp	r3, #4
 800e3fa:	bf08      	it	eq
 800e3fc:	1aad      	subeq	r5, r5, r2
 800e3fe:	68a3      	ldr	r3, [r4, #8]
 800e400:	6922      	ldr	r2, [r4, #16]
 800e402:	bf0c      	ite	eq
 800e404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e408:	2500      	movne	r5, #0
 800e40a:	4293      	cmp	r3, r2
 800e40c:	bfc4      	itt	gt
 800e40e:	1a9b      	subgt	r3, r3, r2
 800e410:	18ed      	addgt	r5, r5, r3
 800e412:	2600      	movs	r6, #0
 800e414:	341a      	adds	r4, #26
 800e416:	42b5      	cmp	r5, r6
 800e418:	d11a      	bne.n	800e450 <_printf_common+0xc8>
 800e41a:	2000      	movs	r0, #0
 800e41c:	e008      	b.n	800e430 <_printf_common+0xa8>
 800e41e:	2301      	movs	r3, #1
 800e420:	4652      	mov	r2, sl
 800e422:	4649      	mov	r1, r9
 800e424:	4638      	mov	r0, r7
 800e426:	47c0      	blx	r8
 800e428:	3001      	adds	r0, #1
 800e42a:	d103      	bne.n	800e434 <_printf_common+0xac>
 800e42c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e434:	3501      	adds	r5, #1
 800e436:	e7c6      	b.n	800e3c6 <_printf_common+0x3e>
 800e438:	18e1      	adds	r1, r4, r3
 800e43a:	1c5a      	adds	r2, r3, #1
 800e43c:	2030      	movs	r0, #48	; 0x30
 800e43e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e442:	4422      	add	r2, r4
 800e444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e44c:	3302      	adds	r3, #2
 800e44e:	e7c7      	b.n	800e3e0 <_printf_common+0x58>
 800e450:	2301      	movs	r3, #1
 800e452:	4622      	mov	r2, r4
 800e454:	4649      	mov	r1, r9
 800e456:	4638      	mov	r0, r7
 800e458:	47c0      	blx	r8
 800e45a:	3001      	adds	r0, #1
 800e45c:	d0e6      	beq.n	800e42c <_printf_common+0xa4>
 800e45e:	3601      	adds	r6, #1
 800e460:	e7d9      	b.n	800e416 <_printf_common+0x8e>
	...

0800e464 <_printf_i>:
 800e464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e468:	460c      	mov	r4, r1
 800e46a:	4691      	mov	r9, r2
 800e46c:	7e27      	ldrb	r7, [r4, #24]
 800e46e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e470:	2f78      	cmp	r7, #120	; 0x78
 800e472:	4680      	mov	r8, r0
 800e474:	469a      	mov	sl, r3
 800e476:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e47a:	d807      	bhi.n	800e48c <_printf_i+0x28>
 800e47c:	2f62      	cmp	r7, #98	; 0x62
 800e47e:	d80a      	bhi.n	800e496 <_printf_i+0x32>
 800e480:	2f00      	cmp	r7, #0
 800e482:	f000 80d8 	beq.w	800e636 <_printf_i+0x1d2>
 800e486:	2f58      	cmp	r7, #88	; 0x58
 800e488:	f000 80a3 	beq.w	800e5d2 <_printf_i+0x16e>
 800e48c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e494:	e03a      	b.n	800e50c <_printf_i+0xa8>
 800e496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e49a:	2b15      	cmp	r3, #21
 800e49c:	d8f6      	bhi.n	800e48c <_printf_i+0x28>
 800e49e:	a001      	add	r0, pc, #4	; (adr r0, 800e4a4 <_printf_i+0x40>)
 800e4a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e4a4:	0800e4fd 	.word	0x0800e4fd
 800e4a8:	0800e511 	.word	0x0800e511
 800e4ac:	0800e48d 	.word	0x0800e48d
 800e4b0:	0800e48d 	.word	0x0800e48d
 800e4b4:	0800e48d 	.word	0x0800e48d
 800e4b8:	0800e48d 	.word	0x0800e48d
 800e4bc:	0800e511 	.word	0x0800e511
 800e4c0:	0800e48d 	.word	0x0800e48d
 800e4c4:	0800e48d 	.word	0x0800e48d
 800e4c8:	0800e48d 	.word	0x0800e48d
 800e4cc:	0800e48d 	.word	0x0800e48d
 800e4d0:	0800e61d 	.word	0x0800e61d
 800e4d4:	0800e541 	.word	0x0800e541
 800e4d8:	0800e5ff 	.word	0x0800e5ff
 800e4dc:	0800e48d 	.word	0x0800e48d
 800e4e0:	0800e48d 	.word	0x0800e48d
 800e4e4:	0800e63f 	.word	0x0800e63f
 800e4e8:	0800e48d 	.word	0x0800e48d
 800e4ec:	0800e541 	.word	0x0800e541
 800e4f0:	0800e48d 	.word	0x0800e48d
 800e4f4:	0800e48d 	.word	0x0800e48d
 800e4f8:	0800e607 	.word	0x0800e607
 800e4fc:	680b      	ldr	r3, [r1, #0]
 800e4fe:	1d1a      	adds	r2, r3, #4
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	600a      	str	r2, [r1, #0]
 800e504:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e50c:	2301      	movs	r3, #1
 800e50e:	e0a3      	b.n	800e658 <_printf_i+0x1f4>
 800e510:	6825      	ldr	r5, [r4, #0]
 800e512:	6808      	ldr	r0, [r1, #0]
 800e514:	062e      	lsls	r6, r5, #24
 800e516:	f100 0304 	add.w	r3, r0, #4
 800e51a:	d50a      	bpl.n	800e532 <_printf_i+0xce>
 800e51c:	6805      	ldr	r5, [r0, #0]
 800e51e:	600b      	str	r3, [r1, #0]
 800e520:	2d00      	cmp	r5, #0
 800e522:	da03      	bge.n	800e52c <_printf_i+0xc8>
 800e524:	232d      	movs	r3, #45	; 0x2d
 800e526:	426d      	negs	r5, r5
 800e528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e52c:	485e      	ldr	r0, [pc, #376]	; (800e6a8 <_printf_i+0x244>)
 800e52e:	230a      	movs	r3, #10
 800e530:	e019      	b.n	800e566 <_printf_i+0x102>
 800e532:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e536:	6805      	ldr	r5, [r0, #0]
 800e538:	600b      	str	r3, [r1, #0]
 800e53a:	bf18      	it	ne
 800e53c:	b22d      	sxthne	r5, r5
 800e53e:	e7ef      	b.n	800e520 <_printf_i+0xbc>
 800e540:	680b      	ldr	r3, [r1, #0]
 800e542:	6825      	ldr	r5, [r4, #0]
 800e544:	1d18      	adds	r0, r3, #4
 800e546:	6008      	str	r0, [r1, #0]
 800e548:	0628      	lsls	r0, r5, #24
 800e54a:	d501      	bpl.n	800e550 <_printf_i+0xec>
 800e54c:	681d      	ldr	r5, [r3, #0]
 800e54e:	e002      	b.n	800e556 <_printf_i+0xf2>
 800e550:	0669      	lsls	r1, r5, #25
 800e552:	d5fb      	bpl.n	800e54c <_printf_i+0xe8>
 800e554:	881d      	ldrh	r5, [r3, #0]
 800e556:	4854      	ldr	r0, [pc, #336]	; (800e6a8 <_printf_i+0x244>)
 800e558:	2f6f      	cmp	r7, #111	; 0x6f
 800e55a:	bf0c      	ite	eq
 800e55c:	2308      	moveq	r3, #8
 800e55e:	230a      	movne	r3, #10
 800e560:	2100      	movs	r1, #0
 800e562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e566:	6866      	ldr	r6, [r4, #4]
 800e568:	60a6      	str	r6, [r4, #8]
 800e56a:	2e00      	cmp	r6, #0
 800e56c:	bfa2      	ittt	ge
 800e56e:	6821      	ldrge	r1, [r4, #0]
 800e570:	f021 0104 	bicge.w	r1, r1, #4
 800e574:	6021      	strge	r1, [r4, #0]
 800e576:	b90d      	cbnz	r5, 800e57c <_printf_i+0x118>
 800e578:	2e00      	cmp	r6, #0
 800e57a:	d04d      	beq.n	800e618 <_printf_i+0x1b4>
 800e57c:	4616      	mov	r6, r2
 800e57e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e582:	fb03 5711 	mls	r7, r3, r1, r5
 800e586:	5dc7      	ldrb	r7, [r0, r7]
 800e588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e58c:	462f      	mov	r7, r5
 800e58e:	42bb      	cmp	r3, r7
 800e590:	460d      	mov	r5, r1
 800e592:	d9f4      	bls.n	800e57e <_printf_i+0x11a>
 800e594:	2b08      	cmp	r3, #8
 800e596:	d10b      	bne.n	800e5b0 <_printf_i+0x14c>
 800e598:	6823      	ldr	r3, [r4, #0]
 800e59a:	07df      	lsls	r7, r3, #31
 800e59c:	d508      	bpl.n	800e5b0 <_printf_i+0x14c>
 800e59e:	6923      	ldr	r3, [r4, #16]
 800e5a0:	6861      	ldr	r1, [r4, #4]
 800e5a2:	4299      	cmp	r1, r3
 800e5a4:	bfde      	ittt	le
 800e5a6:	2330      	movle	r3, #48	; 0x30
 800e5a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e5ac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800e5b0:	1b92      	subs	r2, r2, r6
 800e5b2:	6122      	str	r2, [r4, #16]
 800e5b4:	f8cd a000 	str.w	sl, [sp]
 800e5b8:	464b      	mov	r3, r9
 800e5ba:	aa03      	add	r2, sp, #12
 800e5bc:	4621      	mov	r1, r4
 800e5be:	4640      	mov	r0, r8
 800e5c0:	f7ff fee2 	bl	800e388 <_printf_common>
 800e5c4:	3001      	adds	r0, #1
 800e5c6:	d14c      	bne.n	800e662 <_printf_i+0x1fe>
 800e5c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5cc:	b004      	add	sp, #16
 800e5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5d2:	4835      	ldr	r0, [pc, #212]	; (800e6a8 <_printf_i+0x244>)
 800e5d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	680e      	ldr	r6, [r1, #0]
 800e5dc:	061f      	lsls	r7, r3, #24
 800e5de:	f856 5b04 	ldr.w	r5, [r6], #4
 800e5e2:	600e      	str	r6, [r1, #0]
 800e5e4:	d514      	bpl.n	800e610 <_printf_i+0x1ac>
 800e5e6:	07d9      	lsls	r1, r3, #31
 800e5e8:	bf44      	itt	mi
 800e5ea:	f043 0320 	orrmi.w	r3, r3, #32
 800e5ee:	6023      	strmi	r3, [r4, #0]
 800e5f0:	b91d      	cbnz	r5, 800e5fa <_printf_i+0x196>
 800e5f2:	6823      	ldr	r3, [r4, #0]
 800e5f4:	f023 0320 	bic.w	r3, r3, #32
 800e5f8:	6023      	str	r3, [r4, #0]
 800e5fa:	2310      	movs	r3, #16
 800e5fc:	e7b0      	b.n	800e560 <_printf_i+0xfc>
 800e5fe:	6823      	ldr	r3, [r4, #0]
 800e600:	f043 0320 	orr.w	r3, r3, #32
 800e604:	6023      	str	r3, [r4, #0]
 800e606:	2378      	movs	r3, #120	; 0x78
 800e608:	4828      	ldr	r0, [pc, #160]	; (800e6ac <_printf_i+0x248>)
 800e60a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e60e:	e7e3      	b.n	800e5d8 <_printf_i+0x174>
 800e610:	065e      	lsls	r6, r3, #25
 800e612:	bf48      	it	mi
 800e614:	b2ad      	uxthmi	r5, r5
 800e616:	e7e6      	b.n	800e5e6 <_printf_i+0x182>
 800e618:	4616      	mov	r6, r2
 800e61a:	e7bb      	b.n	800e594 <_printf_i+0x130>
 800e61c:	680b      	ldr	r3, [r1, #0]
 800e61e:	6826      	ldr	r6, [r4, #0]
 800e620:	6960      	ldr	r0, [r4, #20]
 800e622:	1d1d      	adds	r5, r3, #4
 800e624:	600d      	str	r5, [r1, #0]
 800e626:	0635      	lsls	r5, r6, #24
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	d501      	bpl.n	800e630 <_printf_i+0x1cc>
 800e62c:	6018      	str	r0, [r3, #0]
 800e62e:	e002      	b.n	800e636 <_printf_i+0x1d2>
 800e630:	0671      	lsls	r1, r6, #25
 800e632:	d5fb      	bpl.n	800e62c <_printf_i+0x1c8>
 800e634:	8018      	strh	r0, [r3, #0]
 800e636:	2300      	movs	r3, #0
 800e638:	6123      	str	r3, [r4, #16]
 800e63a:	4616      	mov	r6, r2
 800e63c:	e7ba      	b.n	800e5b4 <_printf_i+0x150>
 800e63e:	680b      	ldr	r3, [r1, #0]
 800e640:	1d1a      	adds	r2, r3, #4
 800e642:	600a      	str	r2, [r1, #0]
 800e644:	681e      	ldr	r6, [r3, #0]
 800e646:	6862      	ldr	r2, [r4, #4]
 800e648:	2100      	movs	r1, #0
 800e64a:	4630      	mov	r0, r6
 800e64c:	f7f1 fdc8 	bl	80001e0 <memchr>
 800e650:	b108      	cbz	r0, 800e656 <_printf_i+0x1f2>
 800e652:	1b80      	subs	r0, r0, r6
 800e654:	6060      	str	r0, [r4, #4]
 800e656:	6863      	ldr	r3, [r4, #4]
 800e658:	6123      	str	r3, [r4, #16]
 800e65a:	2300      	movs	r3, #0
 800e65c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e660:	e7a8      	b.n	800e5b4 <_printf_i+0x150>
 800e662:	6923      	ldr	r3, [r4, #16]
 800e664:	4632      	mov	r2, r6
 800e666:	4649      	mov	r1, r9
 800e668:	4640      	mov	r0, r8
 800e66a:	47d0      	blx	sl
 800e66c:	3001      	adds	r0, #1
 800e66e:	d0ab      	beq.n	800e5c8 <_printf_i+0x164>
 800e670:	6823      	ldr	r3, [r4, #0]
 800e672:	079b      	lsls	r3, r3, #30
 800e674:	d413      	bmi.n	800e69e <_printf_i+0x23a>
 800e676:	68e0      	ldr	r0, [r4, #12]
 800e678:	9b03      	ldr	r3, [sp, #12]
 800e67a:	4298      	cmp	r0, r3
 800e67c:	bfb8      	it	lt
 800e67e:	4618      	movlt	r0, r3
 800e680:	e7a4      	b.n	800e5cc <_printf_i+0x168>
 800e682:	2301      	movs	r3, #1
 800e684:	4632      	mov	r2, r6
 800e686:	4649      	mov	r1, r9
 800e688:	4640      	mov	r0, r8
 800e68a:	47d0      	blx	sl
 800e68c:	3001      	adds	r0, #1
 800e68e:	d09b      	beq.n	800e5c8 <_printf_i+0x164>
 800e690:	3501      	adds	r5, #1
 800e692:	68e3      	ldr	r3, [r4, #12]
 800e694:	9903      	ldr	r1, [sp, #12]
 800e696:	1a5b      	subs	r3, r3, r1
 800e698:	42ab      	cmp	r3, r5
 800e69a:	dcf2      	bgt.n	800e682 <_printf_i+0x21e>
 800e69c:	e7eb      	b.n	800e676 <_printf_i+0x212>
 800e69e:	2500      	movs	r5, #0
 800e6a0:	f104 0619 	add.w	r6, r4, #25
 800e6a4:	e7f5      	b.n	800e692 <_printf_i+0x22e>
 800e6a6:	bf00      	nop
 800e6a8:	0800eb2e 	.word	0x0800eb2e
 800e6ac:	0800eb3f 	.word	0x0800eb3f

0800e6b0 <memmove>:
 800e6b0:	4288      	cmp	r0, r1
 800e6b2:	b510      	push	{r4, lr}
 800e6b4:	eb01 0402 	add.w	r4, r1, r2
 800e6b8:	d902      	bls.n	800e6c0 <memmove+0x10>
 800e6ba:	4284      	cmp	r4, r0
 800e6bc:	4623      	mov	r3, r4
 800e6be:	d807      	bhi.n	800e6d0 <memmove+0x20>
 800e6c0:	1e43      	subs	r3, r0, #1
 800e6c2:	42a1      	cmp	r1, r4
 800e6c4:	d008      	beq.n	800e6d8 <memmove+0x28>
 800e6c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6ce:	e7f8      	b.n	800e6c2 <memmove+0x12>
 800e6d0:	4402      	add	r2, r0
 800e6d2:	4601      	mov	r1, r0
 800e6d4:	428a      	cmp	r2, r1
 800e6d6:	d100      	bne.n	800e6da <memmove+0x2a>
 800e6d8:	bd10      	pop	{r4, pc}
 800e6da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6e2:	e7f7      	b.n	800e6d4 <memmove+0x24>

0800e6e4 <_realloc_r>:
 800e6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e6:	4607      	mov	r7, r0
 800e6e8:	4614      	mov	r4, r2
 800e6ea:	460e      	mov	r6, r1
 800e6ec:	b921      	cbnz	r1, 800e6f8 <_realloc_r+0x14>
 800e6ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e6f2:	4611      	mov	r1, r2
 800e6f4:	f7ff bb42 	b.w	800dd7c <_malloc_r>
 800e6f8:	b922      	cbnz	r2, 800e704 <_realloc_r+0x20>
 800e6fa:	f7ff fc99 	bl	800e030 <_free_r>
 800e6fe:	4625      	mov	r5, r4
 800e700:	4628      	mov	r0, r5
 800e702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e704:	f000 f814 	bl	800e730 <_malloc_usable_size_r>
 800e708:	42a0      	cmp	r0, r4
 800e70a:	d20f      	bcs.n	800e72c <_realloc_r+0x48>
 800e70c:	4621      	mov	r1, r4
 800e70e:	4638      	mov	r0, r7
 800e710:	f7ff fb34 	bl	800dd7c <_malloc_r>
 800e714:	4605      	mov	r5, r0
 800e716:	2800      	cmp	r0, #0
 800e718:	d0f2      	beq.n	800e700 <_realloc_r+0x1c>
 800e71a:	4631      	mov	r1, r6
 800e71c:	4622      	mov	r2, r4
 800e71e:	f7ff fb17 	bl	800dd50 <memcpy>
 800e722:	4631      	mov	r1, r6
 800e724:	4638      	mov	r0, r7
 800e726:	f7ff fc83 	bl	800e030 <_free_r>
 800e72a:	e7e9      	b.n	800e700 <_realloc_r+0x1c>
 800e72c:	4635      	mov	r5, r6
 800e72e:	e7e7      	b.n	800e700 <_realloc_r+0x1c>

0800e730 <_malloc_usable_size_r>:
 800e730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e734:	1f18      	subs	r0, r3, #4
 800e736:	2b00      	cmp	r3, #0
 800e738:	bfbc      	itt	lt
 800e73a:	580b      	ldrlt	r3, [r1, r0]
 800e73c:	18c0      	addlt	r0, r0, r3
 800e73e:	4770      	bx	lr

0800e740 <_init>:
 800e740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e742:	bf00      	nop
 800e744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e746:	bc08      	pop	{r3}
 800e748:	469e      	mov	lr, r3
 800e74a:	4770      	bx	lr

0800e74c <_fini>:
 800e74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74e:	bf00      	nop
 800e750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e752:	bc08      	pop	{r3}
 800e754:	469e      	mov	lr, r3
 800e756:	4770      	bx	lr
