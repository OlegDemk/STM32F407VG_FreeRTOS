
FreeRTOS_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800b008  0800b008  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0a8  0800b0a8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0a8  0800b0a8  0001b0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0b0  0800b0b0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0b0  0800b0b0  0001b0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0b4  0800b0b4  0001b0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005198  20000094  0800b14c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000522c  0800b14c  0002522c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026f0e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005043  00000000  00000000  00046fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001920  00000000  00000000  0004c018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001750  00000000  00000000  0004d938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006b53  00000000  00000000  0004f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022879  00000000  00000000  00055bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5db2  00000000  00000000  00078454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e206  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b00  00000000  00000000  0014e25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aff0 	.word	0x0800aff0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800aff0 	.word	0x0800aff0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc2a 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f82a 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f93e 	bl	8000754 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f8a8 	bl	800062c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f8d4 	bl	8000688 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f902 	bl	80006e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f007 fa32 	bl	800794c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e8:	4a09      	ldr	r2, [pc, #36]	; (8000510 <main+0x48>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4809      	ldr	r0, [pc, #36]	; (8000514 <main+0x4c>)
 80004ee:	f007 fa77 	bl	80079e0 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <main+0x50>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
  GREENLEDTaskHandle = osThreadNew(GREEN_LED_Task, NULL, &GREENLEDTask_attributes);
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <main+0x54>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4808      	ldr	r0, [pc, #32]	; (8000520 <main+0x58>)
 80004fe:	f007 fa6f 	bl	80079e0 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <main+0x5c>)
 8000506:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000508:	f007 fa44 	bl	8007994 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x44>
 800050e:	bf00      	nop
 8000510:	0800b048 	.word	0x0800b048
 8000514:	08000985 	.word	0x08000985
 8000518:	200049d0 	.word	0x200049d0
 800051c:	0800b06c 	.word	0x0800b06c
 8000520:	08000951 	.word	0x08000951
 8000524:	20004a28 	.word	0x20004a28

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b098      	sub	sp, #96	; 0x60
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f00a fc8a 	bl	800ae50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 031c 	add.w	r3, r7, #28
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b31      	ldr	r3, [pc, #196]	; (8000624 <SystemClock_Config+0xfc>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	4a30      	ldr	r2, [pc, #192]	; (8000624 <SystemClock_Config+0xfc>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	6413      	str	r3, [r2, #64]	; 0x40
 800056a:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <SystemClock_Config+0xfc>)
 800056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <SystemClock_Config+0x100>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a2a      	ldr	r2, [pc, #168]	; (8000628 <SystemClock_Config+0x100>)
 8000580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0x100>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	2301      	movs	r3, #1
 8000594:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a6:	2308      	movs	r3, #8
 80005a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005aa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fa63 	bl	8003a88 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005c8:	f000 f9e3 	bl	8000992 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	2105      	movs	r1, #5
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fcc4 	bl	8003f78 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005f6:	f000 f9cc 	bl	8000992 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005fa:	2301      	movs	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005fe:	23c0      	movs	r3, #192	; 0xc0
 8000600:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000602:	2302      	movs	r3, #2
 8000604:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fe9c 	bl	8004348 <HAL_RCCEx_PeriphCLKConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000616:	f000 f9bc 	bl	8000992 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3760      	adds	r7, #96	; 0x60
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_I2C1_Init+0x50>)
 800066a:	f002 fc29 	bl	8002ec0 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f98d 	bl	8000992 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200049d4 	.word	0x200049d4
 8000680:	40005400 	.word	0x40005400
 8000684:	000186a0 	.word	0x000186a0

08000688 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_I2S3_Init+0x54>)
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <MX_I2S3_Init+0x58>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2S3_Init+0x54>)
 8000694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000698:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_I2S3_Init+0x54>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_I2S3_Init+0x54>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_I2S3_Init+0x54>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_I2S3_Init+0x54>)
 80006b0:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <MX_I2S3_Init+0x5c>)
 80006b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_I2S3_Init+0x54>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_I2S3_Init+0x54>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_I2S3_Init+0x54>)
 80006c8:	f002 fd3e 	bl	8003148 <HAL_I2S_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006d2:	f000 f95e 	bl	8000992 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20004a84 	.word	0x20004a84
 80006e0:	40003c00 	.word	0x40003c00
 80006e4:	00017700 	.word	0x00017700

080006e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_SPI1_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_SPI1_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_SPI1_Init+0x64>)
 80006f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_SPI1_Init+0x64>)
 8000714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000718:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_SPI1_Init+0x64>)
 8000734:	220a      	movs	r2, #10
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_SPI1_Init+0x64>)
 800073a:	f003 ff45 	bl	80045c8 <HAL_SPI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 f925 	bl	8000992 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20004a2c 	.word	0x20004a2c
 8000750:	40013000 	.word	0x40013000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4b72      	ldr	r3, [pc, #456]	; (8000938 <MX_GPIO_Init+0x1e4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a71      	ldr	r2, [pc, #452]	; (8000938 <MX_GPIO_Init+0x1e4>)
 8000774:	f043 0310 	orr.w	r3, r3, #16
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b6f      	ldr	r3, [pc, #444]	; (8000938 <MX_GPIO_Init+0x1e4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0310 	and.w	r3, r3, #16
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b6b      	ldr	r3, [pc, #428]	; (8000938 <MX_GPIO_Init+0x1e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a6a      	ldr	r2, [pc, #424]	; (8000938 <MX_GPIO_Init+0x1e4>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b68      	ldr	r3, [pc, #416]	; (8000938 <MX_GPIO_Init+0x1e4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b64      	ldr	r3, [pc, #400]	; (8000938 <MX_GPIO_Init+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a63      	ldr	r2, [pc, #396]	; (8000938 <MX_GPIO_Init+0x1e4>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b61      	ldr	r3, [pc, #388]	; (8000938 <MX_GPIO_Init+0x1e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b5d      	ldr	r3, [pc, #372]	; (8000938 <MX_GPIO_Init+0x1e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a5c      	ldr	r2, [pc, #368]	; (8000938 <MX_GPIO_Init+0x1e4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b5a      	ldr	r3, [pc, #360]	; (8000938 <MX_GPIO_Init+0x1e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b56      	ldr	r3, [pc, #344]	; (8000938 <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a55      	ldr	r2, [pc, #340]	; (8000938 <MX_GPIO_Init+0x1e4>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b53      	ldr	r3, [pc, #332]	; (8000938 <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b4f      	ldr	r3, [pc, #316]	; (8000938 <MX_GPIO_Init+0x1e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a4e      	ldr	r2, [pc, #312]	; (8000938 <MX_GPIO_Init+0x1e4>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b4c      	ldr	r3, [pc, #304]	; (8000938 <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2108      	movs	r1, #8
 8000816:	4849      	ldr	r0, [pc, #292]	; (800093c <MX_GPIO_Init+0x1e8>)
 8000818:	f000 fdc8 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2101      	movs	r1, #1
 8000820:	4847      	ldr	r0, [pc, #284]	; (8000940 <MX_GPIO_Init+0x1ec>)
 8000822:	f000 fdc3 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000826:	2200      	movs	r2, #0
 8000828:	f24f 0110 	movw	r1, #61456	; 0xf010
 800082c:	4845      	ldr	r0, [pc, #276]	; (8000944 <MX_GPIO_Init+0x1f0>)
 800082e:	f000 fdbd 	bl	80013ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	483c      	ldr	r0, [pc, #240]	; (800093c <MX_GPIO_Init+0x1e8>)
 800084a:	f000 fc13 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4836      	ldr	r0, [pc, #216]	; (8000940 <MX_GPIO_Init+0x1ec>)
 8000866:	f000 fc05 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087a:	2305      	movs	r3, #5
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	482e      	ldr	r0, [pc, #184]	; (8000940 <MX_GPIO_Init+0x1ec>)
 8000886:	f000 fbf5 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800088e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	482a      	ldr	r0, [pc, #168]	; (8000948 <MX_GPIO_Init+0x1f4>)
 80008a0:	f000 fbe8 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a4:	2304      	movs	r3, #4
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4825      	ldr	r0, [pc, #148]	; (800094c <MX_GPIO_Init+0x1f8>)
 80008b8:	f000 fbdc 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ce:	2305      	movs	r3, #5
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	481c      	ldr	r0, [pc, #112]	; (800094c <MX_GPIO_Init+0x1f8>)
 80008da:	f000 fbcb 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008de:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_GPIO_Init+0x1f0>)
 80008f8:	f000 fbbc 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008fc:	2320      	movs	r3, #32
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_GPIO_Init+0x1f0>)
 8000910:	f000 fbb0 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000914:	2302      	movs	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000918:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_GPIO_Init+0x1e8>)
 800092a:	f000 fba3 	bl	8001074 <HAL_GPIO_Init>

}
 800092e:	bf00      	nop
 8000930:	3730      	adds	r7, #48	; 0x30
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40021000 	.word	0x40021000
 8000940:	40020800 	.word	0x40020800
 8000944:	40020c00 	.word	0x40020c00
 8000948:	40020000 	.word	0x40020000
 800094c:	40020400 	.word	0x40020400

08000950 <GREEN_LED_Task>:

/* USER CODE BEGIN 4 */
void GREEN_LED_Task(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOD, LD4_Pin ,GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095e:	4808      	ldr	r0, [pc, #32]	; (8000980 <GREEN_LED_Task+0x30>)
 8000960:	f000 fd24 	bl	80013ac <HAL_GPIO_WritePin>
		osDelay(900);
 8000964:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000968:	f007 f8cc 	bl	8007b04 <osDelay>
		HAL_GPIO_WritePin(GPIOD,LD4_Pin ,GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <GREEN_LED_Task+0x30>)
 8000974:	f000 fd1a 	bl	80013ac <HAL_GPIO_WritePin>
		osDelay(100);
 8000978:	2064      	movs	r0, #100	; 0x64
 800097a:	f007 f8c3 	bl	8007b04 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD4_Pin ,GPIO_PIN_RESET);
 800097e:	e7eb      	b.n	8000958 <GREEN_LED_Task+0x8>
 8000980:	40020c00 	.word	0x40020c00

08000984 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800098c:	f009 ff16 	bl	800a7bc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8000990:	e7fe      	b.n	8000990 <StartDefaultTask+0xc>

08000992 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000996:	b672      	cpsid	i
}
 8000998:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099a:	e7fe      	b.n	800099a <Error_Handler+0x8>

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_MspInit+0x54>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <HAL_MspInit+0x54>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x54>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_MspInit+0x54>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_MspInit+0x54>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_MspInit+0x54>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	210f      	movs	r1, #15
 80009de:	f06f 0001 	mvn.w	r0, #1
 80009e2:	f000 fb10 	bl	8001006 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <HAL_I2C_MspInit+0x84>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d12c      	bne.n	8000a70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a38:	2312      	movs	r3, #18
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a44:	2304      	movs	r3, #4
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <HAL_I2C_MspInit+0x8c>)
 8000a50:	f000 fb10 	bl	8001074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020400 	.word	0x40020400

08000a84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a28      	ldr	r2, [pc, #160]	; (8000b44 <HAL_I2S_MspInit+0xc0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d14a      	bne.n	8000b3c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000afa:	2310      	movs	r3, #16
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b0a:	2306      	movs	r3, #6
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <HAL_I2S_MspInit+0xc8>)
 8000b16:	f000 faad 	bl	8001074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b1a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4806      	ldr	r0, [pc, #24]	; (8000b50 <HAL_I2S_MspInit+0xcc>)
 8000b38:	f000 fa9c 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40003c00 	.word	0x40003c00
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40020800 	.word	0x40020800

08000b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_SPI_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bae:	23e0      	movs	r3, #224	; 0xe0
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_SPI_MspInit+0x8c>)
 8000bca:	f000 fa53 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f8d8 	bl	8000dc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c18:	f008 fd6c 	bl	80096f4 <xTaskGetSchedulerState>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d001      	beq.n	8000c26 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c22:	f009 fb51 	bl	800a2c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <OTG_FS_IRQHandler+0x10>)
 8000c32:	f000 fe3f 	bl	80018b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20004f18 	.word	0x20004f18

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f00a f8a6 	bl	800adc0 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20020000 	.word	0x20020000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	200000b0 	.word	0x200000b0
 8000ca8:	20005230 	.word	0x20005230

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cec:	4c0b      	ldr	r4, [pc, #44]	; (8000d1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cfa:	f7ff ffd7 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f00a f865 	bl	800adcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fbe1 	bl	80004c8 <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000d14:	0800b0b8 	.word	0x0800b0b8
  ldr r2, =_sbss
 8000d18:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000d1c:	2000522c 	.word	0x2000522c

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_Init+0x40>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_Init+0x40>)
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_Init+0x40>)
 8000d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f94f 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	200f      	movs	r0, #15
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fe20 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f967 	bl	800105a <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da4:	f000 f92f 	bl	8001006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20004acc 	.word	0x20004acc

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20004acc 	.word	0x20004acc

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff29 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff3e 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff31 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa2 	bl	8000fac <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	e16b      	b.n	8001368 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 815a 	bne.w	8001362 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d005      	beq.n	80010c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d130      	bne.n	8001128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 0201 	and.w	r2, r3, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b03      	cmp	r3, #3
 8001132:	d017      	beq.n	8001164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d123      	bne.n	80011b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	69b9      	ldr	r1, [r7, #24]
 80011b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0203 	and.w	r2, r3, #3
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80b4 	beq.w	8001362 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b60      	ldr	r3, [pc, #384]	; (8001380 <HAL_GPIO_Init+0x30c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a5f      	ldr	r2, [pc, #380]	; (8001380 <HAL_GPIO_Init+0x30c>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <HAL_GPIO_Init+0x30c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001216:	4a5b      	ldr	r2, [pc, #364]	; (8001384 <HAL_GPIO_Init+0x310>)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_GPIO_Init+0x314>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d02b      	beq.n	800129a <HAL_GPIO_Init+0x226>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_GPIO_Init+0x318>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d025      	beq.n	8001296 <HAL_GPIO_Init+0x222>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a50      	ldr	r2, [pc, #320]	; (8001390 <HAL_GPIO_Init+0x31c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x21e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <HAL_GPIO_Init+0x320>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x21a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <HAL_GPIO_Init+0x324>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x216>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4d      	ldr	r2, [pc, #308]	; (800139c <HAL_GPIO_Init+0x328>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x212>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <HAL_GPIO_Init+0x32c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x20e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <HAL_GPIO_Init+0x330>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x20a>
 800127a:	2307      	movs	r3, #7
 800127c:	e00e      	b.n	800129c <HAL_GPIO_Init+0x228>
 800127e:	2308      	movs	r3, #8
 8001280:	e00c      	b.n	800129c <HAL_GPIO_Init+0x228>
 8001282:	2306      	movs	r3, #6
 8001284:	e00a      	b.n	800129c <HAL_GPIO_Init+0x228>
 8001286:	2305      	movs	r3, #5
 8001288:	e008      	b.n	800129c <HAL_GPIO_Init+0x228>
 800128a:	2304      	movs	r3, #4
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x228>
 800128e:	2303      	movs	r3, #3
 8001290:	e004      	b.n	800129c <HAL_GPIO_Init+0x228>
 8001292:	2302      	movs	r3, #2
 8001294:	e002      	b.n	800129c <HAL_GPIO_Init+0x228>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x228>
 800129a:	2300      	movs	r3, #0
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	f002 0203 	and.w	r2, r2, #3
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	4093      	lsls	r3, r2
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ac:	4935      	ldr	r1, [pc, #212]	; (8001384 <HAL_GPIO_Init+0x310>)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <HAL_GPIO_Init+0x334>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012de:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <HAL_GPIO_Init+0x334>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_GPIO_Init+0x334>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <HAL_GPIO_Init+0x334>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <HAL_GPIO_Init+0x334>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001332:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_GPIO_Init+0x334>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_GPIO_Init+0x334>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_GPIO_Init+0x334>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3301      	adds	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b0f      	cmp	r3, #15
 800136c:	f67f ae90 	bls.w	8001090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40013800 	.word	0x40013800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40020800 	.word	0x40020800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40021400 	.word	0x40021400
 80013a0:	40021800 	.word	0x40021800
 80013a4:	40021c00 	.word	0x40021c00
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e0:	b08f      	sub	sp, #60	; 0x3c
 80013e2:	af0a      	add	r7, sp, #40	; 0x28
 80013e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e054      	b.n	800149a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f009 fa2a 	bl	800a864 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2203      	movs	r2, #3
 8001414:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f003 f9c5 	bl	80047be <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	687e      	ldr	r6, [r7, #4]
 800143c:	466d      	mov	r5, sp
 800143e:	f106 0410 	add.w	r4, r6, #16
 8001442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800144e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001452:	1d33      	adds	r3, r6, #4
 8001454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001456:	6838      	ldr	r0, [r7, #0]
 8001458:	f003 f93f 	bl	80046da <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	4618      	mov	r0, r3
 8001464:	f003 f9bc 	bl	80047e0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	687e      	ldr	r6, [r7, #4]
 8001470:	466d      	mov	r5, sp
 8001472:	f106 0410 	add.w	r4, r6, #16
 8001476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001482:	e885 0003 	stmia.w	r5, {r0, r1}
 8001486:	1d33      	adds	r3, r6, #4
 8001488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148a:	6838      	ldr	r0, [r7, #0]
 800148c:	f003 fb22 	bl	8004ad4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014a2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014a2:	b590      	push	{r4, r7, lr}
 80014a4:	b089      	sub	sp, #36	; 0x24
 80014a6:	af04      	add	r7, sp, #16
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	4608      	mov	r0, r1
 80014ac:	4611      	mov	r1, r2
 80014ae:	461a      	mov	r2, r3
 80014b0:	4603      	mov	r3, r0
 80014b2:	70fb      	strb	r3, [r7, #3]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70bb      	strb	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_HCD_HC_Init+0x28>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e076      	b.n	80015b8 <HAL_HCD_HC_Init+0x116>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	212c      	movs	r1, #44	; 0x2c
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	4413      	add	r3, r2
 80014de:	333d      	adds	r3, #61	; 0x3d
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	212c      	movs	r1, #44	; 0x2c
 80014ea:	fb01 f303 	mul.w	r3, r1, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	3338      	adds	r3, #56	; 0x38
 80014f2:	787a      	ldrb	r2, [r7, #1]
 80014f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	212c      	movs	r1, #44	; 0x2c
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	4413      	add	r3, r2
 8001502:	3340      	adds	r3, #64	; 0x40
 8001504:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001506:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	212c      	movs	r1, #44	; 0x2c
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	3339      	adds	r3, #57	; 0x39
 8001516:	78fa      	ldrb	r2, [r7, #3]
 8001518:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	212c      	movs	r1, #44	; 0x2c
 8001520:	fb01 f303 	mul.w	r3, r1, r3
 8001524:	4413      	add	r3, r2
 8001526:	333f      	adds	r3, #63	; 0x3f
 8001528:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800152c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	78ba      	ldrb	r2, [r7, #2]
 8001532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001536:	b2d0      	uxtb	r0, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	212c      	movs	r1, #44	; 0x2c
 800153c:	fb01 f303 	mul.w	r3, r1, r3
 8001540:	4413      	add	r3, r2
 8001542:	333a      	adds	r3, #58	; 0x3a
 8001544:	4602      	mov	r2, r0
 8001546:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001548:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800154c:	2b00      	cmp	r3, #0
 800154e:	da09      	bge.n	8001564 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	212c      	movs	r1, #44	; 0x2c
 8001556:	fb01 f303 	mul.w	r3, r1, r3
 800155a:	4413      	add	r3, r2
 800155c:	333b      	adds	r3, #59	; 0x3b
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
 8001562:	e008      	b.n	8001576 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	212c      	movs	r1, #44	; 0x2c
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	4413      	add	r3, r2
 8001570:	333b      	adds	r3, #59	; 0x3b
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	212c      	movs	r1, #44	; 0x2c
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	333c      	adds	r3, #60	; 0x3c
 8001584:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001588:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	787c      	ldrb	r4, [r7, #1]
 8001590:	78ba      	ldrb	r2, [r7, #2]
 8001592:	78f9      	ldrb	r1, [r7, #3]
 8001594:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	4623      	mov	r3, r4
 80015a6:	f003 fc0f 	bl	8004dc8 <USB_HC_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}

080015c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_HCD_HC_Halt+0x1e>
 80015da:	2302      	movs	r3, #2
 80015dc:	e00f      	b.n	80015fe <HAL_HCD_HC_Halt+0x3e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	78fa      	ldrb	r2, [r7, #3]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 fe4b 	bl	800528a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4608      	mov	r0, r1
 8001612:	4611      	mov	r1, r2
 8001614:	461a      	mov	r2, r3
 8001616:	4603      	mov	r3, r0
 8001618:	70fb      	strb	r3, [r7, #3]
 800161a:	460b      	mov	r3, r1
 800161c:	70bb      	strb	r3, [r7, #2]
 800161e:	4613      	mov	r3, r2
 8001620:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	212c      	movs	r1, #44	; 0x2c
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	4413      	add	r3, r2
 800162e:	333b      	adds	r3, #59	; 0x3b
 8001630:	78ba      	ldrb	r2, [r7, #2]
 8001632:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	212c      	movs	r1, #44	; 0x2c
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	4413      	add	r3, r2
 8001640:	333f      	adds	r3, #63	; 0x3f
 8001642:	787a      	ldrb	r2, [r7, #1]
 8001644:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001646:	7c3b      	ldrb	r3, [r7, #16]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d112      	bne.n	8001672 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	212c      	movs	r1, #44	; 0x2c
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	4413      	add	r3, r2
 8001658:	3342      	adds	r3, #66	; 0x42
 800165a:	2203      	movs	r2, #3
 800165c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	212c      	movs	r1, #44	; 0x2c
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	333d      	adds	r3, #61	; 0x3d
 800166c:	7f3a      	ldrb	r2, [r7, #28]
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e008      	b.n	8001684 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	212c      	movs	r1, #44	; 0x2c
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	3342      	adds	r3, #66	; 0x42
 8001680:	2202      	movs	r2, #2
 8001682:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b03      	cmp	r3, #3
 8001688:	f200 80c6 	bhi.w	8001818 <HAL_HCD_HC_SubmitRequest+0x210>
 800168c:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016a5 	.word	0x080016a5
 8001698:	08001805 	.word	0x08001805
 800169c:	08001709 	.word	0x08001709
 80016a0:	08001787 	.word	0x08001787
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016a4:	7c3b      	ldrb	r3, [r7, #16]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	f040 80b8 	bne.w	800181c <HAL_HCD_HC_SubmitRequest+0x214>
 80016ac:	78bb      	ldrb	r3, [r7, #2]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 80b4 	bne.w	800181c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016b4:	8b3b      	ldrh	r3, [r7, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d108      	bne.n	80016cc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	212c      	movs	r1, #44	; 0x2c
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	3355      	adds	r3, #85	; 0x55
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	212c      	movs	r1, #44	; 0x2c
 80016d2:	fb01 f303 	mul.w	r3, r1, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	3355      	adds	r3, #85	; 0x55
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d109      	bne.n	80016f4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	212c      	movs	r1, #44	; 0x2c
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	3342      	adds	r3, #66	; 0x42
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016f2:	e093      	b.n	800181c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	212c      	movs	r1, #44	; 0x2c
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	3342      	adds	r3, #66	; 0x42
 8001702:	2202      	movs	r2, #2
 8001704:	701a      	strb	r2, [r3, #0]
      break;
 8001706:	e089      	b.n	800181c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001708:	78bb      	ldrb	r3, [r7, #2]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d11d      	bne.n	800174a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	3355      	adds	r3, #85	; 0x55
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	212c      	movs	r1, #44	; 0x2c
 8001728:	fb01 f303 	mul.w	r3, r1, r3
 800172c:	4413      	add	r3, r2
 800172e:	3342      	adds	r3, #66	; 0x42
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001734:	e073      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	3342      	adds	r3, #66	; 0x42
 8001744:	2202      	movs	r2, #2
 8001746:	701a      	strb	r2, [r3, #0]
      break;
 8001748:	e069      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3354      	adds	r3, #84	; 0x54
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	3342      	adds	r3, #66	; 0x42
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
      break;
 8001770:	e055      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	212c      	movs	r1, #44	; 0x2c
 8001778:	fb01 f303 	mul.w	r3, r1, r3
 800177c:	4413      	add	r3, r2
 800177e:	3342      	adds	r3, #66	; 0x42
 8001780:	2202      	movs	r2, #2
 8001782:	701a      	strb	r2, [r3, #0]
      break;
 8001784:	e04b      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d11d      	bne.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	212c      	movs	r1, #44	; 0x2c
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	3355      	adds	r3, #85	; 0x55
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	212c      	movs	r1, #44	; 0x2c
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	3342      	adds	r3, #66	; 0x42
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017b2:	e034      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	212c      	movs	r1, #44	; 0x2c
 80017ba:	fb01 f303 	mul.w	r3, r1, r3
 80017be:	4413      	add	r3, r2
 80017c0:	3342      	adds	r3, #66	; 0x42
 80017c2:	2202      	movs	r2, #2
 80017c4:	701a      	strb	r2, [r3, #0]
      break;
 80017c6:	e02a      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	3354      	adds	r3, #84	; 0x54
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d109      	bne.n	80017f0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	3342      	adds	r3, #66	; 0x42
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
      break;
 80017ee:	e016      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	212c      	movs	r1, #44	; 0x2c
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3342      	adds	r3, #66	; 0x42
 80017fe:	2202      	movs	r2, #2
 8001800:	701a      	strb	r2, [r3, #0]
      break;
 8001802:	e00c      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3342      	adds	r3, #66	; 0x42
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
      break;
 8001816:	e002      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001818:	bf00      	nop
 800181a:	e000      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800181c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3344      	adds	r3, #68	; 0x44
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	8b3a      	ldrh	r2, [r7, #24]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	202c      	movs	r0, #44	; 0x2c
 8001838:	fb00 f303 	mul.w	r3, r0, r3
 800183c:	440b      	add	r3, r1
 800183e:	334c      	adds	r3, #76	; 0x4c
 8001840:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	3360      	adds	r3, #96	; 0x60
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	212c      	movs	r1, #44	; 0x2c
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	4413      	add	r3, r2
 8001860:	3350      	adds	r3, #80	; 0x50
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	212c      	movs	r1, #44	; 0x2c
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	4413      	add	r3, r2
 8001872:	3339      	adds	r3, #57	; 0x39
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3361      	adds	r3, #97	; 0x61
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	222c      	movs	r2, #44	; 0x2c
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	3338      	adds	r3, #56	; 0x38
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	18d1      	adds	r1, r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	f003 fb9e 	bl	8004fe4 <USB_HC_StartXfer>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop

080018b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 f8c1 	bl	8004a52 <USB_GetMode>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	f040 80f6 	bne.w	8001ac4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 f8a5 	bl	8004a2c <USB_ReadInterrupts>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80ec 	beq.w	8001ac2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 f89c 	bl	8004a2c <USB_ReadInterrupts>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018fe:	d104      	bne.n	800190a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001908:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f003 f88c 	bl	8004a2c <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800191e:	d104      	bne.n	800192a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001928:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 f87c 	bl	8004a2c <USB_ReadInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800193a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800193e:	d104      	bne.n	800194a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001948:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 f86c 	bl	8004a2c <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b02      	cmp	r3, #2
 800195c:	d103      	bne.n	8001966 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2202      	movs	r2, #2
 8001964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f003 f85e 	bl	8004a2c <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800197a:	d11c      	bne.n	80019b6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001984:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10f      	bne.n	80019b6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001996:	2110      	movs	r1, #16
 8001998:	6938      	ldr	r0, [r7, #16]
 800199a:	f002 ff6d 	bl	8004878 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800199e:	6938      	ldr	r0, [r7, #16]
 80019a0:	f002 ff8e 	bl	80048c0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 f946 	bl	8004c3c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f008 ffd5 	bl	800a960 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 f836 	bl	8004a2c <USB_ReadInterrupts>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ca:	d102      	bne.n	80019d2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f001 fa03 	bl	8002dd8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 f828 	bl	8004a2c <USB_ReadInterrupts>
 80019dc:	4603      	mov	r3, r0
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d106      	bne.n	80019f4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f008 ff9e 	bl	800a928 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2208      	movs	r2, #8
 80019f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 f817 	bl	8004a2c <USB_ReadInterrupts>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b10      	cmp	r3, #16
 8001a06:	d101      	bne.n	8001a0c <HAL_HCD_IRQHandler+0x158>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_HCD_IRQHandler+0x15a>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d012      	beq.n	8001a38 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0210 	bic.w	r2, r2, #16
 8001a20:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f001 f906 	bl	8002c34 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0210 	orr.w	r2, r2, #16
 8001a36:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 fff5 	bl	8004a2c <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a4c:	d13a      	bne.n	8001ac4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 fc08 	bl	8005268 <USB_HC_ReadInterrupt>
 8001a58:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e025      	b.n	8001aac <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d018      	beq.n	8001aa6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	015a      	lsls	r2, r3, #5
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a8a:	d106      	bne.n	8001a9a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4619      	mov	r1, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f8ab 	bl	8001bee <HCD_HC_IN_IRQHandler>
 8001a98:	e005      	b.n	8001aa6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fcc6 	bl	8002432 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d3d4      	bcc.n	8001a60 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	e000      	b.n	8001ac4 <HAL_HCD_IRQHandler+0x210>
      return;
 8001ac2:	bf00      	nop
    }
  }
}
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_HCD_Start+0x16>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e013      	b.n	8001b08 <HAL_HCD_Start+0x3e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 f908 	bl	8004d04 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 fe4f 	bl	800479c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_HCD_Stop+0x16>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e00d      	b.n	8001b42 <HAL_HCD_Stop+0x32>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fd02 	bl	800553c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 f8aa 	bl	8004cb0 <USB_ResetPort>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	212c      	movs	r1, #44	; 0x2c
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3360      	adds	r3, #96	; 0x60
 8001b80:	781b      	ldrb	r3, [r3, #0]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	212c      	movs	r1, #44	; 0x2c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3350      	adds	r3, #80	; 0x50
 8001ba8:	681b      	ldr	r3, [r3, #0]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 f8ee 	bl	8004da4 <USB_GetCurrentFrame>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 f8c9 	bl	8004d76 <USB_GetHostSpeed>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d119      	bne.n	8001c52 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	0151      	lsls	r1, r2, #5
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	440a      	add	r2, r1
 8001c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	60d3      	str	r3, [r2, #12]
 8001c50:	e101      	b.n	8001e56 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c68:	d12b      	bne.n	8001cc2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c76:	461a      	mov	r2, r3
 8001c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	212c      	movs	r1, #44	; 0x2c
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	3361      	adds	r3, #97	; 0x61
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	0151      	lsls	r1, r2, #5
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	440a      	add	r2, r1
 8001ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fae5 	bl	800528a <USB_HC_Halt>
 8001cc0:	e0c9      	b.n	8001e56 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b20      	cmp	r3, #32
 8001cd6:	d109      	bne.n	8001cec <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	6093      	str	r3, [r2, #8]
 8001cea:	e0b4      	b.n	8001e56 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d133      	bne.n	8001d6a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	0151      	lsls	r1, r2, #5
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	440a      	add	r2, r1
 8001d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	212c      	movs	r1, #44	; 0x2c
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3361      	adds	r3, #97	; 0x61
 8001d30:	2205      	movs	r2, #5
 8001d32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d40:	461a      	mov	r2, r3
 8001d42:	2310      	movs	r3, #16
 8001d44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d52:	461a      	mov	r2, r3
 8001d54:	2308      	movs	r3, #8
 8001d56:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fa91 	bl	800528a <USB_HC_Halt>
 8001d68:	e075      	b.n	8001e56 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d80:	d134      	bne.n	8001dec <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	0151      	lsls	r1, r2, #5
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	440a      	add	r2, r1
 8001d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	3361      	adds	r3, #97	; 0x61
 8001db0:	2208      	movs	r2, #8
 8001db2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fa50 	bl	800528a <USB_HC_Halt>
 8001dea:	e034      	b.n	8001e56 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	d129      	bne.n	8001e56 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	0151      	lsls	r1, r2, #5
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	440a      	add	r2, r1
 8001e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	212c      	movs	r1, #44	; 0x2c
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3361      	adds	r3, #97	; 0x61
 8001e30:	2206      	movs	r2, #6
 8001e32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fa23 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e6c:	d122      	bne.n	8001eb4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	0151      	lsls	r1, r2, #5
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	440a      	add	r2, r1
 8001e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 f9f6 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001eb2:	e2ba      	b.n	800242a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	f040 811b 	bne.w	8002102 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d019      	beq.n	8001f08 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	3348      	adds	r3, #72	; 0x48
 8001ee2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	0159      	lsls	r1, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	440b      	add	r3, r1
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ef6:	1ad2      	subs	r2, r2, r3
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	202c      	movs	r0, #44	; 0x2c
 8001efe:	fb00 f303 	mul.w	r3, r0, r3
 8001f02:	440b      	add	r3, r1
 8001f04:	3350      	adds	r3, #80	; 0x50
 8001f06:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	3361      	adds	r3, #97	; 0x61
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	212c      	movs	r1, #44	; 0x2c
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	335c      	adds	r3, #92	; 0x5c
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	333f      	adds	r3, #63	; 0x3f
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	333f      	adds	r3, #63	; 0x3f
 8001f60:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d121      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	0151      	lsls	r1, r2, #5
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 f97a 	bl	800528a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2310      	movs	r3, #16
 8001fa6:	6093      	str	r3, [r2, #8]
 8001fa8:	e066      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	333f      	adds	r3, #63	; 0x3f
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d127      	bne.n	800200e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	0151      	lsls	r1, r2, #5
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	440a      	add	r2, r1
 8001fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fdc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3360      	adds	r3, #96	; 0x60
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	b2d9      	uxtb	r1, r3
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	202c      	movs	r0, #44	; 0x2c
 8001ffa:	fb00 f303 	mul.w	r3, r0, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3360      	adds	r3, #96	; 0x60
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f008 fcb8 	bl	800a97c <HAL_HCD_HC_NotifyURBChange_Callback>
 800200c:	e034      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	212c      	movs	r1, #44	; 0x2c
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	4413      	add	r3, r2
 800201a:	333f      	adds	r3, #63	; 0x3f
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d12a      	bne.n	8002078 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	3360      	adds	r3, #96	; 0x60
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	3354      	adds	r3, #84	; 0x54
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	f083 0301 	eor.w	r3, r3, #1
 8002048:	b2d8      	uxtb	r0, r3
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	212c      	movs	r1, #44	; 0x2c
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3354      	adds	r3, #84	; 0x54
 8002058:	4602      	mov	r2, r0
 800205a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	b2d9      	uxtb	r1, r3
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	202c      	movs	r0, #44	; 0x2c
 8002066:	fb00 f303 	mul.w	r3, r0, r3
 800206a:	4413      	add	r3, r2
 800206c:	3360      	adds	r3, #96	; 0x60
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f008 fc82 	bl	800a97c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d12b      	bne.n	80020d8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3348      	adds	r3, #72	; 0x48
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	202c      	movs	r0, #44	; 0x2c
 8002096:	fb00 f202 	mul.w	r2, r0, r2
 800209a:	440a      	add	r2, r1
 800209c:	3240      	adds	r2, #64	; 0x40
 800209e:	8812      	ldrh	r2, [r2, #0]
 80020a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 81be 	beq.w	800242a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	3354      	adds	r3, #84	; 0x54
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	f083 0301 	eor.w	r3, r3, #1
 80020c2:	b2d8      	uxtb	r0, r3
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3354      	adds	r3, #84	; 0x54
 80020d2:	4602      	mov	r2, r0
 80020d4:	701a      	strb	r2, [r3, #0]
}
 80020d6:	e1a8      	b.n	800242a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3354      	adds	r3, #84	; 0x54
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	f083 0301 	eor.w	r3, r3, #1
 80020ec:	b2d8      	uxtb	r0, r3
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3354      	adds	r3, #84	; 0x54
 80020fc:	4602      	mov	r2, r0
 80020fe:	701a      	strb	r2, [r3, #0]
}
 8002100:	e193      	b.n	800242a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b02      	cmp	r3, #2
 8002116:	f040 8106 	bne.w	8002326 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4413      	add	r3, r2
 8002122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	0151      	lsls	r1, r2, #5
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	440a      	add	r2, r1
 8002130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002134:	f023 0302 	bic.w	r3, r3, #2
 8002138:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3361      	adds	r3, #97	; 0x61
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d109      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3360      	adds	r3, #96	; 0x60
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	e0c9      	b.n	80022f6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3361      	adds	r3, #97	; 0x61
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b05      	cmp	r3, #5
 8002174:	d109      	bne.n	800218a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3360      	adds	r3, #96	; 0x60
 8002184:	2205      	movs	r2, #5
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e0b5      	b.n	80022f6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3361      	adds	r3, #97	; 0x61
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b06      	cmp	r3, #6
 800219c:	d009      	beq.n	80021b2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3361      	adds	r3, #97	; 0x61
 80021ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d150      	bne.n	8002254 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	335c      	adds	r3, #92	; 0x5c
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	202c      	movs	r0, #44	; 0x2c
 80021ca:	fb00 f303 	mul.w	r3, r0, r3
 80021ce:	440b      	add	r3, r1
 80021d0:	335c      	adds	r3, #92	; 0x5c
 80021d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	335c      	adds	r3, #92	; 0x5c
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d912      	bls.n	800220e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	335c      	adds	r3, #92	; 0x5c
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3360      	adds	r3, #96	; 0x60
 8002208:	2204      	movs	r2, #4
 800220a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800220c:	e073      	b.n	80022f6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	3360      	adds	r3, #96	; 0x60
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002236:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800223e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002252:	e050      	b.n	80022f6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	3361      	adds	r3, #97	; 0x61
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d122      	bne.n	80022ae <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	3360      	adds	r3, #96	; 0x60
 8002276:	2202      	movs	r2, #2
 8002278:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002290:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002298:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a6:	461a      	mov	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	e023      	b.n	80022f6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3361      	adds	r3, #97	; 0x61
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b07      	cmp	r3, #7
 80022c0:	d119      	bne.n	80022f6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	335c      	adds	r3, #92	; 0x5c
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	202c      	movs	r0, #44	; 0x2c
 80022da:	fb00 f303 	mul.w	r3, r0, r3
 80022de:	440b      	add	r3, r1
 80022e0:	335c      	adds	r3, #92	; 0x5c
 80022e2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3360      	adds	r3, #96	; 0x60
 80022f2:	2204      	movs	r2, #4
 80022f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	2302      	movs	r3, #2
 8002306:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	b2d9      	uxtb	r1, r3
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	202c      	movs	r0, #44	; 0x2c
 8002312:	fb00 f303 	mul.w	r3, r0, r3
 8002316:	4413      	add	r3, r2
 8002318:	3360      	adds	r3, #96	; 0x60
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f008 fb2c 	bl	800a97c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002324:	e081      	b.n	800242a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b10      	cmp	r3, #16
 800233a:	d176      	bne.n	800242a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	333f      	adds	r3, #63	; 0x3f
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d121      	bne.n	8002394 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	335c      	adds	r3, #92	; 0x5c
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	0151      	lsls	r1, r2, #5
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	440a      	add	r2, r1
 8002378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f002 ff7c 	bl	800528a <USB_HC_Halt>
 8002392:	e041      	b.n	8002418 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	333f      	adds	r3, #63	; 0x3f
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d009      	beq.n	80023bc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	333f      	adds	r3, #63	; 0x3f
 80023b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d12d      	bne.n	8002418 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	335c      	adds	r3, #92	; 0x5c
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d120      	bne.n	8002418 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	3361      	adds	r3, #97	; 0x61
 80023e4:	2203      	movs	r2, #3
 80023e6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	0151      	lsls	r1, r2, #5
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	440a      	add	r2, r1
 80023fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f002 ff39 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	461a      	mov	r2, r3
 8002426:	2310      	movs	r3, #16
 8002428:	6093      	str	r3, [r2, #8]
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b088      	sub	sp, #32
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	460b      	mov	r3, r1
 800243c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b04      	cmp	r3, #4
 8002460:	d119      	bne.n	8002496 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	461a      	mov	r2, r3
 8002470:	2304      	movs	r3, #4
 8002472:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	0151      	lsls	r1, r2, #5
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	440a      	add	r2, r1
 800248a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800248e:	f043 0302 	orr.w	r3, r3, #2
 8002492:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002494:	e3ca      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d13e      	bne.n	800252a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	461a      	mov	r2, r3
 80024ba:	2320      	movs	r3, #32
 80024bc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	333d      	adds	r3, #61	; 0x3d
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	f040 83ac 	bne.w	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	333d      	adds	r3, #61	; 0x3d
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3360      	adds	r3, #96	; 0x60
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	0151      	lsls	r1, r2, #5
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	440a      	add	r2, r1
 800250e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002512:	f043 0302 	orr.w	r3, r3, #2
 8002516:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f002 feb1 	bl	800528a <USB_HC_Halt>
}
 8002528:	e380      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800253c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002540:	d122      	bne.n	8002588 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	0151      	lsls	r1, r2, #5
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	440a      	add	r2, r1
 8002558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f002 fe8c 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	461a      	mov	r2, r3
 8002580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002584:	6093      	str	r3, [r2, #8]
}
 8002586:	e351      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b01      	cmp	r3, #1
 800259c:	d150      	bne.n	8002640 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	335c      	adds	r3, #92	; 0x5c
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d111      	bne.n	80025ea <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	333d      	adds	r3, #61	; 0x3d
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	461a      	mov	r2, r3
 80025e6:	2340      	movs	r3, #64	; 0x40
 80025e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	0151      	lsls	r1, r2, #5
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	440a      	add	r2, r1
 8002600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f002 fe38 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	461a      	mov	r2, r3
 8002628:	2301      	movs	r3, #1
 800262a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
}
 800263e:	e2f5      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d13c      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3361      	adds	r3, #97	; 0x61
 8002664:	2204      	movs	r2, #4
 8002666:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	333d      	adds	r3, #61	; 0x3d
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	335c      	adds	r3, #92	; 0x5c
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	0151      	lsls	r1, r2, #5
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	440a      	add	r2, r1
 80026a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f002 fde7 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	461a      	mov	r2, r3
 80026ca:	2340      	movs	r3, #64	; 0x40
 80026cc:	6093      	str	r3, [r2, #8]
}
 80026ce:	e2ad      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d12a      	bne.n	800273c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	461a      	mov	r2, r3
 80026f4:	2308      	movs	r3, #8
 80026f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	0151      	lsls	r1, r2, #5
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	440a      	add	r2, r1
 800270e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fdb1 	bl	800528a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	3361      	adds	r3, #97	; 0x61
 8002736:	2205      	movs	r2, #5
 8002738:	701a      	strb	r2, [r3, #0]
}
 800273a:	e277      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b10      	cmp	r3, #16
 8002750:	d150      	bne.n	80027f4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	335c      	adds	r3, #92	; 0x5c
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	3361      	adds	r3, #97	; 0x61
 8002772:	2203      	movs	r2, #3
 8002774:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	333d      	adds	r3, #61	; 0x3d
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d112      	bne.n	80027b0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	333c      	adds	r3, #60	; 0x3c
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d108      	bne.n	80027b0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	333d      	adds	r3, #61	; 0x3d
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	0151      	lsls	r1, r2, #5
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	440a      	add	r2, r1
 80027c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 fd55 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	461a      	mov	r2, r3
 80027ee:	2310      	movs	r3, #16
 80027f0:	6093      	str	r3, [r2, #8]
}
 80027f2:	e21b      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	2b80      	cmp	r3, #128	; 0x80
 8002808:	d174      	bne.n	80028f4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d121      	bne.n	8002856 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3361      	adds	r3, #97	; 0x61
 8002820:	2206      	movs	r2, #6
 8002822:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	0151      	lsls	r1, r2, #5
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	440a      	add	r2, r1
 800283a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fd1b 	bl	800528a <USB_HC_Halt>
 8002854:	e044      	b.n	80028e0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	335c      	adds	r3, #92	; 0x5c
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	202c      	movs	r0, #44	; 0x2c
 800286e:	fb00 f303 	mul.w	r3, r0, r3
 8002872:	440b      	add	r3, r1
 8002874:	335c      	adds	r3, #92	; 0x5c
 8002876:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	335c      	adds	r3, #92	; 0x5c
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d920      	bls.n	80028ce <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	335c      	adds	r3, #92	; 0x5c
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3360      	adds	r3, #96	; 0x60
 80028ac:	2204      	movs	r2, #4
 80028ae:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	b2d9      	uxtb	r1, r3
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	202c      	movs	r0, #44	; 0x2c
 80028ba:	fb00 f303 	mul.w	r3, r0, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3360      	adds	r3, #96	; 0x60
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f008 f858 	bl	800a97c <HAL_HCD_HC_NotifyURBChange_Callback>
 80028cc:	e008      	b.n	80028e0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	3360      	adds	r3, #96	; 0x60
 80028dc:	2202      	movs	r2, #2
 80028de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	461a      	mov	r2, r3
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	6093      	str	r3, [r2, #8]
}
 80028f2:	e19b      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290a:	d134      	bne.n	8002976 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	0151      	lsls	r1, r2, #5
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	440a      	add	r2, r1
 8002922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f002 fca7 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	461a      	mov	r2, r3
 800294a:	2310      	movs	r3, #16
 800294c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	461a      	mov	r2, r3
 800295c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002960:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3361      	adds	r3, #97	; 0x61
 8002970:	2208      	movs	r2, #8
 8002972:	701a      	strb	r2, [r3, #0]
}
 8002974:	e15a      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	f040 814f 	bne.w	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	0151      	lsls	r1, r2, #5
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	440a      	add	r2, r1
 80029a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a8:	f023 0302 	bic.w	r3, r3, #2
 80029ac:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3361      	adds	r3, #97	; 0x61
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d17d      	bne.n	8002abe <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3360      	adds	r3, #96	; 0x60
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	333f      	adds	r3, #63	; 0x3f
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d00a      	beq.n	80029fe <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	333f      	adds	r3, #63	; 0x3f
 80029f6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	f040 8100 	bne.w	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d113      	bne.n	8002a2e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3355      	adds	r3, #85	; 0x55
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	f083 0301 	eor.w	r3, r3, #1
 8002a1a:	b2d8      	uxtb	r0, r3
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3355      	adds	r3, #85	; 0x55
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	f040 80e3 	bne.w	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	334c      	adds	r3, #76	; 0x4c
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80d8 	beq.w	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	334c      	adds	r3, #76	; 0x4c
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	202c      	movs	r0, #44	; 0x2c
 8002a64:	fb00 f202 	mul.w	r2, r0, r2
 8002a68:	440a      	add	r2, r1
 8002a6a:	3240      	adds	r2, #64	; 0x40
 8002a6c:	8812      	ldrh	r2, [r2, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b01      	subs	r3, #1
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	202c      	movs	r0, #44	; 0x2c
 8002a78:	fb00 f202 	mul.w	r2, r0, r2
 8002a7c:	440a      	add	r2, r1
 8002a7e:	3240      	adds	r2, #64	; 0x40
 8002a80:	8812      	ldrh	r2, [r2, #0]
 8002a82:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80b5 	beq.w	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3355      	adds	r3, #85	; 0x55
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	f083 0301 	eor.w	r3, r3, #1
 8002aa8:	b2d8      	uxtb	r0, r3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3355      	adds	r3, #85	; 0x55
 8002ab8:	4602      	mov	r2, r0
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e09f      	b.n	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3361      	adds	r3, #97	; 0x61
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d109      	bne.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3360      	adds	r3, #96	; 0x60
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e08b      	b.n	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3361      	adds	r3, #97	; 0x61
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d109      	bne.n	8002b0e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3360      	adds	r3, #96	; 0x60
 8002b08:	2202      	movs	r2, #2
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e077      	b.n	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3361      	adds	r3, #97	; 0x61
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b05      	cmp	r3, #5
 8002b20:	d109      	bne.n	8002b36 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3360      	adds	r3, #96	; 0x60
 8002b30:	2205      	movs	r2, #5
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e063      	b.n	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3361      	adds	r3, #97	; 0x61
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d009      	beq.n	8002b5e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3361      	adds	r3, #97	; 0x61
 8002b58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d14f      	bne.n	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	335c      	adds	r3, #92	; 0x5c
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	202c      	movs	r0, #44	; 0x2c
 8002b76:	fb00 f303 	mul.w	r3, r0, r3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	335c      	adds	r3, #92	; 0x5c
 8002b7e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	335c      	adds	r3, #92	; 0x5c
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d912      	bls.n	8002bba <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	335c      	adds	r3, #92	; 0x5c
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3360      	adds	r3, #96	; 0x60
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e021      	b.n	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3360      	adds	r3, #96	; 0x60
 8002bc8:	2202      	movs	r2, #2
 8002bca:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002be2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bea:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	b2d9      	uxtb	r1, r3
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	202c      	movs	r0, #44	; 0x2c
 8002c1a:	fb00 f303 	mul.w	r3, r0, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3360      	adds	r3, #96	; 0x60
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f007 fea8 	bl	800a97c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c2c:	bf00      	nop
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	0c5b      	lsrs	r3, r3, #17
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c68:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d004      	beq.n	8002c7a <HCD_RXQLVL_IRQHandler+0x46>
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	f000 80a9 	beq.w	8002dca <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c78:	e0aa      	b.n	8002dd0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80a6 	beq.w	8002dce <HCD_RXQLVL_IRQHandler+0x19a>
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3344      	adds	r3, #68	; 0x44
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 809b 	beq.w	8002dce <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3350      	adds	r3, #80	; 0x50
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	441a      	add	r2, r3
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	202c      	movs	r0, #44	; 0x2c
 8002cb2:	fb00 f303 	mul.w	r3, r0, r3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	334c      	adds	r3, #76	; 0x4c
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d87a      	bhi.n	8002db6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3344      	adds	r3, #68	; 0x44
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	b292      	uxth	r2, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f001 fe4f 	bl	800497c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	3344      	adds	r3, #68	; 0x44
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	441a      	add	r2, r3
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	202c      	movs	r0, #44	; 0x2c
 8002cf8:	fb00 f303 	mul.w	r3, r0, r3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3344      	adds	r3, #68	; 0x44
 8002d00:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3350      	adds	r3, #80	; 0x50
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	441a      	add	r2, r3
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	202c      	movs	r0, #44	; 0x2c
 8002d1c:	fb00 f303 	mul.w	r3, r0, r3
 8002d20:	440b      	add	r3, r1
 8002d22:	3350      	adds	r3, #80	; 0x50
 8002d24:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	0cdb      	lsrs	r3, r3, #19
 8002d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d3a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	3340      	adds	r3, #64	; 0x40
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d13c      	bne.n	8002dce <HCD_RXQLVL_IRQHandler+0x19a>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d039      	beq.n	8002dce <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d70:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d78:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d86:	461a      	mov	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3354      	adds	r3, #84	; 0x54
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f083 0301 	eor.w	r3, r3, #1
 8002da0:	b2d8      	uxtb	r0, r3
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3354      	adds	r3, #84	; 0x54
 8002db0:	4602      	mov	r2, r0
 8002db2:	701a      	strb	r2, [r3, #0]
      break;
 8002db4:	e00b      	b.n	8002dce <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3360      	adds	r3, #96	; 0x60
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	701a      	strb	r2, [r3, #0]
      break;
 8002dc8:	e001      	b.n	8002dce <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e000      	b.n	8002dd0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002dce:	bf00      	nop
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e04:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d10b      	bne.n	8002e28 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f007 fd92 	bl	800a944 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f043 0302 	orr.w	r3, r3, #2
 8002e26:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d132      	bne.n	8002e98 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f043 0308 	orr.w	r3, r3, #8
 8002e38:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d126      	bne.n	8002e92 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d113      	bne.n	8002e74 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e56:	d106      	bne.n	8002e66 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 feec 	bl	8004c3c <USB_InitFSLSPClkSel>
 8002e64:	e011      	b.n	8002e8a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f001 fee5 	bl	8004c3c <USB_InitFSLSPClkSel>
 8002e72:	e00a      	b.n	8002e8a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d106      	bne.n	8002e8a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e82:	461a      	mov	r2, r3
 8002e84:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e88:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f007 fd88 	bl	800a9a0 <HAL_HCD_PortEnabled_Callback>
 8002e90:	e002      	b.n	8002e98 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f007 fd92 	bl	800a9bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d103      	bne.n	8002eaa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f043 0320 	orr.w	r3, r3, #32
 8002ea8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6013      	str	r3, [r2, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e12b      	b.n	800312a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd fd84 	bl	80009f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	; 0x24
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f24:	f001 f9fc 	bl	8004320 <HAL_RCC_GetPCLK1Freq>
 8002f28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a81      	ldr	r2, [pc, #516]	; (8003134 <HAL_I2C_Init+0x274>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d807      	bhi.n	8002f44 <HAL_I2C_Init+0x84>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a80      	ldr	r2, [pc, #512]	; (8003138 <HAL_I2C_Init+0x278>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	bf94      	ite	ls
 8002f3c:	2301      	movls	r3, #1
 8002f3e:	2300      	movhi	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e006      	b.n	8002f52 <HAL_I2C_Init+0x92>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a7d      	ldr	r2, [pc, #500]	; (800313c <HAL_I2C_Init+0x27c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	bf94      	ite	ls
 8002f4c:	2301      	movls	r3, #1
 8002f4e:	2300      	movhi	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0e7      	b.n	800312a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a78      	ldr	r2, [pc, #480]	; (8003140 <HAL_I2C_Init+0x280>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	0c9b      	lsrs	r3, r3, #18
 8002f64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a6a      	ldr	r2, [pc, #424]	; (8003134 <HAL_I2C_Init+0x274>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d802      	bhi.n	8002f94 <HAL_I2C_Init+0xd4>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3301      	adds	r3, #1
 8002f92:	e009      	b.n	8002fa8 <HAL_I2C_Init+0xe8>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	4a69      	ldr	r2, [pc, #420]	; (8003144 <HAL_I2C_Init+0x284>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	495c      	ldr	r1, [pc, #368]	; (8003134 <HAL_I2C_Init+0x274>)
 8002fc4:	428b      	cmp	r3, r1
 8002fc6:	d819      	bhi.n	8002ffc <HAL_I2C_Init+0x13c>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1e59      	subs	r1, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd6:	1c59      	adds	r1, r3, #1
 8002fd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fdc:	400b      	ands	r3, r1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_I2C_Init+0x138>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1e59      	subs	r1, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff6:	e051      	b.n	800309c <HAL_I2C_Init+0x1dc>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	e04f      	b.n	800309c <HAL_I2C_Init+0x1dc>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d111      	bne.n	8003028 <HAL_I2C_Init+0x168>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1e58      	subs	r0, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e012      	b.n	800304e <HAL_I2C_Init+0x18e>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e58      	subs	r0, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	0099      	lsls	r1, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	fbb0 f3f3 	udiv	r3, r0, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Init+0x196>
 8003052:	2301      	movs	r3, #1
 8003054:	e022      	b.n	800309c <HAL_I2C_Init+0x1dc>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10e      	bne.n	800307c <HAL_I2C_Init+0x1bc>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1e58      	subs	r0, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6859      	ldr	r1, [r3, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	440b      	add	r3, r1
 800306c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003070:	3301      	adds	r3, #1
 8003072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800307a:	e00f      	b.n	800309c <HAL_I2C_Init+0x1dc>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1e58      	subs	r0, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	0099      	lsls	r1, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003092:	3301      	adds	r3, #1
 8003094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	6809      	ldr	r1, [r1, #0]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6911      	ldr	r1, [r2, #16]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68d2      	ldr	r2, [r2, #12]
 80030d6:	4311      	orrs	r1, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	000186a0 	.word	0x000186a0
 8003138:	001e847f 	.word	0x001e847f
 800313c:	003d08ff 	.word	0x003d08ff
 8003140:	431bde83 	.word	0x431bde83
 8003144:	10624dd3 	.word	0x10624dd3

08003148 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e128      	b.n	80033ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a90      	ldr	r2, [pc, #576]	; (80033b4 <HAL_I2S_Init+0x26c>)
 8003172:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fd fc85 	bl	8000a84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003190:	f023 030f 	bic.w	r3, r3, #15
 8003194:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2202      	movs	r2, #2
 800319c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d060      	beq.n	8003268 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031ae:	2310      	movs	r3, #16
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e001      	b.n	80031b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031b4:	2320      	movs	r3, #32
 80031b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d802      	bhi.n	80031c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031c6:	2001      	movs	r0, #1
 80031c8:	f001 f9a0 	bl	800450c <HAL_RCCEx_GetPeriphCLKFreq>
 80031cc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d6:	d125      	bne.n	8003224 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d010      	beq.n	8003202 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	3305      	adds	r3, #5
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	e01f      	b.n	8003242 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	fbb2 f2f3 	udiv	r2, r2, r3
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	3305      	adds	r3, #5
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	e00e      	b.n	8003242 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	fbb2 f2f3 	udiv	r2, r2, r3
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	461a      	mov	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	3305      	adds	r3, #5
 8003240:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4a5c      	ldr	r2, [pc, #368]	; (80033b8 <HAL_I2S_Init+0x270>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	08db      	lsrs	r3, r3, #3
 800324c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e003      	b.n	8003270 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003268:	2302      	movs	r3, #2
 800326a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d902      	bls.n	800327c <HAL_I2S_Init+0x134>
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	2bff      	cmp	r3, #255	; 0xff
 800327a:	d907      	bls.n	800328c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f043 0210 	orr.w	r2, r3, #16
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e08f      	b.n	80033ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	ea42 0103 	orr.w	r1, r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	430a      	orrs	r2, r1
 800329e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032aa:	f023 030f 	bic.w	r3, r3, #15
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6851      	ldr	r1, [r2, #4]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6892      	ldr	r2, [r2, #8]
 80032b6:	4311      	orrs	r1, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68d2      	ldr	r2, [r2, #12]
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6992      	ldr	r2, [r2, #24]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d161      	bne.n	800339c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a38      	ldr	r2, [pc, #224]	; (80033bc <HAL_I2S_Init+0x274>)
 80032dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a37      	ldr	r2, [pc, #220]	; (80033c0 <HAL_I2S_Init+0x278>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d101      	bne.n	80032ec <HAL_I2S_Init+0x1a4>
 80032e8:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_I2S_Init+0x27c>)
 80032ea:	e001      	b.n	80032f0 <HAL_I2S_Init+0x1a8>
 80032ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	4932      	ldr	r1, [pc, #200]	; (80033c0 <HAL_I2S_Init+0x278>)
 80032f8:	428a      	cmp	r2, r1
 80032fa:	d101      	bne.n	8003300 <HAL_I2S_Init+0x1b8>
 80032fc:	4a31      	ldr	r2, [pc, #196]	; (80033c4 <HAL_I2S_Init+0x27c>)
 80032fe:	e001      	b.n	8003304 <HAL_I2S_Init+0x1bc>
 8003300:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003304:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003308:	f023 030f 	bic.w	r3, r3, #15
 800330c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2b      	ldr	r2, [pc, #172]	; (80033c0 <HAL_I2S_Init+0x278>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_I2S_Init+0x1d4>
 8003318:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <HAL_I2S_Init+0x27c>)
 800331a:	e001      	b.n	8003320 <HAL_I2S_Init+0x1d8>
 800331c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003320:	2202      	movs	r2, #2
 8003322:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a25      	ldr	r2, [pc, #148]	; (80033c0 <HAL_I2S_Init+0x278>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_I2S_Init+0x1ea>
 800332e:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <HAL_I2S_Init+0x27c>)
 8003330:	e001      	b.n	8003336 <HAL_I2S_Init+0x1ee>
 8003332:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003342:	d003      	beq.n	800334c <HAL_I2S_Init+0x204>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d103      	bne.n	8003354 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800334c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e001      	b.n	8003358 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003362:	4313      	orrs	r3, r2
 8003364:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800336c:	4313      	orrs	r3, r2
 800336e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003376:	4313      	orrs	r3, r2
 8003378:	b29a      	uxth	r2, r3
 800337a:	897b      	ldrh	r3, [r7, #10]
 800337c:	4313      	orrs	r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003384:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_I2S_Init+0x278>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_I2S_Init+0x24c>
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_I2S_Init+0x27c>)
 8003392:	e001      	b.n	8003398 <HAL_I2S_Init+0x250>
 8003394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003398:	897a      	ldrh	r2, [r7, #10]
 800339a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3720      	adds	r7, #32
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	080034bf 	.word	0x080034bf
 80033b8:	cccccccd 	.word	0xcccccccd
 80033bc:	080035d5 	.word	0x080035d5
 80033c0:	40003800 	.word	0x40003800
 80033c4:	40003400 	.word	0x40003400

080033c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	881a      	ldrh	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	1c9a      	adds	r2, r3, #2
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003448:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ffb8 	bl	80033c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	b292      	uxth	r2, r2
 8003474:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	1c9a      	adds	r2, r3, #2
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10e      	bne.n	80034b6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff93 	bl	80033dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b086      	sub	sp, #24
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d13a      	bne.n	8003550 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d109      	bne.n	80034f8 <I2S_IRQHandler+0x3a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b40      	cmp	r3, #64	; 0x40
 80034f0:	d102      	bne.n	80034f8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ffb4 	bl	8003460 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d126      	bne.n	8003550 <I2S_IRQHandler+0x92>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b20      	cmp	r3, #32
 800350e:	d11f      	bne.n	8003550 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800351e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f043 0202 	orr.w	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ff50 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b03      	cmp	r3, #3
 800355a:	d136      	bne.n	80035ca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d109      	bne.n	800357a <I2S_IRQHandler+0xbc>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	2b80      	cmp	r3, #128	; 0x80
 8003572:	d102      	bne.n	800357a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff45 	bl	8003404 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b08      	cmp	r3, #8
 8003582:	d122      	bne.n	80035ca <I2S_IRQHandler+0x10c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b20      	cmp	r3, #32
 8003590:	d11b      	bne.n	80035ca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f043 0204 	orr.w	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff13 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4aa2      	ldr	r2, [pc, #648]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035ee:	4ba2      	ldr	r3, [pc, #648]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035f0:	e001      	b.n	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a9b      	ldr	r2, [pc, #620]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800360c:	4b9a      	ldr	r3, [pc, #616]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800360e:	e001      	b.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003620:	d004      	beq.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 8099 	bne.w	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b02      	cmp	r3, #2
 8003634:	d107      	bne.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f925 	bl	8003890 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d107      	bne.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9c8 	bl	80039f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d13a      	bne.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d035      	beq.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a7e      	ldr	r2, [pc, #504]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800367e:	4b7e      	ldr	r3, [pc, #504]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003680:	e001      	b.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4979      	ldr	r1, [pc, #484]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800368e:	428b      	cmp	r3, r1
 8003690:	d101      	bne.n	8003696 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003692:	4b79      	ldr	r3, [pc, #484]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003694:	e001      	b.n	800369a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800369e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f043 0202 	orr.w	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff fe88 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	f040 80be 	bne.w	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80b8 	beq.w	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003706:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a59      	ldr	r2, [pc, #356]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003712:	4b59      	ldr	r3, [pc, #356]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003714:	e001      	b.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4954      	ldr	r1, [pc, #336]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003722:	428b      	cmp	r3, r1
 8003724:	d101      	bne.n	800372a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003726:	4b54      	ldr	r3, [pc, #336]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003728:	e001      	b.n	800372e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800372a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800372e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003732:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f043 0204 	orr.w	r2, r3, #4
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fe4a 	bl	80033f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800375c:	e084      	b.n	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b02      	cmp	r3, #2
 8003766:	d107      	bne.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8be 	bl	80038f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8fd 	bl	800398c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b40      	cmp	r3, #64	; 0x40
 800379a:	d12f      	bne.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d02a      	beq.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037b4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037c0:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037c2:	e001      	b.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4929      	ldr	r1, [pc, #164]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037d0:	428b      	cmp	r3, r1
 80037d2:	d101      	bne.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037d4:	4b28      	ldr	r3, [pc, #160]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037d6:	e001      	b.n	80037dc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f043 0202 	orr.w	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fdfa 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b08      	cmp	r3, #8
 8003804:	d131      	bne.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02c      	beq.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800381c:	e001      	b.n	8003822 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800381e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4912      	ldr	r1, [pc, #72]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800382a:	428b      	cmp	r3, r1
 800382c:	d101      	bne.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003830:	e001      	b.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003836:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800383a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800384a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	f043 0204 	orr.w	r2, r3, #4
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fdc5 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003866:	e000      	b.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003868:	bf00      	nop
}
 800386a:	bf00      	nop
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40003800 	.word	0x40003800
 8003878:	40003400 	.word	0x40003400

0800387c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	1c99      	adds	r1, r3, #2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6251      	str	r1, [r2, #36]	; 0x24
 80038a2:	881a      	ldrh	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d113      	bne.n	80038ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ffc9 	bl	800387c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c99      	adds	r1, r3, #2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6251      	str	r1, [r2, #36]	; 0x24
 8003906:	8819      	ldrh	r1, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <I2SEx_TxISR_I2SExt+0x90>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d101      	bne.n	8003916 <I2SEx_TxISR_I2SExt+0x22>
 8003912:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <I2SEx_TxISR_I2SExt+0x94>)
 8003914:	e001      	b.n	800391a <I2SEx_TxISR_I2SExt+0x26>
 8003916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391a:	460a      	mov	r2, r1
 800391c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d121      	bne.n	800397a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a12      	ldr	r2, [pc, #72]	; (8003984 <I2SEx_TxISR_I2SExt+0x90>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <I2SEx_TxISR_I2SExt+0x50>
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <I2SEx_TxISR_I2SExt+0x94>)
 8003942:	e001      	b.n	8003948 <I2SEx_TxISR_I2SExt+0x54>
 8003944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	490d      	ldr	r1, [pc, #52]	; (8003984 <I2SEx_TxISR_I2SExt+0x90>)
 8003950:	428b      	cmp	r3, r1
 8003952:	d101      	bne.n	8003958 <I2SEx_TxISR_I2SExt+0x64>
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <I2SEx_TxISR_I2SExt+0x94>)
 8003956:	e001      	b.n	800395c <I2SEx_TxISR_I2SExt+0x68>
 8003958:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003960:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff81 	bl	800387c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40003800 	.word	0x40003800
 8003988:	40003400 	.word	0x40003400

0800398c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68d8      	ldr	r0, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	1c99      	adds	r1, r3, #2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039a4:	b282      	uxth	r2, r0
 80039a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d113      	bne.n	80039e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ff4a 	bl	800387c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <I2SEx_RxISR_I2SExt+0x90>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <I2SEx_RxISR_I2SExt+0x16>
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <I2SEx_RxISR_I2SExt+0x94>)
 8003a04:	e001      	b.n	8003a0a <I2SEx_RxISR_I2SExt+0x1a>
 8003a06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a0a:	68d8      	ldr	r0, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	1c99      	adds	r1, r3, #2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a16:	b282      	uxth	r2, r0
 8003a18:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d121      	bne.n	8003a76 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <I2SEx_RxISR_I2SExt+0x90>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <I2SEx_RxISR_I2SExt+0x50>
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <I2SEx_RxISR_I2SExt+0x94>)
 8003a3e:	e001      	b.n	8003a44 <I2SEx_RxISR_I2SExt+0x54>
 8003a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	490d      	ldr	r1, [pc, #52]	; (8003a80 <I2SEx_RxISR_I2SExt+0x90>)
 8003a4c:	428b      	cmp	r3, r1
 8003a4e:	d101      	bne.n	8003a54 <I2SEx_RxISR_I2SExt+0x64>
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <I2SEx_RxISR_I2SExt+0x94>)
 8003a52:	e001      	b.n	8003a58 <I2SEx_RxISR_I2SExt+0x68>
 8003a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a5c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d106      	bne.n	8003a76 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff03 	bl	800387c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40003800 	.word	0x40003800
 8003a84:	40003400 	.word	0x40003400

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e264      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d075      	beq.n	8003b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa6:	4ba3      	ldr	r3, [pc, #652]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d00c      	beq.n	8003acc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab2:	4ba0      	ldr	r3, [pc, #640]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d112      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003abe:	4b9d      	ldr	r3, [pc, #628]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	4b99      	ldr	r3, [pc, #612]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d05b      	beq.n	8003b90 <HAL_RCC_OscConfig+0x108>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d157      	bne.n	8003b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e23f      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aec:	d106      	bne.n	8003afc <HAL_RCC_OscConfig+0x74>
 8003aee:	4b91      	ldr	r3, [pc, #580]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a90      	ldr	r2, [pc, #576]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e01d      	b.n	8003b38 <HAL_RCC_OscConfig+0xb0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x98>
 8003b06:	4b8b      	ldr	r3, [pc, #556]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a8a      	ldr	r2, [pc, #552]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b88      	ldr	r3, [pc, #544]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a87      	ldr	r2, [pc, #540]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0xb0>
 8003b20:	4b84      	ldr	r3, [pc, #528]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a83      	ldr	r2, [pc, #524]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b81      	ldr	r3, [pc, #516]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a80      	ldr	r2, [pc, #512]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fd f956 	bl	8000df0 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b48:	f7fd f952 	bl	8000df0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	; 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e204      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b76      	ldr	r3, [pc, #472]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0xc0>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd f942 	bl	8000df0 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fd f93e 	bl	8000df0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1f0      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0xe8>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d063      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9e:	4b65      	ldr	r3, [pc, #404]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003baa:	4b62      	ldr	r3, [pc, #392]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d11c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb6:	4b5f      	ldr	r3, [pc, #380]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc2:	4b5c      	ldr	r3, [pc, #368]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_OscConfig+0x152>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e1c4      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b56      	ldr	r3, [pc, #344]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4952      	ldr	r1, [pc, #328]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	e03a      	b.n	8003c66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf8:	4b4f      	ldr	r3, [pc, #316]	; (8003d38 <HAL_RCC_OscConfig+0x2b0>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fd f8f7 	bl	8000df0 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fd f8f3 	bl	8000df0 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1a5      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c18:	4b46      	ldr	r3, [pc, #280]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b43      	ldr	r3, [pc, #268]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4940      	ldr	r1, [pc, #256]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
 8003c38:	e015      	b.n	8003c66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3a:	4b3f      	ldr	r3, [pc, #252]	; (8003d38 <HAL_RCC_OscConfig+0x2b0>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fd f8d6 	bl	8000df0 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c48:	f7fd f8d2 	bl	8000df0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e184      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d030      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7a:	4b30      	ldr	r3, [pc, #192]	; (8003d3c <HAL_RCC_OscConfig+0x2b4>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fd f8b6 	bl	8000df0 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c88:	f7fd f8b2 	bl	8000df0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e164      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x200>
 8003ca6:	e015      	b.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca8:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HAL_RCC_OscConfig+0x2b4>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cae:	f7fd f89f 	bl	8000df0 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7fd f89b 	bl	8000df0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e14d      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc8:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f0      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a0 	beq.w	8003e22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce6:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6413      	str	r3, [r2, #64]	; 0x40
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_OscConfig+0x2b8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d121      	bne.n	8003d62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_RCC_OscConfig+0x2b8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <HAL_RCC_OscConfig+0x2b8>)
 8003d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2a:	f7fd f861 	bl	8000df0 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	e011      	b.n	8003d56 <HAL_RCC_OscConfig+0x2ce>
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	42470000 	.word	0x42470000
 8003d3c:	42470e80 	.word	0x42470e80
 8003d40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d44:	f7fd f854 	bl	8000df0 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e106      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d56:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <HAL_RCC_OscConfig+0x4e4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d106      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2f0>
 8003d6a:	4b81      	ldr	r3, [pc, #516]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	4a80      	ldr	r2, [pc, #512]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70
 8003d76:	e01c      	b.n	8003db2 <HAL_RCC_OscConfig+0x32a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b05      	cmp	r3, #5
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RCC_OscConfig+0x312>
 8003d80:	4b7b      	ldr	r3, [pc, #492]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4a7a      	ldr	r2, [pc, #488]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d86:	f043 0304 	orr.w	r3, r3, #4
 8003d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8c:	4b78      	ldr	r3, [pc, #480]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	4a77      	ldr	r2, [pc, #476]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	6713      	str	r3, [r2, #112]	; 0x70
 8003d98:	e00b      	b.n	8003db2 <HAL_RCC_OscConfig+0x32a>
 8003d9a:	4b75      	ldr	r3, [pc, #468]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	4a74      	ldr	r2, [pc, #464]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	6713      	str	r3, [r2, #112]	; 0x70
 8003da6:	4b72      	ldr	r3, [pc, #456]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a71      	ldr	r2, [pc, #452]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d015      	beq.n	8003de6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fd f819 	bl	8000df0 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fd f815 	bl	8000df0 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e0c5      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd8:	4b65      	ldr	r3, [pc, #404]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ee      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x33a>
 8003de4:	e014      	b.n	8003e10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de6:	f7fd f803 	bl	8000df0 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fc ffff 	bl	8000df0 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e0af      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e04:	4b5a      	ldr	r3, [pc, #360]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ee      	bne.n	8003dee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d105      	bne.n	8003e22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b56      	ldr	r3, [pc, #344]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	4a55      	ldr	r2, [pc, #340]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 809b 	beq.w	8003f62 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e2c:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d05c      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d141      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e40:	4b4c      	ldr	r3, [pc, #304]	; (8003f74 <HAL_RCC_OscConfig+0x4ec>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e46:	f7fc ffd3 	bl	8000df0 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4e:	f7fc ffcf 	bl	8000df0 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e081      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e60:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f0      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	019b      	lsls	r3, r3, #6
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	3b01      	subs	r3, #1
 8003e86:	041b      	lsls	r3, r3, #16
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	4937      	ldr	r1, [pc, #220]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e96:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCC_OscConfig+0x4ec>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fc ffa8 	bl	8000df0 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fc ffa4 	bl	8000df0 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e056      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb6:	4b2e      	ldr	r3, [pc, #184]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x41c>
 8003ec2:	e04e      	b.n	8003f62 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCC_OscConfig+0x4ec>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fc ff91 	bl	8000df0 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fc ff8d 	bl	8000df0 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e03f      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee4:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x44a>
 8003ef0:	e037      	b.n	8003f62 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e032      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d028      	beq.n	8003f5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d121      	bne.n	8003f5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d11a      	bne.n	8003f5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f2e:	4013      	ands	r3, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d111      	bne.n	8003f5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	085b      	lsrs	r3, r3, #1
 8003f46:	3b01      	subs	r3, #1
 8003f48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d001      	beq.n	8003f62 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40007000 	.word	0x40007000
 8003f70:	40023800 	.word	0x40023800
 8003f74:	42470060 	.word	0x42470060

08003f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0cc      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d90c      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b63      	ldr	r3, [pc, #396]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0b8      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe4:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a52      	ldr	r2, [pc, #328]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b50      	ldr	r3, [pc, #320]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	494d      	ldr	r1, [pc, #308]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d044      	beq.n	8004098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d119      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d003      	beq.n	8004036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	2b03      	cmp	r3, #3
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e06f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004046:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e067      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b37      	ldr	r3, [pc, #220]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4934      	ldr	r1, [pc, #208]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fc fec2 	bl	8000df0 <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fc febe 	bl	8000df0 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e04f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d20c      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e032      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4916      	ldr	r1, [pc, #88]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	490e      	ldr	r1, [pc, #56]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040fe:	f000 f821 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8004102:	4602      	mov	r2, r0
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	490a      	ldr	r1, [pc, #40]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8004110:	5ccb      	ldrb	r3, [r1, r3]
 8004112:	fa22 f303 	lsr.w	r3, r2, r3
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc fe22 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00
 8004134:	40023800 	.word	0x40023800
 8004138:	0800b090 	.word	0x0800b090
 800413c:	20000000 	.word	0x20000000
 8004140:	20000004 	.word	0x20000004

08004144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	2300      	movs	r3, #0
 8004156:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800415c:	4b67      	ldr	r3, [pc, #412]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d00d      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x40>
 8004168:	2b08      	cmp	r3, #8
 800416a:	f200 80bd 	bhi.w	80042e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x34>
 8004172:	2b04      	cmp	r3, #4
 8004174:	d003      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0x3a>
 8004176:	e0b7      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b61      	ldr	r3, [pc, #388]	; (8004300 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800417a:	60bb      	str	r3, [r7, #8]
       break;
 800417c:	e0b7      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800417e:	4b61      	ldr	r3, [pc, #388]	; (8004304 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004180:	60bb      	str	r3, [r7, #8]
      break;
 8004182:	e0b4      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004184:	4b5d      	ldr	r3, [pc, #372]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800418c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800418e:	4b5b      	ldr	r3, [pc, #364]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d04d      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419a:	4b58      	ldr	r3, [pc, #352]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	099b      	lsrs	r3, r3, #6
 80041a0:	461a      	mov	r2, r3
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041aa:	f04f 0100 	mov.w	r1, #0
 80041ae:	ea02 0800 	and.w	r8, r2, r0
 80041b2:	ea03 0901 	and.w	r9, r3, r1
 80041b6:	4640      	mov	r0, r8
 80041b8:	4649      	mov	r1, r9
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	014b      	lsls	r3, r1, #5
 80041c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041c8:	0142      	lsls	r2, r0, #5
 80041ca:	4610      	mov	r0, r2
 80041cc:	4619      	mov	r1, r3
 80041ce:	ebb0 0008 	subs.w	r0, r0, r8
 80041d2:	eb61 0109 	sbc.w	r1, r1, r9
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	018b      	lsls	r3, r1, #6
 80041e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041e4:	0182      	lsls	r2, r0, #6
 80041e6:	1a12      	subs	r2, r2, r0
 80041e8:	eb63 0301 	sbc.w	r3, r3, r1
 80041ec:	f04f 0000 	mov.w	r0, #0
 80041f0:	f04f 0100 	mov.w	r1, #0
 80041f4:	00d9      	lsls	r1, r3, #3
 80041f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041fa:	00d0      	lsls	r0, r2, #3
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	eb12 0208 	adds.w	r2, r2, r8
 8004204:	eb43 0309 	adc.w	r3, r3, r9
 8004208:	f04f 0000 	mov.w	r0, #0
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	0259      	lsls	r1, r3, #9
 8004212:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004216:	0250      	lsls	r0, r2, #9
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4610      	mov	r0, r2
 800421e:	4619      	mov	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	461a      	mov	r2, r3
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	f7fb ffd2 	bl	80001d0 <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4613      	mov	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e04a      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004236:	4b31      	ldr	r3, [pc, #196]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	099b      	lsrs	r3, r3, #6
 800423c:	461a      	mov	r2, r3
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004246:	f04f 0100 	mov.w	r1, #0
 800424a:	ea02 0400 	and.w	r4, r2, r0
 800424e:	ea03 0501 	and.w	r5, r3, r1
 8004252:	4620      	mov	r0, r4
 8004254:	4629      	mov	r1, r5
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	014b      	lsls	r3, r1, #5
 8004260:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004264:	0142      	lsls	r2, r0, #5
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	1b00      	subs	r0, r0, r4
 800426c:	eb61 0105 	sbc.w	r1, r1, r5
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	018b      	lsls	r3, r1, #6
 800427a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800427e:	0182      	lsls	r2, r0, #6
 8004280:	1a12      	subs	r2, r2, r0
 8004282:	eb63 0301 	sbc.w	r3, r3, r1
 8004286:	f04f 0000 	mov.w	r0, #0
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	00d9      	lsls	r1, r3, #3
 8004290:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004294:	00d0      	lsls	r0, r2, #3
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	1912      	adds	r2, r2, r4
 800429c:	eb45 0303 	adc.w	r3, r5, r3
 80042a0:	f04f 0000 	mov.w	r0, #0
 80042a4:	f04f 0100 	mov.w	r1, #0
 80042a8:	0299      	lsls	r1, r3, #10
 80042aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042ae:	0290      	lsls	r0, r2, #10
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	f7fb ff86 	bl	80001d0 <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4613      	mov	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	3301      	adds	r3, #1
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	60bb      	str	r3, [r7, #8]
      break;
 80042e6:	e002      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042ea:	60bb      	str	r3, [r7, #8]
      break;
 80042ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ee:	68bb      	ldr	r3, [r7, #8]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042fa:	bf00      	nop
 80042fc:	40023800 	.word	0x40023800
 8004300:	00f42400 	.word	0x00f42400
 8004304:	007a1200 	.word	0x007a1200

08004308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800430c:	4b03      	ldr	r3, [pc, #12]	; (800431c <HAL_RCC_GetHCLKFreq+0x14>)
 800430e:	681b      	ldr	r3, [r3, #0]
}
 8004310:	4618      	mov	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000000 	.word	0x20000000

08004320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004324:	f7ff fff0 	bl	8004308 <HAL_RCC_GetHCLKFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	0a9b      	lsrs	r3, r3, #10
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	4903      	ldr	r1, [pc, #12]	; (8004344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40023800 	.word	0x40023800
 8004344:	0800b0a0 	.word	0x0800b0a0

08004348 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800436c:	2b00      	cmp	r3, #0
 800436e:	d035      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004370:	4b62      	ldr	r3, [pc, #392]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004376:	f7fc fd3b 	bl	8000df0 <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800437e:	f7fc fd37 	bl	8000df0 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e0b0      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004390:	4b5b      	ldr	r3, [pc, #364]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	019a      	lsls	r2, r3, #6
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	071b      	lsls	r3, r3, #28
 80043a8:	4955      	ldr	r1, [pc, #340]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043b0:	4b52      	ldr	r3, [pc, #328]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043b6:	f7fc fd1b 	bl	8000df0 <HAL_GetTick>
 80043ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043be:	f7fc fd17 	bl	8000df0 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e090      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d0:	4b4b      	ldr	r3, [pc, #300]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8083 	beq.w	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	4b44      	ldr	r3, [pc, #272]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a43      	ldr	r2, [pc, #268]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b41      	ldr	r3, [pc, #260]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004406:	4b3f      	ldr	r3, [pc, #252]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a3e      	ldr	r2, [pc, #248]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800440c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004410:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004412:	f7fc fced 	bl	8000df0 <HAL_GetTick>
 8004416:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004418:	e008      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800441a:	f7fc fce9 	bl	8000df0 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e062      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800442c:	4b35      	ldr	r3, [pc, #212]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004438:	4b31      	ldr	r3, [pc, #196]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004440:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d02f      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	429a      	cmp	r2, r3
 8004454:	d028      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004456:	4b2a      	ldr	r3, [pc, #168]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004460:	4b29      	ldr	r3, [pc, #164]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004462:	2201      	movs	r2, #1
 8004464:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004466:	4b28      	ldr	r3, [pc, #160]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800446c:	4a24      	ldr	r2, [pc, #144]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004472:	4b23      	ldr	r3, [pc, #140]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d114      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800447e:	f7fc fcb7 	bl	8000df0 <HAL_GetTick>
 8004482:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004484:	e00a      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004486:	f7fc fcb3 	bl	8000df0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e02a      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449c:	4b18      	ldr	r3, [pc, #96]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ee      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b4:	d10d      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ca:	490d      	ldr	r1, [pc, #52]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	608b      	str	r3, [r1, #8]
 80044d0:	e005      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044dc:	6093      	str	r3, [r2, #8]
 80044de:	4b08      	ldr	r3, [pc, #32]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ea:	4905      	ldr	r1, [pc, #20]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	42470068 	.word	0x42470068
 8004500:	40023800 	.word	0x40023800
 8004504:	40007000 	.word	0x40007000
 8004508:	42470e40 	.word	0x42470e40

0800450c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d13e      	bne.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800452a:	4b23      	ldr	r3, [pc, #140]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d12f      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004542:	617b      	str	r3, [r7, #20]
          break;
 8004544:	e02f      	b.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004552:	d108      	bne.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004554:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800455c:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	e007      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004566:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800456e:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457c:	099b      	lsrs	r3, r3, #6
 800457e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	fb02 f303 	mul.w	r3, r2, r3
 8004588:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800458a:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800458c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004590:	0f1b      	lsrs	r3, r3, #28
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]
          break;
 800459e:	e002      	b.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
          break;
 80045a4:	bf00      	nop
        }
      }
      break;
 80045a6:	bf00      	nop
    }
  }
  return frequency;
 80045a8:	697b      	ldr	r3, [r7, #20]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	00bb8000 	.word	0x00bb8000
 80045c0:	007a1200 	.word	0x007a1200
 80045c4:	00f42400 	.word	0x00f42400

080045c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07b      	b.n	80046d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ea:	d009      	beq.n	8004600 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
 80045f2:	e005      	b.n	8004600 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fa9a 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004636:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004684:	ea42 0103 	orr.w	r1, r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	f003 0104 	and.w	r1, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0210 	and.w	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046da:	b084      	sub	sp, #16
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	f107 001c 	add.w	r0, r7, #28
 80046e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d122      	bne.n	8004738 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800471a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f99f 	bl	8004a70 <USB_CoreReset>
 8004732:	4603      	mov	r3, r0
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e01a      	b.n	800476e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f993 	bl	8004a70 <USB_CoreReset>
 800474a:	4603      	mov	r3, r0
 800474c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800474e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	639a      	str	r2, [r3, #56]	; 0x38
 8004760:	e005      	b.n	800476e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	2b01      	cmp	r3, #1
 8004772:	d10b      	bne.n	800478c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f043 0206 	orr.w	r2, r3, #6
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004798:	b004      	add	sp, #16
 800479a:	4770      	bx	lr

0800479c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f043 0201 	orr.w	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d115      	bne.n	800482e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800480e:	2001      	movs	r0, #1
 8004810:	f7fc fafa 	bl	8000e08 <HAL_Delay>
      ms++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f919 	bl	8004a52 <USB_GetMode>
 8004820:	4603      	mov	r3, r0
 8004822:	2b01      	cmp	r3, #1
 8004824:	d01e      	beq.n	8004864 <USB_SetCurrentMode+0x84>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b31      	cmp	r3, #49	; 0x31
 800482a:	d9f0      	bls.n	800480e <USB_SetCurrentMode+0x2e>
 800482c:	e01a      	b.n	8004864 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d115      	bne.n	8004860 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004840:	2001      	movs	r0, #1
 8004842:	f7fc fae1 	bl	8000e08 <HAL_Delay>
      ms++;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3301      	adds	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f900 	bl	8004a52 <USB_GetMode>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <USB_SetCurrentMode+0x84>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b31      	cmp	r3, #49	; 0x31
 800485c:	d9f0      	bls.n	8004840 <USB_SetCurrentMode+0x60>
 800485e:	e001      	b.n	8004864 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e005      	b.n	8004870 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b32      	cmp	r3, #50	; 0x32
 8004868:	d101      	bne.n	800486e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	019b      	lsls	r3, r3, #6
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3301      	adds	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	4a08      	ldr	r2, [pc, #32]	; (80048bc <USB_FlushTxFifo+0x44>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e006      	b.n	80048b0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d0f1      	beq.n	8004892 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	00030d40 	.word	0x00030d40

080048c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2210      	movs	r2, #16
 80048d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3301      	adds	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	4a08      	ldr	r2, [pc, #32]	; (80048fc <USB_FlushRxFifo+0x3c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e006      	b.n	80048f0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d0f1      	beq.n	80048d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	00030d40 	.word	0x00030d40

08004900 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	; 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	4611      	mov	r1, r2
 800490c:	461a      	mov	r2, r3
 800490e:	460b      	mov	r3, r1
 8004910:	71fb      	strb	r3, [r7, #7]
 8004912:	4613      	mov	r3, r2
 8004914:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800491e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004922:	2b00      	cmp	r3, #0
 8004924:	d123      	bne.n	800496e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004926:	88bb      	ldrh	r3, [r7, #4]
 8004928:	3303      	adds	r3, #3
 800492a:	089b      	lsrs	r3, r3, #2
 800492c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	e018      	b.n	8004966 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	031a      	lsls	r2, r3, #12
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4413      	add	r3, r2
 800493c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004940:	461a      	mov	r2, r3
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	3301      	adds	r3, #1
 800494c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3301      	adds	r3, #1
 8004952:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	3301      	adds	r3, #1
 8004958:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3301      	adds	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	3301      	adds	r3, #1
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	429a      	cmp	r2, r3
 800496c:	d3e2      	bcc.n	8004934 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3724      	adds	r7, #36	; 0x24
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800497c:	b480      	push	{r7}
 800497e:	b08b      	sub	sp, #44	; 0x2c
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	b29b      	uxth	r3, r3
 8004998:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049a2:	2300      	movs	r3, #0
 80049a4:	623b      	str	r3, [r7, #32]
 80049a6:	e014      	b.n	80049d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	3301      	adds	r3, #1
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	3301      	adds	r3, #1
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	3301      	adds	r3, #1
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	3301      	adds	r3, #1
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	3301      	adds	r3, #1
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	6a3a      	ldr	r2, [r7, #32]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d3e6      	bcc.n	80049a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049da:	8bfb      	ldrh	r3, [r7, #30]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01e      	beq.n	8004a1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ea:	461a      	mov	r2, r3
 80049ec:	f107 0310 	add.w	r3, r7, #16
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	701a      	strb	r2, [r3, #0]
      i++;
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	3301      	adds	r3, #1
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a12:	8bfb      	ldrh	r3, [r7, #30]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a18:	8bfb      	ldrh	r3, [r7, #30]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ea      	bne.n	80049f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	372c      	adds	r7, #44	; 0x2c
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4013      	ands	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a44:	68fb      	ldr	r3, [r7, #12]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <USB_CoreReset+0x60>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e01a      	b.n	8004ac2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	daf3      	bge.n	8004a7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f043 0201 	orr.w	r2, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <USB_CoreReset+0x60>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e006      	b.n	8004ac2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d0f1      	beq.n	8004aa4 <USB_CoreReset+0x34>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	00030d40 	.word	0x00030d40

08004ad4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	f107 001c 	add.w	r0, r7, #28
 8004ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004af0:	461a      	mov	r2, r3
 8004af2:	2300      	movs	r3, #0
 8004af4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d018      	beq.n	8004b58 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d10a      	bne.n	8004b42 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	e014      	b.n	8004b6c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b50:	f023 0304 	bic.w	r3, r3, #4
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e009      	b.n	8004b6c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b66:	f023 0304 	bic.w	r3, r3, #4
 8004b6a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004b6c:	2110      	movs	r1, #16
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff fe82 	bl	8004878 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fea3 	bl	80048c0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e015      	b.n	8004bac <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b92:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d3e5      	bcc.n	8004b80 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bc0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <USB_HostInit+0x154>)
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a13      	ldr	r2, [pc, #76]	; (8004c2c <USB_HostInit+0x158>)
 8004be0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004be4:	e009      	b.n	8004bfa <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a10      	ldr	r2, [pc, #64]	; (8004c30 <USB_HostInit+0x15c>)
 8004bf0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a0f      	ldr	r2, [pc, #60]	; (8004c34 <USB_HostInit+0x160>)
 8004bf6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d105      	bne.n	8004c0c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f043 0210 	orr.w	r2, r3, #16
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699a      	ldr	r2, [r3, #24]
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <USB_HostInit+0x164>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c24:	b004      	add	sp, #16
 8004c26:	4770      	bx	lr
 8004c28:	01000200 	.word	0x01000200
 8004c2c:	00e00300 	.word	0x00e00300
 8004c30:	00600080 	.word	0x00600080
 8004c34:	004000e0 	.word	0x004000e0
 8004c38:	a3200008 	.word	0xa3200008

08004c3c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c5a:	f023 0303 	bic.w	r3, r3, #3
 8004c5e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	68f9      	ldr	r1, [r7, #12]
 8004c70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c74:	4313      	orrs	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d107      	bne.n	8004c8e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c84:	461a      	mov	r2, r3
 8004c86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c8a:	6053      	str	r3, [r2, #4]
 8004c8c:	e009      	b.n	8004ca2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d106      	bne.n	8004ca2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ca0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cd0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cde:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004ce0:	2064      	movs	r0, #100	; 0x64
 8004ce2:	f7fc f891 	bl	8000e08 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004cf4:	200a      	movs	r0, #10
 8004cf6:	f7fc f887 	bl	8000e08 <HAL_Delay>

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d28:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <USB_DriveVbus+0x44>
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d106      	bne.n	8004d48 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d46:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d52:	d109      	bne.n	8004d68 <USB_DriveVbus+0x64>
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d66:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	0c5b      	lsrs	r3, r3, #17
 8004d94:	f003 0303 	and.w	r3, r3, #3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	b29b      	uxth	r3, r3
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	70fb      	strb	r3, [r7, #3]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70bb      	strb	r3, [r7, #2]
 8004dde:	4613      	mov	r3, r2
 8004de0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df6:	461a      	mov	r2, r3
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dfc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004dfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d87e      	bhi.n	8004f04 <USB_HC_Init+0x13c>
 8004e06:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <USB_HC_Init+0x44>)
 8004e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004ec7 	.word	0x08004ec7
 8004e14:	08004e1d 	.word	0x08004e1d
 8004e18:	08004e89 	.word	0x08004e89
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004e2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004e30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da10      	bge.n	8004e5a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e56:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004e58:	e057      	b.n	8004f0a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d051      	beq.n	8004f0a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e84:	60d3      	str	r3, [r2, #12]
      break;
 8004e86:	e040      	b.n	8004f0a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	461a      	mov	r2, r3
 8004e96:	f240 639d 	movw	r3, #1693	; 0x69d
 8004e9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	da34      	bge.n	8004f0e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004ec4:	e023      	b.n	8004f0e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f240 2325 	movw	r3, #549	; 0x225
 8004ed8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004eda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	da17      	bge.n	8004f12 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004efc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f00:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f02:	e006      	b.n	8004f12 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	77fb      	strb	r3, [r7, #31]
      break;
 8004f08:	e004      	b.n	8004f14 <USB_HC_Init+0x14c>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <USB_HC_Init+0x14c>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <USB_HC_Init+0x14c>
      break;
 8004f12:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f1a:	699a      	ldr	r2, [r3, #24]
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	2101      	movs	r1, #1
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	6939      	ldr	r1, [r7, #16]
 8004f2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004f3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	da03      	bge.n	8004f4e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f4a:	61bb      	str	r3, [r7, #24]
 8004f4c:	e001      	b.n	8004f52 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff ff0f 	bl	8004d76 <USB_GetHostSpeed>
 8004f58:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004f5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d106      	bne.n	8004f70 <USB_HC_Init+0x1a8>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d003      	beq.n	8004f70 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	e001      	b.n	8004f74 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f74:	787b      	ldrb	r3, [r7, #1]
 8004f76:	059b      	lsls	r3, r3, #22
 8004f78:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f7c:	78bb      	ldrb	r3, [r7, #2]
 8004f7e:	02db      	lsls	r3, r3, #11
 8004f80:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f84:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f8a:	049b      	lsls	r3, r3, #18
 8004f8c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f90:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f92:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f98:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	0159      	lsls	r1, r3, #5
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	440b      	add	r3, r1
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004faa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fb0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004fb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d10f      	bne.n	8004fda <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fd8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004fda:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08c      	sub	sp, #48	; 0x30
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	785b      	ldrb	r3, [r3, #1]
 8004ffa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005000:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d02d      	beq.n	800506a <USB_HC_StartXfer+0x86>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	791b      	ldrb	r3, [r3, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d129      	bne.n	800506a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d117      	bne.n	800504c <USB_HC_StartXfer+0x68>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	79db      	ldrb	r3, [r3, #7]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <USB_HC_StartXfer+0x48>
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	79db      	ldrb	r3, [r3, #7]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d10f      	bne.n	800504c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	4413      	add	r3, r2
 8005034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	0151      	lsls	r1, r2, #5
 800503e:	6a3a      	ldr	r2, [r7, #32]
 8005040:	440a      	add	r2, r1
 8005042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <USB_HC_StartXfer+0x86>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	795b      	ldrb	r3, [r3, #5]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d107      	bne.n	800506a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	785b      	ldrb	r3, [r3, #1]
 800505e:	4619      	mov	r1, r3
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fa2f 	bl	80054c4 <USB_DoPing>
      return HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	e0f8      	b.n	800525c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d018      	beq.n	80050a4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	8912      	ldrh	r2, [r2, #8]
 800507a:	4413      	add	r3, r2
 800507c:	3b01      	subs	r3, #1
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	8912      	ldrh	r2, [r2, #8]
 8005082:	fbb3 f3f2 	udiv	r3, r3, r2
 8005086:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005088:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800508a:	8b7b      	ldrh	r3, [r7, #26]
 800508c:	429a      	cmp	r2, r3
 800508e:	d90b      	bls.n	80050a8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005090:	8b7b      	ldrh	r3, [r7, #26]
 8005092:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	8912      	ldrh	r2, [r2, #8]
 800509a:	fb02 f203 	mul.w	r2, r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	611a      	str	r2, [r3, #16]
 80050a2:	e001      	b.n	80050a8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80050a4:	2301      	movs	r3, #1
 80050a6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	78db      	ldrb	r3, [r3, #3]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	8912      	ldrh	r2, [r2, #8]
 80050b6:	fb02 f203 	mul.w	r2, r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	611a      	str	r2, [r3, #16]
 80050be:	e003      	b.n	80050c8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	695a      	ldr	r2, [r3, #20]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050d2:	04d9      	lsls	r1, r3, #19
 80050d4:	4b63      	ldr	r3, [pc, #396]	; (8005264 <USB_HC_StartXfer+0x280>)
 80050d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	7a9b      	ldrb	r3, [r3, #10]
 80050de:	075b      	lsls	r3, r3, #29
 80050e0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050e4:	69f9      	ldr	r1, [r7, #28]
 80050e6:	0148      	lsls	r0, r1, #5
 80050e8:	6a39      	ldr	r1, [r7, #32]
 80050ea:	4401      	add	r1, r0
 80050ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	68d9      	ldr	r1, [r3, #12]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	4413      	add	r3, r2
 8005106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510a:	460a      	mov	r2, r1
 800510c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf0c      	ite	eq
 800511e:	2301      	moveq	r3, #1
 8005120:	2300      	movne	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	6a3a      	ldr	r2, [r7, #32]
 800513a:	440a      	add	r2, r1
 800513c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005140:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005144:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	4413      	add	r3, r2
 800514e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	7e7b      	ldrb	r3, [r7, #25]
 8005156:	075b      	lsls	r3, r3, #29
 8005158:	69f9      	ldr	r1, [r7, #28]
 800515a:	0148      	lsls	r0, r1, #5
 800515c:	6a39      	ldr	r1, [r7, #32]
 800515e:	4401      	add	r1, r0
 8005160:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005164:	4313      	orrs	r3, r2
 8005166:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	4413      	add	r3, r2
 8005170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800517e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	78db      	ldrb	r3, [r3, #3]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d004      	beq.n	8005192 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	e003      	b.n	800519a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005198:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051a0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ae:	461a      	mov	r2, r3
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e04e      	b.n	800525c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	78db      	ldrb	r3, [r3, #3]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d149      	bne.n	800525a <USB_HC_StartXfer+0x276>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d045      	beq.n	800525a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	79db      	ldrb	r3, [r3, #7]
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d830      	bhi.n	8005238 <USB_HC_StartXfer+0x254>
 80051d6:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <USB_HC_StartXfer+0x1f8>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	08005211 	.word	0x08005211
 80051e4:	080051ed 	.word	0x080051ed
 80051e8:	08005211 	.word	0x08005211
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	3303      	adds	r3, #3
 80051f2:	089b      	lsrs	r3, r3, #2
 80051f4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80051f6:	8afa      	ldrh	r2, [r7, #22]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	429a      	cmp	r2, r3
 8005200:	d91c      	bls.n	800523c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	619a      	str	r2, [r3, #24]
        }
        break;
 800520e:	e015      	b.n	800523c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	3303      	adds	r3, #3
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800521a:	8afa      	ldrh	r2, [r7, #22]
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	b29b      	uxth	r3, r3
 8005226:	429a      	cmp	r2, r3
 8005228:	d90a      	bls.n	8005240 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	619a      	str	r2, [r3, #24]
        }
        break;
 8005236:	e003      	b.n	8005240 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005238:	bf00      	nop
 800523a:	e002      	b.n	8005242 <USB_HC_StartXfer+0x25e>
        break;
 800523c:	bf00      	nop
 800523e:	e000      	b.n	8005242 <USB_HC_StartXfer+0x25e>
        break;
 8005240:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	68d9      	ldr	r1, [r3, #12]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	785a      	ldrb	r2, [r3, #1]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	b29b      	uxth	r3, r3
 8005250:	2000      	movs	r0, #0
 8005252:	9000      	str	r0, [sp, #0]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff fb53 	bl	8004900 <USB_WritePacket>
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3728      	adds	r7, #40	; 0x28
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	1ff80000 	.word	0x1ff80000

08005268 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	b29b      	uxth	r3, r3
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800528a:	b480      	push	{r7}
 800528c:	b089      	sub	sp, #36	; 0x24
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	460b      	mov	r3, r1
 8005294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	0c9b      	lsrs	r3, r3, #18
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	0fdb      	lsrs	r3, r3, #31
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d104      	bne.n	80052e4 <USB_HC_Halt+0x5a>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e0e8      	b.n	80054b6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <USB_HC_Halt+0x66>
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d173      	bne.n	80053d8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	440a      	add	r2, r1
 8005306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800530a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800530e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	f040 80cb 	bne.w	80054b4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d143      	bne.n	80053b2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	4413      	add	r3, r2
 8005332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	440a      	add	r2, r1
 8005340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005348:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	4413      	add	r3, r2
 8005352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	440a      	add	r2, r1
 8005360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005368:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	440a      	add	r2, r1
 8005380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005388:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	3301      	adds	r3, #1
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005396:	d81d      	bhi.n	80053d4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ae:	d0ec      	beq.n	800538a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053b0:	e080      	b.n	80054b4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053d0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053d2:	e06f      	b.n	80054b4 <USB_HC_Halt+0x22a>
            break;
 80053d4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053d6:	e06d      	b.n	80054b4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053f6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d143      	bne.n	8005490 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	4413      	add	r3, r2
 8005410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	440a      	add	r2, r1
 800541e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005422:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005426:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	4413      	add	r3, r2
 8005430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	440a      	add	r2, r1
 800543e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005446:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	4413      	add	r3, r2
 8005450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	440a      	add	r2, r1
 800545e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005462:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005466:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	3301      	adds	r3, #1
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005474:	d81d      	bhi.n	80054b2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	4413      	add	r3, r2
 800547e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800548c:	d0ec      	beq.n	8005468 <USB_HC_Halt+0x1de>
 800548e:	e011      	b.n	80054b4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	4413      	add	r3, r2
 8005498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e000      	b.n	80054b4 <USB_HC_Halt+0x22a>
          break;
 80054b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3724      	adds	r7, #36	; 0x24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
	...

080054c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80054d8:	2301      	movs	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	04da      	lsls	r2, r3, #19
 80054e0:	4b15      	ldr	r3, [pc, #84]	; (8005538 <USB_DoPing+0x74>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	0151      	lsls	r1, r2, #5
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	440a      	add	r2, r1
 80054ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800550c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005514:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005522:	461a      	mov	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	1ff80000 	.word	0x1ff80000

0800553c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff f936 	bl	80047be <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005552:	2110      	movs	r1, #16
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff f98f 	bl	8004878 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff f9b0 	bl	80048c0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005560:	2300      	movs	r3, #0
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	e01f      	b.n	80055a6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800557c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005584:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800558c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559a:	461a      	mov	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	3301      	adds	r3, #1
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b0f      	cmp	r3, #15
 80055aa:	d9dc      	bls.n	8005566 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	e034      	b.n	800561c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055d8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e6:	461a      	mov	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	3301      	adds	r3, #1
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055f8:	d80c      	bhi.n	8005614 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800560c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005610:	d0ec      	beq.n	80055ec <USB_StopHost+0xb0>
 8005612:	e000      	b.n	8005616 <USB_StopHost+0xda>
        break;
 8005614:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3301      	adds	r3, #1
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b0f      	cmp	r3, #15
 8005620:	d9c7      	bls.n	80055b2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005628:	461a      	mov	r2, r3
 800562a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800562e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005636:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff f8af 	bl	800479c <USB_EnableGlobalInt>

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b089      	sub	sp, #36	; 0x24
 800564c:	af04      	add	r7, sp, #16
 800564e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005650:	2301      	movs	r3, #1
 8005652:	2202      	movs	r2, #2
 8005654:	2102      	movs	r1, #2
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fcb2 	bl	8005fc0 <USBH_FindInterface>
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2bff      	cmp	r3, #255	; 0xff
 8005664:	d002      	beq.n	800566c <USBH_CDC_InterfaceInit+0x24>
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d901      	bls.n	8005670 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800566c:	2302      	movs	r3, #2
 800566e:	e13d      	b.n	80058ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fc87 	bl	8005f88 <USBH_SelectInterface>
 800567a:	4603      	mov	r3, r0
 800567c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800567e:	7bbb      	ldrb	r3, [r7, #14]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005684:	2302      	movs	r3, #2
 8005686:	e131      	b.n	80058ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800568e:	2050      	movs	r0, #80	; 0x50
 8005690:	f005 fbc0 	bl	800ae14 <malloc>
 8005694:	4603      	mov	r3, r0
 8005696:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80056a8:	2302      	movs	r3, #2
 80056aa:	e11f      	b.n	80058ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80056ac:	2250      	movs	r2, #80	; 0x50
 80056ae:	2100      	movs	r1, #0
 80056b0:	68b8      	ldr	r0, [r7, #8]
 80056b2:	f005 fbcd 	bl	800ae50 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	211a      	movs	r1, #26
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	4413      	add	r3, r2
 80056c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	b25b      	sxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	da15      	bge.n	80056fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	211a      	movs	r1, #26
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	211a      	movs	r1, #26
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056f4:	881a      	ldrh	r2, [r3, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	785b      	ldrb	r3, [r3, #1]
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f002 f88c 	bl	800781e <USBH_AllocPipe>
 8005706:	4603      	mov	r3, r0
 8005708:	461a      	mov	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	7819      	ldrb	r1, [r3, #0]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	7858      	ldrb	r0, [r3, #1]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	8952      	ldrh	r2, [r2, #10]
 8005726:	9202      	str	r2, [sp, #8]
 8005728:	2203      	movs	r2, #3
 800572a:	9201      	str	r2, [sp, #4]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	4623      	mov	r3, r4
 8005730:	4602      	mov	r2, r0
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f002 f844 	bl	80077c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2200      	movs	r2, #0
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f005 fab9 	bl	800acb8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005746:	2300      	movs	r3, #0
 8005748:	2200      	movs	r2, #0
 800574a:	210a      	movs	r1, #10
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fc37 	bl	8005fc0 <USBH_FindInterface>
 8005752:	4603      	mov	r3, r0
 8005754:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2bff      	cmp	r3, #255	; 0xff
 800575a:	d002      	beq.n	8005762 <USBH_CDC_InterfaceInit+0x11a>
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d901      	bls.n	8005766 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005762:	2302      	movs	r3, #2
 8005764:	e0c2      	b.n	80058ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	211a      	movs	r1, #26
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	b25b      	sxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	da16      	bge.n	80057ac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	211a      	movs	r1, #26
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	4413      	add	r3, r2
 800578a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800578e:	781a      	ldrb	r2, [r3, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	211a      	movs	r1, #26
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	4413      	add	r3, r2
 80057a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057a4:	881a      	ldrh	r2, [r3, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	835a      	strh	r2, [r3, #26]
 80057aa:	e015      	b.n	80057d8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	211a      	movs	r1, #26
 80057b2:	fb01 f303 	mul.w	r3, r1, r3
 80057b6:	4413      	add	r3, r2
 80057b8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057bc:	781a      	ldrb	r2, [r3, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	211a      	movs	r1, #26
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057d2:	881a      	ldrh	r2, [r3, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	211a      	movs	r1, #26
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	4413      	add	r3, r2
 80057e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b25b      	sxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	da16      	bge.n	800581e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	211a      	movs	r1, #26
 80057f6:	fb01 f303 	mul.w	r3, r1, r3
 80057fa:	4413      	add	r3, r2
 80057fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005800:	781a      	ldrb	r2, [r3, #0]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	211a      	movs	r1, #26
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	4413      	add	r3, r2
 8005812:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005816:	881a      	ldrh	r2, [r3, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	835a      	strh	r2, [r3, #26]
 800581c:	e015      	b.n	800584a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	211a      	movs	r1, #26
 8005824:	fb01 f303 	mul.w	r3, r1, r3
 8005828:	4413      	add	r3, r2
 800582a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800582e:	781a      	ldrb	r2, [r3, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	211a      	movs	r1, #26
 800583a:	fb01 f303 	mul.w	r3, r1, r3
 800583e:	4413      	add	r3, r2
 8005840:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005844:	881a      	ldrh	r2, [r3, #0]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	7b9b      	ldrb	r3, [r3, #14]
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 ffe4 	bl	800781e <USBH_AllocPipe>
 8005856:	4603      	mov	r3, r0
 8005858:	461a      	mov	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	7bdb      	ldrb	r3, [r3, #15]
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 ffda 	bl	800781e <USBH_AllocPipe>
 800586a:	4603      	mov	r3, r0
 800586c:	461a      	mov	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	7b59      	ldrb	r1, [r3, #13]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	7b98      	ldrb	r0, [r3, #14]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	8b12      	ldrh	r2, [r2, #24]
 800588a:	9202      	str	r2, [sp, #8]
 800588c:	2202      	movs	r2, #2
 800588e:	9201      	str	r2, [sp, #4]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	4623      	mov	r3, r4
 8005894:	4602      	mov	r2, r0
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 ff92 	bl	80077c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	7b19      	ldrb	r1, [r3, #12]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	7bd8      	ldrb	r0, [r3, #15]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	8b52      	ldrh	r2, [r2, #26]
 80058b4:	9202      	str	r2, [sp, #8]
 80058b6:	2202      	movs	r2, #2
 80058b8:	9201      	str	r2, [sp, #4]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	4623      	mov	r3, r4
 80058be:	4602      	mov	r2, r0
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 ff7d 	bl	80077c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	7b5b      	ldrb	r3, [r3, #13]
 80058d2:	2200      	movs	r2, #0
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f005 f9ee 	bl	800acb8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	7b1b      	ldrb	r3, [r3, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f005 f9e7 	bl	800acb8 <USBH_LL_SetToggle>

  return USBH_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd90      	pop	{r4, r7, pc}

080058f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00e      	beq.n	800592c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	4619      	mov	r1, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 ff72 	bl	80077fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 ff9d 	bl	8007860 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	7b1b      	ldrb	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	7b1b      	ldrb	r3, [r3, #12]
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f001 ff5f 	bl	80077fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	7b1b      	ldrb	r3, [r3, #12]
 8005944:	4619      	mov	r1, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 ff8a 	bl	8007860 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	7b5b      	ldrb	r3, [r3, #13]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00e      	beq.n	8005978 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	7b5b      	ldrb	r3, [r3, #13]
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 ff4c 	bl	80077fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	7b5b      	ldrb	r3, [r3, #13]
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 ff77 	bl	8007860 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00b      	beq.n	800599c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	4618      	mov	r0, r3
 800598e:	f005 fa49 	bl	800ae24 <free>
    phost->pActiveClass->pData = 0U;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005998:	2200      	movs	r2, #0
 800599a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3340      	adds	r3, #64	; 0x40
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8b1 	bl	8005b26 <GetLineCoding>
 80059c4:	4603      	mov	r3, r0
 80059c6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80059c8:	7afb      	ldrb	r3, [r7, #11]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d105      	bne.n	80059da <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80059d4:	2102      	movs	r1, #2
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80059da:	7afb      	ldrb	r3, [r7, #11]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d877      	bhi.n	8005af8 <USBH_CDC_Process+0x114>
 8005a08:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <USBH_CDC_Process+0x2c>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a25 	.word	0x08005a25
 8005a14:	08005a2b 	.word	0x08005a2b
 8005a18:	08005a5b 	.word	0x08005a5b
 8005a1c:	08005acf 	.word	0x08005acf
 8005a20:	08005add 	.word	0x08005add
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]
      break;
 8005a28:	e06d      	b.n	8005b06 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f897 	bl	8005b64 <SetLineCoding>
 8005a36:	4603      	mov	r3, r0
 8005a38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005a48:	e058      	b.n	8005afc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d055      	beq.n	8005afc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2204      	movs	r2, #4
 8005a54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005a58:	e050      	b.n	8005afc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	3340      	adds	r3, #64	; 0x40
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f860 	bl	8005b26 <GetLineCoding>
 8005a66:	4603      	mov	r3, r0
 8005a68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a6a:	7bbb      	ldrb	r3, [r7, #14]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d126      	bne.n	8005abe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a82:	791b      	ldrb	r3, [r3, #4]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d13b      	bne.n	8005b00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a92:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d133      	bne.n	8005b00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d12b      	bne.n	8005b00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d124      	bne.n	8005b00 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f982 	bl	8005dc0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005abc:	e020      	b.n	8005b00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d01d      	beq.n	8005b00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005acc:	e018      	b.n	8005b00 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f867 	bl	8005ba2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f8f6 	bl	8005cc6 <CDC_ProcessReception>
      break;
 8005ada:	e014      	b.n	8005b06 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005adc:	2100      	movs	r1, #0
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f001 f94d 	bl	8006d7e <USBH_ClrFeature>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005af6:	e005      	b.n	8005b04 <USBH_CDC_Process+0x120>

    default:
      break;
 8005af8:	bf00      	nop
 8005afa:	e004      	b.n	8005b06 <USBH_CDC_Process+0x122>
      break;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <USBH_CDC_Process+0x122>
      break;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <USBH_CDC_Process+0x122>
      break;
 8005b04:	bf00      	nop

  }

  return status;
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	22a1      	movs	r2, #161	; 0xa1
 8005b34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2221      	movs	r2, #33	; 0x21
 8005b3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2207      	movs	r2, #7
 8005b4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2207      	movs	r2, #7
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f001 faf2 	bl	800713e <USBH_CtlReq>
 8005b5a:	4603      	mov	r3, r0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2221      	movs	r2, #33	; 0x21
 8005b72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2207      	movs	r2, #7
 8005b8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2207      	movs	r2, #7
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 fad3 	bl	800713e <USBH_CtlReq>
 8005b98:	4603      	mov	r3, r0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b086      	sub	sp, #24
 8005ba6:	af02      	add	r7, sp, #8
 8005ba8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d002      	beq.n	8005bc8 <CDC_ProcessTransmission+0x26>
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d023      	beq.n	8005c0e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005bc6:	e07a      	b.n	8005cbe <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	8b12      	ldrh	r2, [r2, #24]
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d90b      	bls.n	8005bec <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	69d9      	ldr	r1, [r3, #28]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8b1a      	ldrh	r2, [r3, #24]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	7b5b      	ldrb	r3, [r3, #13]
 8005be0:	2001      	movs	r0, #1
 8005be2:	9000      	str	r0, [sp, #0]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 fda8 	bl	800773a <USBH_BulkSendData>
 8005bea:	e00b      	b.n	8005c04 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	7b5b      	ldrb	r3, [r3, #13]
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	9000      	str	r0, [sp, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 fd9b 	bl	800773a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c0c:	e057      	b.n	8005cbe <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	7b5b      	ldrb	r3, [r3, #13]
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f005 f825 	bl	800ac64 <USBH_LL_GetURBState>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d136      	bne.n	8005c92 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	8b12      	ldrh	r2, [r2, #24]
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d90e      	bls.n	8005c4e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	8b12      	ldrh	r2, [r2, #24]
 8005c38:	1a9a      	subs	r2, r3, r2
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	8b12      	ldrh	r2, [r2, #24]
 8005c46:	441a      	add	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	61da      	str	r2, [r3, #28]
 8005c4c:	e002      	b.n	8005c54 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8005c64:	e006      	b.n	8005c74 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f892 	bl	8005d98 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2204      	movs	r2, #4
 8005c78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f001 ffc8 	bl	8007c20 <osMessageQueuePut>
      break;
 8005c90:	e014      	b.n	8005cbc <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8005c92:	7afb      	ldrb	r3, [r7, #11]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d111      	bne.n	8005cbc <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2204      	movs	r2, #4
 8005ca4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f001 ffb2 	bl	8007c20 <osMessageQueuePut>
      break;
 8005cbc:	bf00      	nop
  }
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b086      	sub	sp, #24
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d002      	beq.n	8005cec <CDC_ProcessReception+0x26>
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d00e      	beq.n	8005d08 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005cea:	e051      	b.n	8005d90 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	6a19      	ldr	r1, [r3, #32]
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	8b5a      	ldrh	r2, [r3, #26]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	7b1b      	ldrb	r3, [r3, #12]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f001 fd43 	bl	8007784 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2204      	movs	r2, #4
 8005d02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d06:	e043      	b.n	8005d90 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	7b1b      	ldrb	r3, [r3, #12]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f004 ffa8 	bl	800ac64 <USBH_LL_GetURBState>
 8005d14:	4603      	mov	r3, r0
 8005d16:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005d18:	7cfb      	ldrb	r3, [r7, #19]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d137      	bne.n	8005d8e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	7b1b      	ldrb	r3, [r3, #12]
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f004 ff0b 	bl	800ab40 <USBH_LL_GetLastXferSize>
 8005d2a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d016      	beq.n	8005d64 <CDC_ProcessReception+0x9e>
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	8b5b      	ldrh	r3, [r3, #26]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d910      	bls.n	8005d64 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1ad2      	subs	r2, r2, r3
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	6a1a      	ldr	r2, [r3, #32]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	441a      	add	r2, r3
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8005d62:	e006      	b.n	8005d72 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f81d 	bl	8005dac <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2204      	movs	r2, #4
 8005d76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8005d86:	2300      	movs	r3, #0
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f001 ff49 	bl	8007c20 <osMessageQueuePut>
      break;
 8005d8e:	bf00      	nop
  }
}
 8005d90:	bf00      	nop
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005de8:	2302      	movs	r3, #2
 8005dea:	e044      	b.n	8005e76 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	79fa      	ldrb	r2, [r7, #7]
 8005df0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f841 	bl	8005e8c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2104      	movs	r1, #4
 8005e3c:	2010      	movs	r0, #16
 8005e3e:	f001 fe7c 	bl	8007b3a <osMessageQueueNew>
 8005e42:	4602      	mov	r2, r0
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <USBH_Init+0xac>)
 8005e4c:	4a0d      	ldr	r2, [pc, #52]	; (8005e84 <USBH_Init+0xb0>)
 8005e4e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <USBH_Init+0xac>)
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8005e56:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <USBH_Init+0xac>)
 8005e58:	2218      	movs	r2, #24
 8005e5a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8005e5c:	4a08      	ldr	r2, [pc, #32]	; (8005e80 <USBH_Init+0xac>)
 8005e5e:	68f9      	ldr	r1, [r7, #12]
 8005e60:	4809      	ldr	r0, [pc, #36]	; (8005e88 <USBH_Init+0xb4>)
 8005e62:	f001 fdbd 	bl	80079e0 <osThreadNew>
 8005e66:	4602      	mov	r2, r0
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f004 fdb2 	bl	800a9d8 <USBH_LL_Init>

  return USBH_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20004ad0 	.word	0x20004ad0
 8005e84:	0800b024 	.word	0x0800b024
 8005e88:	08006af5 	.word	0x08006af5

08005e8c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	e009      	b.n	8005eb2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	33e0      	adds	r3, #224	; 0xe0
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b0e      	cmp	r3, #14
 8005eb6:	d9f2      	bls.n	8005e9e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e009      	b.n	8005ed2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005ec8:	2200      	movs	r2, #0
 8005eca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed8:	d3f1      	bcc.n	8005ebe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2240      	movs	r2, #64	; 0x40
 8005efe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d016      	beq.n	8005f76 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10e      	bne.n	8005f70 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f58:	1c59      	adds	r1, r3, #1
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	33de      	adds	r3, #222	; 0xde
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]
 8005f6e:	e004      	b.n	8005f7a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f70:	2302      	movs	r3, #2
 8005f72:	73fb      	strb	r3, [r7, #15]
 8005f74:	e001      	b.n	8005f7a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f76:	2302      	movs	r3, #2
 8005f78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d204      	bcs.n	8005fae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005fac:	e001      	b.n	8005fb2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	4608      	mov	r0, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	70fb      	strb	r3, [r7, #3]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	70bb      	strb	r3, [r7, #2]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005fe8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005fea:	e025      	b.n	8006038 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	221a      	movs	r2, #26
 8005ff0:	fb02 f303 	mul.w	r3, r2, r3
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3302      	adds	r3, #2
 8005ffc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	795b      	ldrb	r3, [r3, #5]
 8006002:	78fa      	ldrb	r2, [r7, #3]
 8006004:	429a      	cmp	r2, r3
 8006006:	d002      	beq.n	800600e <USBH_FindInterface+0x4e>
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	2bff      	cmp	r3, #255	; 0xff
 800600c:	d111      	bne.n	8006032 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006012:	78ba      	ldrb	r2, [r7, #2]
 8006014:	429a      	cmp	r2, r3
 8006016:	d002      	beq.n	800601e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006018:	78bb      	ldrb	r3, [r7, #2]
 800601a:	2bff      	cmp	r3, #255	; 0xff
 800601c:	d109      	bne.n	8006032 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006022:	787a      	ldrb	r2, [r7, #1]
 8006024:	429a      	cmp	r2, r3
 8006026:	d002      	beq.n	800602e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006028:	787b      	ldrb	r3, [r7, #1]
 800602a:	2bff      	cmp	r3, #255	; 0xff
 800602c:	d101      	bne.n	8006032 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	e006      	b.n	8006040 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	3301      	adds	r3, #1
 8006036:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006038:	7dfb      	ldrb	r3, [r7, #23]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d9d6      	bls.n	8005fec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800603e:	23ff      	movs	r3, #255	; 0xff
}
 8006040:	4618      	mov	r0, r3
 8006042:	371c      	adds	r7, #28
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f004 fcfb 	bl	800aa50 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800605a:	2101      	movs	r1, #1
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f004 fe14 	bl	800ac8a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af04      	add	r7, sp, #16
 8006072:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006074:	2302      	movs	r3, #2
 8006076:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d102      	bne.n	800608e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2203      	movs	r2, #3
 800608c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b0b      	cmp	r3, #11
 8006096:	f200 823c 	bhi.w	8006512 <USBH_Process+0x4a6>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <USBH_Process+0x34>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060d1 	.word	0x080060d1
 80060a4:	0800611f 	.word	0x0800611f
 80060a8:	080061a3 	.word	0x080061a3
 80060ac:	08006491 	.word	0x08006491
 80060b0:	08006513 	.word	0x08006513
 80060b4:	08006263 	.word	0x08006263
 80060b8:	0800641b 	.word	0x0800641b
 80060bc:	080062b5 	.word	0x080062b5
 80060c0:	080062f1 	.word	0x080062f1
 80060c4:	0800632b 	.word	0x0800632b
 80060c8:	08006373 	.word	0x08006373
 80060cc:	08006479 	.word	0x08006479
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 821c 	beq.w	8006516 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80060e4:	20c8      	movs	r0, #200	; 0xc8
 80060e6:	f004 fe17 	bl	800ad18 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f004 fd0d 	bl	800ab0a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006114:	2300      	movs	r3, #0
 8006116:	2200      	movs	r2, #0
 8006118:	f001 fd82 	bl	8007c20 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800611c:	e1fb      	b.n	8006516 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006124:	2b01      	cmp	r3, #1
 8006126:	d107      	bne.n	8006138 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e025      	b.n	8006184 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800613e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006142:	d914      	bls.n	800616e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800614a:	3301      	adds	r3, #1
 800614c:	b2da      	uxtb	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800615a:	2b03      	cmp	r3, #3
 800615c:	d903      	bls.n	8006166 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	220d      	movs	r2, #13
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	e00e      	b.n	8006184 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	e00a      	b.n	8006184 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006174:	f103 020a 	add.w	r2, r3, #10
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800617e:	200a      	movs	r0, #10
 8006180:	f004 fdca 	bl	800ad18 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006198:	2300      	movs	r3, #0
 800619a:	2200      	movs	r2, #0
 800619c:	f001 fd40 	bl	8007c20 <osMessageQueuePut>
#endif
#endif
      break;
 80061a0:	e1c0      	b.n	8006524 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061b2:	2104      	movs	r1, #4
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80061b8:	2064      	movs	r0, #100	; 0x64
 80061ba:	f004 fdad 	bl	800ad18 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f004 fc7c 	bl	800aabc <USBH_LL_GetSpeed>
 80061c4:	4603      	mov	r3, r0
 80061c6:	461a      	mov	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2205      	movs	r2, #5
 80061d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80061d4:	2100      	movs	r1, #0
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f001 fb21 	bl	800781e <USBH_AllocPipe>
 80061dc:	4603      	mov	r3, r0
 80061de:	461a      	mov	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80061e4:	2180      	movs	r1, #128	; 0x80
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 fb19 	bl	800781e <USBH_AllocPipe>
 80061ec:	4603      	mov	r3, r0
 80061ee:	461a      	mov	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	7919      	ldrb	r1, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006208:	b292      	uxth	r2, r2
 800620a:	9202      	str	r2, [sp, #8]
 800620c:	2200      	movs	r2, #0
 800620e:	9201      	str	r2, [sp, #4]
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	4603      	mov	r3, r0
 8006214:	2280      	movs	r2, #128	; 0x80
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 fad2 	bl	80077c0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7959      	ldrb	r1, [r3, #5]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006230:	b292      	uxth	r2, r2
 8006232:	9202      	str	r2, [sp, #8]
 8006234:	2200      	movs	r2, #0
 8006236:	9201      	str	r2, [sp, #4]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	4603      	mov	r3, r0
 800623c:	2200      	movs	r2, #0
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fabe 	bl	80077c0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006258:	2300      	movs	r3, #0
 800625a:	2200      	movs	r2, #0
 800625c:	f001 fce0 	bl	8007c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006260:	e160      	b.n	8006524 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f964 	bl	8006530 <USBH_HandleEnum>
 8006268:	4603      	mov	r3, r0
 800626a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	f040 8152 	bne.w	800651a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006284:	2b01      	cmp	r3, #1
 8006286:	d103      	bne.n	8006290 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2208      	movs	r2, #8
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	e002      	b.n	8006296 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2207      	movs	r2, #7
 8006294:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2205      	movs	r2, #5
 800629a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80062aa:	2300      	movs	r3, #0
 80062ac:	2200      	movs	r2, #0
 80062ae:	f001 fcb7 	bl	8007c20 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80062b2:	e132      	b.n	800651a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 812f 	beq.w	800651e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062c6:	2101      	movs	r1, #1
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2208      	movs	r2, #8
 80062d0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2205      	movs	r2, #5
 80062d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80062e6:	2300      	movs	r3, #0
 80062e8:	2200      	movs	r2, #0
 80062ea:	f001 fc99 	bl	8007c20 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80062ee:	e116      	b.n	800651e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fcf8 	bl	8006cf0 <USBH_SetCfg>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d102      	bne.n	800630c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2209      	movs	r2, #9
 800630a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006320:	2300      	movs	r3, #0
 8006322:	2200      	movs	r2, #0
 8006324:	f001 fc7c 	bl	8007c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006328:	e0fc      	b.n	8006524 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006338:	2101      	movs	r1, #1
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fcfb 	bl	8006d36 <USBH_SetFeature>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	220a      	movs	r2, #10
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	e002      	b.n	8006354 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	220a      	movs	r2, #10
 8006352:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006368:	2300      	movs	r3, #0
 800636a:	2200      	movs	r2, #0
 800636c:	f001 fc58 	bl	8007c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006370:	e0d8      	b.n	8006524 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006378:	2b00      	cmp	r3, #0
 800637a:	d03f      	beq.n	80063fc <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006384:	2300      	movs	r3, #0
 8006386:	73fb      	strb	r3, [r7, #15]
 8006388:	e016      	b.n	80063b8 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800638a:	7bfa      	ldrb	r2, [r7, #15]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	32de      	adds	r2, #222	; 0xde
 8006390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006394:	791a      	ldrb	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800639c:	429a      	cmp	r2, r3
 800639e:	d108      	bne.n	80063b2 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80063a0:	7bfa      	ldrb	r2, [r7, #15]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	32de      	adds	r2, #222	; 0xde
 80063a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80063b0:	e005      	b.n	80063be <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	3301      	adds	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0e5      	beq.n	800638a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d016      	beq.n	80063f6 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2206      	movs	r2, #6
 80063de:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063e6:	2103      	movs	r1, #3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
 80063ec:	e006      	b.n	80063fc <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	220d      	movs	r2, #13
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	e002      	b.n	80063fc <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	220d      	movs	r2, #13
 80063fa:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2205      	movs	r2, #5
 8006400:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006410:	2300      	movs	r3, #0
 8006412:	2200      	movs	r2, #0
 8006414:	f001 fc04 	bl	8007c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006418:	e084      	b.n	8006524 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006420:	2b00      	cmp	r3, #0
 8006422:	d017      	beq.n	8006454 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	4798      	blx	r3
 8006430:	4603      	mov	r3, r0
 8006432:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d103      	bne.n	8006444 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	220b      	movs	r2, #11
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	e00a      	b.n	800645a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d106      	bne.n	800645a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	220d      	movs	r2, #13
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	e002      	b.n	800645a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	220d      	movs	r2, #13
 8006458:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2205      	movs	r2, #5
 800645e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800646e:	2300      	movs	r3, #0
 8006470:	2200      	movs	r2, #0
 8006472:	f001 fbd5 	bl	8007c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006476:	e055      	b.n	8006524 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d04f      	beq.n	8006522 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4798      	blx	r3
      }
      break;
 800648e:	e048      	b.n	8006522 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff fcf7 	bl	8005e8c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064cc:	2105      	movs	r1, #5
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d107      	bne.n	80064ee <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff fdb0 	bl	800604c <USBH_Start>
 80064ec:	e002      	b.n	80064f4 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f004 faae 	bl	800aa50 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006508:	2300      	movs	r3, #0
 800650a:	2200      	movs	r2, #0
 800650c:	f001 fb88 	bl	8007c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006510:	e008      	b.n	8006524 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8006512:	bf00      	nop
 8006514:	e006      	b.n	8006524 <USBH_Process+0x4b8>
      break;
 8006516:	bf00      	nop
 8006518:	e004      	b.n	8006524 <USBH_Process+0x4b8>
      break;
 800651a:	bf00      	nop
 800651c:	e002      	b.n	8006524 <USBH_Process+0x4b8>
    break;
 800651e:	bf00      	nop
 8006520:	e000      	b.n	8006524 <USBH_Process+0x4b8>
      break;
 8006522:	bf00      	nop
  }
  return USBH_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop

08006530 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af04      	add	r7, sp, #16
 8006536:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006538:	2301      	movs	r3, #1
 800653a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800653c:	2301      	movs	r3, #1
 800653e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	2b07      	cmp	r3, #7
 8006546:	f200 8208 	bhi.w	800695a <USBH_HandleEnum+0x42a>
 800654a:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <USBH_HandleEnum+0x20>)
 800654c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006550:	08006571 	.word	0x08006571
 8006554:	0800662f 	.word	0x0800662f
 8006558:	08006699 	.word	0x08006699
 800655c:	08006727 	.word	0x08006727
 8006560:	08006791 	.word	0x08006791
 8006564:	08006801 	.word	0x08006801
 8006568:	0800689d 	.word	0x0800689d
 800656c:	0800691b 	.word	0x0800691b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006570:	2108      	movs	r1, #8
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 faec 	bl	8006b50 <USBH_Get_DevDesc>
 8006578:	4603      	mov	r3, r0
 800657a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d130      	bne.n	80065e4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	7919      	ldrb	r1, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80065a6:	b292      	uxth	r2, r2
 80065a8:	9202      	str	r2, [sp, #8]
 80065aa:	2200      	movs	r2, #0
 80065ac:	9201      	str	r2, [sp, #4]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	4603      	mov	r3, r0
 80065b2:	2280      	movs	r2, #128	; 0x80
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 f903 	bl	80077c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	7959      	ldrb	r1, [r3, #5]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065ce:	b292      	uxth	r2, r2
 80065d0:	9202      	str	r2, [sp, #8]
 80065d2:	2200      	movs	r2, #0
 80065d4:	9201      	str	r2, [sp, #4]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	4603      	mov	r3, r0
 80065da:	2200      	movs	r2, #0
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f001 f8ef 	bl	80077c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80065e2:	e1bc      	b.n	800695e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	f040 81b9 	bne.w	800695e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065f2:	3301      	adds	r3, #1
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006602:	2b03      	cmp	r3, #3
 8006604:	d903      	bls.n	800660e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	220d      	movs	r2, #13
 800660a:	701a      	strb	r2, [r3, #0]
      break;
 800660c:	e1a7      	b.n	800695e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	795b      	ldrb	r3, [r3, #5]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 f923 	bl	8007860 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	791b      	ldrb	r3, [r3, #4]
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 f91d 	bl	8007860 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	701a      	strb	r2, [r3, #0]
      break;
 800662c:	e197      	b.n	800695e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800662e:	2112      	movs	r1, #18
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fa8d 	bl	8006b50 <USBH_Get_DevDesc>
 8006636:	4603      	mov	r3, r0
 8006638:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d103      	bne.n	8006648 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006646:	e18c      	b.n	8006962 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	2b03      	cmp	r3, #3
 800664c:	f040 8189 	bne.w	8006962 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006656:	3301      	adds	r3, #1
 8006658:	b2da      	uxtb	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006666:	2b03      	cmp	r3, #3
 8006668:	d903      	bls.n	8006672 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	220d      	movs	r2, #13
 800666e:	701a      	strb	r2, [r3, #0]
      break;
 8006670:	e177      	b.n	8006962 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	795b      	ldrb	r3, [r3, #5]
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 f8f1 	bl	8007860 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	791b      	ldrb	r3, [r3, #4]
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 f8eb 	bl	8007860 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
      break;
 8006696:	e164      	b.n	8006962 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006698:	2101      	movs	r1, #1
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fb04 	bl	8006ca8 <USBH_SetAddress>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d132      	bne.n	8006710 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80066aa:	2002      	movs	r0, #2
 80066ac:	f004 fb34 	bl	800ad18 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2203      	movs	r2, #3
 80066bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7919      	ldrb	r1, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80066d2:	b292      	uxth	r2, r2
 80066d4:	9202      	str	r2, [sp, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	9201      	str	r2, [sp, #4]
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	4603      	mov	r3, r0
 80066de:	2280      	movs	r2, #128	; 0x80
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 f86d 	bl	80077c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	7959      	ldrb	r1, [r3, #5]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80066fa:	b292      	uxth	r2, r2
 80066fc:	9202      	str	r2, [sp, #8]
 80066fe:	2200      	movs	r2, #0
 8006700:	9201      	str	r2, [sp, #4]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	4603      	mov	r3, r0
 8006706:	2200      	movs	r2, #0
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 f859 	bl	80077c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800670e:	e12a      	b.n	8006966 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	2b03      	cmp	r3, #3
 8006714:	f040 8127 	bne.w	8006966 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	220d      	movs	r2, #13
 800671c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	705a      	strb	r2, [r3, #1]
      break;
 8006724:	e11f      	b.n	8006966 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006726:	2109      	movs	r1, #9
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fa39 	bl	8006ba0 <USBH_Get_CfgDesc>
 800672e:	4603      	mov	r3, r0
 8006730:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d103      	bne.n	8006740 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2204      	movs	r2, #4
 800673c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800673e:	e114      	b.n	800696a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	2b03      	cmp	r3, #3
 8006744:	f040 8111 	bne.w	800696a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800674e:	3301      	adds	r3, #1
 8006750:	b2da      	uxtb	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800675e:	2b03      	cmp	r3, #3
 8006760:	d903      	bls.n	800676a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	220d      	movs	r2, #13
 8006766:	701a      	strb	r2, [r3, #0]
      break;
 8006768:	e0ff      	b.n	800696a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	795b      	ldrb	r3, [r3, #5]
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f001 f875 	bl	8007860 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	791b      	ldrb	r3, [r3, #4]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 f86f 	bl	8007860 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	701a      	strb	r2, [r3, #0]
      break;
 800678e:	e0ec      	b.n	800696a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fa01 	bl	8006ba0 <USBH_Get_CfgDesc>
 800679e:	4603      	mov	r3, r0
 80067a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2205      	movs	r2, #5
 80067ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80067ae:	e0de      	b.n	800696e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067b0:	7bbb      	ldrb	r3, [r7, #14]
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	f040 80db 	bne.w	800696e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067be:	3301      	adds	r3, #1
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d903      	bls.n	80067da <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	220d      	movs	r2, #13
 80067d6:	701a      	strb	r2, [r3, #0]
      break;
 80067d8:	e0c9      	b.n	800696e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	795b      	ldrb	r3, [r3, #5]
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 f83d 	bl	8007860 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	791b      	ldrb	r3, [r3, #4]
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 f837 	bl	8007860 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	701a      	strb	r2, [r3, #0]
      break;
 80067fe:	e0b6      	b.n	800696e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006806:	2b00      	cmp	r3, #0
 8006808:	d036      	beq.n	8006878 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006816:	23ff      	movs	r3, #255	; 0xff
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f9e5 	bl	8006be8 <USBH_Get_StringDesc>
 800681e:	4603      	mov	r3, r0
 8006820:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006822:	7bbb      	ldrb	r3, [r7, #14]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d111      	bne.n	800684c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2206      	movs	r2, #6
 800682c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2205      	movs	r2, #5
 8006832:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006842:	2300      	movs	r3, #0
 8006844:	2200      	movs	r2, #0
 8006846:	f001 f9eb 	bl	8007c20 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800684a:	e092      	b.n	8006972 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800684c:	7bbb      	ldrb	r3, [r7, #14]
 800684e:	2b03      	cmp	r3, #3
 8006850:	f040 808f 	bne.w	8006972 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2206      	movs	r2, #6
 8006858:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2205      	movs	r2, #5
 800685e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800686e:	2300      	movs	r3, #0
 8006870:	2200      	movs	r2, #0
 8006872:	f001 f9d5 	bl	8007c20 <osMessageQueuePut>
      break;
 8006876:	e07c      	b.n	8006972 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2206      	movs	r2, #6
 800687c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2205      	movs	r2, #5
 8006882:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006892:	2300      	movs	r3, #0
 8006894:	2200      	movs	r2, #0
 8006896:	f001 f9c3 	bl	8007c20 <osMessageQueuePut>
      break;
 800689a:	e06a      	b.n	8006972 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d027      	beq.n	80068f6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80068b2:	23ff      	movs	r3, #255	; 0xff
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f997 	bl	8006be8 <USBH_Get_StringDesc>
 80068ba:	4603      	mov	r3, r0
 80068bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d103      	bne.n	80068cc <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2207      	movs	r2, #7
 80068c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80068ca:	e054      	b.n	8006976 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d151      	bne.n	8006976 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2207      	movs	r2, #7
 80068d6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2205      	movs	r2, #5
 80068dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068ec:	2300      	movs	r3, #0
 80068ee:	2200      	movs	r2, #0
 80068f0:	f001 f996 	bl	8007c20 <osMessageQueuePut>
      break;
 80068f4:	e03f      	b.n	8006976 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2207      	movs	r2, #7
 80068fa:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2205      	movs	r2, #5
 8006900:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006910:	2300      	movs	r3, #0
 8006912:	2200      	movs	r2, #0
 8006914:	f001 f984 	bl	8007c20 <osMessageQueuePut>
      break;
 8006918:	e02d      	b.n	8006976 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006920:	2b00      	cmp	r3, #0
 8006922:	d017      	beq.n	8006954 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006930:	23ff      	movs	r3, #255	; 0xff
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f958 	bl	8006be8 <USBH_Get_StringDesc>
 8006938:	4603      	mov	r3, r0
 800693a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d102      	bne.n	8006948 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006946:	e018      	b.n	800697a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	2b03      	cmp	r3, #3
 800694c:	d115      	bne.n	800697a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]
      break;
 8006952:	e012      	b.n	800697a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	73fb      	strb	r3, [r7, #15]
      break;
 8006958:	e00f      	b.n	800697a <USBH_HandleEnum+0x44a>

    default:
      break;
 800695a:	bf00      	nop
 800695c:	e00e      	b.n	800697c <USBH_HandleEnum+0x44c>
      break;
 800695e:	bf00      	nop
 8006960:	e00c      	b.n	800697c <USBH_HandleEnum+0x44c>
      break;
 8006962:	bf00      	nop
 8006964:	e00a      	b.n	800697c <USBH_HandleEnum+0x44c>
      break;
 8006966:	bf00      	nop
 8006968:	e008      	b.n	800697c <USBH_HandleEnum+0x44c>
      break;
 800696a:	bf00      	nop
 800696c:	e006      	b.n	800697c <USBH_HandleEnum+0x44c>
      break;
 800696e:	bf00      	nop
 8006970:	e004      	b.n	800697c <USBH_HandleEnum+0x44c>
      break;
 8006972:	bf00      	nop
 8006974:	e002      	b.n	800697c <USBH_HandleEnum+0x44c>
      break;
 8006976:	bf00      	nop
 8006978:	e000      	b.n	800697c <USBH_HandleEnum+0x44c>
      break;
 800697a:	bf00      	nop
  }
  return Status;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop

08006988 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b082      	sub	sp, #8
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f804 	bl	80069ca <USBH_HandleSof>
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b0b      	cmp	r3, #11
 80069da:	d10a      	bne.n	80069f2 <USBH_HandleSof+0x28>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
  }
}
 80069f2:	bf00      	nop
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b082      	sub	sp, #8
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2200      	movs	r2, #0
 8006a22:	f001 f8fd 	bl	8007c20 <osMessageQueuePut>
#endif
#endif

  return;
 8006a26:	bf00      	nop
}
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006a3e:	bf00      	nop
}
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b082      	sub	sp, #8
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2200      	movs	r2, #0
 8006a82:	f001 f8cd 	bl	8007c20 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f003 ffe8 	bl	800aa86 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	791b      	ldrb	r3, [r3, #4]
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fecf 	bl	8007860 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	795b      	ldrb	r3, [r3, #5]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fec9 	bl	8007860 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f001 f89b 	bl	8007c20 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8006b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f001 f8e7 	bl	8007ce0 <osMessageQueueGet>
 8006b12:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1f0      	bne.n	8006afc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff faa6 	bl	800606c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8006b20:	e7ec      	b.n	8006afc <USBH_Process_OS+0x8>

08006b22 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2200      	movs	r2, #0
 8006b42:	f001 f86d 	bl	8007c20 <osMessageQueuePut>
#endif

  return USBH_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af02      	add	r7, sp, #8
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b6e:	2100      	movs	r1, #0
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f864 	bl	8006c3e <USBH_GetDescriptor>
 8006b76:	4603      	mov	r3, r0
 8006b78:	73fb      	strb	r3, [r7, #15]
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b8c:	78fa      	ldrb	r2, [r7, #3]
 8006b8e:	b292      	uxth	r2, r2
 8006b90:	4619      	mov	r1, r3
 8006b92:	f000 f918 	bl	8006dc6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	331c      	adds	r3, #28
 8006bb0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006bb2:	887b      	ldrh	r3, [r7, #2]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f83d 	bl	8006c3e <USBH_GetDescriptor>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	72fb      	strb	r3, [r7, #11]
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d107      	bne.n	8006bde <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006bd4:	887a      	ldrh	r2, [r7, #2]
 8006bd6:	68f9      	ldr	r1, [r7, #12]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 f964 	bl	8006ea6 <USBH_ParseCfgDesc>
  }

  return status;
 8006bde:	7afb      	ldrb	r3, [r7, #11]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	607a      	str	r2, [r7, #4]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	72fb      	strb	r3, [r7, #11]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006c04:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006c0c:	893b      	ldrh	r3, [r7, #8]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	460b      	mov	r3, r1
 8006c12:	2100      	movs	r1, #0
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 f812 	bl	8006c3e <USBH_GetDescriptor>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	75fb      	strb	r3, [r7, #23]
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d107      	bne.n	8006c34 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c2a:	893a      	ldrh	r2, [r7, #8]
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fa37 	bl	80070a2 <USBH_ParseStringDesc>
  }

  return status;
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	607b      	str	r3, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	72fb      	strb	r3, [r7, #11]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	789b      	ldrb	r3, [r3, #2]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d11c      	bne.n	8006c92 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006c58:	7afb      	ldrb	r3, [r7, #11]
 8006c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2206      	movs	r2, #6
 8006c68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	893a      	ldrh	r2, [r7, #8]
 8006c6e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006c70:	893b      	ldrh	r3, [r7, #8]
 8006c72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c7a:	d104      	bne.n	8006c86 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f240 4209 	movw	r2, #1033	; 0x409
 8006c82:	829a      	strh	r2, [r3, #20]
 8006c84:	e002      	b.n	8006c8c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8b3a      	ldrh	r2, [r7, #24]
 8006c90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006c92:	8b3b      	ldrh	r3, [r7, #24]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 fa50 	bl	800713e <USBH_CtlReq>
 8006c9e:	4603      	mov	r3, r0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	789b      	ldrb	r3, [r3, #2]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d10f      	bne.n	8006cdc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2205      	movs	r2, #5
 8006cc6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2100      	movs	r1, #0
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa2c 	bl	800713e <USBH_CtlReq>
 8006ce6:	4603      	mov	r3, r0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	789b      	ldrb	r3, [r3, #2]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d10e      	bne.n	8006d22 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2209      	movs	r2, #9
 8006d0e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	887a      	ldrh	r2, [r7, #2]
 8006d14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006d22:	2200      	movs	r2, #0
 8006d24:	2100      	movs	r1, #0
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa09 	bl	800713e <USBH_CtlReq>
 8006d2c:	4603      	mov	r3, r0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	789b      	ldrb	r3, [r3, #2]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d10f      	bne.n	8006d6a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2203      	movs	r2, #3
 8006d54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9e5 	bl	800713e <USBH_CtlReq>
 8006d74:	4603      	mov	r3, r0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	460b      	mov	r3, r1
 8006d88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	789b      	ldrb	r3, [r3, #2]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d10f      	bne.n	8006db2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2202      	movs	r2, #2
 8006d96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006db2:	2200      	movs	r2, #0
 8006db4:	2100      	movs	r1, #0
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f9c1 	bl	800713e <USBH_CtlReq>
 8006dbc:	4603      	mov	r3, r0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b085      	sub	sp, #20
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	781a      	ldrb	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	785a      	ldrb	r2, [r3, #1]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	3302      	adds	r3, #2
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	3303      	adds	r3, #3
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	021b      	lsls	r3, r3, #8
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	791a      	ldrb	r2, [r3, #4]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	795a      	ldrb	r2, [r3, #5]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	799a      	ldrb	r2, [r3, #6]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	79da      	ldrb	r2, [r3, #7]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006e20:	88fb      	ldrh	r3, [r7, #6]
 8006e22:	2b08      	cmp	r3, #8
 8006e24:	d939      	bls.n	8006e9a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	3309      	adds	r3, #9
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	330a      	adds	r3, #10
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	330b      	adds	r3, #11
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	4313      	orrs	r3, r2
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	330c      	adds	r3, #12
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	330d      	adds	r3, #13
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	021b      	lsls	r3, r3, #8
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	4313      	orrs	r3, r2
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	7b9a      	ldrb	r2, [r3, #14]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	7bda      	ldrb	r2, [r3, #15]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	7c1a      	ldrb	r2, [r3, #16]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	7c5a      	ldrb	r2, [r3, #17]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	745a      	strb	r2, [r3, #17]
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b08a      	sub	sp, #40	; 0x28
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	781a      	ldrb	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	785a      	ldrb	r2, [r3, #1]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	3302      	adds	r3, #2
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	3303      	adds	r3, #3
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	021b      	lsls	r3, r3, #8
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	4313      	orrs	r3, r2
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	791a      	ldrb	r2, [r3, #4]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	795a      	ldrb	r2, [r3, #5]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	799a      	ldrb	r2, [r3, #6]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	79da      	ldrb	r2, [r3, #7]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	7a1a      	ldrb	r2, [r3, #8]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006f1c:	88fb      	ldrh	r3, [r7, #6]
 8006f1e:	2b09      	cmp	r3, #9
 8006f20:	d95f      	bls.n	8006fe2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006f22:	2309      	movs	r3, #9
 8006f24:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006f2a:	e051      	b.n	8006fd0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006f2c:	f107 0316 	add.w	r3, r7, #22
 8006f30:	4619      	mov	r1, r3
 8006f32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f34:	f000 f8e8 	bl	8007108 <USBH_GetNextDesc>
 8006f38:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d146      	bne.n	8006fd0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006f42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f46:	221a      	movs	r2, #26
 8006f48:	fb02 f303 	mul.w	r3, r2, r3
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	3302      	adds	r3, #2
 8006f54:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f58:	69f8      	ldr	r0, [r7, #28]
 8006f5a:	f000 f846 	bl	8006fea <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006f68:	e022      	b.n	8006fb0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006f6a:	f107 0316 	add.w	r3, r7, #22
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f72:	f000 f8c9 	bl	8007108 <USBH_GetNextDesc>
 8006f76:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	785b      	ldrb	r3, [r3, #1]
 8006f7c:	2b05      	cmp	r3, #5
 8006f7e:	d117      	bne.n	8006fb0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006f80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f84:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006f88:	3201      	adds	r2, #1
 8006f8a:	00d2      	lsls	r2, r2, #3
 8006f8c:	211a      	movs	r1, #26
 8006f8e:	fb01 f303 	mul.w	r3, r1, r3
 8006f92:	4413      	add	r3, r2
 8006f94:	3308      	adds	r3, #8
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4413      	add	r3, r2
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006f9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fa0:	69b8      	ldr	r0, [r7, #24]
 8006fa2:	f000 f851 	bl	8007048 <USBH_ParseEPDesc>
            ep_ix++;
 8006fa6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006faa:	3301      	adds	r3, #1
 8006fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	791b      	ldrb	r3, [r3, #4]
 8006fb4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d204      	bcs.n	8006fc6 <USBH_ParseCfgDesc+0x120>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	885a      	ldrh	r2, [r3, #2]
 8006fc0:	8afb      	ldrh	r3, [r7, #22]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d8d1      	bhi.n	8006f6a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006fc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fca:	3301      	adds	r3, #1
 8006fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d804      	bhi.n	8006fe2 <USBH_ParseCfgDesc+0x13c>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	885a      	ldrh	r2, [r3, #2]
 8006fdc:	8afb      	ldrh	r3, [r7, #22]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d8a4      	bhi.n	8006f2c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006fe2:	bf00      	nop
 8006fe4:	3728      	adds	r7, #40	; 0x28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781a      	ldrb	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	785a      	ldrb	r2, [r3, #1]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	789a      	ldrb	r2, [r3, #2]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	78da      	ldrb	r2, [r3, #3]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	791a      	ldrb	r2, [r3, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	795a      	ldrb	r2, [r3, #5]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	799a      	ldrb	r2, [r3, #6]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	79da      	ldrb	r2, [r3, #7]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	7a1a      	ldrb	r2, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	721a      	strb	r2, [r3, #8]
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781a      	ldrb	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	785a      	ldrb	r2, [r3, #1]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	789a      	ldrb	r2, [r3, #2]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	78da      	ldrb	r2, [r3, #3]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	3304      	adds	r3, #4
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	b29a      	uxth	r2, r3
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	3305      	adds	r3, #5
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	b29b      	uxth	r3, r3
 8007086:	4313      	orrs	r3, r2
 8007088:	b29a      	uxth	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	799a      	ldrb	r2, [r3, #6]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	719a      	strb	r2, [r3, #6]
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b087      	sub	sp, #28
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	4613      	mov	r3, r2
 80070ae:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3301      	adds	r3, #1
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d120      	bne.n	80070fc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	1e9a      	subs	r2, r3, #2
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	4293      	cmp	r3, r2
 80070c4:	bf28      	it	cs
 80070c6:	4613      	movcs	r3, r2
 80070c8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3302      	adds	r3, #2
 80070ce:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80070d0:	2300      	movs	r3, #0
 80070d2:	82fb      	strh	r3, [r7, #22]
 80070d4:	e00b      	b.n	80070ee <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80070d6:	8afb      	ldrh	r3, [r7, #22]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	781a      	ldrb	r2, [r3, #0]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	3301      	adds	r3, #1
 80070e6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80070e8:	8afb      	ldrh	r3, [r7, #22]
 80070ea:	3302      	adds	r3, #2
 80070ec:	82fb      	strh	r3, [r7, #22]
 80070ee:	8afa      	ldrh	r2, [r7, #22]
 80070f0:	8abb      	ldrh	r3, [r7, #20]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d3ef      	bcc.n	80070d6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2200      	movs	r2, #0
 80070fa:	701a      	strb	r2, [r3, #0]
  }
}
 80070fc:	bf00      	nop
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	881a      	ldrh	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	b29b      	uxth	r3, r3
 800711c:	4413      	add	r3, r2
 800711e:	b29a      	uxth	r2, r3
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4413      	add	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007130:	68fb      	ldr	r3, [r7, #12]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b086      	sub	sp, #24
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	4613      	mov	r3, r2
 800714a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800714c:	2301      	movs	r3, #1
 800714e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	789b      	ldrb	r3, [r3, #2]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d002      	beq.n	800715e <USBH_CtlReq+0x20>
 8007158:	2b02      	cmp	r3, #2
 800715a:	d01d      	beq.n	8007198 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800715c:	e043      	b.n	80071e6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	88fa      	ldrh	r2, [r7, #6]
 8007168:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2201      	movs	r2, #1
 800716e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2202      	movs	r2, #2
 8007174:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007176:	2301      	movs	r3, #1
 8007178:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2203      	movs	r2, #3
 800717e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800718e:	2300      	movs	r3, #0
 8007190:	2200      	movs	r2, #0
 8007192:	f000 fd45 	bl	8007c20 <osMessageQueuePut>
      break;
 8007196:	e026      	b.n	80071e6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f829 	bl	80071f0 <USBH_HandleControl>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <USBH_CtlReq+0x70>
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d106      	bne.n	80071bc <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	761a      	strb	r2, [r3, #24]
 80071ba:	e005      	b.n	80071c8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d102      	bne.n	80071c8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2203      	movs	r2, #3
 80071cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80071dc:	2300      	movs	r3, #0
 80071de:	2200      	movs	r2, #0
 80071e0:	f000 fd1e 	bl	8007c20 <osMessageQueuePut>
      break;
 80071e4:	bf00      	nop
  }
  return status;
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80071f8:	2301      	movs	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7e1b      	ldrb	r3, [r3, #24]
 8007204:	3b01      	subs	r3, #1
 8007206:	2b0a      	cmp	r3, #10
 8007208:	f200 8229 	bhi.w	800765e <USBH_HandleControl+0x46e>
 800720c:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <USBH_HandleControl+0x24>)
 800720e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007212:	bf00      	nop
 8007214:	08007241 	.word	0x08007241
 8007218:	0800725b 	.word	0x0800725b
 800721c:	080072fd 	.word	0x080072fd
 8007220:	08007323 	.word	0x08007323
 8007224:	080073af 	.word	0x080073af
 8007228:	080073d9 	.word	0x080073d9
 800722c:	0800749b 	.word	0x0800749b
 8007230:	080074bd 	.word	0x080074bd
 8007234:	0800754f 	.word	0x0800754f
 8007238:	08007575 	.word	0x08007575
 800723c:	08007607 	.word	0x08007607
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f103 0110 	add.w	r1, r3, #16
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	795b      	ldrb	r3, [r3, #5]
 800724a:	461a      	mov	r2, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fa17 	bl	8007680 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2202      	movs	r2, #2
 8007256:	761a      	strb	r2, [r3, #24]
      break;
 8007258:	e20c      	b.n	8007674 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	795b      	ldrb	r3, [r3, #5]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f003 fcff 	bl	800ac64 <USBH_LL_GetURBState>
 8007266:	4603      	mov	r3, r0
 8007268:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d12c      	bne.n	80072ca <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7c1b      	ldrb	r3, [r3, #16]
 8007274:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007278:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	8adb      	ldrh	r3, [r3, #22]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007282:	7b7b      	ldrb	r3, [r7, #13]
 8007284:	2b80      	cmp	r3, #128	; 0x80
 8007286:	d103      	bne.n	8007290 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2203      	movs	r2, #3
 800728c:	761a      	strb	r2, [r3, #24]
 800728e:	e00d      	b.n	80072ac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2205      	movs	r2, #5
 8007294:	761a      	strb	r2, [r3, #24]
 8007296:	e009      	b.n	80072ac <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007298:	7b7b      	ldrb	r3, [r7, #13]
 800729a:	2b80      	cmp	r3, #128	; 0x80
 800729c:	d103      	bne.n	80072a6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2209      	movs	r2, #9
 80072a2:	761a      	strb	r2, [r3, #24]
 80072a4:	e002      	b.n	80072ac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2207      	movs	r2, #7
 80072aa:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2203      	movs	r2, #3
 80072b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80072c0:	2300      	movs	r3, #0
 80072c2:	2200      	movs	r2, #0
 80072c4:	f000 fcac 	bl	8007c20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80072c8:	e1cb      	b.n	8007662 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d003      	beq.n	80072d8 <USBH_HandleControl+0xe8>
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	f040 81c5 	bne.w	8007662 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	220b      	movs	r2, #11
 80072dc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2203      	movs	r2, #3
 80072e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80072f2:	2300      	movs	r3, #0
 80072f4:	2200      	movs	r2, #0
 80072f6:	f000 fc93 	bl	8007c20 <osMessageQueuePut>
      break;
 80072fa:	e1b2      	b.n	8007662 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007302:	b29a      	uxth	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6899      	ldr	r1, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	899a      	ldrh	r2, [r3, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	791b      	ldrb	r3, [r3, #4]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f9f2 	bl	80076fe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2204      	movs	r2, #4
 800731e:	761a      	strb	r2, [r3, #24]
      break;
 8007320:	e1a8      	b.n	8007674 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	791b      	ldrb	r3, [r3, #4]
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f003 fc9b 	bl	800ac64 <USBH_LL_GetURBState>
 800732e:	4603      	mov	r3, r0
 8007330:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007332:	7bbb      	ldrb	r3, [r7, #14]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d110      	bne.n	800735a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2209      	movs	r2, #9
 800733c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2203      	movs	r2, #3
 8007342:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007352:	2300      	movs	r3, #0
 8007354:	2200      	movs	r2, #0
 8007356:	f000 fc63 	bl	8007c20 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b05      	cmp	r3, #5
 800735e:	d110      	bne.n	8007382 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007360:	2303      	movs	r3, #3
 8007362:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2203      	movs	r2, #3
 8007368:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007378:	2300      	movs	r3, #0
 800737a:	2200      	movs	r2, #0
 800737c:	f000 fc50 	bl	8007c20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007380:	e171      	b.n	8007666 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	2b04      	cmp	r3, #4
 8007386:	f040 816e 	bne.w	8007666 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	220b      	movs	r2, #11
 800738e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2203      	movs	r2, #3
 8007394:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80073a4:	2300      	movs	r3, #0
 80073a6:	2200      	movs	r2, #0
 80073a8:	f000 fc3a 	bl	8007c20 <osMessageQueuePut>
      break;
 80073ac:	e15b      	b.n	8007666 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6899      	ldr	r1, [r3, #8]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	899a      	ldrh	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	795b      	ldrb	r3, [r3, #5]
 80073ba:	2001      	movs	r0, #1
 80073bc:	9000      	str	r0, [sp, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f978 	bl	80076b4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2206      	movs	r2, #6
 80073d4:	761a      	strb	r2, [r3, #24]
      break;
 80073d6:	e14d      	b.n	8007674 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	795b      	ldrb	r3, [r3, #5]
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f003 fc40 	bl	800ac64 <USBH_LL_GetURBState>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d111      	bne.n	8007412 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2207      	movs	r2, #7
 80073f2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2203      	movs	r2, #3
 80073f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007408:	2300      	movs	r3, #0
 800740a:	2200      	movs	r2, #0
 800740c:	f000 fc08 	bl	8007c20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007410:	e12b      	b.n	800766a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b05      	cmp	r3, #5
 8007416:	d113      	bne.n	8007440 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	220c      	movs	r2, #12
 800741c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800741e:	2303      	movs	r3, #3
 8007420:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2203      	movs	r2, #3
 8007426:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007436:	2300      	movs	r3, #0
 8007438:	2200      	movs	r2, #0
 800743a:	f000 fbf1 	bl	8007c20 <osMessageQueuePut>
      break;
 800743e:	e114      	b.n	800766a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007440:	7bbb      	ldrb	r3, [r7, #14]
 8007442:	2b02      	cmp	r3, #2
 8007444:	d111      	bne.n	800746a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2205      	movs	r2, #5
 800744a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2203      	movs	r2, #3
 8007450:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007460:	2300      	movs	r3, #0
 8007462:	2200      	movs	r2, #0
 8007464:	f000 fbdc 	bl	8007c20 <osMessageQueuePut>
      break;
 8007468:	e0ff      	b.n	800766a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	2b04      	cmp	r3, #4
 800746e:	f040 80fc 	bne.w	800766a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	220b      	movs	r2, #11
 8007476:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007478:	2302      	movs	r3, #2
 800747a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2203      	movs	r2, #3
 8007480:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007490:	2300      	movs	r3, #0
 8007492:	2200      	movs	r2, #0
 8007494:	f000 fbc4 	bl	8007c20 <osMessageQueuePut>
      break;
 8007498:	e0e7      	b.n	800766a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	791b      	ldrb	r3, [r3, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	2100      	movs	r1, #0
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f92b 	bl	80076fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2208      	movs	r2, #8
 80074b8:	761a      	strb	r2, [r3, #24]

      break;
 80074ba:	e0db      	b.n	8007674 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	791b      	ldrb	r3, [r3, #4]
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f003 fbce 	bl	800ac64 <USBH_LL_GetURBState>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d113      	bne.n	80074fa <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	220d      	movs	r2, #13
 80074d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2203      	movs	r2, #3
 80074e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80074f0:	2300      	movs	r3, #0
 80074f2:	2200      	movs	r2, #0
 80074f4:	f000 fb94 	bl	8007c20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80074f8:	e0b9      	b.n	800766e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d111      	bne.n	8007524 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	220b      	movs	r2, #11
 8007504:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2203      	movs	r2, #3
 800750a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800751a:	2300      	movs	r3, #0
 800751c:	2200      	movs	r2, #0
 800751e:	f000 fb7f 	bl	8007c20 <osMessageQueuePut>
      break;
 8007522:	e0a4      	b.n	800766e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	2b05      	cmp	r3, #5
 8007528:	f040 80a1 	bne.w	800766e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800752c:	2303      	movs	r3, #3
 800752e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2203      	movs	r2, #3
 8007534:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007544:	2300      	movs	r3, #0
 8007546:	2200      	movs	r2, #0
 8007548:	f000 fb6a 	bl	8007c20 <osMessageQueuePut>
      break;
 800754c:	e08f      	b.n	800766e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	795b      	ldrb	r3, [r3, #5]
 8007552:	2201      	movs	r2, #1
 8007554:	9200      	str	r2, [sp, #0]
 8007556:	2200      	movs	r2, #0
 8007558:	2100      	movs	r1, #0
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f8aa 	bl	80076b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007566:	b29a      	uxth	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	220a      	movs	r2, #10
 8007570:	761a      	strb	r2, [r3, #24]
      break;
 8007572:	e07f      	b.n	8007674 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	795b      	ldrb	r3, [r3, #5]
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f003 fb72 	bl	800ac64 <USBH_LL_GetURBState>
 8007580:	4603      	mov	r3, r0
 8007582:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d113      	bne.n	80075b2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	220d      	movs	r2, #13
 8007592:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2203      	movs	r2, #3
 8007598:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80075a8:	2300      	movs	r3, #0
 80075aa:	2200      	movs	r2, #0
 80075ac:	f000 fb38 	bl	8007c20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80075b0:	e05f      	b.n	8007672 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d111      	bne.n	80075dc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2209      	movs	r2, #9
 80075bc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2203      	movs	r2, #3
 80075c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80075d2:	2300      	movs	r3, #0
 80075d4:	2200      	movs	r2, #0
 80075d6:	f000 fb23 	bl	8007c20 <osMessageQueuePut>
      break;
 80075da:	e04a      	b.n	8007672 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80075dc:	7bbb      	ldrb	r3, [r7, #14]
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d147      	bne.n	8007672 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	220b      	movs	r2, #11
 80075e6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2203      	movs	r2, #3
 80075ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80075fc:	2300      	movs	r3, #0
 80075fe:	2200      	movs	r2, #0
 8007600:	f000 fb0e 	bl	8007c20 <osMessageQueuePut>
      break;
 8007604:	e035      	b.n	8007672 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	7e5b      	ldrb	r3, [r3, #25]
 800760a:	3301      	adds	r3, #1
 800760c:	b2da      	uxtb	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	765a      	strb	r2, [r3, #25]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	7e5b      	ldrb	r3, [r3, #25]
 8007616:	2b02      	cmp	r3, #2
 8007618:	d806      	bhi.n	8007628 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007626:	e025      	b.n	8007674 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800762e:	2106      	movs	r1, #6
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	795b      	ldrb	r3, [r3, #5]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f90d 	bl	8007860 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	791b      	ldrb	r3, [r3, #4]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f907 	bl	8007860 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007658:	2302      	movs	r3, #2
 800765a:	73fb      	strb	r3, [r7, #15]
      break;
 800765c:	e00a      	b.n	8007674 <USBH_HandleControl+0x484>

    default:
      break;
 800765e:	bf00      	nop
 8007660:	e008      	b.n	8007674 <USBH_HandleControl+0x484>
      break;
 8007662:	bf00      	nop
 8007664:	e006      	b.n	8007674 <USBH_HandleControl+0x484>
      break;
 8007666:	bf00      	nop
 8007668:	e004      	b.n	8007674 <USBH_HandleControl+0x484>
      break;
 800766a:	bf00      	nop
 800766c:	e002      	b.n	8007674 <USBH_HandleControl+0x484>
      break;
 800766e:	bf00      	nop
 8007670:	e000      	b.n	8007674 <USBH_HandleControl+0x484>
      break;
 8007672:	bf00      	nop
  }

  return status;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop

08007680 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af04      	add	r7, sp, #16
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	4613      	mov	r3, r2
 800768c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800768e:	79f9      	ldrb	r1, [r7, #7]
 8007690:	2300      	movs	r3, #0
 8007692:	9303      	str	r3, [sp, #12]
 8007694:	2308      	movs	r3, #8
 8007696:	9302      	str	r3, [sp, #8]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	9301      	str	r3, [sp, #4]
 800769c:	2300      	movs	r3, #0
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	2300      	movs	r3, #0
 80076a2:	2200      	movs	r2, #0
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f003 faac 	bl	800ac02 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af04      	add	r7, sp, #16
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4611      	mov	r1, r2
 80076c0:	461a      	mov	r2, r3
 80076c2:	460b      	mov	r3, r1
 80076c4:	80fb      	strh	r3, [r7, #6]
 80076c6:	4613      	mov	r3, r2
 80076c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80076d8:	7979      	ldrb	r1, [r7, #5]
 80076da:	7e3b      	ldrb	r3, [r7, #24]
 80076dc:	9303      	str	r3, [sp, #12]
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	9302      	str	r3, [sp, #8]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	2301      	movs	r3, #1
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	2300      	movs	r3, #0
 80076ec:	2200      	movs	r2, #0
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f003 fa87 	bl	800ac02 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b088      	sub	sp, #32
 8007702:	af04      	add	r7, sp, #16
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	4611      	mov	r1, r2
 800770a:	461a      	mov	r2, r3
 800770c:	460b      	mov	r3, r1
 800770e:	80fb      	strh	r3, [r7, #6]
 8007710:	4613      	mov	r3, r2
 8007712:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007714:	7979      	ldrb	r1, [r7, #5]
 8007716:	2300      	movs	r3, #0
 8007718:	9303      	str	r3, [sp, #12]
 800771a:	88fb      	ldrh	r3, [r7, #6]
 800771c:	9302      	str	r3, [sp, #8]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	2301      	movs	r3, #1
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	2300      	movs	r3, #0
 8007728:	2201      	movs	r2, #1
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f003 fa69 	bl	800ac02 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007730:	2300      	movs	r3, #0

}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b088      	sub	sp, #32
 800773e:	af04      	add	r7, sp, #16
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	4611      	mov	r1, r2
 8007746:	461a      	mov	r2, r3
 8007748:	460b      	mov	r3, r1
 800774a:	80fb      	strh	r3, [r7, #6]
 800774c:	4613      	mov	r3, r2
 800774e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800775e:	7979      	ldrb	r1, [r7, #5]
 8007760:	7e3b      	ldrb	r3, [r7, #24]
 8007762:	9303      	str	r3, [sp, #12]
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	9302      	str	r3, [sp, #8]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	2301      	movs	r3, #1
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	2302      	movs	r3, #2
 8007772:	2200      	movs	r2, #0
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f003 fa44 	bl	800ac02 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af04      	add	r7, sp, #16
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4611      	mov	r1, r2
 8007790:	461a      	mov	r2, r3
 8007792:	460b      	mov	r3, r1
 8007794:	80fb      	strh	r3, [r7, #6]
 8007796:	4613      	mov	r3, r2
 8007798:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800779a:	7979      	ldrb	r1, [r7, #5]
 800779c:	2300      	movs	r3, #0
 800779e:	9303      	str	r3, [sp, #12]
 80077a0:	88fb      	ldrh	r3, [r7, #6]
 80077a2:	9302      	str	r3, [sp, #8]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	2301      	movs	r3, #1
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	2302      	movs	r3, #2
 80077ae:	2201      	movs	r2, #1
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f003 fa26 	bl	800ac02 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af04      	add	r7, sp, #16
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	4608      	mov	r0, r1
 80077ca:	4611      	mov	r1, r2
 80077cc:	461a      	mov	r2, r3
 80077ce:	4603      	mov	r3, r0
 80077d0:	70fb      	strb	r3, [r7, #3]
 80077d2:	460b      	mov	r3, r1
 80077d4:	70bb      	strb	r3, [r7, #2]
 80077d6:	4613      	mov	r3, r2
 80077d8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80077da:	7878      	ldrb	r0, [r7, #1]
 80077dc:	78ba      	ldrb	r2, [r7, #2]
 80077de:	78f9      	ldrb	r1, [r7, #3]
 80077e0:	8b3b      	ldrh	r3, [r7, #24]
 80077e2:	9302      	str	r3, [sp, #8]
 80077e4:	7d3b      	ldrb	r3, [r7, #20]
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	7c3b      	ldrb	r3, [r7, #16]
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	4603      	mov	r3, r0
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f003 f9b9 	bl	800ab66 <USBH_LL_OpenPipe>

  return USBH_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	460b      	mov	r3, r1
 8007808:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f003 f9d8 	bl	800abc4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	460b      	mov	r3, r1
 8007828:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f836 	bl	800789c <USBH_GetFreePipe>
 8007830:	4603      	mov	r3, r0
 8007832:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007834:	89fb      	ldrh	r3, [r7, #14]
 8007836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800783a:	4293      	cmp	r3, r2
 800783c:	d00a      	beq.n	8007854 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800783e:	78fa      	ldrb	r2, [r7, #3]
 8007840:	89fb      	ldrh	r3, [r7, #14]
 8007842:	f003 030f 	and.w	r3, r3, #15
 8007846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	33e0      	adds	r3, #224	; 0xe0
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	440b      	add	r3, r1
 8007852:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007854:	89fb      	ldrh	r3, [r7, #14]
 8007856:	b2db      	uxtb	r3, r3
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	460b      	mov	r3, r1
 800786a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800786c:	78fb      	ldrb	r3, [r7, #3]
 800786e:	2b0a      	cmp	r3, #10
 8007870:	d80d      	bhi.n	800788e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	33e0      	adds	r3, #224	; 0xe0
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	33e0      	adds	r3, #224	; 0xe0
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	440b      	add	r3, r1
 800788c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]
 80078ac:	e00f      	b.n	80078ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	33e0      	adds	r3, #224	; 0xe0
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d102      	bne.n	80078c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	e007      	b.n	80078d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	3301      	adds	r3, #1
 80078cc:	73fb      	strb	r3, [r7, #15]
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	2b0a      	cmp	r3, #10
 80078d2:	d9ec      	bls.n	80078ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80078d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <__NVIC_SetPriority>:
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4603      	mov	r3, r0
 80078ec:	6039      	str	r1, [r7, #0]
 80078ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	db0a      	blt.n	800790e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	490c      	ldr	r1, [pc, #48]	; (8007930 <__NVIC_SetPriority+0x4c>)
 80078fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007902:	0112      	lsls	r2, r2, #4
 8007904:	b2d2      	uxtb	r2, r2
 8007906:	440b      	add	r3, r1
 8007908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800790c:	e00a      	b.n	8007924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	b2da      	uxtb	r2, r3
 8007912:	4908      	ldr	r1, [pc, #32]	; (8007934 <__NVIC_SetPriority+0x50>)
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	3b04      	subs	r3, #4
 800791c:	0112      	lsls	r2, r2, #4
 800791e:	b2d2      	uxtb	r2, r2
 8007920:	440b      	add	r3, r1
 8007922:	761a      	strb	r2, [r3, #24]
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	e000e100 	.word	0xe000e100
 8007934:	e000ed00 	.word	0xe000ed00

08007938 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800793c:	2100      	movs	r1, #0
 800793e:	f06f 0004 	mvn.w	r0, #4
 8007942:	f7ff ffcf 	bl	80078e4 <__NVIC_SetPriority>
#endif
}
 8007946:	bf00      	nop
 8007948:	bd80      	pop	{r7, pc}
	...

0800794c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007952:	f3ef 8305 	mrs	r3, IPSR
 8007956:	603b      	str	r3, [r7, #0]
  return(result);
 8007958:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800795e:	f06f 0305 	mvn.w	r3, #5
 8007962:	607b      	str	r3, [r7, #4]
 8007964:	e00c      	b.n	8007980 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007966:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <osKernelInitialize+0x44>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d105      	bne.n	800797a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800796e:	4b08      	ldr	r3, [pc, #32]	; (8007990 <osKernelInitialize+0x44>)
 8007970:	2201      	movs	r2, #1
 8007972:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007974:	2300      	movs	r3, #0
 8007976:	607b      	str	r3, [r7, #4]
 8007978:	e002      	b.n	8007980 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800797a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800797e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007980:	687b      	ldr	r3, [r7, #4]
}
 8007982:	4618      	mov	r0, r3
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	200000b4 	.word	0x200000b4

08007994 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800799a:	f3ef 8305 	mrs	r3, IPSR
 800799e:	603b      	str	r3, [r7, #0]
  return(result);
 80079a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80079a6:	f06f 0305 	mvn.w	r3, #5
 80079aa:	607b      	str	r3, [r7, #4]
 80079ac:	e010      	b.n	80079d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80079ae:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <osKernelStart+0x48>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d109      	bne.n	80079ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80079b6:	f7ff ffbf 	bl	8007938 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80079ba:	4b08      	ldr	r3, [pc, #32]	; (80079dc <osKernelStart+0x48>)
 80079bc:	2202      	movs	r2, #2
 80079be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80079c0:	f001 fa50 	bl	8008e64 <vTaskStartScheduler>
      stat = osOK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	607b      	str	r3, [r7, #4]
 80079c8:	e002      	b.n	80079d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80079ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079d0:	687b      	ldr	r3, [r7, #4]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	200000b4 	.word	0x200000b4

080079e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08e      	sub	sp, #56	; 0x38
 80079e4:	af04      	add	r7, sp, #16
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80079ec:	2300      	movs	r3, #0
 80079ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079f0:	f3ef 8305 	mrs	r3, IPSR
 80079f4:	617b      	str	r3, [r7, #20]
  return(result);
 80079f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d17e      	bne.n	8007afa <osThreadNew+0x11a>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d07b      	beq.n	8007afa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a02:	2380      	movs	r3, #128	; 0x80
 8007a04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a06:	2318      	movs	r3, #24
 8007a08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d045      	beq.n	8007aa6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <osThreadNew+0x48>
        name = attr->name;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d008      	beq.n	8007a4e <osThreadNew+0x6e>
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	2b38      	cmp	r3, #56	; 0x38
 8007a40:	d805      	bhi.n	8007a4e <osThreadNew+0x6e>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <osThreadNew+0x72>
        return (NULL);
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e054      	b.n	8007afc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	089b      	lsrs	r3, r3, #2
 8007a60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00e      	beq.n	8007a88 <osThreadNew+0xa8>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	2b5b      	cmp	r3, #91	; 0x5b
 8007a70:	d90a      	bls.n	8007a88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d006      	beq.n	8007a88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <osThreadNew+0xa8>
        mem = 1;
 8007a82:	2301      	movs	r3, #1
 8007a84:	61bb      	str	r3, [r7, #24]
 8007a86:	e010      	b.n	8007aaa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10c      	bne.n	8007aaa <osThreadNew+0xca>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d108      	bne.n	8007aaa <osThreadNew+0xca>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d104      	bne.n	8007aaa <osThreadNew+0xca>
          mem = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	61bb      	str	r3, [r7, #24]
 8007aa4:	e001      	b.n	8007aaa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d110      	bne.n	8007ad2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ab8:	9202      	str	r2, [sp, #8]
 8007aba:	9301      	str	r3, [sp, #4]
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	6a3a      	ldr	r2, [r7, #32]
 8007ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 fff6 	bl	8008ab8 <xTaskCreateStatic>
 8007acc:	4603      	mov	r3, r0
 8007ace:	613b      	str	r3, [r7, #16]
 8007ad0:	e013      	b.n	8007afa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d110      	bne.n	8007afa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	f107 0310 	add.w	r3, r7, #16
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f001 f841 	bl	8008b72 <xTaskCreate>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d001      	beq.n	8007afa <osThreadNew+0x11a>
            hTask = NULL;
 8007af6:	2300      	movs	r3, #0
 8007af8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007afa:	693b      	ldr	r3, [r7, #16]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3728      	adds	r7, #40	; 0x28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b0c:	f3ef 8305 	mrs	r3, IPSR
 8007b10:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <osDelay+0x1c>
    stat = osErrorISR;
 8007b18:	f06f 0305 	mvn.w	r3, #5
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	e007      	b.n	8007b30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 f966 	bl	8008dfc <vTaskDelay>
    }
  }

  return (stat);
 8007b30:	68fb      	ldr	r3, [r7, #12]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b08a      	sub	sp, #40	; 0x28
 8007b3e:	af02      	add	r7, sp, #8
 8007b40:	60f8      	str	r0, [r7, #12]
 8007b42:	60b9      	str	r1, [r7, #8]
 8007b44:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007b46:	2300      	movs	r3, #0
 8007b48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b4a:	f3ef 8305 	mrs	r3, IPSR
 8007b4e:	613b      	str	r3, [r7, #16]
  return(result);
 8007b50:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d15f      	bne.n	8007c16 <osMessageQueueNew+0xdc>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d05c      	beq.n	8007c16 <osMessageQueueNew+0xdc>
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d059      	beq.n	8007c16 <osMessageQueueNew+0xdc>
    mem = -1;
 8007b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d029      	beq.n	8007bc2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d012      	beq.n	8007b9c <osMessageQueueNew+0x62>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	2b4f      	cmp	r3, #79	; 0x4f
 8007b7c:	d90e      	bls.n	8007b9c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	695a      	ldr	r2, [r3, #20]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	fb01 f303 	mul.w	r3, r1, r3
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d302      	bcc.n	8007b9c <osMessageQueueNew+0x62>
        mem = 1;
 8007b96:	2301      	movs	r3, #1
 8007b98:	61bb      	str	r3, [r7, #24]
 8007b9a:	e014      	b.n	8007bc6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d110      	bne.n	8007bc6 <osMessageQueueNew+0x8c>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10c      	bne.n	8007bc6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d108      	bne.n	8007bc6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d104      	bne.n	8007bc6 <osMessageQueueNew+0x8c>
          mem = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61bb      	str	r3, [r7, #24]
 8007bc0:	e001      	b.n	8007bc6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d10b      	bne.n	8007be4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	9100      	str	r1, [sp, #0]
 8007bd8:	68b9      	ldr	r1, [r7, #8]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 fa2e 	bl	800803c <xQueueGenericCreateStatic>
 8007be0:	61f8      	str	r0, [r7, #28]
 8007be2:	e008      	b.n	8007bf6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d105      	bne.n	8007bf6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007bea:	2200      	movs	r2, #0
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fa9c 	bl	800812c <xQueueGenericCreate>
 8007bf4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00c      	beq.n	8007c16 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <osMessageQueueNew+0xd0>
        name = attr->name;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	e001      	b.n	8007c0e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007c0e:	6979      	ldr	r1, [r7, #20]
 8007c10:	69f8      	ldr	r0, [r7, #28]
 8007c12:	f000 fef3 	bl	80089fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007c16:	69fb      	ldr	r3, [r7, #28]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3720      	adds	r7, #32
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c38:	f3ef 8305 	mrs	r3, IPSR
 8007c3c:	617b      	str	r3, [r7, #20]
  return(result);
 8007c3e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d028      	beq.n	8007c96 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <osMessageQueuePut+0x36>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <osMessageQueuePut+0x36>
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007c56:	f06f 0303 	mvn.w	r3, #3
 8007c5a:	61fb      	str	r3, [r7, #28]
 8007c5c:	e038      	b.n	8007cd0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007c62:	f107 0210 	add.w	r2, r7, #16
 8007c66:	2300      	movs	r3, #0
 8007c68:	68b9      	ldr	r1, [r7, #8]
 8007c6a:	69b8      	ldr	r0, [r7, #24]
 8007c6c:	f000 fbba 	bl	80083e4 <xQueueGenericSendFromISR>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d003      	beq.n	8007c7e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007c76:	f06f 0302 	mvn.w	r3, #2
 8007c7a:	61fb      	str	r3, [r7, #28]
 8007c7c:	e028      	b.n	8007cd0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d025      	beq.n	8007cd0 <osMessageQueuePut+0xb0>
 8007c84:	4b15      	ldr	r3, [pc, #84]	; (8007cdc <osMessageQueuePut+0xbc>)
 8007c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	e01c      	b.n	8007cd0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <osMessageQueuePut+0x82>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d103      	bne.n	8007caa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007ca2:	f06f 0303 	mvn.w	r3, #3
 8007ca6:	61fb      	str	r3, [r7, #28]
 8007ca8:	e012      	b.n	8007cd0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007caa:	2300      	movs	r3, #0
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	69b8      	ldr	r0, [r7, #24]
 8007cb2:	f000 fa99 	bl	80081e8 <xQueueGenericSend>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d009      	beq.n	8007cd0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007cc2:	f06f 0301 	mvn.w	r3, #1
 8007cc6:	61fb      	str	r3, [r7, #28]
 8007cc8:	e002      	b.n	8007cd0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007cca:	f06f 0302 	mvn.w	r3, #2
 8007cce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007cd0:	69fb      	ldr	r3, [r7, #28]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	e000ed04 	.word	0xe000ed04

08007ce0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cf6:	f3ef 8305 	mrs	r3, IPSR
 8007cfa:	617b      	str	r3, [r7, #20]
  return(result);
 8007cfc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d028      	beq.n	8007d54 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d005      	beq.n	8007d14 <osMessageQueueGet+0x34>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <osMessageQueueGet+0x34>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007d14:	f06f 0303 	mvn.w	r3, #3
 8007d18:	61fb      	str	r3, [r7, #28]
 8007d1a:	e037      	b.n	8007d8c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007d20:	f107 0310 	add.w	r3, r7, #16
 8007d24:	461a      	mov	r2, r3
 8007d26:	68b9      	ldr	r1, [r7, #8]
 8007d28:	69b8      	ldr	r0, [r7, #24]
 8007d2a:	f000 fcd7 	bl	80086dc <xQueueReceiveFromISR>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d003      	beq.n	8007d3c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007d34:	f06f 0302 	mvn.w	r3, #2
 8007d38:	61fb      	str	r3, [r7, #28]
 8007d3a:	e027      	b.n	8007d8c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d024      	beq.n	8007d8c <osMessageQueueGet+0xac>
 8007d42:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <osMessageQueueGet+0xb8>)
 8007d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	e01b      	b.n	8007d8c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <osMessageQueueGet+0x80>
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007d60:	f06f 0303 	mvn.w	r3, #3
 8007d64:	61fb      	str	r3, [r7, #28]
 8007d66:	e011      	b.n	8007d8c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	68b9      	ldr	r1, [r7, #8]
 8007d6c:	69b8      	ldr	r0, [r7, #24]
 8007d6e:	f000 fbd5 	bl	800851c <xQueueReceive>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d009      	beq.n	8007d8c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007d7e:	f06f 0301 	mvn.w	r3, #1
 8007d82:	61fb      	str	r3, [r7, #28]
 8007d84:	e002      	b.n	8007d8c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007d86:	f06f 0302 	mvn.w	r3, #2
 8007d8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007d8c:	69fb      	ldr	r3, [r7, #28]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3720      	adds	r7, #32
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	e000ed04 	.word	0xe000ed04

08007d9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4a07      	ldr	r2, [pc, #28]	; (8007dc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007dac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4a06      	ldr	r2, [pc, #24]	; (8007dcc <vApplicationGetIdleTaskMemory+0x30>)
 8007db2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2280      	movs	r2, #128	; 0x80
 8007db8:	601a      	str	r2, [r3, #0]
}
 8007dba:	bf00      	nop
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	200000b8 	.word	0x200000b8
 8007dcc:	20000114 	.word	0x20000114

08007dd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a07      	ldr	r2, [pc, #28]	; (8007dfc <vApplicationGetTimerTaskMemory+0x2c>)
 8007de0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	4a06      	ldr	r2, [pc, #24]	; (8007e00 <vApplicationGetTimerTaskMemory+0x30>)
 8007de6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dee:	601a      	str	r2, [r3, #0]
}
 8007df0:	bf00      	nop
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	20000314 	.word	0x20000314
 8007e00:	20000370 	.word	0x20000370

08007e04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f103 0208 	add.w	r2, r3, #8
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f103 0208 	add.w	r2, r3, #8
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f103 0208 	add.w	r2, r3, #8
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b085      	sub	sp, #20
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	601a      	str	r2, [r3, #0]
}
 8007e9a:	bf00      	nop
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ebc:	d103      	bne.n	8007ec6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	e00c      	b.n	8007ee0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	e002      	b.n	8007ed4 <vListInsert+0x2e>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d2f6      	bcs.n	8007ece <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	601a      	str	r2, [r3, #0]
}
 8007f0c:	bf00      	nop
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6892      	ldr	r2, [r2, #8]
 8007f2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	6852      	ldr	r2, [r2, #4]
 8007f38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d103      	bne.n	8007f4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	1e5a      	subs	r2, r3, #1
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f96:	f002 f905 	bl	800a1a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa2:	68f9      	ldr	r1, [r7, #12]
 8007fa4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fa6:	fb01 f303 	mul.w	r3, r1, r3
 8007faa:	441a      	add	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	68f9      	ldr	r1, [r7, #12]
 8007fca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fcc:	fb01 f303 	mul.w	r3, r1, r3
 8007fd0:	441a      	add	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	22ff      	movs	r2, #255	; 0xff
 8007fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	22ff      	movs	r2, #255	; 0xff
 8007fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d114      	bne.n	8008016 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01a      	beq.n	800802a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3310      	adds	r3, #16
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f001 f9bd 	bl	8009378 <xTaskRemoveFromEventList>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d012      	beq.n	800802a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008004:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <xQueueGenericReset+0xcc>)
 8008006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	e009      	b.n	800802a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3310      	adds	r3, #16
 800801a:	4618      	mov	r0, r3
 800801c:	f7ff fef2 	bl	8007e04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3324      	adds	r3, #36	; 0x24
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff feed 	bl	8007e04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800802a:	f002 f8eb 	bl	800a204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800802e:	2301      	movs	r3, #1
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800803c:	b580      	push	{r7, lr}
 800803e:	b08e      	sub	sp, #56	; 0x38
 8008040:	af02      	add	r7, sp, #8
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10a      	bne.n	8008066 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <xQueueGenericCreateStatic+0x52>
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <xQueueGenericCreateStatic+0x56>
 800808e:	2301      	movs	r3, #1
 8008090:	e000      	b.n	8008094 <xQueueGenericCreateStatic+0x58>
 8008092:	2300      	movs	r3, #0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10a      	bne.n	80080ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	623b      	str	r3, [r7, #32]
}
 80080aa:	bf00      	nop
 80080ac:	e7fe      	b.n	80080ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d102      	bne.n	80080ba <xQueueGenericCreateStatic+0x7e>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <xQueueGenericCreateStatic+0x82>
 80080ba:	2301      	movs	r3, #1
 80080bc:	e000      	b.n	80080c0 <xQueueGenericCreateStatic+0x84>
 80080be:	2300      	movs	r3, #0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	61fb      	str	r3, [r7, #28]
}
 80080d6:	bf00      	nop
 80080d8:	e7fe      	b.n	80080d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080da:	2350      	movs	r3, #80	; 0x50
 80080dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2b50      	cmp	r3, #80	; 0x50
 80080e2:	d00a      	beq.n	80080fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	61bb      	str	r3, [r7, #24]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00d      	beq.n	8008122 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800810e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	4613      	mov	r3, r2
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	68b9      	ldr	r1, [r7, #8]
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 f83f 	bl	80081a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008124:	4618      	mov	r0, r3
 8008126:	3730      	adds	r7, #48	; 0x30
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08a      	sub	sp, #40	; 0x28
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4613      	mov	r3, r2
 8008138:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	613b      	str	r3, [r7, #16]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	fb02 f303 	mul.w	r3, r2, r3
 800815e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	3350      	adds	r3, #80	; 0x50
 8008164:	4618      	mov	r0, r3
 8008166:	f002 f93f 	bl	800a3e8 <pvPortMalloc>
 800816a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d011      	beq.n	8008196 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	3350      	adds	r3, #80	; 0x50
 800817a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008184:	79fa      	ldrb	r2, [r7, #7]
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	4613      	mov	r3, r2
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f805 	bl	80081a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008196:	69bb      	ldr	r3, [r7, #24]
	}
 8008198:	4618      	mov	r0, r3
 800819a:	3720      	adds	r7, #32
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d103      	bne.n	80081bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	69ba      	ldr	r2, [r7, #24]
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	e002      	b.n	80081c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081ce:	2101      	movs	r1, #1
 80081d0:	69b8      	ldr	r0, [r7, #24]
 80081d2:	f7ff fecb 	bl	8007f6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	78fa      	ldrb	r2, [r7, #3]
 80081da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081de:	bf00      	nop
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
	...

080081e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08e      	sub	sp, #56	; 0x38
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081f6:	2300      	movs	r3, #0
 80081f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueGenericSend+0x32>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d103      	bne.n	8008228 <xQueueGenericSend+0x40>
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <xQueueGenericSend+0x44>
 8008228:	2301      	movs	r3, #1
 800822a:	e000      	b.n	800822e <xQueueGenericSend+0x46>
 800822c:	2300      	movs	r3, #0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <xQueueGenericSend+0x60>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008244:	bf00      	nop
 8008246:	e7fe      	b.n	8008246 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d103      	bne.n	8008256 <xQueueGenericSend+0x6e>
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008252:	2b01      	cmp	r3, #1
 8008254:	d101      	bne.n	800825a <xQueueGenericSend+0x72>
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <xQueueGenericSend+0x74>
 800825a:	2300      	movs	r3, #0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10a      	bne.n	8008276 <xQueueGenericSend+0x8e>
	__asm volatile
 8008260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	623b      	str	r3, [r7, #32]
}
 8008272:	bf00      	nop
 8008274:	e7fe      	b.n	8008274 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008276:	f001 fa3d 	bl	80096f4 <xTaskGetSchedulerState>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <xQueueGenericSend+0x9e>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <xQueueGenericSend+0xa2>
 8008286:	2301      	movs	r3, #1
 8008288:	e000      	b.n	800828c <xQueueGenericSend+0xa4>
 800828a:	2300      	movs	r3, #0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	61fb      	str	r3, [r7, #28]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082a6:	f001 ff7d 	bl	800a1a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d302      	bcc.n	80082bc <xQueueGenericSend+0xd4>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d129      	bne.n	8008310 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	68b9      	ldr	r1, [r7, #8]
 80082c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082c2:	f000 fa8b 	bl	80087dc <prvCopyDataToQueue>
 80082c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d010      	beq.n	80082f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	3324      	adds	r3, #36	; 0x24
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 f84f 	bl	8009378 <xTaskRemoveFromEventList>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d013      	beq.n	8008308 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082e0:	4b3f      	ldr	r3, [pc, #252]	; (80083e0 <xQueueGenericSend+0x1f8>)
 80082e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	e00a      	b.n	8008308 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d007      	beq.n	8008308 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082f8:	4b39      	ldr	r3, [pc, #228]	; (80083e0 <xQueueGenericSend+0x1f8>)
 80082fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008308:	f001 ff7c 	bl	800a204 <vPortExitCritical>
				return pdPASS;
 800830c:	2301      	movs	r3, #1
 800830e:	e063      	b.n	80083d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008316:	f001 ff75 	bl	800a204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800831a:	2300      	movs	r3, #0
 800831c:	e05c      	b.n	80083d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008320:	2b00      	cmp	r3, #0
 8008322:	d106      	bne.n	8008332 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	4618      	mov	r0, r3
 800832a:	f001 f889 	bl	8009440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800832e:	2301      	movs	r3, #1
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008332:	f001 ff67 	bl	800a204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008336:	f000 fdfb 	bl	8008f30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800833a:	f001 ff33 	bl	800a1a4 <vPortEnterCritical>
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008344:	b25b      	sxtb	r3, r3
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800834a:	d103      	bne.n	8008354 <xQueueGenericSend+0x16c>
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800835a:	b25b      	sxtb	r3, r3
 800835c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008360:	d103      	bne.n	800836a <xQueueGenericSend+0x182>
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800836a:	f001 ff4b 	bl	800a204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800836e:	1d3a      	adds	r2, r7, #4
 8008370:	f107 0314 	add.w	r3, r7, #20
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f001 f878 	bl	800946c <xTaskCheckForTimeOut>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d124      	bne.n	80083cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008384:	f000 fb22 	bl	80089cc <prvIsQueueFull>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d018      	beq.n	80083c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	3310      	adds	r3, #16
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	4611      	mov	r1, r2
 8008396:	4618      	mov	r0, r3
 8008398:	f000 ff9e 	bl	80092d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800839c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800839e:	f000 faad 	bl	80088fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083a2:	f000 fdd3 	bl	8008f4c <xTaskResumeAll>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f47f af7c 	bne.w	80082a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80083ae:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <xQueueGenericSend+0x1f8>)
 80083b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	e772      	b.n	80082a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083c2:	f000 fa9b 	bl	80088fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083c6:	f000 fdc1 	bl	8008f4c <xTaskResumeAll>
 80083ca:	e76c      	b.n	80082a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ce:	f000 fa95 	bl	80088fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083d2:	f000 fdbb 	bl	8008f4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3738      	adds	r7, #56	; 0x38
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b090      	sub	sp, #64	; 0x40
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d103      	bne.n	8008420 <xQueueGenericSendFromISR+0x3c>
 8008418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <xQueueGenericSendFromISR+0x40>
 8008420:	2301      	movs	r3, #1
 8008422:	e000      	b.n	8008426 <xQueueGenericSendFromISR+0x42>
 8008424:	2300      	movs	r3, #0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10a      	bne.n	8008440 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800843c:	bf00      	nop
 800843e:	e7fe      	b.n	800843e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d103      	bne.n	800844e <xQueueGenericSendFromISR+0x6a>
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844a:	2b01      	cmp	r3, #1
 800844c:	d101      	bne.n	8008452 <xQueueGenericSendFromISR+0x6e>
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <xQueueGenericSendFromISR+0x70>
 8008452:	2300      	movs	r3, #0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10a      	bne.n	800846e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	623b      	str	r3, [r7, #32]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800846e:	f001 ff7b 	bl	800a368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008472:	f3ef 8211 	mrs	r2, BASEPRI
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	61fa      	str	r2, [r7, #28]
 8008488:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800848a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008496:	429a      	cmp	r2, r3
 8008498:	d302      	bcc.n	80084a0 <xQueueGenericSendFromISR+0xbc>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b02      	cmp	r3, #2
 800849e:	d12f      	bne.n	8008500 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084b6:	f000 f991 	bl	80087dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80084be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084c2:	d112      	bne.n	80084ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d016      	beq.n	80084fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	3324      	adds	r3, #36	; 0x24
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 ff51 	bl	8009378 <xTaskRemoveFromEventList>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00e      	beq.n	80084fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00b      	beq.n	80084fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	e007      	b.n	80084fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084ee:	3301      	adds	r3, #1
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	b25a      	sxtb	r2, r3
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084fa:	2301      	movs	r3, #1
 80084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80084fe:	e001      	b.n	8008504 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008500:	2300      	movs	r3, #0
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008506:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800850e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008512:	4618      	mov	r0, r3
 8008514:	3740      	adds	r7, #64	; 0x40
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08c      	sub	sp, #48	; 0x30
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008528:	2300      	movs	r3, #0
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10a      	bne.n	800854c <xQueueReceive+0x30>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	623b      	str	r3, [r7, #32]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d103      	bne.n	800855a <xQueueReceive+0x3e>
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <xQueueReceive+0x42>
 800855a:	2301      	movs	r3, #1
 800855c:	e000      	b.n	8008560 <xQueueReceive+0x44>
 800855e:	2300      	movs	r3, #0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10a      	bne.n	800857a <xQueueReceive+0x5e>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	61fb      	str	r3, [r7, #28]
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800857a:	f001 f8bb 	bl	80096f4 <xTaskGetSchedulerState>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d102      	bne.n	800858a <xQueueReceive+0x6e>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <xQueueReceive+0x72>
 800858a:	2301      	movs	r3, #1
 800858c:	e000      	b.n	8008590 <xQueueReceive+0x74>
 800858e:	2300      	movs	r3, #0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <xQueueReceive+0x8e>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	61bb      	str	r3, [r7, #24]
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085aa:	f001 fdfb 	bl	800a1a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d01f      	beq.n	80085fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085ba:	68b9      	ldr	r1, [r7, #8]
 80085bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085be:	f000 f977 	bl	80088b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	1e5a      	subs	r2, r3, #1
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00f      	beq.n	80085f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d4:	3310      	adds	r3, #16
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 fece 	bl	8009378 <xTaskRemoveFromEventList>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d007      	beq.n	80085f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085e2:	4b3d      	ldr	r3, [pc, #244]	; (80086d8 <xQueueReceive+0x1bc>)
 80085e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085f2:	f001 fe07 	bl	800a204 <vPortExitCritical>
				return pdPASS;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e069      	b.n	80086ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d103      	bne.n	8008608 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008600:	f001 fe00 	bl	800a204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008604:	2300      	movs	r3, #0
 8008606:	e062      	b.n	80086ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800860e:	f107 0310 	add.w	r3, r7, #16
 8008612:	4618      	mov	r0, r3
 8008614:	f000 ff14 	bl	8009440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800861c:	f001 fdf2 	bl	800a204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008620:	f000 fc86 	bl	8008f30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008624:	f001 fdbe 	bl	800a1a4 <vPortEnterCritical>
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800862e:	b25b      	sxtb	r3, r3
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008634:	d103      	bne.n	800863e <xQueueReceive+0x122>
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800863e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008644:	b25b      	sxtb	r3, r3
 8008646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800864a:	d103      	bne.n	8008654 <xQueueReceive+0x138>
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008654:	f001 fdd6 	bl	800a204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008658:	1d3a      	adds	r2, r7, #4
 800865a:	f107 0310 	add.w	r3, r7, #16
 800865e:	4611      	mov	r1, r2
 8008660:	4618      	mov	r0, r3
 8008662:	f000 ff03 	bl	800946c <xTaskCheckForTimeOut>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d123      	bne.n	80086b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800866c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800866e:	f000 f997 	bl	80089a0 <prvIsQueueEmpty>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d017      	beq.n	80086a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	3324      	adds	r3, #36	; 0x24
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	4611      	mov	r1, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fe29 	bl	80092d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008688:	f000 f938 	bl	80088fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800868c:	f000 fc5e 	bl	8008f4c <xTaskResumeAll>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d189      	bne.n	80085aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008696:	4b10      	ldr	r3, [pc, #64]	; (80086d8 <xQueueReceive+0x1bc>)
 8008698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	e780      	b.n	80085aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80086a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086aa:	f000 f927 	bl	80088fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086ae:	f000 fc4d 	bl	8008f4c <xTaskResumeAll>
 80086b2:	e77a      	b.n	80085aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086b6:	f000 f921 	bl	80088fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086ba:	f000 fc47 	bl	8008f4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086c0:	f000 f96e 	bl	80089a0 <prvIsQueueEmpty>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f43f af6f 	beq.w	80085aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3730      	adds	r7, #48	; 0x30
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	e000ed04 	.word	0xe000ed04

080086dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08e      	sub	sp, #56	; 0x38
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	623b      	str	r3, [r7, #32]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d103      	bne.n	8008716 <xQueueReceiveFromISR+0x3a>
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <xQueueReceiveFromISR+0x3e>
 8008716:	2301      	movs	r3, #1
 8008718:	e000      	b.n	800871c <xQueueReceiveFromISR+0x40>
 800871a:	2300      	movs	r3, #0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	61fb      	str	r3, [r7, #28]
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008736:	f001 fe17 	bl	800a368 <vPortValidateInterruptPriority>
	__asm volatile
 800873a:	f3ef 8211 	mrs	r2, BASEPRI
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	61ba      	str	r2, [r7, #24]
 8008750:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008752:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	2b00      	cmp	r3, #0
 8008760:	d02f      	beq.n	80087c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008770:	f000 f89e 	bl	80088b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	1e5a      	subs	r2, r3, #1
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800877c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008784:	d112      	bne.n	80087ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d016      	beq.n	80087bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	3310      	adds	r3, #16
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fdf0 	bl	8009378 <xTaskRemoveFromEventList>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00e      	beq.n	80087bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	e007      	b.n	80087bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80087ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087b0:	3301      	adds	r3, #1
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	b25a      	sxtb	r2, r3
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80087bc:	2301      	movs	r3, #1
 80087be:	637b      	str	r3, [r7, #52]	; 0x34
 80087c0:	e001      	b.n	80087c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	637b      	str	r3, [r7, #52]	; 0x34
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f383 8811 	msr	BASEPRI, r3
}
 80087d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3738      	adds	r7, #56	; 0x38
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087e8:	2300      	movs	r3, #0
 80087ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10d      	bne.n	8008816 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d14d      	bne.n	800889e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 ff92 	bl	8009730 <xTaskPriorityDisinherit>
 800880c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	609a      	str	r2, [r3, #8]
 8008814:	e043      	b.n	800889e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d119      	bne.n	8008850 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6858      	ldr	r0, [r3, #4]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008824:	461a      	mov	r2, r3
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	f002 fb04 	bl	800ae34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008834:	441a      	add	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	429a      	cmp	r2, r3
 8008844:	d32b      	bcc.n	800889e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	605a      	str	r2, [r3, #4]
 800884e:	e026      	b.n	800889e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	68d8      	ldr	r0, [r3, #12]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008858:	461a      	mov	r2, r3
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	f002 faea 	bl	800ae34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	68da      	ldr	r2, [r3, #12]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008868:	425b      	negs	r3, r3
 800886a:	441a      	add	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	68da      	ldr	r2, [r3, #12]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d207      	bcs.n	800888c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	689a      	ldr	r2, [r3, #8]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008884:	425b      	negs	r3, r3
 8008886:	441a      	add	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d105      	bne.n	800889e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	3b01      	subs	r3, #1
 800889c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80088a6:	697b      	ldr	r3, [r7, #20]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3718      	adds	r7, #24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d018      	beq.n	80088f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ca:	441a      	add	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d303      	bcc.n	80088e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68d9      	ldr	r1, [r3, #12]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	461a      	mov	r2, r3
 80088ee:	6838      	ldr	r0, [r7, #0]
 80088f0:	f002 faa0 	bl	800ae34 <memcpy>
	}
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008904:	f001 fc4e 	bl	800a1a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800890e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008910:	e011      	b.n	8008936 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	2b00      	cmp	r3, #0
 8008918:	d012      	beq.n	8008940 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3324      	adds	r3, #36	; 0x24
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fd2a 	bl	8009378 <xTaskRemoveFromEventList>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800892a:	f000 fe01 	bl	8009530 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	3b01      	subs	r3, #1
 8008932:	b2db      	uxtb	r3, r3
 8008934:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800893a:	2b00      	cmp	r3, #0
 800893c:	dce9      	bgt.n	8008912 <prvUnlockQueue+0x16>
 800893e:	e000      	b.n	8008942 <prvUnlockQueue+0x46>
					break;
 8008940:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	22ff      	movs	r2, #255	; 0xff
 8008946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800894a:	f001 fc5b 	bl	800a204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800894e:	f001 fc29 	bl	800a1a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008958:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800895a:	e011      	b.n	8008980 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d012      	beq.n	800898a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3310      	adds	r3, #16
 8008968:	4618      	mov	r0, r3
 800896a:	f000 fd05 	bl	8009378 <xTaskRemoveFromEventList>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008974:	f000 fddc 	bl	8009530 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	3b01      	subs	r3, #1
 800897c:	b2db      	uxtb	r3, r3
 800897e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008984:	2b00      	cmp	r3, #0
 8008986:	dce9      	bgt.n	800895c <prvUnlockQueue+0x60>
 8008988:	e000      	b.n	800898c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800898a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	22ff      	movs	r2, #255	; 0xff
 8008990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008994:	f001 fc36 	bl	800a204 <vPortExitCritical>
}
 8008998:	bf00      	nop
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089a8:	f001 fbfc 	bl	800a1a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d102      	bne.n	80089ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089b4:	2301      	movs	r3, #1
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e001      	b.n	80089be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80089ba:	2300      	movs	r3, #0
 80089bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089be:	f001 fc21 	bl	800a204 <vPortExitCritical>

	return xReturn;
 80089c2:	68fb      	ldr	r3, [r7, #12]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089d4:	f001 fbe6 	bl	800a1a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d102      	bne.n	80089ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089e4:	2301      	movs	r3, #1
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	e001      	b.n	80089ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089ee:	f001 fc09 	bl	800a204 <vPortExitCritical>

	return xReturn;
 80089f2:	68fb      	ldr	r3, [r7, #12]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	e014      	b.n	8008a36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a0c:	4a0f      	ldr	r2, [pc, #60]	; (8008a4c <vQueueAddToRegistry+0x50>)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10b      	bne.n	8008a30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a18:	490c      	ldr	r1, [pc, #48]	; (8008a4c <vQueueAddToRegistry+0x50>)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a22:	4a0a      	ldr	r2, [pc, #40]	; (8008a4c <vQueueAddToRegistry+0x50>)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	00db      	lsls	r3, r3, #3
 8008a28:	4413      	add	r3, r2
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a2e:	e006      	b.n	8008a3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3301      	adds	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b07      	cmp	r3, #7
 8008a3a:	d9e7      	bls.n	8008a0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a3c:	bf00      	nop
 8008a3e:	bf00      	nop
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	20004af4 	.word	0x20004af4

08008a50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a60:	f001 fba0 	bl	800a1a4 <vPortEnterCritical>
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a6a:	b25b      	sxtb	r3, r3
 8008a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a70:	d103      	bne.n	8008a7a <vQueueWaitForMessageRestricted+0x2a>
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a80:	b25b      	sxtb	r3, r3
 8008a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a86:	d103      	bne.n	8008a90 <vQueueWaitForMessageRestricted+0x40>
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a90:	f001 fbb8 	bl	800a204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d106      	bne.n	8008aaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	3324      	adds	r3, #36	; 0x24
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	68b9      	ldr	r1, [r7, #8]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fc3b 	bl	8009320 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008aaa:	6978      	ldr	r0, [r7, #20]
 8008aac:	f7ff ff26 	bl	80088fc <prvUnlockQueue>
	}
 8008ab0:	bf00      	nop
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08e      	sub	sp, #56	; 0x38
 8008abc:	af04      	add	r7, sp, #16
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	623b      	str	r3, [r7, #32]
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10a      	bne.n	8008afe <xTaskCreateStatic+0x46>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	61fb      	str	r3, [r7, #28]
}
 8008afa:	bf00      	nop
 8008afc:	e7fe      	b.n	8008afc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008afe:	235c      	movs	r3, #92	; 0x5c
 8008b00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	2b5c      	cmp	r3, #92	; 0x5c
 8008b06:	d00a      	beq.n	8008b1e <xTaskCreateStatic+0x66>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	61bb      	str	r3, [r7, #24]
}
 8008b1a:	bf00      	nop
 8008b1c:	e7fe      	b.n	8008b1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d01e      	beq.n	8008b64 <xTaskCreateStatic+0xac>
 8008b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01b      	beq.n	8008b64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	2202      	movs	r2, #2
 8008b3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b3e:	2300      	movs	r3, #0
 8008b40:	9303      	str	r3, [sp, #12]
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	9302      	str	r3, [sp, #8]
 8008b46:	f107 0314 	add.w	r3, r7, #20
 8008b4a:	9301      	str	r3, [sp, #4]
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	68b9      	ldr	r1, [r7, #8]
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 f850 	bl	8008bfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b5e:	f000 f8dd 	bl	8008d1c <prvAddNewTaskToReadyList>
 8008b62:	e001      	b.n	8008b68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008b64:	2300      	movs	r3, #0
 8008b66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b68:	697b      	ldr	r3, [r7, #20]
	}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3728      	adds	r7, #40	; 0x28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b08c      	sub	sp, #48	; 0x30
 8008b76:	af04      	add	r7, sp, #16
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	603b      	str	r3, [r7, #0]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b82:	88fb      	ldrh	r3, [r7, #6]
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 fc2e 	bl	800a3e8 <pvPortMalloc>
 8008b8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00e      	beq.n	8008bb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b94:	205c      	movs	r0, #92	; 0x5c
 8008b96:	f001 fc27 	bl	800a3e8 <pvPortMalloc>
 8008b9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	631a      	str	r2, [r3, #48]	; 0x30
 8008ba8:	e005      	b.n	8008bb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008baa:	6978      	ldr	r0, [r7, #20]
 8008bac:	f001 fce8 	bl	800a580 <vPortFree>
 8008bb0:	e001      	b.n	8008bb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d017      	beq.n	8008bec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008bc4:	88fa      	ldrh	r2, [r7, #6]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	9303      	str	r3, [sp, #12]
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	9302      	str	r3, [sp, #8]
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	68b9      	ldr	r1, [r7, #8]
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 f80e 	bl	8008bfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008be0:	69f8      	ldr	r0, [r7, #28]
 8008be2:	f000 f89b 	bl	8008d1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008be6:	2301      	movs	r3, #1
 8008be8:	61bb      	str	r3, [r7, #24]
 8008bea:	e002      	b.n	8008bf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bf2:	69bb      	ldr	r3, [r7, #24]
	}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3720      	adds	r7, #32
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	461a      	mov	r2, r3
 8008c14:	21a5      	movs	r1, #165	; 0xa5
 8008c16:	f002 f91b 	bl	800ae50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c24:	3b01      	subs	r3, #1
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	f023 0307 	bic.w	r3, r3, #7
 8008c32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	f003 0307 	and.w	r3, r3, #7
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00a      	beq.n	8008c54 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	617b      	str	r3, [r7, #20]
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01f      	beq.n	8008c9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61fb      	str	r3, [r7, #28]
 8008c5e:	e012      	b.n	8008c86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	4413      	add	r3, r2
 8008c66:	7819      	ldrb	r1, [r3, #0]
 8008c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	3334      	adds	r3, #52	; 0x34
 8008c70:	460a      	mov	r2, r1
 8008c72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	4413      	add	r3, r2
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d006      	beq.n	8008c8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	3301      	adds	r3, #1
 8008c84:	61fb      	str	r3, [r7, #28]
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	2b0f      	cmp	r3, #15
 8008c8a:	d9e9      	bls.n	8008c60 <prvInitialiseNewTask+0x64>
 8008c8c:	e000      	b.n	8008c90 <prvInitialiseNewTask+0x94>
			{
				break;
 8008c8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c98:	e003      	b.n	8008ca2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	2b37      	cmp	r3, #55	; 0x37
 8008ca6:	d901      	bls.n	8008cac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ca8:	2337      	movs	r3, #55	; 0x37
 8008caa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cba:	2200      	movs	r2, #0
 8008cbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff f8be 	bl	8007e44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cca:	3318      	adds	r3, #24
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff f8b9 	bl	8007e44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	2200      	movs	r2, #0
 8008cec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	68f9      	ldr	r1, [r7, #12]
 8008cfa:	69b8      	ldr	r0, [r7, #24]
 8008cfc:	f001 f928 	bl	8009f50 <pxPortInitialiseStack>
 8008d00:	4602      	mov	r2, r0
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d12:	bf00      	nop
 8008d14:	3720      	adds	r7, #32
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d24:	f001 fa3e 	bl	800a1a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d28:	4b2d      	ldr	r3, [pc, #180]	; (8008de0 <prvAddNewTaskToReadyList+0xc4>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	4a2c      	ldr	r2, [pc, #176]	; (8008de0 <prvAddNewTaskToReadyList+0xc4>)
 8008d30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d32:	4b2c      	ldr	r3, [pc, #176]	; (8008de4 <prvAddNewTaskToReadyList+0xc8>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d109      	bne.n	8008d4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d3a:	4a2a      	ldr	r2, [pc, #168]	; (8008de4 <prvAddNewTaskToReadyList+0xc8>)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d40:	4b27      	ldr	r3, [pc, #156]	; (8008de0 <prvAddNewTaskToReadyList+0xc4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d110      	bne.n	8008d6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d48:	f000 fc16 	bl	8009578 <prvInitialiseTaskLists>
 8008d4c:	e00d      	b.n	8008d6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d4e:	4b26      	ldr	r3, [pc, #152]	; (8008de8 <prvAddNewTaskToReadyList+0xcc>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d109      	bne.n	8008d6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d56:	4b23      	ldr	r3, [pc, #140]	; (8008de4 <prvAddNewTaskToReadyList+0xc8>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d802      	bhi.n	8008d6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d64:	4a1f      	ldr	r2, [pc, #124]	; (8008de4 <prvAddNewTaskToReadyList+0xc8>)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d6a:	4b20      	ldr	r3, [pc, #128]	; (8008dec <prvAddNewTaskToReadyList+0xd0>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	4a1e      	ldr	r2, [pc, #120]	; (8008dec <prvAddNewTaskToReadyList+0xd0>)
 8008d72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d74:	4b1d      	ldr	r3, [pc, #116]	; (8008dec <prvAddNewTaskToReadyList+0xd0>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d80:	4b1b      	ldr	r3, [pc, #108]	; (8008df0 <prvAddNewTaskToReadyList+0xd4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d903      	bls.n	8008d90 <prvAddNewTaskToReadyList+0x74>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	4a18      	ldr	r2, [pc, #96]	; (8008df0 <prvAddNewTaskToReadyList+0xd4>)
 8008d8e:	6013      	str	r3, [r2, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d94:	4613      	mov	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4a15      	ldr	r2, [pc, #84]	; (8008df4 <prvAddNewTaskToReadyList+0xd8>)
 8008d9e:	441a      	add	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3304      	adds	r3, #4
 8008da4:	4619      	mov	r1, r3
 8008da6:	4610      	mov	r0, r2
 8008da8:	f7ff f859 	bl	8007e5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008dac:	f001 fa2a 	bl	800a204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008db0:	4b0d      	ldr	r3, [pc, #52]	; (8008de8 <prvAddNewTaskToReadyList+0xcc>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00e      	beq.n	8008dd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008db8:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <prvAddNewTaskToReadyList+0xc8>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d207      	bcs.n	8008dd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <prvAddNewTaskToReadyList+0xdc>)
 8008dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000c44 	.word	0x20000c44
 8008de4:	20000770 	.word	0x20000770
 8008de8:	20000c50 	.word	0x20000c50
 8008dec:	20000c60 	.word	0x20000c60
 8008df0:	20000c4c 	.word	0x20000c4c
 8008df4:	20000774 	.word	0x20000774
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d017      	beq.n	8008e3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e0e:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <vTaskDelay+0x60>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00a      	beq.n	8008e2c <vTaskDelay+0x30>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	60bb      	str	r3, [r7, #8]
}
 8008e28:	bf00      	nop
 8008e2a:	e7fe      	b.n	8008e2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e2c:	f000 f880 	bl	8008f30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e30:	2100      	movs	r1, #0
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fcea 	bl	800980c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e38:	f000 f888 	bl	8008f4c <xTaskResumeAll>
 8008e3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d107      	bne.n	8008e54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008e44:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <vTaskDelay+0x64>)
 8008e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e54:	bf00      	nop
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	20000c6c 	.word	0x20000c6c
 8008e60:	e000ed04 	.word	0xe000ed04

08008e64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08a      	sub	sp, #40	; 0x28
 8008e68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e72:	463a      	mov	r2, r7
 8008e74:	1d39      	adds	r1, r7, #4
 8008e76:	f107 0308 	add.w	r3, r7, #8
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe ff8e 	bl	8007d9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	9202      	str	r2, [sp, #8]
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	460a      	mov	r2, r1
 8008e92:	4921      	ldr	r1, [pc, #132]	; (8008f18 <vTaskStartScheduler+0xb4>)
 8008e94:	4821      	ldr	r0, [pc, #132]	; (8008f1c <vTaskStartScheduler+0xb8>)
 8008e96:	f7ff fe0f 	bl	8008ab8 <xTaskCreateStatic>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	4a20      	ldr	r2, [pc, #128]	; (8008f20 <vTaskStartScheduler+0xbc>)
 8008e9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ea0:	4b1f      	ldr	r3, [pc, #124]	; (8008f20 <vTaskStartScheduler+0xbc>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	617b      	str	r3, [r7, #20]
 8008eac:	e001      	b.n	8008eb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d102      	bne.n	8008ebe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008eb8:	f000 fcfc 	bl	80098b4 <xTimerCreateTimerTask>
 8008ebc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d116      	bne.n	8008ef2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	613b      	str	r3, [r7, #16]
}
 8008ed6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ed8:	4b12      	ldr	r3, [pc, #72]	; (8008f24 <vTaskStartScheduler+0xc0>)
 8008eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ede:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ee0:	4b11      	ldr	r3, [pc, #68]	; (8008f28 <vTaskStartScheduler+0xc4>)
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ee6:	4b11      	ldr	r3, [pc, #68]	; (8008f2c <vTaskStartScheduler+0xc8>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008eec:	f001 f8b8 	bl	800a060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ef0:	e00e      	b.n	8008f10 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef8:	d10a      	bne.n	8008f10 <vTaskStartScheduler+0xac>
	__asm volatile
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	60fb      	str	r3, [r7, #12]
}
 8008f0c:	bf00      	nop
 8008f0e:	e7fe      	b.n	8008f0e <vTaskStartScheduler+0xaa>
}
 8008f10:	bf00      	nop
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	0800b030 	.word	0x0800b030
 8008f1c:	08009549 	.word	0x08009549
 8008f20:	20000c68 	.word	0x20000c68
 8008f24:	20000c64 	.word	0x20000c64
 8008f28:	20000c50 	.word	0x20000c50
 8008f2c:	20000c48 	.word	0x20000c48

08008f30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f34:	4b04      	ldr	r3, [pc, #16]	; (8008f48 <vTaskSuspendAll+0x18>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	4a03      	ldr	r2, [pc, #12]	; (8008f48 <vTaskSuspendAll+0x18>)
 8008f3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f3e:	bf00      	nop
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	20000c6c 	.word	0x20000c6c

08008f4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f5a:	4b42      	ldr	r3, [pc, #264]	; (8009064 <xTaskResumeAll+0x118>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10a      	bne.n	8008f78 <xTaskResumeAll+0x2c>
	__asm volatile
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	603b      	str	r3, [r7, #0]
}
 8008f74:	bf00      	nop
 8008f76:	e7fe      	b.n	8008f76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f78:	f001 f914 	bl	800a1a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f7c:	4b39      	ldr	r3, [pc, #228]	; (8009064 <xTaskResumeAll+0x118>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3b01      	subs	r3, #1
 8008f82:	4a38      	ldr	r2, [pc, #224]	; (8009064 <xTaskResumeAll+0x118>)
 8008f84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f86:	4b37      	ldr	r3, [pc, #220]	; (8009064 <xTaskResumeAll+0x118>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d162      	bne.n	8009054 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f8e:	4b36      	ldr	r3, [pc, #216]	; (8009068 <xTaskResumeAll+0x11c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d05e      	beq.n	8009054 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f96:	e02f      	b.n	8008ff8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f98:	4b34      	ldr	r3, [pc, #208]	; (800906c <xTaskResumeAll+0x120>)
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3318      	adds	r3, #24
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe ffb7 	bl	8007f18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3304      	adds	r3, #4
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe ffb2 	bl	8007f18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb8:	4b2d      	ldr	r3, [pc, #180]	; (8009070 <xTaskResumeAll+0x124>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d903      	bls.n	8008fc8 <xTaskResumeAll+0x7c>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	4a2a      	ldr	r2, [pc, #168]	; (8009070 <xTaskResumeAll+0x124>)
 8008fc6:	6013      	str	r3, [r2, #0]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fcc:	4613      	mov	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4a27      	ldr	r2, [pc, #156]	; (8009074 <xTaskResumeAll+0x128>)
 8008fd6:	441a      	add	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3304      	adds	r3, #4
 8008fdc:	4619      	mov	r1, r3
 8008fde:	4610      	mov	r0, r2
 8008fe0:	f7fe ff3d 	bl	8007e5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	4b23      	ldr	r3, [pc, #140]	; (8009078 <xTaskResumeAll+0x12c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d302      	bcc.n	8008ff8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008ff2:	4b22      	ldr	r3, [pc, #136]	; (800907c <xTaskResumeAll+0x130>)
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ff8:	4b1c      	ldr	r3, [pc, #112]	; (800906c <xTaskResumeAll+0x120>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1cb      	bne.n	8008f98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009006:	f000 fb55 	bl	80096b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800900a:	4b1d      	ldr	r3, [pc, #116]	; (8009080 <xTaskResumeAll+0x134>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d010      	beq.n	8009038 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009016:	f000 f847 	bl	80090a8 <xTaskIncrementTick>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009020:	4b16      	ldr	r3, [pc, #88]	; (800907c <xTaskResumeAll+0x130>)
 8009022:	2201      	movs	r2, #1
 8009024:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	3b01      	subs	r3, #1
 800902a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1f1      	bne.n	8009016 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009032:	4b13      	ldr	r3, [pc, #76]	; (8009080 <xTaskResumeAll+0x134>)
 8009034:	2200      	movs	r2, #0
 8009036:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009038:	4b10      	ldr	r3, [pc, #64]	; (800907c <xTaskResumeAll+0x130>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d009      	beq.n	8009054 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009040:	2301      	movs	r3, #1
 8009042:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009044:	4b0f      	ldr	r3, [pc, #60]	; (8009084 <xTaskResumeAll+0x138>)
 8009046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009054:	f001 f8d6 	bl	800a204 <vPortExitCritical>

	return xAlreadyYielded;
 8009058:	68bb      	ldr	r3, [r7, #8]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	20000c6c 	.word	0x20000c6c
 8009068:	20000c44 	.word	0x20000c44
 800906c:	20000c04 	.word	0x20000c04
 8009070:	20000c4c 	.word	0x20000c4c
 8009074:	20000774 	.word	0x20000774
 8009078:	20000770 	.word	0x20000770
 800907c:	20000c58 	.word	0x20000c58
 8009080:	20000c54 	.word	0x20000c54
 8009084:	e000ed04 	.word	0xe000ed04

08009088 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800908e:	4b05      	ldr	r3, [pc, #20]	; (80090a4 <xTaskGetTickCount+0x1c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009094:	687b      	ldr	r3, [r7, #4]
}
 8009096:	4618      	mov	r0, r3
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000c48 	.word	0x20000c48

080090a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090ae:	2300      	movs	r3, #0
 80090b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090b2:	4b4f      	ldr	r3, [pc, #316]	; (80091f0 <xTaskIncrementTick+0x148>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f040 808f 	bne.w	80091da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090bc:	4b4d      	ldr	r3, [pc, #308]	; (80091f4 <xTaskIncrementTick+0x14c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3301      	adds	r3, #1
 80090c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090c4:	4a4b      	ldr	r2, [pc, #300]	; (80091f4 <xTaskIncrementTick+0x14c>)
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d120      	bne.n	8009112 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80090d0:	4b49      	ldr	r3, [pc, #292]	; (80091f8 <xTaskIncrementTick+0x150>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	603b      	str	r3, [r7, #0]
}
 80090ec:	bf00      	nop
 80090ee:	e7fe      	b.n	80090ee <xTaskIncrementTick+0x46>
 80090f0:	4b41      	ldr	r3, [pc, #260]	; (80091f8 <xTaskIncrementTick+0x150>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	4b41      	ldr	r3, [pc, #260]	; (80091fc <xTaskIncrementTick+0x154>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a3f      	ldr	r2, [pc, #252]	; (80091f8 <xTaskIncrementTick+0x150>)
 80090fc:	6013      	str	r3, [r2, #0]
 80090fe:	4a3f      	ldr	r2, [pc, #252]	; (80091fc <xTaskIncrementTick+0x154>)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6013      	str	r3, [r2, #0]
 8009104:	4b3e      	ldr	r3, [pc, #248]	; (8009200 <xTaskIncrementTick+0x158>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3301      	adds	r3, #1
 800910a:	4a3d      	ldr	r2, [pc, #244]	; (8009200 <xTaskIncrementTick+0x158>)
 800910c:	6013      	str	r3, [r2, #0]
 800910e:	f000 fad1 	bl	80096b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009112:	4b3c      	ldr	r3, [pc, #240]	; (8009204 <xTaskIncrementTick+0x15c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	429a      	cmp	r2, r3
 800911a:	d349      	bcc.n	80091b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800911c:	4b36      	ldr	r3, [pc, #216]	; (80091f8 <xTaskIncrementTick+0x150>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d104      	bne.n	8009130 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009126:	4b37      	ldr	r3, [pc, #220]	; (8009204 <xTaskIncrementTick+0x15c>)
 8009128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800912c:	601a      	str	r2, [r3, #0]
					break;
 800912e:	e03f      	b.n	80091b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009130:	4b31      	ldr	r3, [pc, #196]	; (80091f8 <xTaskIncrementTick+0x150>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	429a      	cmp	r2, r3
 8009146:	d203      	bcs.n	8009150 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009148:	4a2e      	ldr	r2, [pc, #184]	; (8009204 <xTaskIncrementTick+0x15c>)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800914e:	e02f      	b.n	80091b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	3304      	adds	r3, #4
 8009154:	4618      	mov	r0, r3
 8009156:	f7fe fedf 	bl	8007f18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915e:	2b00      	cmp	r3, #0
 8009160:	d004      	beq.n	800916c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	3318      	adds	r3, #24
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fed6 	bl	8007f18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009170:	4b25      	ldr	r3, [pc, #148]	; (8009208 <xTaskIncrementTick+0x160>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	429a      	cmp	r2, r3
 8009176:	d903      	bls.n	8009180 <xTaskIncrementTick+0xd8>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917c:	4a22      	ldr	r2, [pc, #136]	; (8009208 <xTaskIncrementTick+0x160>)
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009184:	4613      	mov	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4a1f      	ldr	r2, [pc, #124]	; (800920c <xTaskIncrementTick+0x164>)
 800918e:	441a      	add	r2, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	3304      	adds	r3, #4
 8009194:	4619      	mov	r1, r3
 8009196:	4610      	mov	r0, r2
 8009198:	f7fe fe61 	bl	8007e5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a0:	4b1b      	ldr	r3, [pc, #108]	; (8009210 <xTaskIncrementTick+0x168>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d3b8      	bcc.n	800911c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80091aa:	2301      	movs	r3, #1
 80091ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ae:	e7b5      	b.n	800911c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091b0:	4b17      	ldr	r3, [pc, #92]	; (8009210 <xTaskIncrementTick+0x168>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b6:	4915      	ldr	r1, [pc, #84]	; (800920c <xTaskIncrementTick+0x164>)
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	440b      	add	r3, r1
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d901      	bls.n	80091cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80091c8:	2301      	movs	r3, #1
 80091ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80091cc:	4b11      	ldr	r3, [pc, #68]	; (8009214 <xTaskIncrementTick+0x16c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d007      	beq.n	80091e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80091d4:	2301      	movs	r3, #1
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	e004      	b.n	80091e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80091da:	4b0f      	ldr	r3, [pc, #60]	; (8009218 <xTaskIncrementTick+0x170>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3301      	adds	r3, #1
 80091e0:	4a0d      	ldr	r2, [pc, #52]	; (8009218 <xTaskIncrementTick+0x170>)
 80091e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80091e4:	697b      	ldr	r3, [r7, #20]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3718      	adds	r7, #24
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	20000c6c 	.word	0x20000c6c
 80091f4:	20000c48 	.word	0x20000c48
 80091f8:	20000bfc 	.word	0x20000bfc
 80091fc:	20000c00 	.word	0x20000c00
 8009200:	20000c5c 	.word	0x20000c5c
 8009204:	20000c64 	.word	0x20000c64
 8009208:	20000c4c 	.word	0x20000c4c
 800920c:	20000774 	.word	0x20000774
 8009210:	20000770 	.word	0x20000770
 8009214:	20000c58 	.word	0x20000c58
 8009218:	20000c54 	.word	0x20000c54

0800921c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009222:	4b28      	ldr	r3, [pc, #160]	; (80092c4 <vTaskSwitchContext+0xa8>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800922a:	4b27      	ldr	r3, [pc, #156]	; (80092c8 <vTaskSwitchContext+0xac>)
 800922c:	2201      	movs	r2, #1
 800922e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009230:	e041      	b.n	80092b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009232:	4b25      	ldr	r3, [pc, #148]	; (80092c8 <vTaskSwitchContext+0xac>)
 8009234:	2200      	movs	r2, #0
 8009236:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009238:	4b24      	ldr	r3, [pc, #144]	; (80092cc <vTaskSwitchContext+0xb0>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60fb      	str	r3, [r7, #12]
 800923e:	e010      	b.n	8009262 <vTaskSwitchContext+0x46>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <vTaskSwitchContext+0x40>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	607b      	str	r3, [r7, #4]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <vTaskSwitchContext+0x3e>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	3b01      	subs	r3, #1
 8009260:	60fb      	str	r3, [r7, #12]
 8009262:	491b      	ldr	r1, [pc, #108]	; (80092d0 <vTaskSwitchContext+0xb4>)
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	4613      	mov	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	440b      	add	r3, r1
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0e4      	beq.n	8009240 <vTaskSwitchContext+0x24>
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	4613      	mov	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4a13      	ldr	r2, [pc, #76]	; (80092d0 <vTaskSwitchContext+0xb4>)
 8009282:	4413      	add	r3, r2
 8009284:	60bb      	str	r3, [r7, #8]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	605a      	str	r2, [r3, #4]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	3308      	adds	r3, #8
 8009298:	429a      	cmp	r2, r3
 800929a:	d104      	bne.n	80092a6 <vTaskSwitchContext+0x8a>
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	605a      	str	r2, [r3, #4]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	4a09      	ldr	r2, [pc, #36]	; (80092d4 <vTaskSwitchContext+0xb8>)
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	4a06      	ldr	r2, [pc, #24]	; (80092cc <vTaskSwitchContext+0xb0>)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6013      	str	r3, [r2, #0]
}
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20000c6c 	.word	0x20000c6c
 80092c8:	20000c58 	.word	0x20000c58
 80092cc:	20000c4c 	.word	0x20000c4c
 80092d0:	20000774 	.word	0x20000774
 80092d4:	20000770 	.word	0x20000770

080092d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10a      	bne.n	80092fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	60fb      	str	r3, [r7, #12]
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092fe:	4b07      	ldr	r3, [pc, #28]	; (800931c <vTaskPlaceOnEventList+0x44>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3318      	adds	r3, #24
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7fe fdcd 	bl	8007ea6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800930c:	2101      	movs	r1, #1
 800930e:	6838      	ldr	r0, [r7, #0]
 8009310:	f000 fa7c 	bl	800980c <prvAddCurrentTaskToDelayedList>
}
 8009314:	bf00      	nop
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000770 	.word	0x20000770

08009320 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	617b      	str	r3, [r7, #20]
}
 8009344:	bf00      	nop
 8009346:	e7fe      	b.n	8009346 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009348:	4b0a      	ldr	r3, [pc, #40]	; (8009374 <vTaskPlaceOnEventListRestricted+0x54>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3318      	adds	r3, #24
 800934e:	4619      	mov	r1, r3
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f7fe fd84 	bl	8007e5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800935c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009360:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	68b8      	ldr	r0, [r7, #8]
 8009366:	f000 fa51 	bl	800980c <prvAddCurrentTaskToDelayedList>
	}
 800936a:	bf00      	nop
 800936c:	3718      	adds	r7, #24
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	20000770 	.word	0x20000770

08009378 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	60fb      	str	r3, [r7, #12]
}
 80093a0:	bf00      	nop
 80093a2:	e7fe      	b.n	80093a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	3318      	adds	r3, #24
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fe fdb5 	bl	8007f18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ae:	4b1e      	ldr	r3, [pc, #120]	; (8009428 <xTaskRemoveFromEventList+0xb0>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d11d      	bne.n	80093f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	3304      	adds	r3, #4
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe fdac 	bl	8007f18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c4:	4b19      	ldr	r3, [pc, #100]	; (800942c <xTaskRemoveFromEventList+0xb4>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d903      	bls.n	80093d4 <xTaskRemoveFromEventList+0x5c>
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	4a16      	ldr	r2, [pc, #88]	; (800942c <xTaskRemoveFromEventList+0xb4>)
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d8:	4613      	mov	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4a13      	ldr	r2, [pc, #76]	; (8009430 <xTaskRemoveFromEventList+0xb8>)
 80093e2:	441a      	add	r2, r3
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	3304      	adds	r3, #4
 80093e8:	4619      	mov	r1, r3
 80093ea:	4610      	mov	r0, r2
 80093ec:	f7fe fd37 	bl	8007e5e <vListInsertEnd>
 80093f0:	e005      	b.n	80093fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	3318      	adds	r3, #24
 80093f6:	4619      	mov	r1, r3
 80093f8:	480e      	ldr	r0, [pc, #56]	; (8009434 <xTaskRemoveFromEventList+0xbc>)
 80093fa:	f7fe fd30 	bl	8007e5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009402:	4b0d      	ldr	r3, [pc, #52]	; (8009438 <xTaskRemoveFromEventList+0xc0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	429a      	cmp	r2, r3
 800940a:	d905      	bls.n	8009418 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800940c:	2301      	movs	r3, #1
 800940e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009410:	4b0a      	ldr	r3, [pc, #40]	; (800943c <xTaskRemoveFromEventList+0xc4>)
 8009412:	2201      	movs	r2, #1
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	e001      	b.n	800941c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009418:	2300      	movs	r3, #0
 800941a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800941c:	697b      	ldr	r3, [r7, #20]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20000c6c 	.word	0x20000c6c
 800942c:	20000c4c 	.word	0x20000c4c
 8009430:	20000774 	.word	0x20000774
 8009434:	20000c04 	.word	0x20000c04
 8009438:	20000770 	.word	0x20000770
 800943c:	20000c58 	.word	0x20000c58

08009440 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009448:	4b06      	ldr	r3, [pc, #24]	; (8009464 <vTaskInternalSetTimeOutState+0x24>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009450:	4b05      	ldr	r3, [pc, #20]	; (8009468 <vTaskInternalSetTimeOutState+0x28>)
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	605a      	str	r2, [r3, #4]
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	20000c5c 	.word	0x20000c5c
 8009468:	20000c48 	.word	0x20000c48

0800946c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b088      	sub	sp, #32
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10a      	bne.n	8009492 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	613b      	str	r3, [r7, #16]
}
 800948e:	bf00      	nop
 8009490:	e7fe      	b.n	8009490 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10a      	bne.n	80094ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	60fb      	str	r3, [r7, #12]
}
 80094aa:	bf00      	nop
 80094ac:	e7fe      	b.n	80094ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80094ae:	f000 fe79 	bl	800a1a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094b2:	4b1d      	ldr	r3, [pc, #116]	; (8009528 <xTaskCheckForTimeOut+0xbc>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	69ba      	ldr	r2, [r7, #24]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094ca:	d102      	bne.n	80094d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094cc:	2300      	movs	r3, #0
 80094ce:	61fb      	str	r3, [r7, #28]
 80094d0:	e023      	b.n	800951a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b15      	ldr	r3, [pc, #84]	; (800952c <xTaskCheckForTimeOut+0xc0>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d007      	beq.n	80094ee <xTaskCheckForTimeOut+0x82>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	69ba      	ldr	r2, [r7, #24]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d302      	bcc.n	80094ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80094e8:	2301      	movs	r3, #1
 80094ea:	61fb      	str	r3, [r7, #28]
 80094ec:	e015      	b.n	800951a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d20b      	bcs.n	8009510 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	1ad2      	subs	r2, r2, r3
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff ff9b 	bl	8009440 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800950a:	2300      	movs	r3, #0
 800950c:	61fb      	str	r3, [r7, #28]
 800950e:	e004      	b.n	800951a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2200      	movs	r2, #0
 8009514:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009516:	2301      	movs	r3, #1
 8009518:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800951a:	f000 fe73 	bl	800a204 <vPortExitCritical>

	return xReturn;
 800951e:	69fb      	ldr	r3, [r7, #28]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3720      	adds	r7, #32
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	20000c48 	.word	0x20000c48
 800952c:	20000c5c 	.word	0x20000c5c

08009530 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009534:	4b03      	ldr	r3, [pc, #12]	; (8009544 <vTaskMissedYield+0x14>)
 8009536:	2201      	movs	r2, #1
 8009538:	601a      	str	r2, [r3, #0]
}
 800953a:	bf00      	nop
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr
 8009544:	20000c58 	.word	0x20000c58

08009548 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009550:	f000 f852 	bl	80095f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009554:	4b06      	ldr	r3, [pc, #24]	; (8009570 <prvIdleTask+0x28>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d9f9      	bls.n	8009550 <prvIdleTask+0x8>
			{
				taskYIELD();
 800955c:	4b05      	ldr	r3, [pc, #20]	; (8009574 <prvIdleTask+0x2c>)
 800955e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800956c:	e7f0      	b.n	8009550 <prvIdleTask+0x8>
 800956e:	bf00      	nop
 8009570:	20000774 	.word	0x20000774
 8009574:	e000ed04 	.word	0xe000ed04

08009578 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800957e:	2300      	movs	r3, #0
 8009580:	607b      	str	r3, [r7, #4]
 8009582:	e00c      	b.n	800959e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	4613      	mov	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4a12      	ldr	r2, [pc, #72]	; (80095d8 <prvInitialiseTaskLists+0x60>)
 8009590:	4413      	add	r3, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe fc36 	bl	8007e04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3301      	adds	r3, #1
 800959c:	607b      	str	r3, [r7, #4]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b37      	cmp	r3, #55	; 0x37
 80095a2:	d9ef      	bls.n	8009584 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095a4:	480d      	ldr	r0, [pc, #52]	; (80095dc <prvInitialiseTaskLists+0x64>)
 80095a6:	f7fe fc2d 	bl	8007e04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095aa:	480d      	ldr	r0, [pc, #52]	; (80095e0 <prvInitialiseTaskLists+0x68>)
 80095ac:	f7fe fc2a 	bl	8007e04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095b0:	480c      	ldr	r0, [pc, #48]	; (80095e4 <prvInitialiseTaskLists+0x6c>)
 80095b2:	f7fe fc27 	bl	8007e04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095b6:	480c      	ldr	r0, [pc, #48]	; (80095e8 <prvInitialiseTaskLists+0x70>)
 80095b8:	f7fe fc24 	bl	8007e04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095bc:	480b      	ldr	r0, [pc, #44]	; (80095ec <prvInitialiseTaskLists+0x74>)
 80095be:	f7fe fc21 	bl	8007e04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095c2:	4b0b      	ldr	r3, [pc, #44]	; (80095f0 <prvInitialiseTaskLists+0x78>)
 80095c4:	4a05      	ldr	r2, [pc, #20]	; (80095dc <prvInitialiseTaskLists+0x64>)
 80095c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095c8:	4b0a      	ldr	r3, [pc, #40]	; (80095f4 <prvInitialiseTaskLists+0x7c>)
 80095ca:	4a05      	ldr	r2, [pc, #20]	; (80095e0 <prvInitialiseTaskLists+0x68>)
 80095cc:	601a      	str	r2, [r3, #0]
}
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20000774 	.word	0x20000774
 80095dc:	20000bd4 	.word	0x20000bd4
 80095e0:	20000be8 	.word	0x20000be8
 80095e4:	20000c04 	.word	0x20000c04
 80095e8:	20000c18 	.word	0x20000c18
 80095ec:	20000c30 	.word	0x20000c30
 80095f0:	20000bfc 	.word	0x20000bfc
 80095f4:	20000c00 	.word	0x20000c00

080095f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095fe:	e019      	b.n	8009634 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009600:	f000 fdd0 	bl	800a1a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009604:	4b10      	ldr	r3, [pc, #64]	; (8009648 <prvCheckTasksWaitingTermination+0x50>)
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3304      	adds	r3, #4
 8009610:	4618      	mov	r0, r3
 8009612:	f7fe fc81 	bl	8007f18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009616:	4b0d      	ldr	r3, [pc, #52]	; (800964c <prvCheckTasksWaitingTermination+0x54>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3b01      	subs	r3, #1
 800961c:	4a0b      	ldr	r2, [pc, #44]	; (800964c <prvCheckTasksWaitingTermination+0x54>)
 800961e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009620:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <prvCheckTasksWaitingTermination+0x58>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	3b01      	subs	r3, #1
 8009626:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <prvCheckTasksWaitingTermination+0x58>)
 8009628:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800962a:	f000 fdeb 	bl	800a204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f810 	bl	8009654 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009634:	4b06      	ldr	r3, [pc, #24]	; (8009650 <prvCheckTasksWaitingTermination+0x58>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1e1      	bne.n	8009600 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800963c:	bf00      	nop
 800963e:	bf00      	nop
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20000c18 	.word	0x20000c18
 800964c:	20000c44 	.word	0x20000c44
 8009650:	20000c2c 	.word	0x20000c2c

08009654 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009662:	2b00      	cmp	r3, #0
 8009664:	d108      	bne.n	8009678 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966a:	4618      	mov	r0, r3
 800966c:	f000 ff88 	bl	800a580 <vPortFree>
				vPortFree( pxTCB );
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 ff85 	bl	800a580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009676:	e018      	b.n	80096aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800967e:	2b01      	cmp	r3, #1
 8009680:	d103      	bne.n	800968a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 ff7c 	bl	800a580 <vPortFree>
	}
 8009688:	e00f      	b.n	80096aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009690:	2b02      	cmp	r3, #2
 8009692:	d00a      	beq.n	80096aa <prvDeleteTCB+0x56>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	60fb      	str	r3, [r7, #12]
}
 80096a6:	bf00      	nop
 80096a8:	e7fe      	b.n	80096a8 <prvDeleteTCB+0x54>
	}
 80096aa:	bf00      	nop
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
	...

080096b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096ba:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <prvResetNextTaskUnblockTime+0x38>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d104      	bne.n	80096ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096c4:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <prvResetNextTaskUnblockTime+0x3c>)
 80096c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096cc:	e008      	b.n	80096e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ce:	4b07      	ldr	r3, [pc, #28]	; (80096ec <prvResetNextTaskUnblockTime+0x38>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	4a04      	ldr	r2, [pc, #16]	; (80096f0 <prvResetNextTaskUnblockTime+0x3c>)
 80096de:	6013      	str	r3, [r2, #0]
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	20000bfc 	.word	0x20000bfc
 80096f0:	20000c64 	.word	0x20000c64

080096f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096fa:	4b0b      	ldr	r3, [pc, #44]	; (8009728 <xTaskGetSchedulerState+0x34>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d102      	bne.n	8009708 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009702:	2301      	movs	r3, #1
 8009704:	607b      	str	r3, [r7, #4]
 8009706:	e008      	b.n	800971a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009708:	4b08      	ldr	r3, [pc, #32]	; (800972c <xTaskGetSchedulerState+0x38>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d102      	bne.n	8009716 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009710:	2302      	movs	r3, #2
 8009712:	607b      	str	r3, [r7, #4]
 8009714:	e001      	b.n	800971a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009716:	2300      	movs	r3, #0
 8009718:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800971a:	687b      	ldr	r3, [r7, #4]
	}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	20000c50 	.word	0x20000c50
 800972c:	20000c6c 	.word	0x20000c6c

08009730 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800973c:	2300      	movs	r3, #0
 800973e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d056      	beq.n	80097f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009746:	4b2e      	ldr	r3, [pc, #184]	; (8009800 <xTaskPriorityDisinherit+0xd0>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	429a      	cmp	r2, r3
 800974e:	d00a      	beq.n	8009766 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	60fb      	str	r3, [r7, #12]
}
 8009762:	bf00      	nop
 8009764:	e7fe      	b.n	8009764 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10a      	bne.n	8009784 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	60bb      	str	r3, [r7, #8]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009788:	1e5a      	subs	r2, r3, #1
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009796:	429a      	cmp	r2, r3
 8009798:	d02c      	beq.n	80097f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d128      	bne.n	80097f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	3304      	adds	r3, #4
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fe fbb6 	bl	8007f18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c4:	4b0f      	ldr	r3, [pc, #60]	; (8009804 <xTaskPriorityDisinherit+0xd4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d903      	bls.n	80097d4 <xTaskPriorityDisinherit+0xa4>
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d0:	4a0c      	ldr	r2, [pc, #48]	; (8009804 <xTaskPriorityDisinherit+0xd4>)
 80097d2:	6013      	str	r3, [r2, #0]
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d8:	4613      	mov	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4a09      	ldr	r2, [pc, #36]	; (8009808 <xTaskPriorityDisinherit+0xd8>)
 80097e2:	441a      	add	r2, r3
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	3304      	adds	r3, #4
 80097e8:	4619      	mov	r1, r3
 80097ea:	4610      	mov	r0, r2
 80097ec:	f7fe fb37 	bl	8007e5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097f0:	2301      	movs	r3, #1
 80097f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097f4:	697b      	ldr	r3, [r7, #20]
	}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20000770 	.word	0x20000770
 8009804:	20000c4c 	.word	0x20000c4c
 8009808:	20000774 	.word	0x20000774

0800980c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009816:	4b21      	ldr	r3, [pc, #132]	; (800989c <prvAddCurrentTaskToDelayedList+0x90>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800981c:	4b20      	ldr	r3, [pc, #128]	; (80098a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3304      	adds	r3, #4
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe fb78 	bl	8007f18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800982e:	d10a      	bne.n	8009846 <prvAddCurrentTaskToDelayedList+0x3a>
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d007      	beq.n	8009846 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009836:	4b1a      	ldr	r3, [pc, #104]	; (80098a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3304      	adds	r3, #4
 800983c:	4619      	mov	r1, r3
 800983e:	4819      	ldr	r0, [pc, #100]	; (80098a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009840:	f7fe fb0d 	bl	8007e5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009844:	e026      	b.n	8009894 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4413      	add	r3, r2
 800984c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800984e:	4b14      	ldr	r3, [pc, #80]	; (80098a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	429a      	cmp	r2, r3
 800985c:	d209      	bcs.n	8009872 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800985e:	4b12      	ldr	r3, [pc, #72]	; (80098a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	4b0f      	ldr	r3, [pc, #60]	; (80098a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3304      	adds	r3, #4
 8009868:	4619      	mov	r1, r3
 800986a:	4610      	mov	r0, r2
 800986c:	f7fe fb1b 	bl	8007ea6 <vListInsert>
}
 8009870:	e010      	b.n	8009894 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009872:	4b0e      	ldr	r3, [pc, #56]	; (80098ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	4b0a      	ldr	r3, [pc, #40]	; (80098a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3304      	adds	r3, #4
 800987c:	4619      	mov	r1, r3
 800987e:	4610      	mov	r0, r2
 8009880:	f7fe fb11 	bl	8007ea6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009884:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	429a      	cmp	r2, r3
 800988c:	d202      	bcs.n	8009894 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800988e:	4a08      	ldr	r2, [pc, #32]	; (80098b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	6013      	str	r3, [r2, #0]
}
 8009894:	bf00      	nop
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	20000c48 	.word	0x20000c48
 80098a0:	20000770 	.word	0x20000770
 80098a4:	20000c30 	.word	0x20000c30
 80098a8:	20000c00 	.word	0x20000c00
 80098ac:	20000bfc 	.word	0x20000bfc
 80098b0:	20000c64 	.word	0x20000c64

080098b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b08a      	sub	sp, #40	; 0x28
 80098b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80098be:	f000 fb07 	bl	8009ed0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80098c2:	4b1c      	ldr	r3, [pc, #112]	; (8009934 <xTimerCreateTimerTask+0x80>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d021      	beq.n	800990e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80098ce:	2300      	movs	r3, #0
 80098d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098d2:	1d3a      	adds	r2, r7, #4
 80098d4:	f107 0108 	add.w	r1, r7, #8
 80098d8:	f107 030c 	add.w	r3, r7, #12
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fe fa77 	bl	8007dd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	9202      	str	r2, [sp, #8]
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	2302      	movs	r3, #2
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	2300      	movs	r3, #0
 80098f2:	460a      	mov	r2, r1
 80098f4:	4910      	ldr	r1, [pc, #64]	; (8009938 <xTimerCreateTimerTask+0x84>)
 80098f6:	4811      	ldr	r0, [pc, #68]	; (800993c <xTimerCreateTimerTask+0x88>)
 80098f8:	f7ff f8de 	bl	8008ab8 <xTaskCreateStatic>
 80098fc:	4603      	mov	r3, r0
 80098fe:	4a10      	ldr	r2, [pc, #64]	; (8009940 <xTimerCreateTimerTask+0x8c>)
 8009900:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009902:	4b0f      	ldr	r3, [pc, #60]	; (8009940 <xTimerCreateTimerTask+0x8c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800990a:	2301      	movs	r3, #1
 800990c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	613b      	str	r3, [r7, #16]
}
 8009926:	bf00      	nop
 8009928:	e7fe      	b.n	8009928 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800992a:	697b      	ldr	r3, [r7, #20]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	20000ca0 	.word	0x20000ca0
 8009938:	0800b038 	.word	0x0800b038
 800993c:	08009a79 	.word	0x08009a79
 8009940:	20000ca4 	.word	0x20000ca4

08009944 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08a      	sub	sp, #40	; 0x28
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009952:	2300      	movs	r3, #0
 8009954:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <xTimerGenericCommand+0x2e>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	623b      	str	r3, [r7, #32]
}
 800996e:	bf00      	nop
 8009970:	e7fe      	b.n	8009970 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009972:	4b1a      	ldr	r3, [pc, #104]	; (80099dc <xTimerGenericCommand+0x98>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d02a      	beq.n	80099d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	2b05      	cmp	r3, #5
 800998a:	dc18      	bgt.n	80099be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800998c:	f7ff feb2 	bl	80096f4 <xTaskGetSchedulerState>
 8009990:	4603      	mov	r3, r0
 8009992:	2b02      	cmp	r3, #2
 8009994:	d109      	bne.n	80099aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009996:	4b11      	ldr	r3, [pc, #68]	; (80099dc <xTimerGenericCommand+0x98>)
 8009998:	6818      	ldr	r0, [r3, #0]
 800999a:	f107 0110 	add.w	r1, r7, #16
 800999e:	2300      	movs	r3, #0
 80099a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099a2:	f7fe fc21 	bl	80081e8 <xQueueGenericSend>
 80099a6:	6278      	str	r0, [r7, #36]	; 0x24
 80099a8:	e012      	b.n	80099d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80099aa:	4b0c      	ldr	r3, [pc, #48]	; (80099dc <xTimerGenericCommand+0x98>)
 80099ac:	6818      	ldr	r0, [r3, #0]
 80099ae:	f107 0110 	add.w	r1, r7, #16
 80099b2:	2300      	movs	r3, #0
 80099b4:	2200      	movs	r2, #0
 80099b6:	f7fe fc17 	bl	80081e8 <xQueueGenericSend>
 80099ba:	6278      	str	r0, [r7, #36]	; 0x24
 80099bc:	e008      	b.n	80099d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80099be:	4b07      	ldr	r3, [pc, #28]	; (80099dc <xTimerGenericCommand+0x98>)
 80099c0:	6818      	ldr	r0, [r3, #0]
 80099c2:	f107 0110 	add.w	r1, r7, #16
 80099c6:	2300      	movs	r3, #0
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	f7fe fd0b 	bl	80083e4 <xQueueGenericSendFromISR>
 80099ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3728      	adds	r7, #40	; 0x28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	20000ca0 	.word	0x20000ca0

080099e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af02      	add	r7, sp, #8
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ea:	4b22      	ldr	r3, [pc, #136]	; (8009a74 <prvProcessExpiredTimer+0x94>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	3304      	adds	r3, #4
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe fa8d 	bl	8007f18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d022      	beq.n	8009a52 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	699a      	ldr	r2, [r3, #24]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	18d1      	adds	r1, r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	6978      	ldr	r0, [r7, #20]
 8009a1a:	f000 f8d1 	bl	8009bc0 <prvInsertTimerInActiveList>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d01f      	beq.n	8009a64 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a24:	2300      	movs	r3, #0
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6978      	ldr	r0, [r7, #20]
 8009a30:	f7ff ff88 	bl	8009944 <xTimerGenericCommand>
 8009a34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d113      	bne.n	8009a64 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	60fb      	str	r3, [r7, #12]
}
 8009a4e:	bf00      	nop
 8009a50:	e7fe      	b.n	8009a50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a58:	f023 0301 	bic.w	r3, r3, #1
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	6978      	ldr	r0, [r7, #20]
 8009a6a:	4798      	blx	r3
}
 8009a6c:	bf00      	nop
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	20000c98 	.word	0x20000c98

08009a78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a80:	f107 0308 	add.w	r3, r7, #8
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 f857 	bl	8009b38 <prvGetNextExpireTime>
 8009a8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 f803 	bl	8009a9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a96:	f000 f8d5 	bl	8009c44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a9a:	e7f1      	b.n	8009a80 <prvTimerTask+0x8>

08009a9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009aa6:	f7ff fa43 	bl	8008f30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009aaa:	f107 0308 	add.w	r3, r7, #8
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 f866 	bl	8009b80 <prvSampleTimeNow>
 8009ab4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d130      	bne.n	8009b1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10a      	bne.n	8009ad8 <prvProcessTimerOrBlockTask+0x3c>
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d806      	bhi.n	8009ad8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009aca:	f7ff fa3f 	bl	8008f4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009ace:	68f9      	ldr	r1, [r7, #12]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f7ff ff85 	bl	80099e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ad6:	e024      	b.n	8009b22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d008      	beq.n	8009af0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ade:	4b13      	ldr	r3, [pc, #76]	; (8009b2c <prvProcessTimerOrBlockTask+0x90>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <prvProcessTimerOrBlockTask+0x50>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e000      	b.n	8009aee <prvProcessTimerOrBlockTask+0x52>
 8009aec:	2300      	movs	r3, #0
 8009aee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009af0:	4b0f      	ldr	r3, [pc, #60]	; (8009b30 <prvProcessTimerOrBlockTask+0x94>)
 8009af2:	6818      	ldr	r0, [r3, #0]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	4619      	mov	r1, r3
 8009afe:	f7fe ffa7 	bl	8008a50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b02:	f7ff fa23 	bl	8008f4c <xTaskResumeAll>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10a      	bne.n	8009b22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b0c:	4b09      	ldr	r3, [pc, #36]	; (8009b34 <prvProcessTimerOrBlockTask+0x98>)
 8009b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	f3bf 8f4f 	dsb	sy
 8009b18:	f3bf 8f6f 	isb	sy
}
 8009b1c:	e001      	b.n	8009b22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b1e:	f7ff fa15 	bl	8008f4c <xTaskResumeAll>
}
 8009b22:	bf00      	nop
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000c9c 	.word	0x20000c9c
 8009b30:	20000ca0 	.word	0x20000ca0
 8009b34:	e000ed04 	.word	0xe000ed04

08009b38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b40:	4b0e      	ldr	r3, [pc, #56]	; (8009b7c <prvGetNextExpireTime+0x44>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <prvGetNextExpireTime+0x16>
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	e000      	b.n	8009b50 <prvGetNextExpireTime+0x18>
 8009b4e:	2200      	movs	r2, #0
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d105      	bne.n	8009b68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b5c:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <prvGetNextExpireTime+0x44>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	60fb      	str	r3, [r7, #12]
 8009b66:	e001      	b.n	8009b6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	20000c98 	.word	0x20000c98

08009b80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b88:	f7ff fa7e 	bl	8009088 <xTaskGetTickCount>
 8009b8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b8e:	4b0b      	ldr	r3, [pc, #44]	; (8009bbc <prvSampleTimeNow+0x3c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d205      	bcs.n	8009ba4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b98:	f000 f936 	bl	8009e08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e002      	b.n	8009baa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009baa:	4a04      	ldr	r2, [pc, #16]	; (8009bbc <prvSampleTimeNow+0x3c>)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000ca8 	.word	0x20000ca8

08009bc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d812      	bhi.n	8009c0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	1ad2      	subs	r2, r2, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d302      	bcc.n	8009bfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	617b      	str	r3, [r7, #20]
 8009bf8:	e01b      	b.n	8009c32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bfa:	4b10      	ldr	r3, [pc, #64]	; (8009c3c <prvInsertTimerInActiveList+0x7c>)
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3304      	adds	r3, #4
 8009c02:	4619      	mov	r1, r3
 8009c04:	4610      	mov	r0, r2
 8009c06:	f7fe f94e 	bl	8007ea6 <vListInsert>
 8009c0a:	e012      	b.n	8009c32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d206      	bcs.n	8009c22 <prvInsertTimerInActiveList+0x62>
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d302      	bcc.n	8009c22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	617b      	str	r3, [r7, #20]
 8009c20:	e007      	b.n	8009c32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c22:	4b07      	ldr	r3, [pc, #28]	; (8009c40 <prvInsertTimerInActiveList+0x80>)
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	f7fe f93a 	bl	8007ea6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c32:	697b      	ldr	r3, [r7, #20]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	20000c9c 	.word	0x20000c9c
 8009c40:	20000c98 	.word	0x20000c98

08009c44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08e      	sub	sp, #56	; 0x38
 8009c48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c4a:	e0ca      	b.n	8009de2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	da18      	bge.n	8009c84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c52:	1d3b      	adds	r3, r7, #4
 8009c54:	3304      	adds	r3, #4
 8009c56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	61fb      	str	r3, [r7, #28]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c7a:	6850      	ldr	r0, [r2, #4]
 8009c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c7e:	6892      	ldr	r2, [r2, #8]
 8009c80:	4611      	mov	r1, r2
 8009c82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f2c0 80aa 	blt.w	8009de0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	695b      	ldr	r3, [r3, #20]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d004      	beq.n	8009ca2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9a:	3304      	adds	r3, #4
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fe f93b 	bl	8007f18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ca2:	463b      	mov	r3, r7
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff ff6b 	bl	8009b80 <prvSampleTimeNow>
 8009caa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b09      	cmp	r3, #9
 8009cb0:	f200 8097 	bhi.w	8009de2 <prvProcessReceivedCommands+0x19e>
 8009cb4:	a201      	add	r2, pc, #4	; (adr r2, 8009cbc <prvProcessReceivedCommands+0x78>)
 8009cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cba:	bf00      	nop
 8009cbc:	08009ce5 	.word	0x08009ce5
 8009cc0:	08009ce5 	.word	0x08009ce5
 8009cc4:	08009ce5 	.word	0x08009ce5
 8009cc8:	08009d59 	.word	0x08009d59
 8009ccc:	08009d6d 	.word	0x08009d6d
 8009cd0:	08009db7 	.word	0x08009db7
 8009cd4:	08009ce5 	.word	0x08009ce5
 8009cd8:	08009ce5 	.word	0x08009ce5
 8009cdc:	08009d59 	.word	0x08009d59
 8009ce0:	08009d6d 	.word	0x08009d6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cea:	f043 0301 	orr.w	r3, r3, #1
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	18d1      	adds	r1, r2, r3
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d04:	f7ff ff5c 	bl	8009bc0 <prvInsertTimerInActiveList>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d069      	beq.n	8009de2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d05e      	beq.n	8009de2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	441a      	add	r2, r3
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	2300      	movs	r3, #0
 8009d32:	2100      	movs	r1, #0
 8009d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d36:	f7ff fe05 	bl	8009944 <xTimerGenericCommand>
 8009d3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d14f      	bne.n	8009de2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	61bb      	str	r3, [r7, #24]
}
 8009d54:	bf00      	nop
 8009d56:	e7fe      	b.n	8009d56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d5e:	f023 0301 	bic.w	r3, r3, #1
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d6a:	e03a      	b.n	8009de2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d72:	f043 0301 	orr.w	r3, r3, #1
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	617b      	str	r3, [r7, #20]
}
 8009d9e:	bf00      	nop
 8009da0:	e7fe      	b.n	8009da0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	699a      	ldr	r2, [r3, #24]
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	18d1      	adds	r1, r2, r3
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009db0:	f7ff ff06 	bl	8009bc0 <prvInsertTimerInActiveList>
					break;
 8009db4:	e015      	b.n	8009de2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dbc:	f003 0302 	and.w	r3, r3, #2
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d103      	bne.n	8009dcc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dc6:	f000 fbdb 	bl	800a580 <vPortFree>
 8009dca:	e00a      	b.n	8009de2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dd2:	f023 0301 	bic.w	r3, r3, #1
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009dde:	e000      	b.n	8009de2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009de0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009de2:	4b08      	ldr	r3, [pc, #32]	; (8009e04 <prvProcessReceivedCommands+0x1c0>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	1d39      	adds	r1, r7, #4
 8009de8:	2200      	movs	r2, #0
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe fb96 	bl	800851c <xQueueReceive>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f47f af2a 	bne.w	8009c4c <prvProcessReceivedCommands+0x8>
	}
}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	3730      	adds	r7, #48	; 0x30
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20000ca0 	.word	0x20000ca0

08009e08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b088      	sub	sp, #32
 8009e0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e0e:	e048      	b.n	8009ea2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e10:	4b2d      	ldr	r3, [pc, #180]	; (8009ec8 <prvSwitchTimerLists+0xc0>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e1a:	4b2b      	ldr	r3, [pc, #172]	; (8009ec8 <prvSwitchTimerLists+0xc0>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3304      	adds	r3, #4
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7fe f875 	bl	8007f18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e3c:	f003 0304 	and.w	r3, r3, #4
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d02e      	beq.n	8009ea2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d90e      	bls.n	8009e74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e62:	4b19      	ldr	r3, [pc, #100]	; (8009ec8 <prvSwitchTimerLists+0xc0>)
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	f7fe f81a 	bl	8007ea6 <vListInsert>
 8009e72:	e016      	b.n	8009ea2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e74:	2300      	movs	r3, #0
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f7ff fd60 	bl	8009944 <xTimerGenericCommand>
 8009e84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10a      	bne.n	8009ea2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	603b      	str	r3, [r7, #0]
}
 8009e9e:	bf00      	nop
 8009ea0:	e7fe      	b.n	8009ea0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ea2:	4b09      	ldr	r3, [pc, #36]	; (8009ec8 <prvSwitchTimerLists+0xc0>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1b1      	bne.n	8009e10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009eac:	4b06      	ldr	r3, [pc, #24]	; (8009ec8 <prvSwitchTimerLists+0xc0>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009eb2:	4b06      	ldr	r3, [pc, #24]	; (8009ecc <prvSwitchTimerLists+0xc4>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a04      	ldr	r2, [pc, #16]	; (8009ec8 <prvSwitchTimerLists+0xc0>)
 8009eb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009eba:	4a04      	ldr	r2, [pc, #16]	; (8009ecc <prvSwitchTimerLists+0xc4>)
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	6013      	str	r3, [r2, #0]
}
 8009ec0:	bf00      	nop
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	20000c98 	.word	0x20000c98
 8009ecc:	20000c9c 	.word	0x20000c9c

08009ed0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ed6:	f000 f965 	bl	800a1a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009eda:	4b15      	ldr	r3, [pc, #84]	; (8009f30 <prvCheckForValidListAndQueue+0x60>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d120      	bne.n	8009f24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ee2:	4814      	ldr	r0, [pc, #80]	; (8009f34 <prvCheckForValidListAndQueue+0x64>)
 8009ee4:	f7fd ff8e 	bl	8007e04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ee8:	4813      	ldr	r0, [pc, #76]	; (8009f38 <prvCheckForValidListAndQueue+0x68>)
 8009eea:	f7fd ff8b 	bl	8007e04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009eee:	4b13      	ldr	r3, [pc, #76]	; (8009f3c <prvCheckForValidListAndQueue+0x6c>)
 8009ef0:	4a10      	ldr	r2, [pc, #64]	; (8009f34 <prvCheckForValidListAndQueue+0x64>)
 8009ef2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ef4:	4b12      	ldr	r3, [pc, #72]	; (8009f40 <prvCheckForValidListAndQueue+0x70>)
 8009ef6:	4a10      	ldr	r2, [pc, #64]	; (8009f38 <prvCheckForValidListAndQueue+0x68>)
 8009ef8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009efa:	2300      	movs	r3, #0
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	4b11      	ldr	r3, [pc, #68]	; (8009f44 <prvCheckForValidListAndQueue+0x74>)
 8009f00:	4a11      	ldr	r2, [pc, #68]	; (8009f48 <prvCheckForValidListAndQueue+0x78>)
 8009f02:	2110      	movs	r1, #16
 8009f04:	200a      	movs	r0, #10
 8009f06:	f7fe f899 	bl	800803c <xQueueGenericCreateStatic>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	4a08      	ldr	r2, [pc, #32]	; (8009f30 <prvCheckForValidListAndQueue+0x60>)
 8009f0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f10:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <prvCheckForValidListAndQueue+0x60>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d005      	beq.n	8009f24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f18:	4b05      	ldr	r3, [pc, #20]	; (8009f30 <prvCheckForValidListAndQueue+0x60>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	490b      	ldr	r1, [pc, #44]	; (8009f4c <prvCheckForValidListAndQueue+0x7c>)
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fe fd6c 	bl	80089fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f24:	f000 f96e 	bl	800a204 <vPortExitCritical>
}
 8009f28:	bf00      	nop
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000ca0 	.word	0x20000ca0
 8009f34:	20000c70 	.word	0x20000c70
 8009f38:	20000c84 	.word	0x20000c84
 8009f3c:	20000c98 	.word	0x20000c98
 8009f40:	20000c9c 	.word	0x20000c9c
 8009f44:	20000d4c 	.word	0x20000d4c
 8009f48:	20000cac 	.word	0x20000cac
 8009f4c:	0800b040 	.word	0x0800b040

08009f50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	3b04      	subs	r3, #4
 8009f60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3b04      	subs	r3, #4
 8009f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	f023 0201 	bic.w	r2, r3, #1
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3b04      	subs	r3, #4
 8009f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f80:	4a0c      	ldr	r2, [pc, #48]	; (8009fb4 <pxPortInitialiseStack+0x64>)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3b14      	subs	r3, #20
 8009f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3b04      	subs	r3, #4
 8009f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f06f 0202 	mvn.w	r2, #2
 8009f9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3b20      	subs	r3, #32
 8009fa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr
 8009fb4:	08009fb9 	.word	0x08009fb9

08009fb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009fc2:	4b12      	ldr	r3, [pc, #72]	; (800a00c <prvTaskExitError+0x54>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fca:	d00a      	beq.n	8009fe2 <prvTaskExitError+0x2a>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	60fb      	str	r3, [r7, #12]
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <prvTaskExitError+0x28>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	60bb      	str	r3, [r7, #8]
}
 8009ff4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ff6:	bf00      	nop
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0fc      	beq.n	8009ff8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ffe:	bf00      	nop
 800a000:	bf00      	nop
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	2000002c 	.word	0x2000002c

0800a010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a010:	4b07      	ldr	r3, [pc, #28]	; (800a030 <pxCurrentTCBConst2>)
 800a012:	6819      	ldr	r1, [r3, #0]
 800a014:	6808      	ldr	r0, [r1, #0]
 800a016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01a:	f380 8809 	msr	PSP, r0
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f04f 0000 	mov.w	r0, #0
 800a026:	f380 8811 	msr	BASEPRI, r0
 800a02a:	4770      	bx	lr
 800a02c:	f3af 8000 	nop.w

0800a030 <pxCurrentTCBConst2>:
 800a030:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a034:	bf00      	nop
 800a036:	bf00      	nop

0800a038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a038:	4808      	ldr	r0, [pc, #32]	; (800a05c <prvPortStartFirstTask+0x24>)
 800a03a:	6800      	ldr	r0, [r0, #0]
 800a03c:	6800      	ldr	r0, [r0, #0]
 800a03e:	f380 8808 	msr	MSP, r0
 800a042:	f04f 0000 	mov.w	r0, #0
 800a046:	f380 8814 	msr	CONTROL, r0
 800a04a:	b662      	cpsie	i
 800a04c:	b661      	cpsie	f
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	df00      	svc	0
 800a058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a05a:	bf00      	nop
 800a05c:	e000ed08 	.word	0xe000ed08

0800a060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a066:	4b46      	ldr	r3, [pc, #280]	; (800a180 <xPortStartScheduler+0x120>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a46      	ldr	r2, [pc, #280]	; (800a184 <xPortStartScheduler+0x124>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d10a      	bne.n	800a086 <xPortStartScheduler+0x26>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	613b      	str	r3, [r7, #16]
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a086:	4b3e      	ldr	r3, [pc, #248]	; (800a180 <xPortStartScheduler+0x120>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a3f      	ldr	r2, [pc, #252]	; (800a188 <xPortStartScheduler+0x128>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d10a      	bne.n	800a0a6 <xPortStartScheduler+0x46>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	60fb      	str	r3, [r7, #12]
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0a6:	4b39      	ldr	r3, [pc, #228]	; (800a18c <xPortStartScheduler+0x12c>)
 800a0a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	22ff      	movs	r2, #255	; 0xff
 800a0b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0c0:	78fb      	ldrb	r3, [r7, #3]
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	4b31      	ldr	r3, [pc, #196]	; (800a190 <xPortStartScheduler+0x130>)
 800a0cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0ce:	4b31      	ldr	r3, [pc, #196]	; (800a194 <xPortStartScheduler+0x134>)
 800a0d0:	2207      	movs	r2, #7
 800a0d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0d4:	e009      	b.n	800a0ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a0d6:	4b2f      	ldr	r3, [pc, #188]	; (800a194 <xPortStartScheduler+0x134>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	4a2d      	ldr	r2, [pc, #180]	; (800a194 <xPortStartScheduler+0x134>)
 800a0de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	005b      	lsls	r3, r3, #1
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0ea:	78fb      	ldrb	r3, [r7, #3]
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0f2:	2b80      	cmp	r3, #128	; 0x80
 800a0f4:	d0ef      	beq.n	800a0d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0f6:	4b27      	ldr	r3, [pc, #156]	; (800a194 <xPortStartScheduler+0x134>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f1c3 0307 	rsb	r3, r3, #7
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d00a      	beq.n	800a118 <xPortStartScheduler+0xb8>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	60bb      	str	r3, [r7, #8]
}
 800a114:	bf00      	nop
 800a116:	e7fe      	b.n	800a116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a118:	4b1e      	ldr	r3, [pc, #120]	; (800a194 <xPortStartScheduler+0x134>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	021b      	lsls	r3, r3, #8
 800a11e:	4a1d      	ldr	r2, [pc, #116]	; (800a194 <xPortStartScheduler+0x134>)
 800a120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a122:	4b1c      	ldr	r3, [pc, #112]	; (800a194 <xPortStartScheduler+0x134>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a12a:	4a1a      	ldr	r2, [pc, #104]	; (800a194 <xPortStartScheduler+0x134>)
 800a12c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	b2da      	uxtb	r2, r3
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a136:	4b18      	ldr	r3, [pc, #96]	; (800a198 <xPortStartScheduler+0x138>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a17      	ldr	r2, [pc, #92]	; (800a198 <xPortStartScheduler+0x138>)
 800a13c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a142:	4b15      	ldr	r3, [pc, #84]	; (800a198 <xPortStartScheduler+0x138>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a14      	ldr	r2, [pc, #80]	; (800a198 <xPortStartScheduler+0x138>)
 800a148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a14c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a14e:	f000 f8dd 	bl	800a30c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a152:	4b12      	ldr	r3, [pc, #72]	; (800a19c <xPortStartScheduler+0x13c>)
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a158:	f000 f8fc 	bl	800a354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a15c:	4b10      	ldr	r3, [pc, #64]	; (800a1a0 <xPortStartScheduler+0x140>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a0f      	ldr	r2, [pc, #60]	; (800a1a0 <xPortStartScheduler+0x140>)
 800a162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a168:	f7ff ff66 	bl	800a038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a16c:	f7ff f856 	bl	800921c <vTaskSwitchContext>
	prvTaskExitError();
 800a170:	f7ff ff22 	bl	8009fb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	e000ed00 	.word	0xe000ed00
 800a184:	410fc271 	.word	0x410fc271
 800a188:	410fc270 	.word	0x410fc270
 800a18c:	e000e400 	.word	0xe000e400
 800a190:	20000d9c 	.word	0x20000d9c
 800a194:	20000da0 	.word	0x20000da0
 800a198:	e000ed20 	.word	0xe000ed20
 800a19c:	2000002c 	.word	0x2000002c
 800a1a0:	e000ef34 	.word	0xe000ef34

0800a1a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	607b      	str	r3, [r7, #4]
}
 800a1bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1be:	4b0f      	ldr	r3, [pc, #60]	; (800a1fc <vPortEnterCritical+0x58>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	4a0d      	ldr	r2, [pc, #52]	; (800a1fc <vPortEnterCritical+0x58>)
 800a1c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1c8:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <vPortEnterCritical+0x58>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d10f      	bne.n	800a1f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1d0:	4b0b      	ldr	r3, [pc, #44]	; (800a200 <vPortEnterCritical+0x5c>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00a      	beq.n	800a1f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	603b      	str	r3, [r7, #0]
}
 800a1ec:	bf00      	nop
 800a1ee:	e7fe      	b.n	800a1ee <vPortEnterCritical+0x4a>
	}
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	2000002c 	.word	0x2000002c
 800a200:	e000ed04 	.word	0xe000ed04

0800a204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a20a:	4b12      	ldr	r3, [pc, #72]	; (800a254 <vPortExitCritical+0x50>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10a      	bne.n	800a228 <vPortExitCritical+0x24>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	607b      	str	r3, [r7, #4]
}
 800a224:	bf00      	nop
 800a226:	e7fe      	b.n	800a226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a228:	4b0a      	ldr	r3, [pc, #40]	; (800a254 <vPortExitCritical+0x50>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	4a09      	ldr	r2, [pc, #36]	; (800a254 <vPortExitCritical+0x50>)
 800a230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a232:	4b08      	ldr	r3, [pc, #32]	; (800a254 <vPortExitCritical+0x50>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d105      	bne.n	800a246 <vPortExitCritical+0x42>
 800a23a:	2300      	movs	r3, #0
 800a23c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	f383 8811 	msr	BASEPRI, r3
}
 800a244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a246:	bf00      	nop
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	2000002c 	.word	0x2000002c
	...

0800a260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a260:	f3ef 8009 	mrs	r0, PSP
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <pxCurrentTCBConst>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	f01e 0f10 	tst.w	lr, #16
 800a270:	bf08      	it	eq
 800a272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27a:	6010      	str	r0, [r2, #0]
 800a27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a280:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a284:	f380 8811 	msr	BASEPRI, r0
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f7fe ffc4 	bl	800921c <vTaskSwitchContext>
 800a294:	f04f 0000 	mov.w	r0, #0
 800a298:	f380 8811 	msr	BASEPRI, r0
 800a29c:	bc09      	pop	{r0, r3}
 800a29e:	6819      	ldr	r1, [r3, #0]
 800a2a0:	6808      	ldr	r0, [r1, #0]
 800a2a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a6:	f01e 0f10 	tst.w	lr, #16
 800a2aa:	bf08      	it	eq
 800a2ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2b0:	f380 8809 	msr	PSP, r0
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	f3af 8000 	nop.w

0800a2c0 <pxCurrentTCBConst>:
 800a2c0:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop

0800a2c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	607b      	str	r3, [r7, #4]
}
 800a2e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2e2:	f7fe fee1 	bl	80090a8 <xTaskIncrementTick>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2ec:	4b06      	ldr	r3, [pc, #24]	; (800a308 <xPortSysTickHandler+0x40>)
 800a2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	f383 8811 	msr	BASEPRI, r3
}
 800a2fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	e000ed04 	.word	0xe000ed04

0800a30c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a30c:	b480      	push	{r7}
 800a30e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a310:	4b0b      	ldr	r3, [pc, #44]	; (800a340 <vPortSetupTimerInterrupt+0x34>)
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a316:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <vPortSetupTimerInterrupt+0x38>)
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a31c:	4b0a      	ldr	r3, [pc, #40]	; (800a348 <vPortSetupTimerInterrupt+0x3c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a0a      	ldr	r2, [pc, #40]	; (800a34c <vPortSetupTimerInterrupt+0x40>)
 800a322:	fba2 2303 	umull	r2, r3, r2, r3
 800a326:	099b      	lsrs	r3, r3, #6
 800a328:	4a09      	ldr	r2, [pc, #36]	; (800a350 <vPortSetupTimerInterrupt+0x44>)
 800a32a:	3b01      	subs	r3, #1
 800a32c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a32e:	4b04      	ldr	r3, [pc, #16]	; (800a340 <vPortSetupTimerInterrupt+0x34>)
 800a330:	2207      	movs	r2, #7
 800a332:	601a      	str	r2, [r3, #0]
}
 800a334:	bf00      	nop
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	e000e010 	.word	0xe000e010
 800a344:	e000e018 	.word	0xe000e018
 800a348:	20000000 	.word	0x20000000
 800a34c:	10624dd3 	.word	0x10624dd3
 800a350:	e000e014 	.word	0xe000e014

0800a354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a364 <vPortEnableVFP+0x10>
 800a358:	6801      	ldr	r1, [r0, #0]
 800a35a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a35e:	6001      	str	r1, [r0, #0]
 800a360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a362:	bf00      	nop
 800a364:	e000ed88 	.word	0xe000ed88

0800a368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a36e:	f3ef 8305 	mrs	r3, IPSR
 800a372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b0f      	cmp	r3, #15
 800a378:	d914      	bls.n	800a3a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a37a:	4a17      	ldr	r2, [pc, #92]	; (800a3d8 <vPortValidateInterruptPriority+0x70>)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	4413      	add	r3, r2
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a384:	4b15      	ldr	r3, [pc, #84]	; (800a3dc <vPortValidateInterruptPriority+0x74>)
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	7afa      	ldrb	r2, [r7, #11]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d20a      	bcs.n	800a3a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	607b      	str	r3, [r7, #4]
}
 800a3a0:	bf00      	nop
 800a3a2:	e7fe      	b.n	800a3a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a3a4:	4b0e      	ldr	r3, [pc, #56]	; (800a3e0 <vPortValidateInterruptPriority+0x78>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a3ac:	4b0d      	ldr	r3, [pc, #52]	; (800a3e4 <vPortValidateInterruptPriority+0x7c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d90a      	bls.n	800a3ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	603b      	str	r3, [r7, #0]
}
 800a3c6:	bf00      	nop
 800a3c8:	e7fe      	b.n	800a3c8 <vPortValidateInterruptPriority+0x60>
	}
 800a3ca:	bf00      	nop
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	e000e3f0 	.word	0xe000e3f0
 800a3dc:	20000d9c 	.word	0x20000d9c
 800a3e0:	e000ed0c 	.word	0xe000ed0c
 800a3e4:	20000da0 	.word	0x20000da0

0800a3e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b08a      	sub	sp, #40	; 0x28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3f4:	f7fe fd9c 	bl	8008f30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3f8:	4b5b      	ldr	r3, [pc, #364]	; (800a568 <pvPortMalloc+0x180>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a400:	f000 f920 	bl	800a644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a404:	4b59      	ldr	r3, [pc, #356]	; (800a56c <pvPortMalloc+0x184>)
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4013      	ands	r3, r2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f040 8093 	bne.w	800a538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d01d      	beq.n	800a454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a418:	2208      	movs	r2, #8
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4413      	add	r3, r2
 800a41e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f003 0307 	and.w	r3, r3, #7
 800a426:	2b00      	cmp	r3, #0
 800a428:	d014      	beq.n	800a454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f023 0307 	bic.w	r3, r3, #7
 800a430:	3308      	adds	r3, #8
 800a432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f003 0307 	and.w	r3, r3, #7
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00a      	beq.n	800a454 <pvPortMalloc+0x6c>
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	617b      	str	r3, [r7, #20]
}
 800a450:	bf00      	nop
 800a452:	e7fe      	b.n	800a452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d06e      	beq.n	800a538 <pvPortMalloc+0x150>
 800a45a:	4b45      	ldr	r3, [pc, #276]	; (800a570 <pvPortMalloc+0x188>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	429a      	cmp	r2, r3
 800a462:	d869      	bhi.n	800a538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a464:	4b43      	ldr	r3, [pc, #268]	; (800a574 <pvPortMalloc+0x18c>)
 800a466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a468:	4b42      	ldr	r3, [pc, #264]	; (800a574 <pvPortMalloc+0x18c>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a46e:	e004      	b.n	800a47a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	429a      	cmp	r2, r3
 800a482:	d903      	bls.n	800a48c <pvPortMalloc+0xa4>
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1f1      	bne.n	800a470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a48c:	4b36      	ldr	r3, [pc, #216]	; (800a568 <pvPortMalloc+0x180>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a492:	429a      	cmp	r2, r3
 800a494:	d050      	beq.n	800a538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a496:	6a3b      	ldr	r3, [r7, #32]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2208      	movs	r2, #8
 800a49c:	4413      	add	r3, r2
 800a49e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	1ad2      	subs	r2, r2, r3
 800a4b0:	2308      	movs	r3, #8
 800a4b2:	005b      	lsls	r3, r3, #1
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d91f      	bls.n	800a4f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4413      	add	r3, r2
 800a4be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <pvPortMalloc+0xf8>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	613b      	str	r3, [r7, #16]
}
 800a4dc:	bf00      	nop
 800a4de:	e7fe      	b.n	800a4de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	1ad2      	subs	r2, r2, r3
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4f2:	69b8      	ldr	r0, [r7, #24]
 800a4f4:	f000 f908 	bl	800a708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4f8:	4b1d      	ldr	r3, [pc, #116]	; (800a570 <pvPortMalloc+0x188>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	4a1b      	ldr	r2, [pc, #108]	; (800a570 <pvPortMalloc+0x188>)
 800a504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a506:	4b1a      	ldr	r3, [pc, #104]	; (800a570 <pvPortMalloc+0x188>)
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	4b1b      	ldr	r3, [pc, #108]	; (800a578 <pvPortMalloc+0x190>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d203      	bcs.n	800a51a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a512:	4b17      	ldr	r3, [pc, #92]	; (800a570 <pvPortMalloc+0x188>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a18      	ldr	r2, [pc, #96]	; (800a578 <pvPortMalloc+0x190>)
 800a518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	4b13      	ldr	r3, [pc, #76]	; (800a56c <pvPortMalloc+0x184>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	431a      	orrs	r2, r3
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	2200      	movs	r2, #0
 800a52c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a52e:	4b13      	ldr	r3, [pc, #76]	; (800a57c <pvPortMalloc+0x194>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	3301      	adds	r3, #1
 800a534:	4a11      	ldr	r2, [pc, #68]	; (800a57c <pvPortMalloc+0x194>)
 800a536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a538:	f7fe fd08 	bl	8008f4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	f003 0307 	and.w	r3, r3, #7
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <pvPortMalloc+0x174>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	60fb      	str	r3, [r7, #12]
}
 800a558:	bf00      	nop
 800a55a:	e7fe      	b.n	800a55a <pvPortMalloc+0x172>
	return pvReturn;
 800a55c:	69fb      	ldr	r3, [r7, #28]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3728      	adds	r7, #40	; 0x28
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	200049ac 	.word	0x200049ac
 800a56c:	200049c0 	.word	0x200049c0
 800a570:	200049b0 	.word	0x200049b0
 800a574:	200049a4 	.word	0x200049a4
 800a578:	200049b4 	.word	0x200049b4
 800a57c:	200049b8 	.word	0x200049b8

0800a580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d04d      	beq.n	800a62e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a592:	2308      	movs	r3, #8
 800a594:	425b      	negs	r3, r3
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	4413      	add	r3, r2
 800a59a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	4b24      	ldr	r3, [pc, #144]	; (800a638 <vPortFree+0xb8>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10a      	bne.n	800a5c4 <vPortFree+0x44>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	60fb      	str	r3, [r7, #12]
}
 800a5c0:	bf00      	nop
 800a5c2:	e7fe      	b.n	800a5c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00a      	beq.n	800a5e2 <vPortFree+0x62>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	60bb      	str	r3, [r7, #8]
}
 800a5de:	bf00      	nop
 800a5e0:	e7fe      	b.n	800a5e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	685a      	ldr	r2, [r3, #4]
 800a5e6:	4b14      	ldr	r3, [pc, #80]	; (800a638 <vPortFree+0xb8>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d01e      	beq.n	800a62e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d11a      	bne.n	800a62e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	4b0e      	ldr	r3, [pc, #56]	; (800a638 <vPortFree+0xb8>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	43db      	mvns	r3, r3
 800a602:	401a      	ands	r2, r3
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a608:	f7fe fc92 	bl	8008f30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <vPortFree+0xbc>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4413      	add	r3, r2
 800a616:	4a09      	ldr	r2, [pc, #36]	; (800a63c <vPortFree+0xbc>)
 800a618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a61a:	6938      	ldr	r0, [r7, #16]
 800a61c:	f000 f874 	bl	800a708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a620:	4b07      	ldr	r3, [pc, #28]	; (800a640 <vPortFree+0xc0>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3301      	adds	r3, #1
 800a626:	4a06      	ldr	r2, [pc, #24]	; (800a640 <vPortFree+0xc0>)
 800a628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a62a:	f7fe fc8f 	bl	8008f4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a62e:	bf00      	nop
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	200049c0 	.word	0x200049c0
 800a63c:	200049b0 	.word	0x200049b0
 800a640:	200049bc 	.word	0x200049bc

0800a644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a64a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a64e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a650:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <prvHeapInit+0xac>)
 800a652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f003 0307 	and.w	r3, r3, #7
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00c      	beq.n	800a678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3307      	adds	r3, #7
 800a662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f023 0307 	bic.w	r3, r3, #7
 800a66a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	4a1f      	ldr	r2, [pc, #124]	; (800a6f0 <prvHeapInit+0xac>)
 800a674:	4413      	add	r3, r2
 800a676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a67c:	4a1d      	ldr	r2, [pc, #116]	; (800a6f4 <prvHeapInit+0xb0>)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a682:	4b1c      	ldr	r3, [pc, #112]	; (800a6f4 <prvHeapInit+0xb0>)
 800a684:	2200      	movs	r2, #0
 800a686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	4413      	add	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a690:	2208      	movs	r2, #8
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	1a9b      	subs	r3, r3, r2
 800a696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f023 0307 	bic.w	r3, r3, #7
 800a69e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4a15      	ldr	r2, [pc, #84]	; (800a6f8 <prvHeapInit+0xb4>)
 800a6a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a6a6:	4b14      	ldr	r3, [pc, #80]	; (800a6f8 <prvHeapInit+0xb4>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a6ae:	4b12      	ldr	r3, [pc, #72]	; (800a6f8 <prvHeapInit+0xb4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	1ad2      	subs	r2, r2, r3
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6c4:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <prvHeapInit+0xb4>)
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	4a0a      	ldr	r2, [pc, #40]	; (800a6fc <prvHeapInit+0xb8>)
 800a6d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	4a09      	ldr	r2, [pc, #36]	; (800a700 <prvHeapInit+0xbc>)
 800a6da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6dc:	4b09      	ldr	r3, [pc, #36]	; (800a704 <prvHeapInit+0xc0>)
 800a6de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6e2:	601a      	str	r2, [r3, #0]
}
 800a6e4:	bf00      	nop
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr
 800a6f0:	20000da4 	.word	0x20000da4
 800a6f4:	200049a4 	.word	0x200049a4
 800a6f8:	200049ac 	.word	0x200049ac
 800a6fc:	200049b4 	.word	0x200049b4
 800a700:	200049b0 	.word	0x200049b0
 800a704:	200049c0 	.word	0x200049c0

0800a708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a710:	4b28      	ldr	r3, [pc, #160]	; (800a7b4 <prvInsertBlockIntoFreeList+0xac>)
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	e002      	b.n	800a71c <prvInsertBlockIntoFreeList+0x14>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	429a      	cmp	r2, r3
 800a724:	d8f7      	bhi.n	800a716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	4413      	add	r3, r2
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	429a      	cmp	r2, r3
 800a736:	d108      	bne.n	800a74a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	441a      	add	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	441a      	add	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d118      	bne.n	800a790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	4b15      	ldr	r3, [pc, #84]	; (800a7b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	429a      	cmp	r2, r3
 800a768:	d00d      	beq.n	800a786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	441a      	add	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	e008      	b.n	800a798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a786:	4b0c      	ldr	r3, [pc, #48]	; (800a7b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	e003      	b.n	800a798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d002      	beq.n	800a7a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7a6:	bf00      	nop
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	200049a4 	.word	0x200049a4
 800a7b8:	200049ac 	.word	0x200049ac

0800a7bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	490e      	ldr	r1, [pc, #56]	; (800a7fc <MX_USB_HOST_Init+0x40>)
 800a7c4:	480e      	ldr	r0, [pc, #56]	; (800a800 <MX_USB_HOST_Init+0x44>)
 800a7c6:	f7fb fb05 	bl	8005dd4 <USBH_Init>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a7d0:	f7f6 f8df 	bl	8000992 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a7d4:	490b      	ldr	r1, [pc, #44]	; (800a804 <MX_USB_HOST_Init+0x48>)
 800a7d6:	480a      	ldr	r0, [pc, #40]	; (800a800 <MX_USB_HOST_Init+0x44>)
 800a7d8:	f7fb fbac 	bl	8005f34 <USBH_RegisterClass>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a7e2:	f7f6 f8d6 	bl	8000992 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a7e6:	4806      	ldr	r0, [pc, #24]	; (800a800 <MX_USB_HOST_Init+0x44>)
 800a7e8:	f7fb fc30 	bl	800604c <USBH_Start>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a7f2:	f7f6 f8ce 	bl	8000992 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a7f6:	bf00      	nop
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	0800a809 	.word	0x0800a809
 800a800:	20004b34 	.word	0x20004b34
 800a804:	2000000c 	.word	0x2000000c

0800a808 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	460b      	mov	r3, r1
 800a812:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a814:	78fb      	ldrb	r3, [r7, #3]
 800a816:	3b01      	subs	r3, #1
 800a818:	2b04      	cmp	r3, #4
 800a81a:	d819      	bhi.n	800a850 <USBH_UserProcess+0x48>
 800a81c:	a201      	add	r2, pc, #4	; (adr r2, 800a824 <USBH_UserProcess+0x1c>)
 800a81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a822:	bf00      	nop
 800a824:	0800a851 	.word	0x0800a851
 800a828:	0800a841 	.word	0x0800a841
 800a82c:	0800a851 	.word	0x0800a851
 800a830:	0800a849 	.word	0x0800a849
 800a834:	0800a839 	.word	0x0800a839
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a838:	4b09      	ldr	r3, [pc, #36]	; (800a860 <USBH_UserProcess+0x58>)
 800a83a:	2203      	movs	r2, #3
 800a83c:	701a      	strb	r2, [r3, #0]
  break;
 800a83e:	e008      	b.n	800a852 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a840:	4b07      	ldr	r3, [pc, #28]	; (800a860 <USBH_UserProcess+0x58>)
 800a842:	2202      	movs	r2, #2
 800a844:	701a      	strb	r2, [r3, #0]
  break;
 800a846:	e004      	b.n	800a852 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a848:	4b05      	ldr	r3, [pc, #20]	; (800a860 <USBH_UserProcess+0x58>)
 800a84a:	2201      	movs	r2, #1
 800a84c:	701a      	strb	r2, [r3, #0]
  break;
 800a84e:	e000      	b.n	800a852 <USBH_UserProcess+0x4a>

  default:
  break;
 800a850:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a852:	bf00      	nop
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	200049c4 	.word	0x200049c4

0800a864 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08a      	sub	sp, #40	; 0x28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a86c:	f107 0314 	add.w	r3, r7, #20
 800a870:	2200      	movs	r2, #0
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	605a      	str	r2, [r3, #4]
 800a876:	609a      	str	r2, [r3, #8]
 800a878:	60da      	str	r2, [r3, #12]
 800a87a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a884:	d147      	bne.n	800a916 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a886:	2300      	movs	r3, #0
 800a888:	613b      	str	r3, [r7, #16]
 800a88a:	4b25      	ldr	r3, [pc, #148]	; (800a920 <HAL_HCD_MspInit+0xbc>)
 800a88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88e:	4a24      	ldr	r2, [pc, #144]	; (800a920 <HAL_HCD_MspInit+0xbc>)
 800a890:	f043 0301 	orr.w	r3, r3, #1
 800a894:	6313      	str	r3, [r2, #48]	; 0x30
 800a896:	4b22      	ldr	r3, [pc, #136]	; (800a920 <HAL_HCD_MspInit+0xbc>)
 800a898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	613b      	str	r3, [r7, #16]
 800a8a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a8a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a8b0:	f107 0314 	add.w	r3, r7, #20
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	481b      	ldr	r0, [pc, #108]	; (800a924 <HAL_HCD_MspInit+0xc0>)
 800a8b8:	f7f6 fbdc 	bl	8001074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a8bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a8c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8c2:	2302      	movs	r3, #2
 800a8c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a8ce:	230a      	movs	r3, #10
 800a8d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8d2:	f107 0314 	add.w	r3, r7, #20
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4812      	ldr	r0, [pc, #72]	; (800a924 <HAL_HCD_MspInit+0xc0>)
 800a8da:	f7f6 fbcb 	bl	8001074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a8de:	4b10      	ldr	r3, [pc, #64]	; (800a920 <HAL_HCD_MspInit+0xbc>)
 800a8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e2:	4a0f      	ldr	r2, [pc, #60]	; (800a920 <HAL_HCD_MspInit+0xbc>)
 800a8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e8:	6353      	str	r3, [r2, #52]	; 0x34
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60fb      	str	r3, [r7, #12]
 800a8ee:	4b0c      	ldr	r3, [pc, #48]	; (800a920 <HAL_HCD_MspInit+0xbc>)
 800a8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f2:	4a0b      	ldr	r2, [pc, #44]	; (800a920 <HAL_HCD_MspInit+0xbc>)
 800a8f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8f8:	6453      	str	r3, [r2, #68]	; 0x44
 800a8fa:	4b09      	ldr	r3, [pc, #36]	; (800a920 <HAL_HCD_MspInit+0xbc>)
 800a8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a902:	60fb      	str	r3, [r7, #12]
 800a904:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a906:	2200      	movs	r2, #0
 800a908:	2105      	movs	r1, #5
 800a90a:	2043      	movs	r0, #67	; 0x43
 800a90c:	f7f6 fb7b 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a910:	2043      	movs	r0, #67	; 0x43
 800a912:	f7f6 fb94 	bl	800103e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a916:	bf00      	nop
 800a918:	3728      	adds	r7, #40	; 0x28
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	40023800 	.word	0x40023800
 800a924:	40020000 	.word	0x40020000

0800a928 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a936:	4618      	mov	r0, r3
 800a938:	f7fc f835 	bl	80069a6 <USBH_LL_IncTimer>
}
 800a93c:	bf00      	nop
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a952:	4618      	mov	r0, r3
 800a954:	f7fc f879 	bl	8006a4a <USBH_LL_Connect>
}
 800a958:	bf00      	nop
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fc f88e 	bl	8006a90 <USBH_LL_Disconnect>
}
 800a974:	bf00      	nop
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
 800a988:	4613      	mov	r3, r2
 800a98a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a992:	4618      	mov	r0, r3
 800a994:	f7fc f8c5 	bl	8006b22 <USBH_LL_NotifyURBChange>
#endif
}
 800a998:	bf00      	nop
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fc f823 	bl	80069fa <USBH_LL_PortEnabled>
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fc f82f 	bl	8006a2e <USBH_LL_PortDisabled>
}
 800a9d0:	bf00      	nop
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d12a      	bne.n	800aa40 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a9ea:	4a18      	ldr	r2, [pc, #96]	; (800aa4c <USBH_LL_Init+0x74>)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a15      	ldr	r2, [pc, #84]	; (800aa4c <USBH_LL_Init+0x74>)
 800a9f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a9fa:	4b14      	ldr	r3, [pc, #80]	; (800aa4c <USBH_LL_Init+0x74>)
 800a9fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aa00:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800aa02:	4b12      	ldr	r3, [pc, #72]	; (800aa4c <USBH_LL_Init+0x74>)
 800aa04:	2208      	movs	r2, #8
 800aa06:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aa08:	4b10      	ldr	r3, [pc, #64]	; (800aa4c <USBH_LL_Init+0x74>)
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aa0e:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <USBH_LL_Init+0x74>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aa14:	4b0d      	ldr	r3, [pc, #52]	; (800aa4c <USBH_LL_Init+0x74>)
 800aa16:	2202      	movs	r2, #2
 800aa18:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aa1a:	4b0c      	ldr	r3, [pc, #48]	; (800aa4c <USBH_LL_Init+0x74>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aa20:	480a      	ldr	r0, [pc, #40]	; (800aa4c <USBH_LL_Init+0x74>)
 800aa22:	f7f6 fcdc 	bl	80013de <HAL_HCD_Init>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d001      	beq.n	800aa30 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aa2c:	f7f5 ffb1 	bl	8000992 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aa30:	4806      	ldr	r0, [pc, #24]	; (800aa4c <USBH_LL_Init+0x74>)
 800aa32:	f7f7 f8c0 	bl	8001bb6 <HAL_HCD_GetCurrentFrame>
 800aa36:	4603      	mov	r3, r0
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7fb ffa4 	bl	8006988 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	20004f18 	.word	0x20004f18

0800aa50 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7f7 f82f 	bl	8001aca <HAL_HCD_Start>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f000 f95c 	bl	800ad30 <USBH_Get_USB_Status>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7f7 f837 	bl	8001b10 <HAL_HCD_Stop>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 f941 	bl	800ad30 <USBH_Get_USB_Status>
 800aaae:	4603      	mov	r3, r0
 800aab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aac4:	2301      	movs	r3, #1
 800aac6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aace:	4618      	mov	r0, r3
 800aad0:	f7f7 f87f 	bl	8001bd2 <HAL_HCD_GetCurrentSpeed>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d00c      	beq.n	800aaf4 <USBH_LL_GetSpeed+0x38>
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d80d      	bhi.n	800aafa <USBH_LL_GetSpeed+0x3e>
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d002      	beq.n	800aae8 <USBH_LL_GetSpeed+0x2c>
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d003      	beq.n	800aaee <USBH_LL_GetSpeed+0x32>
 800aae6:	e008      	b.n	800aafa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800aae8:	2300      	movs	r3, #0
 800aaea:	73fb      	strb	r3, [r7, #15]
    break;
 800aaec:	e008      	b.n	800ab00 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf2:	e005      	b.n	800ab00 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf8:	e002      	b.n	800ab00 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800aafa:	2301      	movs	r3, #1
 800aafc:	73fb      	strb	r3, [r7, #15]
    break;
 800aafe:	bf00      	nop
  }
  return  speed;
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b084      	sub	sp, #16
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab16:	2300      	movs	r3, #0
 800ab18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7f7 f812 	bl	8001b4a <HAL_HCD_ResetPort>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 f8ff 	bl	800ad30 <USBH_Get_USB_Status>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab36:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab52:	78fa      	ldrb	r2, [r7, #3]
 800ab54:	4611      	mov	r1, r2
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7f7 f819 	bl	8001b8e <HAL_HCD_HC_GetXferCount>
 800ab5c:	4603      	mov	r3, r0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab66:	b590      	push	{r4, r7, lr}
 800ab68:	b089      	sub	sp, #36	; 0x24
 800ab6a:	af04      	add	r7, sp, #16
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	4608      	mov	r0, r1
 800ab70:	4611      	mov	r1, r2
 800ab72:	461a      	mov	r2, r3
 800ab74:	4603      	mov	r3, r0
 800ab76:	70fb      	strb	r3, [r7, #3]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	70bb      	strb	r3, [r7, #2]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ab8e:	787c      	ldrb	r4, [r7, #1]
 800ab90:	78ba      	ldrb	r2, [r7, #2]
 800ab92:	78f9      	ldrb	r1, [r7, #3]
 800ab94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab96:	9302      	str	r3, [sp, #8]
 800ab98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab9c:	9301      	str	r3, [sp, #4]
 800ab9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	4623      	mov	r3, r4
 800aba6:	f7f6 fc7c 	bl	80014a2 <HAL_HCD_HC_Init>
 800abaa:	4603      	mov	r3, r0
 800abac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 f8bd 	bl	800ad30 <USBH_Get_USB_Status>
 800abb6:	4603      	mov	r3, r0
 800abb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abba:	7bbb      	ldrb	r3, [r7, #14]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd90      	pop	{r4, r7, pc}

0800abc4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	460b      	mov	r3, r1
 800abce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abde:	78fa      	ldrb	r2, [r7, #3]
 800abe0:	4611      	mov	r1, r2
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7f6 fcec 	bl	80015c0 <HAL_HCD_HC_Halt>
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 f89e 	bl	800ad30 <USBH_Get_USB_Status>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ac02:	b590      	push	{r4, r7, lr}
 800ac04:	b089      	sub	sp, #36	; 0x24
 800ac06:	af04      	add	r7, sp, #16
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	4608      	mov	r0, r1
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	461a      	mov	r2, r3
 800ac10:	4603      	mov	r3, r0
 800ac12:	70fb      	strb	r3, [r7, #3]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70bb      	strb	r3, [r7, #2]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ac2a:	787c      	ldrb	r4, [r7, #1]
 800ac2c:	78ba      	ldrb	r2, [r7, #2]
 800ac2e:	78f9      	ldrb	r1, [r7, #3]
 800ac30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ac34:	9303      	str	r3, [sp, #12]
 800ac36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac38:	9302      	str	r3, [sp, #8]
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	9301      	str	r3, [sp, #4]
 800ac3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	4623      	mov	r3, r4
 800ac46:	f7f6 fcdf 	bl	8001608 <HAL_HCD_HC_SubmitRequest>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ac4e:	7bfb      	ldrb	r3, [r7, #15]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f000 f86d 	bl	800ad30 <USBH_Get_USB_Status>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd90      	pop	{r4, r7, pc}

0800ac64 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac76:	78fa      	ldrb	r2, [r7, #3]
 800ac78:	4611      	mov	r1, r2
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7f6 ff73 	bl	8001b66 <HAL_HCD_HC_GetURBState>
 800ac80:	4603      	mov	r3, r0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b082      	sub	sp, #8
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	460b      	mov	r3, r1
 800ac94:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d103      	bne.n	800aca8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aca0:	78fb      	ldrb	r3, [r7, #3]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 f870 	bl	800ad88 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aca8:	20c8      	movs	r0, #200	; 0xc8
 800acaa:	f7f6 f8ad 	bl	8000e08 <HAL_Delay>
  return USBH_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
 800acc4:	4613      	mov	r3, r2
 800acc6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	212c      	movs	r1, #44	; 0x2c
 800acd6:	fb01 f303 	mul.w	r3, r1, r3
 800acda:	4413      	add	r3, r2
 800acdc:	333b      	adds	r3, #59	; 0x3b
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d009      	beq.n	800acf8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ace4:	78fb      	ldrb	r3, [r7, #3]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	212c      	movs	r1, #44	; 0x2c
 800acea:	fb01 f303 	mul.w	r3, r1, r3
 800acee:	4413      	add	r3, r2
 800acf0:	3354      	adds	r3, #84	; 0x54
 800acf2:	78ba      	ldrb	r2, [r7, #2]
 800acf4:	701a      	strb	r2, [r3, #0]
 800acf6:	e008      	b.n	800ad0a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	212c      	movs	r1, #44	; 0x2c
 800acfe:	fb01 f303 	mul.w	r3, r1, r3
 800ad02:	4413      	add	r3, r2
 800ad04:	3355      	adds	r3, #85	; 0x55
 800ad06:	78ba      	ldrb	r2, [r7, #2]
 800ad08:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3714      	adds	r7, #20
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7f6 f871 	bl	8000e08 <HAL_Delay>
}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
	...

0800ad30 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	4603      	mov	r3, r0
 800ad38:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
 800ad40:	2b03      	cmp	r3, #3
 800ad42:	d817      	bhi.n	800ad74 <USBH_Get_USB_Status+0x44>
 800ad44:	a201      	add	r2, pc, #4	; (adr r2, 800ad4c <USBH_Get_USB_Status+0x1c>)
 800ad46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4a:	bf00      	nop
 800ad4c:	0800ad5d 	.word	0x0800ad5d
 800ad50:	0800ad63 	.word	0x0800ad63
 800ad54:	0800ad69 	.word	0x0800ad69
 800ad58:	0800ad6f 	.word	0x0800ad6f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad60:	e00b      	b.n	800ad7a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ad62:	2302      	movs	r3, #2
 800ad64:	73fb      	strb	r3, [r7, #15]
    break;
 800ad66:	e008      	b.n	800ad7a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad6c:	e005      	b.n	800ad7a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ad6e:	2302      	movs	r3, #2
 800ad70:	73fb      	strb	r3, [r7, #15]
    break;
 800ad72:	e002      	b.n	800ad7a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ad74:	2302      	movs	r3, #2
 800ad76:	73fb      	strb	r3, [r7, #15]
    break;
 800ad78:	bf00      	nop
  }
  return usb_status;
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	4603      	mov	r3, r0
 800ad90:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ad92:	79fb      	ldrb	r3, [r7, #7]
 800ad94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ad96:	79fb      	ldrb	r3, [r7, #7]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d102      	bne.n	800ada2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	73fb      	strb	r3, [r7, #15]
 800ada0:	e001      	b.n	800ada6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ada2:	2300      	movs	r3, #0
 800ada4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
 800ada8:	461a      	mov	r2, r3
 800adaa:	2101      	movs	r1, #1
 800adac:	4803      	ldr	r0, [pc, #12]	; (800adbc <MX_DriverVbusFS+0x34>)
 800adae:	f7f6 fafd 	bl	80013ac <HAL_GPIO_WritePin>
}
 800adb2:	bf00      	nop
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	40020800 	.word	0x40020800

0800adc0 <__errno>:
 800adc0:	4b01      	ldr	r3, [pc, #4]	; (800adc8 <__errno+0x8>)
 800adc2:	6818      	ldr	r0, [r3, #0]
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	20000030 	.word	0x20000030

0800adcc <__libc_init_array>:
 800adcc:	b570      	push	{r4, r5, r6, lr}
 800adce:	4d0d      	ldr	r5, [pc, #52]	; (800ae04 <__libc_init_array+0x38>)
 800add0:	4c0d      	ldr	r4, [pc, #52]	; (800ae08 <__libc_init_array+0x3c>)
 800add2:	1b64      	subs	r4, r4, r5
 800add4:	10a4      	asrs	r4, r4, #2
 800add6:	2600      	movs	r6, #0
 800add8:	42a6      	cmp	r6, r4
 800adda:	d109      	bne.n	800adf0 <__libc_init_array+0x24>
 800addc:	4d0b      	ldr	r5, [pc, #44]	; (800ae0c <__libc_init_array+0x40>)
 800adde:	4c0c      	ldr	r4, [pc, #48]	; (800ae10 <__libc_init_array+0x44>)
 800ade0:	f000 f906 	bl	800aff0 <_init>
 800ade4:	1b64      	subs	r4, r4, r5
 800ade6:	10a4      	asrs	r4, r4, #2
 800ade8:	2600      	movs	r6, #0
 800adea:	42a6      	cmp	r6, r4
 800adec:	d105      	bne.n	800adfa <__libc_init_array+0x2e>
 800adee:	bd70      	pop	{r4, r5, r6, pc}
 800adf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800adf4:	4798      	blx	r3
 800adf6:	3601      	adds	r6, #1
 800adf8:	e7ee      	b.n	800add8 <__libc_init_array+0xc>
 800adfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800adfe:	4798      	blx	r3
 800ae00:	3601      	adds	r6, #1
 800ae02:	e7f2      	b.n	800adea <__libc_init_array+0x1e>
 800ae04:	0800b0b0 	.word	0x0800b0b0
 800ae08:	0800b0b0 	.word	0x0800b0b0
 800ae0c:	0800b0b0 	.word	0x0800b0b0
 800ae10:	0800b0b4 	.word	0x0800b0b4

0800ae14 <malloc>:
 800ae14:	4b02      	ldr	r3, [pc, #8]	; (800ae20 <malloc+0xc>)
 800ae16:	4601      	mov	r1, r0
 800ae18:	6818      	ldr	r0, [r3, #0]
 800ae1a:	f000 b871 	b.w	800af00 <_malloc_r>
 800ae1e:	bf00      	nop
 800ae20:	20000030 	.word	0x20000030

0800ae24 <free>:
 800ae24:	4b02      	ldr	r3, [pc, #8]	; (800ae30 <free+0xc>)
 800ae26:	4601      	mov	r1, r0
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	f000 b819 	b.w	800ae60 <_free_r>
 800ae2e:	bf00      	nop
 800ae30:	20000030 	.word	0x20000030

0800ae34 <memcpy>:
 800ae34:	440a      	add	r2, r1
 800ae36:	4291      	cmp	r1, r2
 800ae38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ae3c:	d100      	bne.n	800ae40 <memcpy+0xc>
 800ae3e:	4770      	bx	lr
 800ae40:	b510      	push	{r4, lr}
 800ae42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae4a:	4291      	cmp	r1, r2
 800ae4c:	d1f9      	bne.n	800ae42 <memcpy+0xe>
 800ae4e:	bd10      	pop	{r4, pc}

0800ae50 <memset>:
 800ae50:	4402      	add	r2, r0
 800ae52:	4603      	mov	r3, r0
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d100      	bne.n	800ae5a <memset+0xa>
 800ae58:	4770      	bx	lr
 800ae5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae5e:	e7f9      	b.n	800ae54 <memset+0x4>

0800ae60 <_free_r>:
 800ae60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae62:	2900      	cmp	r1, #0
 800ae64:	d048      	beq.n	800aef8 <_free_r+0x98>
 800ae66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae6a:	9001      	str	r0, [sp, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f1a1 0404 	sub.w	r4, r1, #4
 800ae72:	bfb8      	it	lt
 800ae74:	18e4      	addlt	r4, r4, r3
 800ae76:	f000 f8ad 	bl	800afd4 <__malloc_lock>
 800ae7a:	4a20      	ldr	r2, [pc, #128]	; (800aefc <_free_r+0x9c>)
 800ae7c:	9801      	ldr	r0, [sp, #4]
 800ae7e:	6813      	ldr	r3, [r2, #0]
 800ae80:	4615      	mov	r5, r2
 800ae82:	b933      	cbnz	r3, 800ae92 <_free_r+0x32>
 800ae84:	6063      	str	r3, [r4, #4]
 800ae86:	6014      	str	r4, [r2, #0]
 800ae88:	b003      	add	sp, #12
 800ae8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae8e:	f000 b8a7 	b.w	800afe0 <__malloc_unlock>
 800ae92:	42a3      	cmp	r3, r4
 800ae94:	d90b      	bls.n	800aeae <_free_r+0x4e>
 800ae96:	6821      	ldr	r1, [r4, #0]
 800ae98:	1862      	adds	r2, r4, r1
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	bf04      	itt	eq
 800ae9e:	681a      	ldreq	r2, [r3, #0]
 800aea0:	685b      	ldreq	r3, [r3, #4]
 800aea2:	6063      	str	r3, [r4, #4]
 800aea4:	bf04      	itt	eq
 800aea6:	1852      	addeq	r2, r2, r1
 800aea8:	6022      	streq	r2, [r4, #0]
 800aeaa:	602c      	str	r4, [r5, #0]
 800aeac:	e7ec      	b.n	800ae88 <_free_r+0x28>
 800aeae:	461a      	mov	r2, r3
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	b10b      	cbz	r3, 800aeb8 <_free_r+0x58>
 800aeb4:	42a3      	cmp	r3, r4
 800aeb6:	d9fa      	bls.n	800aeae <_free_r+0x4e>
 800aeb8:	6811      	ldr	r1, [r2, #0]
 800aeba:	1855      	adds	r5, r2, r1
 800aebc:	42a5      	cmp	r5, r4
 800aebe:	d10b      	bne.n	800aed8 <_free_r+0x78>
 800aec0:	6824      	ldr	r4, [r4, #0]
 800aec2:	4421      	add	r1, r4
 800aec4:	1854      	adds	r4, r2, r1
 800aec6:	42a3      	cmp	r3, r4
 800aec8:	6011      	str	r1, [r2, #0]
 800aeca:	d1dd      	bne.n	800ae88 <_free_r+0x28>
 800aecc:	681c      	ldr	r4, [r3, #0]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	6053      	str	r3, [r2, #4]
 800aed2:	4421      	add	r1, r4
 800aed4:	6011      	str	r1, [r2, #0]
 800aed6:	e7d7      	b.n	800ae88 <_free_r+0x28>
 800aed8:	d902      	bls.n	800aee0 <_free_r+0x80>
 800aeda:	230c      	movs	r3, #12
 800aedc:	6003      	str	r3, [r0, #0]
 800aede:	e7d3      	b.n	800ae88 <_free_r+0x28>
 800aee0:	6825      	ldr	r5, [r4, #0]
 800aee2:	1961      	adds	r1, r4, r5
 800aee4:	428b      	cmp	r3, r1
 800aee6:	bf04      	itt	eq
 800aee8:	6819      	ldreq	r1, [r3, #0]
 800aeea:	685b      	ldreq	r3, [r3, #4]
 800aeec:	6063      	str	r3, [r4, #4]
 800aeee:	bf04      	itt	eq
 800aef0:	1949      	addeq	r1, r1, r5
 800aef2:	6021      	streq	r1, [r4, #0]
 800aef4:	6054      	str	r4, [r2, #4]
 800aef6:	e7c7      	b.n	800ae88 <_free_r+0x28>
 800aef8:	b003      	add	sp, #12
 800aefa:	bd30      	pop	{r4, r5, pc}
 800aefc:	200049c8 	.word	0x200049c8

0800af00 <_malloc_r>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	1ccd      	adds	r5, r1, #3
 800af04:	f025 0503 	bic.w	r5, r5, #3
 800af08:	3508      	adds	r5, #8
 800af0a:	2d0c      	cmp	r5, #12
 800af0c:	bf38      	it	cc
 800af0e:	250c      	movcc	r5, #12
 800af10:	2d00      	cmp	r5, #0
 800af12:	4606      	mov	r6, r0
 800af14:	db01      	blt.n	800af1a <_malloc_r+0x1a>
 800af16:	42a9      	cmp	r1, r5
 800af18:	d903      	bls.n	800af22 <_malloc_r+0x22>
 800af1a:	230c      	movs	r3, #12
 800af1c:	6033      	str	r3, [r6, #0]
 800af1e:	2000      	movs	r0, #0
 800af20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af22:	f000 f857 	bl	800afd4 <__malloc_lock>
 800af26:	4921      	ldr	r1, [pc, #132]	; (800afac <_malloc_r+0xac>)
 800af28:	680a      	ldr	r2, [r1, #0]
 800af2a:	4614      	mov	r4, r2
 800af2c:	b99c      	cbnz	r4, 800af56 <_malloc_r+0x56>
 800af2e:	4f20      	ldr	r7, [pc, #128]	; (800afb0 <_malloc_r+0xb0>)
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	b923      	cbnz	r3, 800af3e <_malloc_r+0x3e>
 800af34:	4621      	mov	r1, r4
 800af36:	4630      	mov	r0, r6
 800af38:	f000 f83c 	bl	800afb4 <_sbrk_r>
 800af3c:	6038      	str	r0, [r7, #0]
 800af3e:	4629      	mov	r1, r5
 800af40:	4630      	mov	r0, r6
 800af42:	f000 f837 	bl	800afb4 <_sbrk_r>
 800af46:	1c43      	adds	r3, r0, #1
 800af48:	d123      	bne.n	800af92 <_malloc_r+0x92>
 800af4a:	230c      	movs	r3, #12
 800af4c:	6033      	str	r3, [r6, #0]
 800af4e:	4630      	mov	r0, r6
 800af50:	f000 f846 	bl	800afe0 <__malloc_unlock>
 800af54:	e7e3      	b.n	800af1e <_malloc_r+0x1e>
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	1b5b      	subs	r3, r3, r5
 800af5a:	d417      	bmi.n	800af8c <_malloc_r+0x8c>
 800af5c:	2b0b      	cmp	r3, #11
 800af5e:	d903      	bls.n	800af68 <_malloc_r+0x68>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	441c      	add	r4, r3
 800af64:	6025      	str	r5, [r4, #0]
 800af66:	e004      	b.n	800af72 <_malloc_r+0x72>
 800af68:	6863      	ldr	r3, [r4, #4]
 800af6a:	42a2      	cmp	r2, r4
 800af6c:	bf0c      	ite	eq
 800af6e:	600b      	streq	r3, [r1, #0]
 800af70:	6053      	strne	r3, [r2, #4]
 800af72:	4630      	mov	r0, r6
 800af74:	f000 f834 	bl	800afe0 <__malloc_unlock>
 800af78:	f104 000b 	add.w	r0, r4, #11
 800af7c:	1d23      	adds	r3, r4, #4
 800af7e:	f020 0007 	bic.w	r0, r0, #7
 800af82:	1ac2      	subs	r2, r0, r3
 800af84:	d0cc      	beq.n	800af20 <_malloc_r+0x20>
 800af86:	1a1b      	subs	r3, r3, r0
 800af88:	50a3      	str	r3, [r4, r2]
 800af8a:	e7c9      	b.n	800af20 <_malloc_r+0x20>
 800af8c:	4622      	mov	r2, r4
 800af8e:	6864      	ldr	r4, [r4, #4]
 800af90:	e7cc      	b.n	800af2c <_malloc_r+0x2c>
 800af92:	1cc4      	adds	r4, r0, #3
 800af94:	f024 0403 	bic.w	r4, r4, #3
 800af98:	42a0      	cmp	r0, r4
 800af9a:	d0e3      	beq.n	800af64 <_malloc_r+0x64>
 800af9c:	1a21      	subs	r1, r4, r0
 800af9e:	4630      	mov	r0, r6
 800afa0:	f000 f808 	bl	800afb4 <_sbrk_r>
 800afa4:	3001      	adds	r0, #1
 800afa6:	d1dd      	bne.n	800af64 <_malloc_r+0x64>
 800afa8:	e7cf      	b.n	800af4a <_malloc_r+0x4a>
 800afaa:	bf00      	nop
 800afac:	200049c8 	.word	0x200049c8
 800afb0:	200049cc 	.word	0x200049cc

0800afb4 <_sbrk_r>:
 800afb4:	b538      	push	{r3, r4, r5, lr}
 800afb6:	4d06      	ldr	r5, [pc, #24]	; (800afd0 <_sbrk_r+0x1c>)
 800afb8:	2300      	movs	r3, #0
 800afba:	4604      	mov	r4, r0
 800afbc:	4608      	mov	r0, r1
 800afbe:	602b      	str	r3, [r5, #0]
 800afc0:	f7f5 fe3e 	bl	8000c40 <_sbrk>
 800afc4:	1c43      	adds	r3, r0, #1
 800afc6:	d102      	bne.n	800afce <_sbrk_r+0x1a>
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	b103      	cbz	r3, 800afce <_sbrk_r+0x1a>
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	2000521c 	.word	0x2000521c

0800afd4 <__malloc_lock>:
 800afd4:	4801      	ldr	r0, [pc, #4]	; (800afdc <__malloc_lock+0x8>)
 800afd6:	f000 b809 	b.w	800afec <__retarget_lock_acquire_recursive>
 800afda:	bf00      	nop
 800afdc:	20005224 	.word	0x20005224

0800afe0 <__malloc_unlock>:
 800afe0:	4801      	ldr	r0, [pc, #4]	; (800afe8 <__malloc_unlock+0x8>)
 800afe2:	f000 b804 	b.w	800afee <__retarget_lock_release_recursive>
 800afe6:	bf00      	nop
 800afe8:	20005224 	.word	0x20005224

0800afec <__retarget_lock_acquire_recursive>:
 800afec:	4770      	bx	lr

0800afee <__retarget_lock_release_recursive>:
 800afee:	4770      	bx	lr

0800aff0 <_init>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	bf00      	nop
 800aff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff6:	bc08      	pop	{r3}
 800aff8:	469e      	mov	lr, r3
 800affa:	4770      	bx	lr

0800affc <_fini>:
 800affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affe:	bf00      	nop
 800b000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b002:	bc08      	pop	{r3}
 800b004:	469e      	mov	lr, r3
 800b006:	4770      	bx	lr
