
FreeRTOS_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800d048  0800d048  0001d048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d29c  0800d29c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d29c  0800d29c  0001d29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2a4  0800d2a4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2a4  0800d2a4  0001d2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2a8  0800d2a8  0001d2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d2ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007d30  200001e8  0800d494  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007f18  0800d494  00027f18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f753  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c18  00000000  00000000  0004f96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020e8  00000000  00000000  00055588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ec8  00000000  00000000  00057670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000080bf  00000000  00000000  00059538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bc49  00000000  00000000  000615f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea280  00000000  00000000  0008d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001774c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e84  00000000  00000000  00177514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d030 	.word	0x0800d030

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800d030 	.word	0x0800d030

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 feaa 	bl	8001224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f888 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa56 	bl	8000984 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f966 	bl	80007a8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f992 	bl	8000804 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f9c0 	bl	8000864 <MX_SPI1_Init>
  MX_ADC1_Init();
 80004e4:	f000 f8e8 	bl	80006b8 <MX_ADC1_Init>
  MX_TIM4_Init();
 80004e8:	f000 f9f2 	bl	80008d0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80004ec:	4825      	ldr	r0, [pc, #148]	; (8000584 <main+0xbc>)
 80004ee:	f000 ff43 	bl	8001378 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80004f2:	2100      	movs	r1, #0
 80004f4:	4824      	ldr	r0, [pc, #144]	; (8000588 <main+0xc0>)
 80004f6:	f004 fd79 	bl	8004fec <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fa:	f008 fb85 	bl	8008c08 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BtnSem */
  BtnSemHandle = osSemaphoreNew(1, 0, &BtnSem_attributes);
 80004fe:	4a23      	ldr	r2, [pc, #140]	; (800058c <main+0xc4>)
 8000500:	2100      	movs	r1, #0
 8000502:	2001      	movs	r0, #1
 8000504:	f008 fc77 	bl	8008df6 <osSemaphoreNew>
 8000508:	4603      	mov	r3, r0
 800050a:	4a21      	ldr	r2, [pc, #132]	; (8000590 <main+0xc8>)
 800050c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 800050e:	4a21      	ldr	r2, [pc, #132]	; (8000594 <main+0xcc>)
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	200a      	movs	r0, #10
 8000514:	f008 fd8e 	bl	8009034 <osMessageQueueNew>
 8000518:	4603      	mov	r3, r0
 800051a:	4a1f      	ldr	r2, [pc, #124]	; (8000598 <main+0xd0>)
 800051c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800051e:	4a1f      	ldr	r2, [pc, #124]	; (800059c <main+0xd4>)
 8000520:	2100      	movs	r1, #0
 8000522:	481f      	ldr	r0, [pc, #124]	; (80005a0 <main+0xd8>)
 8000524:	f008 fbba 	bl	8008c9c <osThreadNew>
 8000528:	4603      	mov	r3, r0
 800052a:	4a1e      	ldr	r2, [pc, #120]	; (80005a4 <main+0xdc>)
 800052c:	6013      	str	r3, [r2, #0]

  /* creation of LED_BLUE_BLINK */
  LED_BLUE_BLINKHandle = osThreadNew(StartLED_BLUE_BLINK, NULL, &LED_BLUE_BLINK_attributes);
 800052e:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <main+0xe0>)
 8000530:	2100      	movs	r1, #0
 8000532:	481e      	ldr	r0, [pc, #120]	; (80005ac <main+0xe4>)
 8000534:	f008 fbb2 	bl	8008c9c <osThreadNew>
 8000538:	4603      	mov	r3, r0
 800053a:	4a1d      	ldr	r2, [pc, #116]	; (80005b0 <main+0xe8>)
 800053c:	6013      	str	r3, [r2, #0]

  /* creation of LED_YELLOW_ADC */
  LED_YELLOW_ADCHandle = osThreadNew(StartLED_YELLOW_ADC, NULL, &LED_YELLOW_ADC_attributes);
 800053e:	4a1d      	ldr	r2, [pc, #116]	; (80005b4 <main+0xec>)
 8000540:	2100      	movs	r1, #0
 8000542:	481d      	ldr	r0, [pc, #116]	; (80005b8 <main+0xf0>)
 8000544:	f008 fbaa 	bl	8008c9c <osThreadNew>
 8000548:	4603      	mov	r3, r0
 800054a:	4a1c      	ldr	r2, [pc, #112]	; (80005bc <main+0xf4>)
 800054c:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(StartUART_Task, NULL, &UART_Task_attributes);
 800054e:	4a1c      	ldr	r2, [pc, #112]	; (80005c0 <main+0xf8>)
 8000550:	2100      	movs	r1, #0
 8000552:	481c      	ldr	r0, [pc, #112]	; (80005c4 <main+0xfc>)
 8000554:	f008 fba2 	bl	8008c9c <osThreadNew>
 8000558:	4603      	mov	r3, r0
 800055a:	4a1b      	ldr	r2, [pc, #108]	; (80005c8 <main+0x100>)
 800055c:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Task */
  ADC_TaskHandle = osThreadNew(StartADC_Task, NULL, &ADC_Task_attributes);
 800055e:	4a1b      	ldr	r2, [pc, #108]	; (80005cc <main+0x104>)
 8000560:	2100      	movs	r1, #0
 8000562:	481b      	ldr	r0, [pc, #108]	; (80005d0 <main+0x108>)
 8000564:	f008 fb9a 	bl	8008c9c <osThreadNew>
 8000568:	4603      	mov	r3, r0
 800056a:	4a1a      	ldr	r2, [pc, #104]	; (80005d4 <main+0x10c>)
 800056c:	6013      	str	r3, [r2, #0]

  /* creation of TeadBtn_Task */
  TeadBtn_TaskHandle = osThreadNew(StartTeadBtn_Task, NULL, &TeadBtn_Task_attributes);
 800056e:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <main+0x110>)
 8000570:	2100      	movs	r1, #0
 8000572:	481a      	ldr	r0, [pc, #104]	; (80005dc <main+0x114>)
 8000574:	f008 fb92 	bl	8008c9c <osThreadNew>
 8000578:	4603      	mov	r3, r0
 800057a:	4a19      	ldr	r2, [pc, #100]	; (80005e0 <main+0x118>)
 800057c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057e:	f008 fb67 	bl	8008c50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000582:	e7fe      	b.n	8000582 <main+0xba>
 8000584:	20005ab4 	.word	0x20005ab4
 8000588:	20004e54 	.word	0x20004e54
 800058c:	0800d214 	.word	0x0800d214
 8000590:	20004dfc 	.word	0x20004dfc
 8000594:	0800d1fc 	.word	0x0800d1fc
 8000598:	200053ac 	.word	0x200053ac
 800059c:	0800d124 	.word	0x0800d124
 80005a0:	08000b7d 	.word	0x08000b7d
 80005a4:	20004e00 	.word	0x20004e00
 80005a8:	0800d148 	.word	0x0800d148
 80005ac:	08000b91 	.word	0x08000b91
 80005b0:	20006194 	.word	0x20006194
 80005b4:	0800d16c 	.word	0x0800d16c
 80005b8:	08000bc5 	.word	0x08000bc5
 80005bc:	2000607c 	.word	0x2000607c
 80005c0:	0800d190 	.word	0x0800d190
 80005c4:	08000bfd 	.word	0x08000bfd
 80005c8:	20005afc 	.word	0x20005afc
 80005cc:	0800d1b4 	.word	0x0800d1b4
 80005d0:	08000c31 	.word	0x08000c31
 80005d4:	20005ab0 	.word	0x20005ab0
 80005d8:	0800d1d8 	.word	0x0800d1d8
 80005dc:	08000c61 	.word	0x08000c61
 80005e0:	20005d00 	.word	0x20005d00

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f00c fc4e 	bl	800ce94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <SystemClock_Config+0xcc>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemClock_Config+0xd0>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000658:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000662:	2307      	movs	r3, #7
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fd4a 	bl	8004104 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000676:	f000 fb34 	bl	8000ce2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000686:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2105      	movs	r1, #5
 8000698:	4618      	mov	r0, r3
 800069a:	f003 ffab 	bl	80045f4 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a4:	f000 fb1d 	bl	8000ce2 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08c      	sub	sp, #48	; 0x30
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006cc:	463b      	mov	r3, r7
 80006ce:	2220      	movs	r2, #32
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00c fbde 	bl	800ce94 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006da:	4a30      	ldr	r2, [pc, #192]	; (800079c <MX_ADC1_Init+0xe4>)
 80006dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000702:	2200      	movs	r2, #0
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000708:	4a25      	ldr	r2, [pc, #148]	; (80007a0 <MX_ADC1_Init+0xe8>)
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_ADC1_Init+0xe0>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000714:	2201      	movs	r2, #1
 8000716:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_ADC1_Init+0xe0>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000722:	2201      	movs	r2, #1
 8000724:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000726:	481c      	ldr	r0, [pc, #112]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000728:	f000 fde2 	bl	80012f0 <HAL_ADC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000732:	f000 fad6 	bl	8000ce2 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	2309      	movs	r3, #9
 8000738:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	4619      	mov	r1, r3
 8000748:	4813      	ldr	r0, [pc, #76]	; (8000798 <MX_ADC1_Init+0xe0>)
 800074a:	f000 fef5 	bl	8001538 <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000754:	f000 fac5 	bl	8000ce2 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_9;
 8000758:	2309      	movs	r3, #9
 800075a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_ADC1_Init+0xec>)
 800076e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000782:	f001 f8f7 	bl	8001974 <HAL_ADCEx_InjectedConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800078c:	f000 faa9 	bl	8000ce2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3730      	adds	r7, #48	; 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20005ab4 	.word	0x20005ab4
 800079c:	40012000 	.word	0x40012000
 80007a0:	0f000001 	.word	0x0f000001
 80007a4:	000f0001 	.word	0x000f0001

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f001 fd25 	bl	8002234 <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 fa77 	bl	8000ce2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20004e9c 	.word	0x20004e9c
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_I2S3_Init+0x54>)
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <MX_I2S3_Init+0x58>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2S3_Init+0x54>)
 8000810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000814:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_I2S3_Init+0x54>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_I2S3_Init+0x54>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_I2S3_Init+0x54>)
 8000824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000828:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_I2S3_Init+0x54>)
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <MX_I2S3_Init+0x5c>)
 800082e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_I2S3_Init+0x54>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_I2S3_Init+0x54>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_I2S3_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_I2S3_Init+0x54>)
 8000844:	f001 fe3a 	bl	80024bc <HAL_I2S_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800084e:	f000 fa48 	bl	8000ce2 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20006560 	.word	0x20006560
 800085c:	40003c00 	.word	0x40003c00
 8000860:	00017700 	.word	0x00017700

08000864 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_SPI1_Init+0x64>)
 800086a:	4a18      	ldr	r2, [pc, #96]	; (80008cc <MX_SPI1_Init+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000894:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_SPI1_Init+0x64>)
 80008b0:	220a      	movs	r2, #10
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_SPI1_Init+0x64>)
 80008b6:	f004 f9f7 	bl	8004ca8 <HAL_SPI_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008c0:	f000 fa0f 	bl	8000ce2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20006080 	.word	0x20006080
 80008cc:	40013000 	.word	0x40013000

080008d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
 80008ee:	615a      	str	r2, [r3, #20]
 80008f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_TIM4_Init+0xac>)
 80008f4:	4a22      	ldr	r2, [pc, #136]	; (8000980 <MX_TIM4_Init+0xb0>)
 80008f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300;
 80008f8:	4b20      	ldr	r3, [pc, #128]	; (800097c <MX_TIM4_Init+0xac>)
 80008fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_TIM4_Init+0xac>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_TIM4_Init+0xac>)
 8000908:	f640 72ff 	movw	r2, #4095	; 0xfff
 800090c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_TIM4_Init+0xac>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_TIM4_Init+0xac>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800091a:	4818      	ldr	r0, [pc, #96]	; (800097c <MX_TIM4_Init+0xac>)
 800091c:	f004 fb16 	bl	8004f4c <HAL_TIM_PWM_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000926:	f000 f9dc 	bl	8000ce2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800092a:	2310      	movs	r3, #16
 800092c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	4619      	mov	r1, r3
 8000938:	4810      	ldr	r0, [pc, #64]	; (800097c <MX_TIM4_Init+0xac>)
 800093a:	f005 f887 	bl	8005a4c <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000944:	f000 f9cd 	bl	8000ce2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000948:	2360      	movs	r3, #96	; 0x60
 800094a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	4619      	mov	r1, r3
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <MX_TIM4_Init+0xac>)
 8000960:	f004 fd14 	bl	800538c <HAL_TIM_PWM_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800096a:	f000 f9ba 	bl	8000ce2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <MX_TIM4_Init+0xac>)
 8000970:	f000 fb5e 	bl	8001030 <HAL_TIM_MspPostInit>

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	; 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20004e54 	.word	0x20004e54
 8000980:	40000800 	.word	0x40000800

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	; 0x30
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	4b71      	ldr	r3, [pc, #452]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a70      	ldr	r2, [pc, #448]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 80009a4:	f043 0310 	orr.w	r3, r3, #16
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b6e      	ldr	r3, [pc, #440]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0310 	and.w	r3, r3, #16
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	4b6a      	ldr	r3, [pc, #424]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a69      	ldr	r2, [pc, #420]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b67      	ldr	r3, [pc, #412]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b63      	ldr	r3, [pc, #396]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a62      	ldr	r2, [pc, #392]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 80009dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b60      	ldr	r3, [pc, #384]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b5c      	ldr	r3, [pc, #368]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a5b      	ldr	r2, [pc, #364]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b59      	ldr	r3, [pc, #356]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b55      	ldr	r3, [pc, #340]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a54      	ldr	r2, [pc, #336]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b52      	ldr	r3, [pc, #328]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b4e      	ldr	r3, [pc, #312]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a4d      	ldr	r2, [pc, #308]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b4b      	ldr	r3, [pc, #300]	; (8000b64 <MX_GPIO_Init+0x1e0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2108      	movs	r1, #8
 8000a46:	4848      	ldr	r0, [pc, #288]	; (8000b68 <MX_GPIO_Init+0x1e4>)
 8000a48:	f001 fbc0 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4846      	ldr	r0, [pc, #280]	; (8000b6c <MX_GPIO_Init+0x1e8>)
 8000a52:	f001 fbbb 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f24e 0110 	movw	r1, #57360	; 0xe010
 8000a5c:	4844      	ldr	r0, [pc, #272]	; (8000b70 <MX_GPIO_Init+0x1ec>)
 8000a5e:	f001 fbb5 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a62:	2308      	movs	r3, #8
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	483b      	ldr	r0, [pc, #236]	; (8000b68 <MX_GPIO_Init+0x1e4>)
 8000a7a:	f001 f9f3 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4835      	ldr	r0, [pc, #212]	; (8000b6c <MX_GPIO_Init+0x1e8>)
 8000a96:	f001 f9e5 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	482d      	ldr	r0, [pc, #180]	; (8000b6c <MX_GPIO_Init+0x1e8>)
 8000ab6:	f001 f9d5 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4829      	ldr	r0, [pc, #164]	; (8000b74 <MX_GPIO_Init+0x1f0>)
 8000ace:	f001 f9c9 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4824      	ldr	r0, [pc, #144]	; (8000b78 <MX_GPIO_Init+0x1f4>)
 8000ae6:	f001 f9bd 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000afc:	2305      	movs	r3, #5
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	481c      	ldr	r0, [pc, #112]	; (8000b78 <MX_GPIO_Init+0x1f4>)
 8000b08:	f001 f9ac 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8000b0c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4812      	ldr	r0, [pc, #72]	; (8000b70 <MX_GPIO_Init+0x1ec>)
 8000b26:	f001 f99d 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b2a:	2320      	movs	r3, #32
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <MX_GPIO_Init+0x1ec>)
 8000b3e:	f001 f991 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b46:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_GPIO_Init+0x1e4>)
 8000b58:	f001 f984 	bl	8001e64 <HAL_GPIO_Init>

}
 8000b5c:	bf00      	nop
 8000b5e:	3730      	adds	r7, #48	; 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020400 	.word	0x40020400

08000b7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b84:	f00b fc2a 	bl	800c3dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f008 f919 	bl	8008dc0 <osDelay>
 8000b8e:	e7fb      	b.n	8000b88 <StartDefaultTask+0xc>

08000b90 <StartLED_BLUE_BLINK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_BLUE_BLINK */
void StartLED_BLUE_BLINK(void *argument)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_BLUE_BLINK */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9e:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <StartLED_BLUE_BLINK+0x30>)
 8000ba0:	f001 fb14 	bl	80021cc <HAL_GPIO_WritePin>
	  osDelay(100);
 8000ba4:	2064      	movs	r0, #100	; 0x64
 8000ba6:	f008 f90b 	bl	8008dc0 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <StartLED_BLUE_BLINK+0x30>)
 8000bb2:	f001 fb0b 	bl	80021cc <HAL_GPIO_WritePin>
	  osDelay(900);
 8000bb6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000bba:	f008 f901 	bl	8008dc0 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000bbe:	e7eb      	b.n	8000b98 <StartLED_BLUE_BLINK+0x8>
 8000bc0:	40020c00 	.word	0x40020c00

08000bc4 <StartLED_YELLOW_ADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_YELLOW_ADC */
void StartLED_YELLOW_ADC(void *argument)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_YELLOW_ADC */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreAcquire(BtnSemHandle, osWaitForever) == osOK);							// Waiting on press button
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <StartLED_YELLOW_ADC+0x30>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f008 f997 	bl	8008f08 <osSemaphoreAcquire>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <StartLED_YELLOW_ADC+0x34>)
 8000be0:	f001 fb0d 	bl	80021fe <HAL_GPIO_TogglePin>

//		  char test_str[] = "HELLO \n\r";
//		  CDC_Transmit_FS(test_str, sizeof(test_str));
		  osDelay(100);
 8000be4:	2064      	movs	r0, #100	; 0x64
 8000be6:	f008 f8eb 	bl	8008dc0 <osDelay>
	  }
	  osDelay(100);
 8000bea:	2064      	movs	r0, #100	; 0x64
 8000bec:	f008 f8e8 	bl	8008dc0 <osDelay>
	  if(osSemaphoreAcquire(BtnSemHandle, osWaitForever) == osOK);							// Waiting on press button
 8000bf0:	e7ec      	b.n	8000bcc <StartLED_YELLOW_ADC+0x8>
 8000bf2:	bf00      	nop
 8000bf4:	20004dfc 	.word	0x20004dfc
 8000bf8:	40020c00 	.word	0x40020c00

08000bfc <StartUART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_Task */
void StartUART_Task(void *argument)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0a2      	sub	sp, #136	; 0x88
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_Task */
  /* Infinite loop */
	QUEUE_t msg;
  for(;;)
  {
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);		// Write for data on queue
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <StartUART_Task+0x30>)
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	f107 0108 	add.w	r1, r7, #8
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c10:	2200      	movs	r2, #0
 8000c12:	f008 fae3 	bl	80091dc <osMessageQueueGet>
	CDC_Transmit_FS(msg.Buf, sizeof(msg.Buf));						// Transmit data over virtual comport
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2180      	movs	r1, #128	; 0x80
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00b fc9b 	bl	800c558 <CDC_Transmit_FS>
    osDelay(1);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f008 f8cc 	bl	8008dc0 <osDelay>
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);		// Write for data on queue
 8000c28:	e7ec      	b.n	8000c04 <StartUART_Task+0x8>
 8000c2a:	bf00      	nop
 8000c2c:	200053ac 	.word	0x200053ac

08000c30 <StartADC_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC_Task */
void StartADC_Task(void *argument)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC_Task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <StartADC_Task+0x28>)
 8000c3a:	f000 fb9d 	bl	8001378 <HAL_ADC_Start>
	  uint16_t adc_res = HAL_ADC_GetValue(&hadc1);						// Read Voltage on potentiometer
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <StartADC_Task+0x28>)
 8000c40:	f000 fc6c 	bl	800151c <HAL_ADC_GetValue>
 8000c44:	4603      	mov	r3, r0
 8000c46:	81fb      	strh	r3, [r7, #14]
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, adc_res);			// Set PWM generation
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <StartADC_Task+0x2c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	89fa      	ldrh	r2, [r7, #14]
 8000c4e:	635a      	str	r2, [r3, #52]	; 0x34
	  osDelay(100);
 8000c50:	2064      	movs	r0, #100	; 0x64
 8000c52:	f008 f8b5 	bl	8008dc0 <osDelay>
  {
 8000c56:	e7ef      	b.n	8000c38 <StartADC_Task+0x8>
 8000c58:	20005ab4 	.word	0x20005ab4
 8000c5c:	20004e54 	.word	0x20004e54

08000c60 <StartTeadBtn_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeadBtn_Task */
void StartTeadBtn_Task(void *argument)
{
 8000c60:	b5b0      	push	{r4, r5, r7, lr}
 8000c62:	b0a2      	sub	sp, #136	; 0x88
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeadBtn_Task */
  /* Infinite loop */
	QUEUE_t msg;
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000c68:	2101      	movs	r1, #1
 8000c6a:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <StartTeadBtn_Task+0x54>)
 8000c6c:	f001 fa96 	bl	800219c <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d01a      	beq.n	8000cac <StartTeadBtn_Task+0x4c>
	  {
		  osSemaphoreRelease(BtnSemHandle);								// Set BtnSemHandle semaphore
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <StartTeadBtn_Task+0x58>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f008 f996 	bl	8008fac <osSemaphoreRelease>
		  strcpy(msg.Buf, "Btn pressed!!!\r\n");						// Write message
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <StartTeadBtn_Task+0x5c>)
 8000c86:	461c      	mov	r4, r3
 8000c88:	4615      	mov	r5, r2
 8000c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8e:	682b      	ldr	r3, [r5, #0]
 8000c90:	7023      	strb	r3, [r4, #0]
		  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);	// Write data on queue
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <StartTeadBtn_Task+0x60>)
 8000c94:	6818      	ldr	r0, [r3, #0]
 8000c96:	f107 0108 	add.w	r1, r7, #8
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f008 fa3c 	bl	800911c <osMessageQueuePut>
		  osDelay(300);
 8000ca4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ca8:	f008 f88a 	bl	8008dc0 <osDelay>
	  }
	  osDelay(100);
 8000cac:	2064      	movs	r0, #100	; 0x64
 8000cae:	f008 f887 	bl	8008dc0 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000cb2:	e7d9      	b.n	8000c68 <StartTeadBtn_Task+0x8>
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	20004dfc 	.word	0x20004dfc
 8000cbc:	0800d0b0 	.word	0x0800d0b0
 8000cc0:	200053ac 	.word	0x200053ac

08000cc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd4:	d101      	bne.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cd6:	f000 fac7 	bl	8001268 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce6:	b672      	cpsid	i
}
 8000ce8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cea:	e7fe      	b.n	8000cea <Error_Handler+0x8>

08000cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_MspInit+0x54>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <HAL_MspInit+0x54>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x54>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_MspInit+0x54>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_MspInit+0x54>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_MspInit+0x54>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	210f      	movs	r1, #15
 8000d2e:	f06f 0001 	mvn.w	r0, #1
 8000d32:	f001 f86d 	bl	8001e10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_ADC_MspInit+0x7c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d127      	bne.n	8000db6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_ADC_MspInit+0x80>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <HAL_ADC_MspInit+0x80>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_ADC_MspInit+0x80>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_ADC_MspInit+0x80>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_ADC_MspInit+0x80>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_ADC_MspInit+0x80>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da2:	2303      	movs	r3, #3
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_ADC_MspInit+0x84>)
 8000db2:	f001 f857 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40012000 	.word	0x40012000
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020400 	.word	0x40020400

08000dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <HAL_I2C_MspInit+0x84>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12c      	bne.n	8000e48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_I2C_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_I2C_MspInit+0x88>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_I2C_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e10:	2312      	movs	r3, #18
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	480c      	ldr	r0, [pc, #48]	; (8000e58 <HAL_I2C_MspInit+0x8c>)
 8000e28:	f001 f81c 	bl	8001e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_I2C_MspInit+0x88>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_I2C_MspInit+0x88>)
 8000e36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_I2C_MspInit+0x88>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3728      	adds	r7, #40	; 0x28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40005400 	.word	0x40005400
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020400 	.word	0x40020400

08000e5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	; 0x38
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a31      	ldr	r2, [pc, #196]	; (8000f4c <HAL_I2S_MspInit+0xf0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d15a      	bne.n	8000f42 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e90:	23c0      	movs	r3, #192	; 0xc0
 8000e92:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fdc3 	bl	8004a28 <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ea8:	f7ff ff1b 	bl	8000ce2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <HAL_I2S_MspInit+0xf4>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a26      	ldr	r2, [pc, #152]	; (8000f50 <HAL_I2S_MspInit+0xf4>)
 8000eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <HAL_I2S_MspInit+0xf4>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <HAL_I2S_MspInit+0xf4>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_I2S_MspInit+0xf4>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <HAL_I2S_MspInit+0xf4>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <HAL_I2S_MspInit+0xf4>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <HAL_I2S_MspInit+0xf4>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_I2S_MspInit+0xf4>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f00:	2310      	movs	r3, #16
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f10:	2306      	movs	r3, #6
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <HAL_I2S_MspInit+0xf8>)
 8000f1c:	f000 ffa2 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f20:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f32:	2306      	movs	r3, #6
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <HAL_I2S_MspInit+0xfc>)
 8000f3e:	f000 ff91 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	3738      	adds	r7, #56	; 0x38
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40003c00 	.word	0x40003c00
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020800 	.word	0x40020800

08000f5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <HAL_SPI_MspInit+0x84>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d12b      	bne.n	8000fd6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000f88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000fb6:	23e0      	movs	r3, #224	; 0xe0
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <HAL_SPI_MspInit+0x8c>)
 8000fd2:	f000 ff47 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	; 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40013000 	.word	0x40013000
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000

08000fec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10d      	bne.n	800101a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_TIM_PWM_MspInit+0x40>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <HAL_TIM_PWM_MspInit+0x40>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <HAL_TIM_PWM_MspInit+0x40>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40000800 	.word	0x40000800
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a12      	ldr	r2, [pc, #72]	; (8001098 <HAL_TIM_MspPostInit+0x68>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d11e      	bne.n	8001090 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_TIM_MspPostInit+0x6c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_TIM_MspPostInit+0x6c>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_TIM_MspPostInit+0x6c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800106e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001072:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001080:	2302      	movs	r3, #2
 8001082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4619      	mov	r1, r3
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_TIM_MspPostInit+0x70>)
 800108c:	f000 feea 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40000800 	.word	0x40000800
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020c00 	.word	0x40020c00

080010a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	201c      	movs	r0, #28
 80010ba:	f000 fea9 	bl	8001e10 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010be:	201c      	movs	r0, #28
 80010c0:	f000 fec2 	bl	8001e48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_InitTick+0xa8>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a1f      	ldr	r2, [pc, #124]	; (800114c <HAL_InitTick+0xa8>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_InitTick+0xa8>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010e0:	f107 0210 	add.w	r2, r7, #16
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fc6a 	bl	80049c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80010f0:	f003 fc54 	bl	800499c <HAL_RCC_GetPCLK1Freq>
 80010f4:	4603      	mov	r3, r0
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_InitTick+0xac>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0c9b      	lsrs	r3, r3, #18
 8001104:	3b01      	subs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0xb0>)
 800110a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800110e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_InitTick+0xb0>)
 8001112:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001116:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <HAL_InitTick+0xb0>)
 800111a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_InitTick+0xb0>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_InitTick+0xb0>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800112a:	480a      	ldr	r0, [pc, #40]	; (8001154 <HAL_InitTick+0xb0>)
 800112c:	f003 fe45 	bl	8004dba <HAL_TIM_Base_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d104      	bne.n	8001140 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <HAL_InitTick+0xb0>)
 8001138:	f003 fe98 	bl	8004e6c <HAL_TIM_Base_Start_IT>
 800113c:	4603      	mov	r3, r0
 800113e:	e000      	b.n	8001142 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
}
 8001142:	4618      	mov	r0, r3
 8001144:	3730      	adds	r7, #48	; 0x30
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	431bde83 	.word	0x431bde83
 8001154:	200065a8 	.word	0x200065a8

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <TIM2_IRQHandler+0x10>)
 800118a:	f003 fff7 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200065a8 	.word	0x200065a8

08001198 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <OTG_FS_IRQHandler+0x10>)
 800119e:	f001 ff7d 	bl	800309c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20007b04 	.word	0x20007b04

080011ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011d6:	490e      	ldr	r1, [pc, #56]	; (8001210 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011ec:	4c0b      	ldr	r4, [pc, #44]	; (800121c <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011fa:	f7ff ffd7 	bl	80011ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fe:	f00b fe15 	bl	800ce2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001202:	f7ff f961 	bl	80004c8 <main>
  bx  lr    
 8001206:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001208:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001214:	0800d2ac 	.word	0x0800d2ac
  ldr r2, =_sbss
 8001218:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800121c:	20007f18 	.word	0x20007f18

08001220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <HAL_Init+0x40>)
 800122e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001232:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_Init+0x40>)
 800123a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_Init+0x40>)
 8001246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 fdd4 	bl	8001dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	200f      	movs	r0, #15
 8001254:	f7ff ff26 	bl	80010a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff fd48 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008
 800128c:	200065f0 	.word	0x200065f0

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200065f0 	.word	0x200065f0

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008

080012f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e033      	b.n	800136e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fd18 	bl	8000d44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	2b00      	cmp	r3, #0
 800132c:	d118      	bne.n	8001360 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001336:	f023 0302 	bic.w	r3, r3, #2
 800133a:	f043 0202 	orr.w	r2, r3, #2
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fa1a 	bl	800177c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f023 0303 	bic.w	r3, r3, #3
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
 800135e:	e001      	b.n	8001364 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_ADC_Start+0x1a>
 800138e:	2302      	movs	r3, #2
 8001390:	e0b2      	b.n	80014f8 <HAL_ADC_Start+0x180>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d018      	beq.n	80013da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013b8:	4b52      	ldr	r3, [pc, #328]	; (8001504 <HAL_ADC_Start+0x18c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_ADC_Start+0x190>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0c9a      	lsrs	r2, r3, #18
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f9      	bne.n	80013ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d17a      	bne.n	80014de <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001412:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001426:	d106      	bne.n	8001436 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	f023 0206 	bic.w	r2, r3, #6
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	645a      	str	r2, [r3, #68]	; 0x44
 8001434:	e002      	b.n	800143c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_ADC_Start+0x194>)
 8001446:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001450:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	2b00      	cmp	r3, #0
 800145c:	d12a      	bne.n	80014b4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2b      	ldr	r2, [pc, #172]	; (8001510 <HAL_ADC_Start+0x198>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d015      	beq.n	8001494 <HAL_ADC_Start+0x11c>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a29      	ldr	r2, [pc, #164]	; (8001514 <HAL_ADC_Start+0x19c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d105      	bne.n	800147e <HAL_ADC_Start+0x106>
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_ADC_Start+0x194>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 031f 	and.w	r3, r3, #31
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00a      	beq.n	8001494 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <HAL_ADC_Start+0x1a0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d136      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_ADC_Start+0x194>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	d130      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d129      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	e020      	b.n	80014f6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_ADC_Start+0x198>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d11b      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d114      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	e00b      	b.n	80014f6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f043 0210 	orr.w	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f043 0201 	orr.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	20000000 	.word	0x20000000
 8001508:	431bde83 	.word	0x431bde83
 800150c:	40012300 	.word	0x40012300
 8001510:	40012000 	.word	0x40012000
 8001514:	40012100 	.word	0x40012100
 8001518:	40012200 	.word	0x40012200

0800151c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800154c:	2b01      	cmp	r3, #1
 800154e:	d101      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1c>
 8001550:	2302      	movs	r3, #2
 8001552:	e105      	b.n	8001760 <HAL_ADC_ConfigChannel+0x228>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b09      	cmp	r3, #9
 8001562:	d925      	bls.n	80015b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68d9      	ldr	r1, [r3, #12]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	3b1e      	subs	r3, #30
 800157a:	2207      	movs	r2, #7
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43da      	mvns	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	400a      	ands	r2, r1
 8001588:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68d9      	ldr	r1, [r3, #12]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	b29b      	uxth	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	4603      	mov	r3, r0
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4403      	add	r3, r0
 80015a2:	3b1e      	subs	r3, #30
 80015a4:	409a      	lsls	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	e022      	b.n	80015f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6919      	ldr	r1, [r3, #16]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	2207      	movs	r2, #7
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	400a      	ands	r2, r1
 80015d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6919      	ldr	r1, [r3, #16]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4403      	add	r3, r0
 80015ec:	409a      	lsls	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d824      	bhi.n	8001648 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	3b05      	subs	r3, #5
 8001610:	221f      	movs	r2, #31
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	400a      	ands	r2, r1
 800161e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	4618      	mov	r0, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	3b05      	subs	r3, #5
 800163a:	fa00 f203 	lsl.w	r2, r0, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
 8001646:	e04c      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b0c      	cmp	r3, #12
 800164e:	d824      	bhi.n	800169a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	3b23      	subs	r3, #35	; 0x23
 8001662:	221f      	movs	r2, #31
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43da      	mvns	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	400a      	ands	r2, r1
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	4618      	mov	r0, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	3b23      	subs	r3, #35	; 0x23
 800168c:	fa00 f203 	lsl.w	r2, r0, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
 8001698:	e023      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	3b41      	subs	r3, #65	; 0x41
 80016ac:	221f      	movs	r2, #31
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	400a      	ands	r2, r1
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	3b41      	subs	r3, #65	; 0x41
 80016d6:	fa00 f203 	lsl.w	r2, r0, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <HAL_ADC_ConfigChannel+0x234>)
 80016e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a21      	ldr	r2, [pc, #132]	; (8001770 <HAL_ADC_ConfigChannel+0x238>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d109      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x1cc>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b12      	cmp	r3, #18
 80016f6:	d105      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a19      	ldr	r2, [pc, #100]	; (8001770 <HAL_ADC_ConfigChannel+0x238>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d123      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x21e>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b10      	cmp	r3, #16
 8001714:	d003      	beq.n	800171e <HAL_ADC_ConfigChannel+0x1e6>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b11      	cmp	r3, #17
 800171c:	d11b      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b10      	cmp	r3, #16
 8001730:	d111      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_ADC_ConfigChannel+0x23c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <HAL_ADC_ConfigChannel+0x240>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	0c9a      	lsrs	r2, r3, #18
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001748:	e002      	b.n	8001750 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3b01      	subs	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f9      	bne.n	800174a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40012300 	.word	0x40012300
 8001770:	40012000 	.word	0x40012000
 8001774:	20000000 	.word	0x20000000
 8001778:	431bde83 	.word	0x431bde83

0800177c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001784:	4b79      	ldr	r3, [pc, #484]	; (800196c <ADC_Init+0x1f0>)
 8001786:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	431a      	orrs	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	021a      	lsls	r2, r3, #8
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6899      	ldr	r1, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	4a58      	ldr	r2, [pc, #352]	; (8001970 <ADC_Init+0x1f4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d022      	beq.n	800185a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001822:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6899      	ldr	r1, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	e00f      	b.n	800187a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001878:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0202 	bic.w	r2, r2, #2
 8001888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6899      	ldr	r1, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7e1b      	ldrb	r3, [r3, #24]
 8001894:	005a      	lsls	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01b      	beq.n	80018e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6859      	ldr	r1, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	3b01      	subs	r3, #1
 80018d4:	035a      	lsls	r2, r3, #13
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	e007      	b.n	80018f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	3b01      	subs	r3, #1
 800190c:	051a      	lsls	r2, r3, #20
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6899      	ldr	r1, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001932:	025a      	lsls	r2, r3, #9
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800194a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6899      	ldr	r1, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	029a      	lsls	r2, r3, #10
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	609a      	str	r2, [r3, #8]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40012300 	.word	0x40012300
 8001970:	0f000001 	.word	0x0f000001

08001974 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001988:	2302      	movs	r3, #2
 800198a:	e17d      	b.n	8001c88 <HAL_ADCEx_InjectedConfigChannel+0x314>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b09      	cmp	r3, #9
 800199a:	d925      	bls.n	80019e8 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68d9      	ldr	r1, [r3, #12]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	3b1e      	subs	r3, #30
 80019b2:	2207      	movs	r2, #7
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43da      	mvns	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	400a      	ands	r2, r1
 80019c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68d9      	ldr	r1, [r3, #12]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	4603      	mov	r3, r0
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4403      	add	r3, r0
 80019da:	3b1e      	subs	r3, #30
 80019dc:	409a      	lsls	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	e022      	b.n	8001a2e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6919      	ldr	r1, [r3, #16]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	2207      	movs	r2, #7
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	400a      	ands	r2, r1
 8001a0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6919      	ldr	r1, [r3, #16]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4403      	add	r3, r0
 8001a24:	409a      	lsls	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001a3c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	051a      	lsls	r2, r3, #20
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	3303      	adds	r3, #3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	221f      	movs	r2, #31
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43da      	mvns	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	400a      	ands	r2, r1
 8001a84:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	3303      	adds	r3, #3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a74      	ldr	r2, [pc, #464]	; (8001c94 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d022      	beq.n	8001b0c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6899      	ldr	r1, [r3, #8]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001af6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6899      	ldr	r1, [r3, #8]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	e00f      	b.n	8001b2c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001b1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001b2a:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	7d5b      	ldrb	r3, [r3, #21]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	e007      	b.n	8001b56 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b54:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	7d1b      	ldrb	r3, [r3, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	e007      	b.n	8001b80 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b7e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d02e      	beq.n	8001be6 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d840      	bhi.n	8001c0e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d002      	beq.n	8001b96 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d014      	beq.n	8001bbe <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8001b94:	e03b      	b.n	8001c0e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001ba4:	f023 030f 	bic.w	r3, r3, #15
 8001ba8:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6959      	ldr	r1, [r3, #20]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	615a      	str	r2, [r3, #20]
      break;
 8001bbc:	e03b      	b.n	8001c36 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001bcc:	f023 030f 	bic.w	r3, r3, #15
 8001bd0:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6999      	ldr	r1, [r3, #24]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	619a      	str	r2, [r3, #24]
      break;
 8001be4:	e027      	b.n	8001c36 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001bf4:	f023 030f 	bic.w	r3, r3, #15
 8001bf8:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69d9      	ldr	r1, [r3, #28]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	61da      	str	r2, [r3, #28]
      break;
 8001c0c:	e013      	b.n	8001c36 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001c1c:	f023 030f 	bic.w	r3, r3, #15
 8001c20:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6a19      	ldr	r1, [r3, #32]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	621a      	str	r2, [r3, #32]
      break;
 8001c34:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001c38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d109      	bne.n	8001c58 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b12      	cmp	r3, #18
 8001c4a:	d105      	bne.n	8001c58 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10d      	bne.n	8001c7e <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d003      	beq.n	8001c72 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b11      	cmp	r3, #17
 8001c70:	d105      	bne.n	8001c7e <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	000f0001 	.word	0x000f0001
 8001c98:	40012300 	.word	0x40012300
 8001c9c:	40012000 	.word	0x40012000

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4907      	ldr	r1, [pc, #28]	; (8001d3c <__NVIC_EnableIRQ+0x38>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ff4c 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e22:	f7ff ff61 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	6978      	ldr	r0, [r7, #20]
 8001e2e:	f7ff ffb1 	bl	8001d94 <NVIC_EncodePriority>
 8001e32:	4602      	mov	r2, r0
 8001e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff80 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff54 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e16b      	b.n	8002158 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e80:	2201      	movs	r2, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	f040 815a 	bne.w	8002152 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d005      	beq.n	8001eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d130      	bne.n	8001f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 0201 	and.w	r2, r3, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d017      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d123      	bne.n	8001fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	08da      	lsrs	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3208      	adds	r2, #8
 8001f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0203 	and.w	r2, r3, #3
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80b4 	beq.w	8002152 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b60      	ldr	r3, [pc, #384]	; (8002170 <HAL_GPIO_Init+0x30c>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a5f      	ldr	r2, [pc, #380]	; (8002170 <HAL_GPIO_Init+0x30c>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b5d      	ldr	r3, [pc, #372]	; (8002170 <HAL_GPIO_Init+0x30c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002006:	4a5b      	ldr	r2, [pc, #364]	; (8002174 <HAL_GPIO_Init+0x310>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_GPIO_Init+0x314>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d02b      	beq.n	800208a <HAL_GPIO_Init+0x226>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a51      	ldr	r2, [pc, #324]	; (800217c <HAL_GPIO_Init+0x318>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d025      	beq.n	8002086 <HAL_GPIO_Init+0x222>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a50      	ldr	r2, [pc, #320]	; (8002180 <HAL_GPIO_Init+0x31c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01f      	beq.n	8002082 <HAL_GPIO_Init+0x21e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4f      	ldr	r2, [pc, #316]	; (8002184 <HAL_GPIO_Init+0x320>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0x21a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4e      	ldr	r2, [pc, #312]	; (8002188 <HAL_GPIO_Init+0x324>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x216>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4d      	ldr	r2, [pc, #308]	; (800218c <HAL_GPIO_Init+0x328>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x212>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4c      	ldr	r2, [pc, #304]	; (8002190 <HAL_GPIO_Init+0x32c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x20e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4b      	ldr	r2, [pc, #300]	; (8002194 <HAL_GPIO_Init+0x330>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x20a>
 800206a:	2307      	movs	r3, #7
 800206c:	e00e      	b.n	800208c <HAL_GPIO_Init+0x228>
 800206e:	2308      	movs	r3, #8
 8002070:	e00c      	b.n	800208c <HAL_GPIO_Init+0x228>
 8002072:	2306      	movs	r3, #6
 8002074:	e00a      	b.n	800208c <HAL_GPIO_Init+0x228>
 8002076:	2305      	movs	r3, #5
 8002078:	e008      	b.n	800208c <HAL_GPIO_Init+0x228>
 800207a:	2304      	movs	r3, #4
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x228>
 800207e:	2303      	movs	r3, #3
 8002080:	e004      	b.n	800208c <HAL_GPIO_Init+0x228>
 8002082:	2302      	movs	r3, #2
 8002084:	e002      	b.n	800208c <HAL_GPIO_Init+0x228>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_GPIO_Init+0x228>
 800208a:	2300      	movs	r3, #0
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	f002 0203 	and.w	r2, r2, #3
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	4093      	lsls	r3, r2
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800209c:	4935      	ldr	r1, [pc, #212]	; (8002174 <HAL_GPIO_Init+0x310>)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020aa:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_GPIO_Init+0x334>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ce:	4a32      	ldr	r2, [pc, #200]	; (8002198 <HAL_GPIO_Init+0x334>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020d4:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_GPIO_Init+0x334>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f8:	4a27      	ldr	r2, [pc, #156]	; (8002198 <HAL_GPIO_Init+0x334>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <HAL_GPIO_Init+0x334>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002122:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_GPIO_Init+0x334>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_GPIO_Init+0x334>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800214c:	4a12      	ldr	r2, [pc, #72]	; (8002198 <HAL_GPIO_Init+0x334>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3301      	adds	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2b0f      	cmp	r3, #15
 800215c:	f67f ae90 	bls.w	8001e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3724      	adds	r7, #36	; 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40013800 	.word	0x40013800
 8002178:	40020000 	.word	0x40020000
 800217c:	40020400 	.word	0x40020400
 8002180:	40020800 	.word	0x40020800
 8002184:	40020c00 	.word	0x40020c00
 8002188:	40021000 	.word	0x40021000
 800218c:	40021400 	.word	0x40021400
 8002190:	40021800 	.word	0x40021800
 8002194:	40021c00 	.word	0x40021c00
 8002198:	40013c00 	.word	0x40013c00

0800219c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e001      	b.n	80021be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002210:	887a      	ldrh	r2, [r7, #2]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4013      	ands	r3, r2
 8002216:	041a      	lsls	r2, r3, #16
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	43d9      	mvns	r1, r3
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	400b      	ands	r3, r1
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e12b      	b.n	800249e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fdb6 	bl	8000dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2224      	movs	r2, #36	; 0x24
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002298:	f002 fb80 	bl	800499c <HAL_RCC_GetPCLK1Freq>
 800229c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a81      	ldr	r2, [pc, #516]	; (80024a8 <HAL_I2C_Init+0x274>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d807      	bhi.n	80022b8 <HAL_I2C_Init+0x84>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a80      	ldr	r2, [pc, #512]	; (80024ac <HAL_I2C_Init+0x278>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	bf94      	ite	ls
 80022b0:	2301      	movls	r3, #1
 80022b2:	2300      	movhi	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e006      	b.n	80022c6 <HAL_I2C_Init+0x92>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a7d      	ldr	r2, [pc, #500]	; (80024b0 <HAL_I2C_Init+0x27c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	bf94      	ite	ls
 80022c0:	2301      	movls	r3, #1
 80022c2:	2300      	movhi	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0e7      	b.n	800249e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a78      	ldr	r2, [pc, #480]	; (80024b4 <HAL_I2C_Init+0x280>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0c9b      	lsrs	r3, r3, #18
 80022d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a6a      	ldr	r2, [pc, #424]	; (80024a8 <HAL_I2C_Init+0x274>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d802      	bhi.n	8002308 <HAL_I2C_Init+0xd4>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3301      	adds	r3, #1
 8002306:	e009      	b.n	800231c <HAL_I2C_Init+0xe8>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	4a69      	ldr	r2, [pc, #420]	; (80024b8 <HAL_I2C_Init+0x284>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	3301      	adds	r3, #1
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800232e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	495c      	ldr	r1, [pc, #368]	; (80024a8 <HAL_I2C_Init+0x274>)
 8002338:	428b      	cmp	r3, r1
 800233a:	d819      	bhi.n	8002370 <HAL_I2C_Init+0x13c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e59      	subs	r1, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fbb1 f3f3 	udiv	r3, r1, r3
 800234a:	1c59      	adds	r1, r3, #1
 800234c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002350:	400b      	ands	r3, r1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_I2C_Init+0x138>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e59      	subs	r1, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fbb1 f3f3 	udiv	r3, r1, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	e051      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 800236c:	2304      	movs	r3, #4
 800236e:	e04f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d111      	bne.n	800239c <HAL_I2C_Init+0x168>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e012      	b.n	80023c2 <HAL_I2C_Init+0x18e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e58      	subs	r0, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	0099      	lsls	r1, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Init+0x196>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e022      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10e      	bne.n	80023f0 <HAL_I2C_Init+0x1bc>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e58      	subs	r0, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	440b      	add	r3, r1
 80023e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ee:	e00f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e58      	subs	r0, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	0099      	lsls	r1, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	fbb0 f3f3 	udiv	r3, r0, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	6809      	ldr	r1, [r1, #0]
 8002414:	4313      	orrs	r3, r2
 8002416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800243e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6911      	ldr	r1, [r2, #16]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68d2      	ldr	r2, [r2, #12]
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	430b      	orrs	r3, r1
 8002452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	000186a0 	.word	0x000186a0
 80024ac:	001e847f 	.word	0x001e847f
 80024b0:	003d08ff 	.word	0x003d08ff
 80024b4:	431bde83 	.word	0x431bde83
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e128      	b.n	8002720 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a90      	ldr	r2, [pc, #576]	; (8002728 <HAL_I2S_Init+0x26c>)
 80024e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7fe fcb7 	bl	8000e5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002504:	f023 030f 	bic.w	r3, r3, #15
 8002508:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2202      	movs	r2, #2
 8002510:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d060      	beq.n	80025dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002522:	2310      	movs	r3, #16
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e001      	b.n	800252c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b20      	cmp	r3, #32
 8002532:	d802      	bhi.n	800253a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800253a:	2001      	movs	r0, #1
 800253c:	f002 fb56 	bl	8004bec <HAL_RCCEx_GetPeriphCLKFreq>
 8002540:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254a:	d125      	bne.n	8002598 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d010      	beq.n	8002576 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	fbb2 f2f3 	udiv	r2, r2, r3
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	461a      	mov	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	3305      	adds	r3, #5
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e01f      	b.n	80025b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	461a      	mov	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	3305      	adds	r3, #5
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e00e      	b.n	80025b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	461a      	mov	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	3305      	adds	r3, #5
 80025b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4a5c      	ldr	r2, [pc, #368]	; (800272c <HAL_I2S_Init+0x270>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	08db      	lsrs	r3, r3, #3
 80025c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	e003      	b.n	80025e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025dc:	2302      	movs	r3, #2
 80025de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d902      	bls.n	80025f0 <HAL_I2S_Init+0x134>
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	2bff      	cmp	r3, #255	; 0xff
 80025ee:	d907      	bls.n	8002600 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	f043 0210 	orr.w	r2, r3, #16
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e08f      	b.n	8002720 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	ea42 0103 	orr.w	r1, r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	430a      	orrs	r2, r1
 8002612:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800261e:	f023 030f 	bic.w	r3, r3, #15
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6851      	ldr	r1, [r2, #4]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6892      	ldr	r2, [r2, #8]
 800262a:	4311      	orrs	r1, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68d2      	ldr	r2, [r2, #12]
 8002630:	4311      	orrs	r1, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6992      	ldr	r2, [r2, #24]
 8002636:	430a      	orrs	r2, r1
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002642:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d161      	bne.n	8002710 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a38      	ldr	r2, [pc, #224]	; (8002730 <HAL_I2S_Init+0x274>)
 8002650:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a37      	ldr	r2, [pc, #220]	; (8002734 <HAL_I2S_Init+0x278>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d101      	bne.n	8002660 <HAL_I2S_Init+0x1a4>
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_I2S_Init+0x27c>)
 800265e:	e001      	b.n	8002664 <HAL_I2S_Init+0x1a8>
 8002660:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	4932      	ldr	r1, [pc, #200]	; (8002734 <HAL_I2S_Init+0x278>)
 800266c:	428a      	cmp	r2, r1
 800266e:	d101      	bne.n	8002674 <HAL_I2S_Init+0x1b8>
 8002670:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_I2S_Init+0x27c>)
 8002672:	e001      	b.n	8002678 <HAL_I2S_Init+0x1bc>
 8002674:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002678:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800267c:	f023 030f 	bic.w	r3, r3, #15
 8002680:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a2b      	ldr	r2, [pc, #172]	; (8002734 <HAL_I2S_Init+0x278>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_I2S_Init+0x1d4>
 800268c:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <HAL_I2S_Init+0x27c>)
 800268e:	e001      	b.n	8002694 <HAL_I2S_Init+0x1d8>
 8002690:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002694:	2202      	movs	r2, #2
 8002696:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a25      	ldr	r2, [pc, #148]	; (8002734 <HAL_I2S_Init+0x278>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_I2S_Init+0x1ea>
 80026a2:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_I2S_Init+0x27c>)
 80026a4:	e001      	b.n	80026aa <HAL_I2S_Init+0x1ee>
 80026a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b6:	d003      	beq.n	80026c0 <HAL_I2S_Init+0x204>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	e001      	b.n	80026cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026d6:	4313      	orrs	r3, r2
 80026d8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026ea:	4313      	orrs	r3, r2
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	897b      	ldrh	r3, [r7, #10]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <HAL_I2S_Init+0x278>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_I2S_Init+0x24c>
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <HAL_I2S_Init+0x27c>)
 8002706:	e001      	b.n	800270c <HAL_I2S_Init+0x250>
 8002708:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800270c:	897a      	ldrh	r2, [r7, #10]
 800270e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	08002833 	.word	0x08002833
 800272c:	cccccccd 	.word	0xcccccccd
 8002730:	08002949 	.word	0x08002949
 8002734:	40003800 	.word	0x40003800
 8002738:	40003400 	.word	0x40003400

0800273c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	1c9a      	adds	r2, r3, #2
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10e      	bne.n	80027cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ffb8 	bl	800273c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	b292      	uxth	r2, r2
 80027e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	1c9a      	adds	r2, r3, #2
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10e      	bne.n	800282a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800281a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff93 	bl	8002750 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b04      	cmp	r3, #4
 800284c:	d13a      	bne.n	80028c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	d109      	bne.n	800286c <I2S_IRQHandler+0x3a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d102      	bne.n	800286c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ffb4 	bl	80027d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d126      	bne.n	80028c4 <I2S_IRQHandler+0x92>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b20      	cmp	r3, #32
 8002882:	d11f      	bne.n	80028c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002892:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f043 0202 	orr.w	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ff50 	bl	8002764 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d136      	bne.n	800293e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d109      	bne.n	80028ee <I2S_IRQHandler+0xbc>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e4:	2b80      	cmp	r3, #128	; 0x80
 80028e6:	d102      	bne.n	80028ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff45 	bl	8002778 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d122      	bne.n	800293e <I2S_IRQHandler+0x10c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b20      	cmp	r3, #32
 8002904:	d11b      	bne.n	800293e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002914:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	f043 0204 	orr.w	r2, r3, #4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff13 	bl	8002764 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4aa2      	ldr	r2, [pc, #648]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002962:	4ba2      	ldr	r3, [pc, #648]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002964:	e001      	b.n	800296a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002966:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a9b      	ldr	r2, [pc, #620]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002980:	4b9a      	ldr	r3, [pc, #616]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002982:	e001      	b.n	8002988 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002994:	d004      	beq.n	80029a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 8099 	bne.w	8002ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d107      	bne.n	80029ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f925 	bl	8002c04 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d107      	bne.n	80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f9c8 	bl	8002d64 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b40      	cmp	r3, #64	; 0x40
 80029dc:	d13a      	bne.n	8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d035      	beq.n	8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a7e      	ldr	r2, [pc, #504]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d101      	bne.n	80029f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80029f2:	4b7e      	ldr	r3, [pc, #504]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029f4:	e001      	b.n	80029fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80029f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4979      	ldr	r1, [pc, #484]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a02:	428b      	cmp	r3, r1
 8002a04:	d101      	bne.n	8002a0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002a06:	4b79      	ldr	r3, [pc, #484]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a08:	e001      	b.n	8002a0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a12:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f043 0202 	orr.w	r2, r3, #2
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fe88 	bl	8002764 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	f040 80be 	bne.w	8002bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80b8 	beq.w	8002bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a59      	ldr	r2, [pc, #356]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a86:	4b59      	ldr	r3, [pc, #356]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a88:	e001      	b.n	8002a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4954      	ldr	r1, [pc, #336]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a96:	428b      	cmp	r3, r1
 8002a98:	d101      	bne.n	8002a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002a9a:	4b54      	ldr	r3, [pc, #336]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a9c:	e001      	b.n	8002aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002a9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aa6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fe4a 	bl	8002764 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ad0:	e084      	b.n	8002bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d107      	bne.n	8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8be 	bl	8002c68 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f8fd 	bl	8002d00 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	d12f      	bne.n	8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02a      	beq.n	8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b28:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2e      	ldr	r2, [pc, #184]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002b34:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b36:	e001      	b.n	8002b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002b38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4929      	ldr	r1, [pc, #164]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b44:	428b      	cmp	r3, r1
 8002b46:	d101      	bne.n	8002b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002b48:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b4a:	e001      	b.n	8002b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002b4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f043 0202 	orr.w	r2, r3, #2
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff fdfa 	bl	8002764 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d131      	bne.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d02c      	beq.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b90:	e001      	b.n	8002b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002b92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4912      	ldr	r1, [pc, #72]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b9e:	428b      	cmp	r3, r1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002ba2:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ba4:	e001      	b.n	8002baa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002baa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bbe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff fdc5 	bl	8002764 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bda:	e000      	b.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bdc:	bf00      	nop
}
 8002bde:	bf00      	nop
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40003800 	.word	0x40003800
 8002bec:	40003400 	.word	0x40003400

08002bf0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	1c99      	adds	r1, r3, #2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6251      	str	r1, [r2, #36]	; 0x24
 8002c16:	881a      	ldrh	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d113      	bne.n	8002c5e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ffc9 	bl	8002bf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	1c99      	adds	r1, r3, #2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6251      	str	r1, [r2, #36]	; 0x24
 8002c7a:	8819      	ldrh	r1, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <I2SEx_TxISR_I2SExt+0x90>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <I2SEx_TxISR_I2SExt+0x22>
 8002c86:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <I2SEx_TxISR_I2SExt+0x94>)
 8002c88:	e001      	b.n	8002c8e <I2SEx_TxISR_I2SExt+0x26>
 8002c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c8e:	460a      	mov	r2, r1
 8002c90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d121      	bne.n	8002cee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <I2SEx_TxISR_I2SExt+0x90>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <I2SEx_TxISR_I2SExt+0x50>
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <I2SEx_TxISR_I2SExt+0x94>)
 8002cb6:	e001      	b.n	8002cbc <I2SEx_TxISR_I2SExt+0x54>
 8002cb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	490d      	ldr	r1, [pc, #52]	; (8002cf8 <I2SEx_TxISR_I2SExt+0x90>)
 8002cc4:	428b      	cmp	r3, r1
 8002cc6:	d101      	bne.n	8002ccc <I2SEx_TxISR_I2SExt+0x64>
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <I2SEx_TxISR_I2SExt+0x94>)
 8002cca:	e001      	b.n	8002cd0 <I2SEx_TxISR_I2SExt+0x68>
 8002ccc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cd4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ff81 	bl	8002bf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40003800 	.word	0x40003800
 8002cfc:	40003400 	.word	0x40003400

08002d00 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68d8      	ldr	r0, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	1c99      	adds	r1, r3, #2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d18:	b282      	uxth	r2, r0
 8002d1a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d113      	bne.n	8002d5c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d42:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff4a 	bl	8002bf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <I2SEx_RxISR_I2SExt+0x90>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <I2SEx_RxISR_I2SExt+0x16>
 8002d76:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <I2SEx_RxISR_I2SExt+0x94>)
 8002d78:	e001      	b.n	8002d7e <I2SEx_RxISR_I2SExt+0x1a>
 8002d7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d7e:	68d8      	ldr	r0, [r3, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	1c99      	adds	r1, r3, #2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d8a:	b282      	uxth	r2, r0
 8002d8c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d121      	bne.n	8002dea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <I2SEx_RxISR_I2SExt+0x90>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d101      	bne.n	8002db4 <I2SEx_RxISR_I2SExt+0x50>
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <I2SEx_RxISR_I2SExt+0x94>)
 8002db2:	e001      	b.n	8002db8 <I2SEx_RxISR_I2SExt+0x54>
 8002db4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	490d      	ldr	r1, [pc, #52]	; (8002df4 <I2SEx_RxISR_I2SExt+0x90>)
 8002dc0:	428b      	cmp	r3, r1
 8002dc2:	d101      	bne.n	8002dc8 <I2SEx_RxISR_I2SExt+0x64>
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <I2SEx_RxISR_I2SExt+0x94>)
 8002dc6:	e001      	b.n	8002dcc <I2SEx_RxISR_I2SExt+0x68>
 8002dc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dd0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ff03 	bl	8002bf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40003800 	.word	0x40003800
 8002df8:	40003400 	.word	0x40003400

08002dfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	b08f      	sub	sp, #60	; 0x3c
 8002e00:	af0a      	add	r7, sp, #40	; 0x28
 8002e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e10f      	b.n	800302e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d106      	bne.n	8002e2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f009 fcdd 	bl	800c7e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2203      	movs	r2, #3
 8002e32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 ffa2 	bl	8005d96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	687e      	ldr	r6, [r7, #4]
 8002e5a:	466d      	mov	r5, sp
 8002e5c:	f106 0410 	add.w	r4, r6, #16
 8002e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e70:	1d33      	adds	r3, r6, #4
 8002e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e74:	6838      	ldr	r0, [r7, #0]
 8002e76:	f002 fe79 	bl	8005b6c <USB_CoreInit>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0d0      	b.n	800302e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 ff90 	bl	8005db8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e04a      	b.n	8002f34 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	333d      	adds	r3, #61	; 0x3d
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	333c      	adds	r3, #60	; 0x3c
 8002ec2:	7bfa      	ldrb	r2, [r7, #15]
 8002ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	b298      	uxth	r0, r3
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3342      	adds	r3, #66	; 0x42
 8002eda:	4602      	mov	r2, r0
 8002edc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	333f      	adds	r3, #63	; 0x3f
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3344      	adds	r3, #68	; 0x44
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	3348      	adds	r3, #72	; 0x48
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3350      	adds	r3, #80	; 0x50
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	3301      	adds	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d3af      	bcc.n	8002e9e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	e044      	b.n	8002fce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d3b5      	bcc.n	8002f44 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	687e      	ldr	r6, [r7, #4]
 8002fe0:	466d      	mov	r5, sp
 8002fe2:	f106 0410 	add.w	r4, r6, #16
 8002fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ff6:	1d33      	adds	r3, r6, #4
 8002ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ffa:	6838      	ldr	r0, [r7, #0]
 8002ffc:	f002 ff28 	bl	8005e50 <USB_DevInit>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e00d      	b.n	800302e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f003 ffa4 	bl	8006f74 <USB_DevDisconnect>

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003036 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_PCD_Start+0x1c>
 800304e:	2302      	movs	r3, #2
 8003050:	e020      	b.n	8003094 <HAL_PCD_Start+0x5e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	2b01      	cmp	r3, #1
 8003060:	d109      	bne.n	8003076 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003066:	2b01      	cmp	r3, #1
 8003068:	d005      	beq.n	8003076 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f002 fe7a 	bl	8005d74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f003 ff54 	bl	8006f32 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b08d      	sub	sp, #52	; 0x34
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f004 f812 	bl	80070dc <USB_GetMode>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 839d 	bne.w	80037fa <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f003 ff76 	bl	8006fb6 <USB_ReadInterrupts>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8393 	beq.w	80037f8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f003 ff6d 	bl	8006fb6 <USB_ReadInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d107      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f002 0202 	and.w	r2, r2, #2
 80030f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 ff5b 	bl	8006fb6 <USB_ReadInterrupts>
 8003100:	4603      	mov	r3, r0
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b10      	cmp	r3, #16
 8003108:	d161      	bne.n	80031ce <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0210 	bic.w	r2, r2, #16
 8003118:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f003 020f 	and.w	r2, r3, #15
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	3304      	adds	r3, #4
 8003138:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	0c5b      	lsrs	r3, r3, #17
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	2b02      	cmp	r3, #2
 8003144:	d124      	bne.n	8003190 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d035      	beq.n	80031be <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800315c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003160:	b29b      	uxth	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	6a38      	ldr	r0, [r7, #32]
 8003166:	f003 fd92 	bl	8006c8e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003176:	441a      	add	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003188:	441a      	add	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	619a      	str	r2, [r3, #24]
 800318e:	e016      	b.n	80031be <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	0c5b      	lsrs	r3, r3, #17
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	2b06      	cmp	r3, #6
 800319a:	d110      	bne.n	80031be <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031a2:	2208      	movs	r2, #8
 80031a4:	4619      	mov	r1, r3
 80031a6:	6a38      	ldr	r0, [r7, #32]
 80031a8:	f003 fd71 	bl	8006c8e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	091b      	lsrs	r3, r3, #4
 80031b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b8:	441a      	add	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0210 	orr.w	r2, r2, #16
 80031cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f003 feef 	bl	8006fb6 <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031e2:	d16e      	bne.n	80032c2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fef5 	bl	8006fdc <USB_ReadDevAllOutEpInterrupt>
 80031f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031f4:	e062      	b.n	80032bc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d057      	beq.n	80032b0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f003 ff1a 	bl	8007044 <USB_ReadDevOutEPInterrupt>
 8003210:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00c      	beq.n	8003236 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	2301      	movs	r3, #1
 800322c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800322e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fdb1 	bl	8003d98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00c      	beq.n	800325a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324c:	461a      	mov	r2, r3
 800324e:	2308      	movs	r3, #8
 8003250:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 feab 	bl	8003fb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003270:	461a      	mov	r2, r3
 8003272:	2310      	movs	r3, #16
 8003274:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328c:	461a      	mov	r2, r3
 800328e:	2320      	movs	r3, #32
 8003290:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a8:	461a      	mov	r2, r3
 80032aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	3301      	adds	r3, #1
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d199      	bne.n	80031f6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 fe75 	bl	8006fb6 <USB_ReadInterrupts>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032d6:	f040 80c0 	bne.w	800345a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f003 fe96 	bl	8007010 <USB_ReadDevAllInEpInterrupt>
 80032e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032ea:	e0b2      	b.n	8003452 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80a7 	beq.w	8003446 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f003 febc 	bl	8007080 <USB_ReadDevInEPInterrupt>
 8003308:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d057      	beq.n	80033c4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	2201      	movs	r2, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	43db      	mvns	r3, r3
 800332e:	69f9      	ldr	r1, [r7, #28]
 8003330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003334:	4013      	ands	r3, r2
 8003336:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003344:	461a      	mov	r2, r3
 8003346:	2301      	movs	r3, #1
 8003348:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d132      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	3348      	adds	r3, #72	; 0x48
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4403      	add	r3, r0
 8003372:	3344      	adds	r3, #68	; 0x44
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4419      	add	r1, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4403      	add	r3, r0
 8003386:	3348      	adds	r3, #72	; 0x48
 8003388:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d113      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x31c>
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3350      	adds	r3, #80	; 0x50
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d108      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033b0:	461a      	mov	r2, r3
 80033b2:	2101      	movs	r1, #1
 80033b4:	f003 fec4 	bl	8007140 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f009 faa1 	bl	800c906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033da:	461a      	mov	r2, r3
 80033dc:	2308      	movs	r3, #8
 80033de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f6:	461a      	mov	r2, r3
 80033f8:	2310      	movs	r3, #16
 80033fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003412:	461a      	mov	r2, r3
 8003414:	2340      	movs	r3, #64	; 0x40
 8003416:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342e:	461a      	mov	r2, r3
 8003430:	2302      	movs	r3, #2
 8003432:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800343e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fc1b 	bl	8003c7c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	3301      	adds	r3, #1
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	f47f af49 	bne.w	80032ec <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f003 fda9 	bl	8006fb6 <USB_ReadInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800346a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800346e:	d122      	bne.n	80034b6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800348a:	2b01      	cmp	r3, #1
 800348c:	d108      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003496:	2100      	movs	r1, #0
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fe27 	bl	80040ec <HAL_PCDEx_LPM_Callback>
 800349e:	e002      	b.n	80034a6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f009 faa7 	bl	800c9f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f003 fd7b 	bl	8006fb6 <USB_ReadInterrupts>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ca:	d112      	bne.n	80034f2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d102      	bne.n	80034e2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f009 fa63 	bl	800c9a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034f0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f003 fd5d 	bl	8006fb6 <USB_ReadInterrupts>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003506:	f040 80c7 	bne.w	8003698 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2110      	movs	r1, #16
 8003524:	4618      	mov	r0, r3
 8003526:	f002 fdf7 	bl	8006118 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352a:	2300      	movs	r3, #0
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352e:	e056      	b.n	80035de <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353c:	461a      	mov	r2, r3
 800353e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003542:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003554:	0151      	lsls	r1, r2, #5
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	440a      	add	r2, r1
 800355a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800355e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003562:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003574:	0151      	lsls	r1, r2, #5
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	440a      	add	r2, r1
 800357a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800357e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003582:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003590:	461a      	mov	r2, r3
 8003592:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003596:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c8:	0151      	lsls	r1, r2, #5
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	440a      	add	r2, r1
 80035ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	3301      	adds	r3, #1
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d3a3      	bcc.n	8003530 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	2b00      	cmp	r3, #0
 8003602:	d016      	beq.n	8003632 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003614:	f043 030b 	orr.w	r3, r3, #11
 8003618:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800362a:	f043 030b 	orr.w	r3, r3, #11
 800362e:	6453      	str	r3, [r2, #68]	; 0x44
 8003630:	e015      	b.n	800365e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003640:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003644:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003648:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003658:	f043 030b 	orr.w	r3, r3, #11
 800365c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800366c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003670:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003682:	461a      	mov	r2, r3
 8003684:	f003 fd5c 	bl	8007140 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003696:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f003 fc8a 	bl	8006fb6 <USB_ReadInterrupts>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ac:	d124      	bne.n	80036f8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f003 fd20 	bl	80070f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f002 fd88 	bl	80061d2 <USB_GetDevSpeed>
 80036c2:	4603      	mov	r3, r0
 80036c4:	461a      	mov	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681c      	ldr	r4, [r3, #0]
 80036ce:	f001 f959 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80036d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	4620      	mov	r0, r4
 80036de:	f002 faa7 	bl	8005c30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f009 f937 	bl	800c956 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f003 fc5a 	bl	8006fb6 <USB_ReadInterrupts>
 8003702:	4603      	mov	r3, r0
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b08      	cmp	r3, #8
 800370a:	d10a      	bne.n	8003722 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f009 f914 	bl	800c93a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f002 0208 	and.w	r2, r2, #8
 8003720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f003 fc45 	bl	8006fb6 <USB_ReadInterrupts>
 800372c:	4603      	mov	r3, r0
 800372e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003736:	d10f      	bne.n	8003758 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	b2db      	uxtb	r3, r3
 8003740:	4619      	mov	r1, r3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f009 f976 	bl	800ca34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f003 fc2a 	bl	8006fb6 <USB_ReadInterrupts>
 8003762:	4603      	mov	r3, r0
 8003764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800376c:	d10f      	bne.n	800378e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	b2db      	uxtb	r3, r3
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f009 f949 	bl	800ca10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800378c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f003 fc0f 	bl	8006fb6 <USB_ReadInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800379e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a2:	d10a      	bne.n	80037ba <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f009 f957 	bl	800ca58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 fbf9 	bl	8006fb6 <USB_ReadInterrupts>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d115      	bne.n	80037fa <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f009 f947 	bl	800ca74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	e000      	b.n	80037fa <HAL_PCD_IRQHandler+0x75e>
      return;
 80037f8:	bf00      	nop
    }
  }
}
 80037fa:	3734      	adds	r7, #52	; 0x34
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd90      	pop	{r4, r7, pc}

08003800 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_PCD_SetAddress+0x1a>
 8003816:	2302      	movs	r3, #2
 8003818:	e013      	b.n	8003842 <HAL_PCD_SetAddress+0x42>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f003 fb57 	bl	8006ee6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	4608      	mov	r0, r1
 8003854:	4611      	mov	r1, r2
 8003856:	461a      	mov	r2, r3
 8003858:	4603      	mov	r3, r0
 800385a:	70fb      	strb	r3, [r7, #3]
 800385c:	460b      	mov	r3, r1
 800385e:	803b      	strh	r3, [r7, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386c:	2b00      	cmp	r3, #0
 800386e:	da0f      	bge.n	8003890 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 020f 	and.w	r2, r3, #15
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	3338      	adds	r3, #56	; 0x38
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	3304      	adds	r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	705a      	strb	r2, [r3, #1]
 800388e:	e00f      	b.n	80038b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038bc:	883a      	ldrh	r2, [r7, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	78ba      	ldrb	r2, [r7, #2]
 80038c6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	785b      	ldrb	r3, [r3, #1]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038da:	78bb      	ldrb	r3, [r7, #2]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d102      	bne.n	80038e6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_PCD_EP_Open+0xaa>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e00e      	b.n	8003912 <HAL_PCD_EP_Open+0xc8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	4618      	mov	r0, r3
 8003904:	f002 fc8a 	bl	800621c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003910:	7afb      	ldrb	r3, [r7, #11]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003926:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800392a:	2b00      	cmp	r3, #0
 800392c:	da0f      	bge.n	800394e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	3338      	adds	r3, #56	; 0x38
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	3304      	adds	r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	705a      	strb	r2, [r3, #1]
 800394c:	e00f      	b.n	800396e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_PCD_EP_Close+0x6e>
 8003984:	2302      	movs	r3, #2
 8003986:	e00e      	b.n	80039a6 <HAL_PCD_EP_Close+0x8c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68f9      	ldr	r1, [r7, #12]
 8003996:	4618      	mov	r0, r3
 8003998:	f002 fcc8 	bl	800632c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	460b      	mov	r3, r1
 80039bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039be:	7afb      	ldrb	r3, [r7, #11]
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	3304      	adds	r3, #4
 80039d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2200      	movs	r2, #0
 80039e8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2200      	movs	r2, #0
 80039ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039f0:	7afb      	ldrb	r3, [r7, #11]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d102      	bne.n	8003a0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6979      	ldr	r1, [r7, #20]
 8003a22:	f002 ffa3 	bl	800696c <USB_EP0StartXfer>
 8003a26:	e008      	b.n	8003a3a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	6979      	ldr	r1, [r7, #20]
 8003a36:	f002 fd55 	bl	80064e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	460b      	mov	r3, r1
 8003a82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a84:	7afb      	ldrb	r3, [r7, #11]
 8003a86:	f003 020f 	and.w	r2, r3, #15
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	3338      	adds	r3, #56	; 0x38
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	3304      	adds	r3, #4
 8003a9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d102      	bne.n	8003ace <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ace:	7afb      	ldrb	r3, [r7, #11]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6979      	ldr	r1, [r7, #20]
 8003ae6:	f002 ff41 	bl	800696c <USB_EP0StartXfer>
 8003aea:	e008      	b.n	8003afe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	6979      	ldr	r1, [r7, #20]
 8003afa:	f002 fcf3 	bl	80064e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 020f 	and.w	r2, r3, #15
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d901      	bls.n	8003b26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e050      	b.n	8003bc8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	da0f      	bge.n	8003b4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	f003 020f 	and.w	r2, r3, #15
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	3338      	adds	r3, #56	; 0x38
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	3304      	adds	r3, #4
 8003b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	705a      	strb	r2, [r3, #1]
 8003b4c:	e00d      	b.n	8003b6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_PCD_EP_SetStall+0x82>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e01e      	b.n	8003bc8 <HAL_PCD_EP_SetStall+0xc0>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68f9      	ldr	r1, [r7, #12]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f003 f8d0 	bl	8006d3e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	b2d9      	uxtb	r1, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f003 fac1 	bl	8007140 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	f003 020f 	and.w	r2, r3, #15
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d901      	bls.n	8003bee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e042      	b.n	8003c74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	da0f      	bge.n	8003c16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	f003 020f 	and.w	r2, r3, #15
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	3338      	adds	r3, #56	; 0x38
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	705a      	strb	r2, [r3, #1]
 8003c14:	e00f      	b.n	8003c36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 020f 	and.w	r2, r3, #15
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_PCD_EP_ClrStall+0x86>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e00e      	b.n	8003c74 <HAL_PCD_EP_ClrStall+0xa4>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f003 f8d8 	bl	8006e1a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	3338      	adds	r3, #56	; 0x38
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d901      	bls.n	8003cb4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e06c      	b.n	8003d8e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d902      	bls.n	8003cd0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	3303      	adds	r3, #3
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cd8:	e02b      	b.n	8003d32 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d902      	bls.n	8003cf6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3303      	adds	r3, #3
 8003cfa:	089b      	lsrs	r3, r3, #2
 8003cfc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68d9      	ldr	r1, [r3, #12]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	4603      	mov	r3, r0
 8003d14:	6978      	ldr	r0, [r7, #20]
 8003d16:	f002 ff7c 	bl	8006c12 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	441a      	add	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	441a      	add	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d809      	bhi.n	8003d5c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	699a      	ldr	r2, [r3, #24]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d203      	bcs.n	8003d5c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1be      	bne.n	8003cda <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d811      	bhi.n	8003d8c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	2201      	movs	r2, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	6939      	ldr	r1, [r7, #16]
 8003d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d88:	4013      	ands	r3, r2
 8003d8a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	333c      	adds	r3, #60	; 0x3c
 8003db0:	3304      	adds	r3, #4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	f040 80a0 	bne.w	8003f10 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d015      	beq.n	8003e06 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a72      	ldr	r2, [pc, #456]	; (8003fa8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	f240 80dd 	bls.w	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80d7 	beq.w	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e02:	6093      	str	r3, [r2, #8]
 8003e04:	e0cb      	b.n	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2320      	movs	r3, #32
 8003e20:	6093      	str	r3, [r2, #8]
 8003e22:	e0bc      	b.n	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 80b7 	bne.w	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a5d      	ldr	r2, [pc, #372]	; (8003fa8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d90f      	bls.n	8003e58 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e54:	6093      	str	r3, [r2, #8]
 8003e56:	e0a2      	b.n	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e6a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	0159      	lsls	r1, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	440b      	add	r3, r1
 8003e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003e7e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4403      	add	r3, r0
 8003e8e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e92:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ea6:	6819      	ldr	r1, [r3, #0]
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4403      	add	r3, r0
 8003eb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4419      	add	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4403      	add	r3, r0
 8003ecc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ed0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d114      	bne.n	8003f02 <PCD_EP_OutXfrComplete_int+0x16a>
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d108      	bne.n	8003f02 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003efa:	461a      	mov	r2, r3
 8003efc:	2101      	movs	r1, #1
 8003efe:	f003 f91f 	bl	8007140 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	4619      	mov	r1, r3
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f008 fce1 	bl	800c8d0 <HAL_PCD_DataOutStageCallback>
 8003f0e:	e046      	b.n	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a26      	ldr	r2, [pc, #152]	; (8003fac <PCD_EP_OutXfrComplete_int+0x214>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d124      	bne.n	8003f62 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f34:	6093      	str	r3, [r2, #8]
 8003f36:	e032      	b.n	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2320      	movs	r3, #32
 8003f52:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	4619      	mov	r1, r3
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f008 fcb8 	bl	800c8d0 <HAL_PCD_DataOutStageCallback>
 8003f60:	e01d      	b.n	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d114      	bne.n	8003f92 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d108      	bne.n	8003f92 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	f003 f8d7 	bl	8007140 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f008 fc99 	bl	800c8d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	4f54300a 	.word	0x4f54300a
 8003fac:	4f54310a 	.word	0x4f54310a

08003fb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	333c      	adds	r3, #60	; 0x3c
 8003fc8:	3304      	adds	r3, #4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a15      	ldr	r2, [pc, #84]	; (8004038 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d90e      	bls.n	8004004 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004002:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f008 fc51 	bl	800c8ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <PCD_EP_OutSetupPacket_int+0x88>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d90c      	bls.n	800402c <PCD_EP_OutSetupPacket_int+0x7c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d108      	bne.n	800402c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004024:	461a      	mov	r2, r3
 8004026:	2101      	movs	r1, #1
 8004028:	f003 f88a 	bl	8007140 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	4f54300a 	.word	0x4f54300a

0800403c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
 8004048:	4613      	mov	r3, r2
 800404a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d107      	bne.n	800406a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800405a:	883b      	ldrh	r3, [r7, #0]
 800405c:	0419      	lsls	r1, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	430a      	orrs	r2, r1
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
 8004068:	e028      	b.n	80040bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4413      	add	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
 800407c:	e00d      	b.n	800409a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	3340      	adds	r3, #64	; 0x40
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	4413      	add	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	3301      	adds	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	7bfa      	ldrb	r2, [r7, #15]
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	3b01      	subs	r3, #1
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d3ec      	bcc.n	800407e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040a4:	883b      	ldrh	r3, [r7, #0]
 80040a6:	0418      	lsls	r0, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	4302      	orrs	r2, r0
 80040b4:	3340      	adds	r3, #64	; 0x40
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e264      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d075      	beq.n	800420e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004122:	4ba3      	ldr	r3, [pc, #652]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	2b04      	cmp	r3, #4
 800412c:	d00c      	beq.n	8004148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412e:	4ba0      	ldr	r3, [pc, #640]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004136:	2b08      	cmp	r3, #8
 8004138:	d112      	bne.n	8004160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800413a:	4b9d      	ldr	r3, [pc, #628]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004146:	d10b      	bne.n	8004160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	4b99      	ldr	r3, [pc, #612]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d05b      	beq.n	800420c <HAL_RCC_OscConfig+0x108>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d157      	bne.n	800420c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e23f      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004168:	d106      	bne.n	8004178 <HAL_RCC_OscConfig+0x74>
 800416a:	4b91      	ldr	r3, [pc, #580]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a90      	ldr	r2, [pc, #576]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e01d      	b.n	80041b4 <HAL_RCC_OscConfig+0xb0>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004180:	d10c      	bne.n	800419c <HAL_RCC_OscConfig+0x98>
 8004182:	4b8b      	ldr	r3, [pc, #556]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a8a      	ldr	r2, [pc, #552]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4b88      	ldr	r3, [pc, #544]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a87      	ldr	r2, [pc, #540]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e00b      	b.n	80041b4 <HAL_RCC_OscConfig+0xb0>
 800419c:	4b84      	ldr	r3, [pc, #528]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a83      	ldr	r2, [pc, #524]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80041a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4b81      	ldr	r3, [pc, #516]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a80      	ldr	r2, [pc, #512]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d013      	beq.n	80041e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fd f868 	bl	8001290 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fd f864 	bl	8001290 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e204      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	4b76      	ldr	r3, [pc, #472]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0xc0>
 80041e2:	e014      	b.n	800420e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fd f854 	bl	8001290 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ec:	f7fd f850 	bl	8001290 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	; 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e1f0      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	4b6c      	ldr	r3, [pc, #432]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0xe8>
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d063      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800421a:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004226:	4b62      	ldr	r3, [pc, #392]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800422e:	2b08      	cmp	r3, #8
 8004230:	d11c      	bne.n	800426c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004232:	4b5f      	ldr	r3, [pc, #380]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d116      	bne.n	800426c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423e:	4b5c      	ldr	r3, [pc, #368]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <HAL_RCC_OscConfig+0x152>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d001      	beq.n	8004256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e1c4      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004256:	4b56      	ldr	r3, [pc, #344]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4952      	ldr	r1, [pc, #328]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426a:	e03a      	b.n	80042e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d020      	beq.n	80042b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004274:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <HAL_RCC_OscConfig+0x2b0>)
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427a:	f7fd f809 	bl	8001290 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004282:	f7fd f805 	bl	8001290 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e1a5      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004294:	4b46      	ldr	r3, [pc, #280]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a0:	4b43      	ldr	r3, [pc, #268]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4940      	ldr	r1, [pc, #256]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]
 80042b4:	e015      	b.n	80042e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042b6:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <HAL_RCC_OscConfig+0x2b0>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fc ffe8 	bl	8001290 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c4:	f7fc ffe4 	bl	8001290 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e184      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	4b36      	ldr	r3, [pc, #216]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d030      	beq.n	8004350 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d016      	beq.n	8004324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <HAL_RCC_OscConfig+0x2b4>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fc:	f7fc ffc8 	bl	8001290 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004304:	f7fc ffc4 	bl	8001290 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e164      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004316:	4b26      	ldr	r3, [pc, #152]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0x200>
 8004322:	e015      	b.n	8004350 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004324:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <HAL_RCC_OscConfig+0x2b4>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432a:	f7fc ffb1 	bl	8001290 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004332:	f7fc ffad 	bl	8001290 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e14d      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a0 	beq.w	800449e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435e:	2300      	movs	r3, #0
 8004360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004362:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10f      	bne.n	800438e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	4a0e      	ldr	r2, [pc, #56]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437c:	6413      	str	r3, [r2, #64]	; 0x40
 800437e:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800438a:	2301      	movs	r3, #1
 800438c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_RCC_OscConfig+0x2b8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	2b00      	cmp	r3, #0
 8004398:	d121      	bne.n	80043de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <HAL_RCC_OscConfig+0x2b8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a07      	ldr	r2, [pc, #28]	; (80043bc <HAL_RCC_OscConfig+0x2b8>)
 80043a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043a6:	f7fc ff73 	bl	8001290 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ac:	e011      	b.n	80043d2 <HAL_RCC_OscConfig+0x2ce>
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	42470000 	.word	0x42470000
 80043b8:	42470e80 	.word	0x42470e80
 80043bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c0:	f7fc ff66 	bl	8001290 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e106      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	4b85      	ldr	r3, [pc, #532]	; (80045e8 <HAL_RCC_OscConfig+0x4e4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d106      	bne.n	80043f4 <HAL_RCC_OscConfig+0x2f0>
 80043e6:	4b81      	ldr	r3, [pc, #516]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4a80      	ldr	r2, [pc, #512]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	6713      	str	r3, [r2, #112]	; 0x70
 80043f2:	e01c      	b.n	800442e <HAL_RCC_OscConfig+0x32a>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b05      	cmp	r3, #5
 80043fa:	d10c      	bne.n	8004416 <HAL_RCC_OscConfig+0x312>
 80043fc:	4b7b      	ldr	r3, [pc, #492]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	4a7a      	ldr	r2, [pc, #488]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004402:	f043 0304 	orr.w	r3, r3, #4
 8004406:	6713      	str	r3, [r2, #112]	; 0x70
 8004408:	4b78      	ldr	r3, [pc, #480]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	4a77      	ldr	r2, [pc, #476]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6713      	str	r3, [r2, #112]	; 0x70
 8004414:	e00b      	b.n	800442e <HAL_RCC_OscConfig+0x32a>
 8004416:	4b75      	ldr	r3, [pc, #468]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a74      	ldr	r2, [pc, #464]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	6713      	str	r3, [r2, #112]	; 0x70
 8004422:	4b72      	ldr	r3, [pc, #456]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4a71      	ldr	r2, [pc, #452]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004428:	f023 0304 	bic.w	r3, r3, #4
 800442c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d015      	beq.n	8004462 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004436:	f7fc ff2b 	bl	8001290 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443c:	e00a      	b.n	8004454 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800443e:	f7fc ff27 	bl	8001290 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f241 3288 	movw	r2, #5000	; 0x1388
 800444c:	4293      	cmp	r3, r2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e0c5      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004454:	4b65      	ldr	r3, [pc, #404]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0ee      	beq.n	800443e <HAL_RCC_OscConfig+0x33a>
 8004460:	e014      	b.n	800448c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004462:	f7fc ff15 	bl	8001290 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004468:	e00a      	b.n	8004480 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800446a:	f7fc ff11 	bl	8001290 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	f241 3288 	movw	r2, #5000	; 0x1388
 8004478:	4293      	cmp	r3, r2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e0af      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004480:	4b5a      	ldr	r3, [pc, #360]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1ee      	bne.n	800446a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d105      	bne.n	800449e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004492:	4b56      	ldr	r3, [pc, #344]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	4a55      	ldr	r2, [pc, #340]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 809b 	beq.w	80045de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044a8:	4b50      	ldr	r3, [pc, #320]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 030c 	and.w	r3, r3, #12
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d05c      	beq.n	800456e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d141      	bne.n	8004540 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044bc:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <HAL_RCC_OscConfig+0x4ec>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c2:	f7fc fee5 	bl	8001290 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ca:	f7fc fee1 	bl	8001290 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e081      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044dc:	4b43      	ldr	r3, [pc, #268]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	019b      	lsls	r3, r3, #6
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	3b01      	subs	r3, #1
 8004502:	041b      	lsls	r3, r3, #16
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	061b      	lsls	r3, r3, #24
 800450c:	4937      	ldr	r1, [pc, #220]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004512:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <HAL_RCC_OscConfig+0x4ec>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004518:	f7fc feba 	bl	8001290 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004520:	f7fc feb6 	bl	8001290 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e056      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004532:	4b2e      	ldr	r3, [pc, #184]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x41c>
 800453e:	e04e      	b.n	80045de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004540:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <HAL_RCC_OscConfig+0x4ec>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004546:	f7fc fea3 	bl	8001290 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800454e:	f7fc fe9f 	bl	8001290 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e03f      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004560:	4b22      	ldr	r3, [pc, #136]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f0      	bne.n	800454e <HAL_RCC_OscConfig+0x44a>
 800456c:	e037      	b.n	80045de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e032      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800457a:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d028      	beq.n	80045da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d121      	bne.n	80045da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d11a      	bne.n	80045da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045aa:	4013      	ands	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d111      	bne.n	80045da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	3b01      	subs	r3, #1
 80045c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d107      	bne.n	80045da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d001      	beq.n	80045de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40007000 	.word	0x40007000
 80045ec:	40023800 	.word	0x40023800
 80045f0:	42470060 	.word	0x42470060

080045f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0cc      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004608:	4b68      	ldr	r3, [pc, #416]	; (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d90c      	bls.n	8004630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b65      	ldr	r3, [pc, #404]	; (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b63      	ldr	r3, [pc, #396]	; (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e0b8      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d020      	beq.n	800467e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004648:	4b59      	ldr	r3, [pc, #356]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4a58      	ldr	r2, [pc, #352]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004660:	4b53      	ldr	r3, [pc, #332]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4a52      	ldr	r2, [pc, #328]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800466a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800466c:	4b50      	ldr	r3, [pc, #320]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	494d      	ldr	r1, [pc, #308]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d044      	beq.n	8004714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004692:	4b47      	ldr	r3, [pc, #284]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d119      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e07f      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d003      	beq.n	80046b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d107      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b2:	4b3f      	ldr	r3, [pc, #252]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e06f      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c2:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e067      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046d2:	4b37      	ldr	r3, [pc, #220]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f023 0203 	bic.w	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4934      	ldr	r1, [pc, #208]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046e4:	f7fc fdd4 	bl	8001290 <HAL_GetTick>
 80046e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ea:	e00a      	b.n	8004702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ec:	f7fc fdd0 	bl	8001290 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e04f      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004702:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 020c 	and.w	r2, r3, #12
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	429a      	cmp	r2, r3
 8004712:	d1eb      	bne.n	80046ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004714:	4b25      	ldr	r3, [pc, #148]	; (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d20c      	bcs.n	800473c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004722:	4b22      	ldr	r3, [pc, #136]	; (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e032      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004748:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4916      	ldr	r1, [pc, #88]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004766:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	490e      	ldr	r1, [pc, #56]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800477a:	f000 f821 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 800477e:	4602      	mov	r2, r0
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	490a      	ldr	r1, [pc, #40]	; (80047b4 <HAL_RCC_ClockConfig+0x1c0>)
 800478c:	5ccb      	ldrb	r3, [r1, r3]
 800478e:	fa22 f303 	lsr.w	r3, r2, r3
 8004792:	4a09      	ldr	r2, [pc, #36]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004796:	4b09      	ldr	r3, [pc, #36]	; (80047bc <HAL_RCC_ClockConfig+0x1c8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fc fc82 	bl	80010a4 <HAL_InitTick>

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023c00 	.word	0x40023c00
 80047b0:	40023800 	.word	0x40023800
 80047b4:	0800d224 	.word	0x0800d224
 80047b8:	20000000 	.word	0x20000000
 80047bc:	20000004 	.word	0x20000004

080047c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	607b      	str	r3, [r7, #4]
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	2300      	movs	r3, #0
 80047d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047d8:	4b67      	ldr	r3, [pc, #412]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d00d      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0x40>
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	f200 80bd 	bhi.w	8004964 <HAL_RCC_GetSysClockFreq+0x1a4>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x34>
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d003      	beq.n	80047fa <HAL_RCC_GetSysClockFreq+0x3a>
 80047f2:	e0b7      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047f4:	4b61      	ldr	r3, [pc, #388]	; (800497c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047f6:	60bb      	str	r3, [r7, #8]
       break;
 80047f8:	e0b7      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047fa:	4b61      	ldr	r3, [pc, #388]	; (8004980 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047fc:	60bb      	str	r3, [r7, #8]
      break;
 80047fe:	e0b4      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004800:	4b5d      	ldr	r3, [pc, #372]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004808:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800480a:	4b5b      	ldr	r3, [pc, #364]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d04d      	beq.n	80048b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004816:	4b58      	ldr	r3, [pc, #352]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	099b      	lsrs	r3, r3, #6
 800481c:	461a      	mov	r2, r3
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	ea02 0800 	and.w	r8, r2, r0
 800482e:	ea03 0901 	and.w	r9, r3, r1
 8004832:	4640      	mov	r0, r8
 8004834:	4649      	mov	r1, r9
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	014b      	lsls	r3, r1, #5
 8004840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004844:	0142      	lsls	r2, r0, #5
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	ebb0 0008 	subs.w	r0, r0, r8
 800484e:	eb61 0109 	sbc.w	r1, r1, r9
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	018b      	lsls	r3, r1, #6
 800485c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004860:	0182      	lsls	r2, r0, #6
 8004862:	1a12      	subs	r2, r2, r0
 8004864:	eb63 0301 	sbc.w	r3, r3, r1
 8004868:	f04f 0000 	mov.w	r0, #0
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	00d9      	lsls	r1, r3, #3
 8004872:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004876:	00d0      	lsls	r0, r2, #3
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	eb12 0208 	adds.w	r2, r2, r8
 8004880:	eb43 0309 	adc.w	r3, r3, r9
 8004884:	f04f 0000 	mov.w	r0, #0
 8004888:	f04f 0100 	mov.w	r1, #0
 800488c:	0259      	lsls	r1, r3, #9
 800488e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004892:	0250      	lsls	r0, r2, #9
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4610      	mov	r0, r2
 800489a:	4619      	mov	r1, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	461a      	mov	r2, r3
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	f7fb fc94 	bl	80001d0 <__aeabi_uldivmod>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4613      	mov	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e04a      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b2:	4b31      	ldr	r3, [pc, #196]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	461a      	mov	r2, r3
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	ea02 0400 	and.w	r4, r2, r0
 80048ca:	ea03 0501 	and.w	r5, r3, r1
 80048ce:	4620      	mov	r0, r4
 80048d0:	4629      	mov	r1, r5
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	014b      	lsls	r3, r1, #5
 80048dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048e0:	0142      	lsls	r2, r0, #5
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	1b00      	subs	r0, r0, r4
 80048e8:	eb61 0105 	sbc.w	r1, r1, r5
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	018b      	lsls	r3, r1, #6
 80048f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048fa:	0182      	lsls	r2, r0, #6
 80048fc:	1a12      	subs	r2, r2, r0
 80048fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	00d9      	lsls	r1, r3, #3
 800490c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004910:	00d0      	lsls	r0, r2, #3
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	1912      	adds	r2, r2, r4
 8004918:	eb45 0303 	adc.w	r3, r5, r3
 800491c:	f04f 0000 	mov.w	r0, #0
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	0299      	lsls	r1, r3, #10
 8004926:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800492a:	0290      	lsls	r0, r2, #10
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4610      	mov	r0, r2
 8004932:	4619      	mov	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	461a      	mov	r2, r3
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	f7fb fc48 	bl	80001d0 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4613      	mov	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	3301      	adds	r3, #1
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	60bb      	str	r3, [r7, #8]
      break;
 8004962:	e002      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004966:	60bb      	str	r3, [r7, #8]
      break;
 8004968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800496a:	68bb      	ldr	r3, [r7, #8]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800
 800497c:	00f42400 	.word	0x00f42400
 8004980:	007a1200 	.word	0x007a1200

08004984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004988:	4b03      	ldr	r3, [pc, #12]	; (8004998 <HAL_RCC_GetHCLKFreq+0x14>)
 800498a:	681b      	ldr	r3, [r3, #0]
}
 800498c:	4618      	mov	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000000 	.word	0x20000000

0800499c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049a0:	f7ff fff0 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80049a4:	4602      	mov	r2, r0
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	0a9b      	lsrs	r3, r3, #10
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	4903      	ldr	r1, [pc, #12]	; (80049c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049b2:	5ccb      	ldrb	r3, [r1, r3]
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	0800d234 	.word	0x0800d234

080049c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	220f      	movs	r2, #15
 80049d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049d4:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <HAL_RCC_GetClockConfig+0x5c>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0203 	and.w	r2, r3, #3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049e0:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <HAL_RCC_GetClockConfig+0x5c>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_RCC_GetClockConfig+0x5c>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_RCC_GetClockConfig+0x5c>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	08db      	lsrs	r3, r3, #3
 80049fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a06:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <HAL_RCC_GetClockConfig+0x60>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0207 	and.w	r2, r3, #7
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40023c00 	.word	0x40023c00

08004a28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d035      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a50:	4b62      	ldr	r3, [pc, #392]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a56:	f7fc fc1b 	bl	8001290 <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a5e:	f7fc fc17 	bl	8001290 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e0b0      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a70:	4b5b      	ldr	r3, [pc, #364]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	019a      	lsls	r2, r3, #6
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	071b      	lsls	r3, r3, #28
 8004a88:	4955      	ldr	r1, [pc, #340]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a90:	4b52      	ldr	r3, [pc, #328]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a96:	f7fc fbfb 	bl	8001290 <HAL_GetTick>
 8004a9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a9e:	f7fc fbf7 	bl	8001290 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e090      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab0:	4b4b      	ldr	r3, [pc, #300]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8083 	beq.w	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	4b44      	ldr	r3, [pc, #272]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	4a43      	ldr	r2, [pc, #268]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ada:	4b41      	ldr	r3, [pc, #260]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a3e      	ldr	r2, [pc, #248]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004af2:	f7fc fbcd 	bl	8001290 <HAL_GetTick>
 8004af6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004afa:	f7fc fbc9 	bl	8001290 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e062      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b0c:	4b35      	ldr	r3, [pc, #212]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b18:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02f      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d028      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b36:	4b2a      	ldr	r3, [pc, #168]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b40:	4b29      	ldr	r3, [pc, #164]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b46:	4b28      	ldr	r3, [pc, #160]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b4c:	4a24      	ldr	r2, [pc, #144]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b52:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d114      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fc fb97 	bl	8001290 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b64:	e00a      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fc fb93 	bl	8001290 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e02a      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7c:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ee      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b94:	d10d      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004baa:	490d      	ldr	r1, [pc, #52]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]
 8004bb0:	e005      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bbc:	6093      	str	r3, [r2, #8]
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bca:	4905      	ldr	r1, [pc, #20]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	42470068 	.word	0x42470068
 8004be0:	40023800 	.word	0x40023800
 8004be4:	40007000 	.word	0x40007000
 8004be8:	42470e40 	.word	0x42470e40

08004bec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d13e      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c0a:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d12f      	bne.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c20:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c22:	617b      	str	r3, [r7, #20]
          break;
 8004c24:	e02f      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c26:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c32:	d108      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c3c:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	e007      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c4e:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5c:	099b      	lsrs	r3, r3, #6
 8004c5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c70:	0f1b      	lsrs	r3, r3, #28
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]
          break;
 8004c7e:	e002      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
          break;
 8004c84:	bf00      	nop
        }
      }
      break;
 8004c86:	bf00      	nop
    }
  }
  return frequency;
 8004c88:	697b      	ldr	r3, [r7, #20]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	00bb8000 	.word	0x00bb8000
 8004ca0:	007a1200 	.word	0x007a1200
 8004ca4:	00f42400 	.word	0x00f42400

08004ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07b      	b.n	8004db2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cca:	d009      	beq.n	8004ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	61da      	str	r2, [r3, #28]
 8004cd2:	e005      	b.n	8004ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fc f92e 	bl	8000f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d64:	ea42 0103 	orr.w	r1, r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	0c1b      	lsrs	r3, r3, #16
 8004d7e:	f003 0104 	and.w	r1, r3, #4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f003 0210 	and.w	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e041      	b.n	8004e50 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d106      	bne.n	8004de6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f839 	bl	8004e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2202      	movs	r2, #2
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f000 fbb1 	bl	8005560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d001      	beq.n	8004e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e04e      	b.n	8004f22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a23      	ldr	r2, [pc, #140]	; (8004f30 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d022      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eae:	d01d      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1f      	ldr	r2, [pc, #124]	; (8004f34 <HAL_TIM_Base_Start_IT+0xc8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d018      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d013      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <HAL_TIM_Base_Start_IT+0xd0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00e      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d009      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a19      	ldr	r2, [pc, #100]	; (8004f44 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d111      	bne.n	8004f10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b06      	cmp	r3, #6
 8004efc:	d010      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	e007      	b.n	8004f20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40010400 	.word	0x40010400
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40001800 	.word	0x40001800

08004f4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e041      	b.n	8004fe2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fc f83a 	bl	8000fec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f000 fae8 	bl	8005560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d109      	bne.n	8005010 <HAL_TIM_PWM_Start+0x24>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	bf14      	ite	ne
 8005008:	2301      	movne	r3, #1
 800500a:	2300      	moveq	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	e022      	b.n	8005056 <HAL_TIM_PWM_Start+0x6a>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b04      	cmp	r3, #4
 8005014:	d109      	bne.n	800502a <HAL_TIM_PWM_Start+0x3e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b01      	cmp	r3, #1
 8005020:	bf14      	ite	ne
 8005022:	2301      	movne	r3, #1
 8005024:	2300      	moveq	r3, #0
 8005026:	b2db      	uxtb	r3, r3
 8005028:	e015      	b.n	8005056 <HAL_TIM_PWM_Start+0x6a>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b08      	cmp	r3, #8
 800502e:	d109      	bne.n	8005044 <HAL_TIM_PWM_Start+0x58>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	e008      	b.n	8005056 <HAL_TIM_PWM_Start+0x6a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e07c      	b.n	8005158 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <HAL_TIM_PWM_Start+0x82>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800506c:	e013      	b.n	8005096 <HAL_TIM_PWM_Start+0xaa>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b04      	cmp	r3, #4
 8005072:	d104      	bne.n	800507e <HAL_TIM_PWM_Start+0x92>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800507c:	e00b      	b.n	8005096 <HAL_TIM_PWM_Start+0xaa>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d104      	bne.n	800508e <HAL_TIM_PWM_Start+0xa2>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800508c:	e003      	b.n	8005096 <HAL_TIM_PWM_Start+0xaa>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2201      	movs	r2, #1
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fcae 	bl	8005a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a2d      	ldr	r2, [pc, #180]	; (8005160 <HAL_TIM_PWM_Start+0x174>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <HAL_TIM_PWM_Start+0xcc>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a2c      	ldr	r2, [pc, #176]	; (8005164 <HAL_TIM_PWM_Start+0x178>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d101      	bne.n	80050bc <HAL_TIM_PWM_Start+0xd0>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <HAL_TIM_PWM_Start+0xd2>
 80050bc:	2300      	movs	r3, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a22      	ldr	r2, [pc, #136]	; (8005160 <HAL_TIM_PWM_Start+0x174>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d022      	beq.n	8005122 <HAL_TIM_PWM_Start+0x136>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e4:	d01d      	beq.n	8005122 <HAL_TIM_PWM_Start+0x136>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1f      	ldr	r2, [pc, #124]	; (8005168 <HAL_TIM_PWM_Start+0x17c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d018      	beq.n	8005122 <HAL_TIM_PWM_Start+0x136>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1d      	ldr	r2, [pc, #116]	; (800516c <HAL_TIM_PWM_Start+0x180>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <HAL_TIM_PWM_Start+0x136>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1c      	ldr	r2, [pc, #112]	; (8005170 <HAL_TIM_PWM_Start+0x184>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00e      	beq.n	8005122 <HAL_TIM_PWM_Start+0x136>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a16      	ldr	r2, [pc, #88]	; (8005164 <HAL_TIM_PWM_Start+0x178>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d009      	beq.n	8005122 <HAL_TIM_PWM_Start+0x136>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a18      	ldr	r2, [pc, #96]	; (8005174 <HAL_TIM_PWM_Start+0x188>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d004      	beq.n	8005122 <HAL_TIM_PWM_Start+0x136>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a16      	ldr	r2, [pc, #88]	; (8005178 <HAL_TIM_PWM_Start+0x18c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d111      	bne.n	8005146 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b06      	cmp	r3, #6
 8005132:	d010      	beq.n	8005156 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005144:	e007      	b.n	8005156 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0201 	orr.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40010000 	.word	0x40010000
 8005164:	40010400 	.word	0x40010400
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800
 8005170:	40000c00 	.word	0x40000c00
 8005174:	40014000 	.word	0x40014000
 8005178:	40001800 	.word	0x40001800

0800517c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d122      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b02      	cmp	r3, #2
 800519e:	d11b      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0202 	mvn.w	r2, #2
 80051a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f9b0 	bl	8005524 <HAL_TIM_IC_CaptureCallback>
 80051c4:	e005      	b.n	80051d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f9a2 	bl	8005510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f9b3 	bl	8005538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d122      	bne.n	800522c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d11b      	bne.n	800522c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0204 	mvn.w	r2, #4
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f986 	bl	8005524 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f978 	bl	8005510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f989 	bl	8005538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b08      	cmp	r3, #8
 8005238:	d122      	bne.n	8005280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b08      	cmp	r3, #8
 8005246:	d11b      	bne.n	8005280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0208 	mvn.w	r2, #8
 8005250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2204      	movs	r2, #4
 8005256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f95c 	bl	8005524 <HAL_TIM_IC_CaptureCallback>
 800526c:	e005      	b.n	800527a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f94e 	bl	8005510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f95f 	bl	8005538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	2b10      	cmp	r3, #16
 800528c:	d122      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b10      	cmp	r3, #16
 800529a:	d11b      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0210 	mvn.w	r2, #16
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2208      	movs	r2, #8
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f932 	bl	8005524 <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f924 	bl	8005510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f935 	bl	8005538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d10e      	bne.n	8005300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d107      	bne.n	8005300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0201 	mvn.w	r2, #1
 80052f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fb fce2 	bl	8000cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	2b80      	cmp	r3, #128	; 0x80
 800530c:	d10e      	bne.n	800532c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	2b80      	cmp	r3, #128	; 0x80
 800531a:	d107      	bne.n	800532c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fc16 	bl	8005b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d10e      	bne.n	8005358 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d107      	bne.n	8005358 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8fa 	bl	800554c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b20      	cmp	r3, #32
 8005364:	d10e      	bne.n	8005384 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b20      	cmp	r3, #32
 8005372:	d107      	bne.n	8005384 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0220 	mvn.w	r2, #32
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fbe0 	bl	8005b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e0ae      	b.n	8005508 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	f200 809f 	bhi.w	80054f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053ba:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	080054f9 	.word	0x080054f9
 80053c8:	080054f9 	.word	0x080054f9
 80053cc:	080054f9 	.word	0x080054f9
 80053d0:	08005435 	.word	0x08005435
 80053d4:	080054f9 	.word	0x080054f9
 80053d8:	080054f9 	.word	0x080054f9
 80053dc:	080054f9 	.word	0x080054f9
 80053e0:	08005477 	.word	0x08005477
 80053e4:	080054f9 	.word	0x080054f9
 80053e8:	080054f9 	.word	0x080054f9
 80053ec:	080054f9 	.word	0x080054f9
 80053f0:	080054b7 	.word	0x080054b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 f950 	bl	80056a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0208 	orr.w	r2, r2, #8
 800540e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0204 	bic.w	r2, r2, #4
 800541e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6999      	ldr	r1, [r3, #24]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	619a      	str	r2, [r3, #24]
      break;
 8005432:	e064      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f9a0 	bl	8005780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800544e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6999      	ldr	r1, [r3, #24]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	021a      	lsls	r2, r3, #8
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	619a      	str	r2, [r3, #24]
      break;
 8005474:	e043      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	4618      	mov	r0, r3
 800547e:	f000 f9f5 	bl	800586c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0208 	orr.w	r2, r2, #8
 8005490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0204 	bic.w	r2, r2, #4
 80054a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69d9      	ldr	r1, [r3, #28]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	61da      	str	r2, [r3, #28]
      break;
 80054b4:	e023      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fa49 	bl	8005954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69d9      	ldr	r1, [r3, #28]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	021a      	lsls	r2, r3, #8
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	61da      	str	r2, [r3, #28]
      break;
 80054f6:	e002      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	75fb      	strb	r3, [r7, #23]
      break;
 80054fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a40      	ldr	r2, [pc, #256]	; (8005674 <TIM_Base_SetConfig+0x114>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557e:	d00f      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a3d      	ldr	r2, [pc, #244]	; (8005678 <TIM_Base_SetConfig+0x118>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00b      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a3c      	ldr	r2, [pc, #240]	; (800567c <TIM_Base_SetConfig+0x11c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d007      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a3b      	ldr	r2, [pc, #236]	; (8005680 <TIM_Base_SetConfig+0x120>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a3a      	ldr	r2, [pc, #232]	; (8005684 <TIM_Base_SetConfig+0x124>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d108      	bne.n	80055b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2f      	ldr	r2, [pc, #188]	; (8005674 <TIM_Base_SetConfig+0x114>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d02b      	beq.n	8005612 <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c0:	d027      	beq.n	8005612 <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2c      	ldr	r2, [pc, #176]	; (8005678 <TIM_Base_SetConfig+0x118>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d023      	beq.n	8005612 <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a2b      	ldr	r2, [pc, #172]	; (800567c <TIM_Base_SetConfig+0x11c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01f      	beq.n	8005612 <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2a      	ldr	r2, [pc, #168]	; (8005680 <TIM_Base_SetConfig+0x120>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d01b      	beq.n	8005612 <TIM_Base_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a29      	ldr	r2, [pc, #164]	; (8005684 <TIM_Base_SetConfig+0x124>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d017      	beq.n	8005612 <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a28      	ldr	r2, [pc, #160]	; (8005688 <TIM_Base_SetConfig+0x128>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d013      	beq.n	8005612 <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a27      	ldr	r2, [pc, #156]	; (800568c <TIM_Base_SetConfig+0x12c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00f      	beq.n	8005612 <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a26      	ldr	r2, [pc, #152]	; (8005690 <TIM_Base_SetConfig+0x130>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00b      	beq.n	8005612 <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a25      	ldr	r2, [pc, #148]	; (8005694 <TIM_Base_SetConfig+0x134>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d007      	beq.n	8005612 <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a24      	ldr	r2, [pc, #144]	; (8005698 <TIM_Base_SetConfig+0x138>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d003      	beq.n	8005612 <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a23      	ldr	r2, [pc, #140]	; (800569c <TIM_Base_SetConfig+0x13c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d108      	bne.n	8005624 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a0a      	ldr	r2, [pc, #40]	; (8005674 <TIM_Base_SetConfig+0x114>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0xf8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a0c      	ldr	r2, [pc, #48]	; (8005684 <TIM_Base_SetConfig+0x124>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d103      	bne.n	8005660 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	615a      	str	r2, [r3, #20]
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40010000 	.word	0x40010000
 8005678:	40000400 	.word	0x40000400
 800567c:	40000800 	.word	0x40000800
 8005680:	40000c00 	.word	0x40000c00
 8005684:	40010400 	.word	0x40010400
 8005688:	40014000 	.word	0x40014000
 800568c:	40014400 	.word	0x40014400
 8005690:	40014800 	.word	0x40014800
 8005694:	40001800 	.word	0x40001800
 8005698:	40001c00 	.word	0x40001c00
 800569c:	40002000 	.word	0x40002000

080056a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f023 0201 	bic.w	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f023 0302 	bic.w	r3, r3, #2
 80056e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a20      	ldr	r2, [pc, #128]	; (8005778 <TIM_OC1_SetConfig+0xd8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_OC1_SetConfig+0x64>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a1f      	ldr	r2, [pc, #124]	; (800577c <TIM_OC1_SetConfig+0xdc>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d10c      	bne.n	800571e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f023 0308 	bic.w	r3, r3, #8
 800570a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 0304 	bic.w	r3, r3, #4
 800571c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a15      	ldr	r2, [pc, #84]	; (8005778 <TIM_OC1_SetConfig+0xd8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC1_SetConfig+0x8e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a14      	ldr	r2, [pc, #80]	; (800577c <TIM_OC1_SetConfig+0xdc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d111      	bne.n	8005752 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800573c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40010000 	.word	0x40010000
 800577c:	40010400 	.word	0x40010400

08005780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	f023 0210 	bic.w	r2, r3, #16
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f023 0320 	bic.w	r3, r3, #32
 80057ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a22      	ldr	r2, [pc, #136]	; (8005864 <TIM_OC2_SetConfig+0xe4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_OC2_SetConfig+0x68>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a21      	ldr	r2, [pc, #132]	; (8005868 <TIM_OC2_SetConfig+0xe8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d10d      	bne.n	8005804 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005802:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a17      	ldr	r2, [pc, #92]	; (8005864 <TIM_OC2_SetConfig+0xe4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_OC2_SetConfig+0x94>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a16      	ldr	r2, [pc, #88]	; (8005868 <TIM_OC2_SetConfig+0xe8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d113      	bne.n	800583c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800581a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	bf00      	nop
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40010000 	.word	0x40010000
 8005868:	40010400 	.word	0x40010400

0800586c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a21      	ldr	r2, [pc, #132]	; (800594c <TIM_OC3_SetConfig+0xe0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_OC3_SetConfig+0x66>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a20      	ldr	r2, [pc, #128]	; (8005950 <TIM_OC3_SetConfig+0xe4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d10d      	bne.n	80058ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a16      	ldr	r2, [pc, #88]	; (800594c <TIM_OC3_SetConfig+0xe0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d003      	beq.n	80058fe <TIM_OC3_SetConfig+0x92>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a15      	ldr	r2, [pc, #84]	; (8005950 <TIM_OC3_SetConfig+0xe4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d113      	bne.n	8005926 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800590c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	621a      	str	r2, [r3, #32]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40010000 	.word	0x40010000
 8005950:	40010400 	.word	0x40010400

08005954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800599e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	031b      	lsls	r3, r3, #12
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a12      	ldr	r2, [pc, #72]	; (80059f8 <TIM_OC4_SetConfig+0xa4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC4_SetConfig+0x68>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a11      	ldr	r2, [pc, #68]	; (80059fc <TIM_OC4_SetConfig+0xa8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d109      	bne.n	80059d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	019b      	lsls	r3, r3, #6
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40010400 	.word	0x40010400

08005a00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 031f 	and.w	r3, r3, #31
 8005a12:	2201      	movs	r2, #1
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a1a      	ldr	r2, [r3, #32]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	43db      	mvns	r3, r3
 8005a22:	401a      	ands	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1a      	ldr	r2, [r3, #32]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	fa01 f303 	lsl.w	r3, r1, r3
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
	...

08005a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e05a      	b.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a21      	ldr	r2, [pc, #132]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d022      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab0:	d01d      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1d      	ldr	r2, [pc, #116]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d018      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d013      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1a      	ldr	r2, [pc, #104]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00e      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a18      	ldr	r2, [pc, #96]	; (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d009      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d004      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a15      	ldr	r2, [pc, #84]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d10c      	bne.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40010400 	.word	0x40010400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40001800 	.word	0x40001800

08005b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	f107 001c 	add.w	r0, r7, #28
 8005b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d122      	bne.n	8005bca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d105      	bne.n	8005bbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 fb1c 	bl	80071fc <USB_CoreReset>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	73fb      	strb	r3, [r7, #15]
 8005bc8:	e01a      	b.n	8005c00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f001 fb10 	bl	80071fc <USB_CoreReset>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	639a      	str	r2, [r3, #56]	; 0x38
 8005bf2:	e005      	b.n	8005c00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d10b      	bne.n	8005c1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f043 0206 	orr.w	r2, r3, #6
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c2a:	b004      	add	sp, #16
 8005c2c:	4770      	bx	lr
	...

08005c30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d165      	bne.n	8005d10 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4a41      	ldr	r2, [pc, #260]	; (8005d4c <USB_SetTurnaroundTime+0x11c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d906      	bls.n	8005c5a <USB_SetTurnaroundTime+0x2a>
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4a40      	ldr	r2, [pc, #256]	; (8005d50 <USB_SetTurnaroundTime+0x120>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d202      	bcs.n	8005c5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c54:	230f      	movs	r3, #15
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e062      	b.n	8005d20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4a3c      	ldr	r2, [pc, #240]	; (8005d50 <USB_SetTurnaroundTime+0x120>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d306      	bcc.n	8005c70 <USB_SetTurnaroundTime+0x40>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4a3b      	ldr	r2, [pc, #236]	; (8005d54 <USB_SetTurnaroundTime+0x124>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d202      	bcs.n	8005c70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c6a:	230e      	movs	r3, #14
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	e057      	b.n	8005d20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4a38      	ldr	r2, [pc, #224]	; (8005d54 <USB_SetTurnaroundTime+0x124>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d306      	bcc.n	8005c86 <USB_SetTurnaroundTime+0x56>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4a37      	ldr	r2, [pc, #220]	; (8005d58 <USB_SetTurnaroundTime+0x128>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d202      	bcs.n	8005c86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c80:	230d      	movs	r3, #13
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	e04c      	b.n	8005d20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4a33      	ldr	r2, [pc, #204]	; (8005d58 <USB_SetTurnaroundTime+0x128>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d306      	bcc.n	8005c9c <USB_SetTurnaroundTime+0x6c>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4a32      	ldr	r2, [pc, #200]	; (8005d5c <USB_SetTurnaroundTime+0x12c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d802      	bhi.n	8005c9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c96:	230c      	movs	r3, #12
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e041      	b.n	8005d20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4a2f      	ldr	r2, [pc, #188]	; (8005d5c <USB_SetTurnaroundTime+0x12c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d906      	bls.n	8005cb2 <USB_SetTurnaroundTime+0x82>
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4a2e      	ldr	r2, [pc, #184]	; (8005d60 <USB_SetTurnaroundTime+0x130>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d802      	bhi.n	8005cb2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005cac:	230b      	movs	r3, #11
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	e036      	b.n	8005d20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	4a2a      	ldr	r2, [pc, #168]	; (8005d60 <USB_SetTurnaroundTime+0x130>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d906      	bls.n	8005cc8 <USB_SetTurnaroundTime+0x98>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <USB_SetTurnaroundTime+0x134>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d802      	bhi.n	8005cc8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005cc2:	230a      	movs	r3, #10
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	e02b      	b.n	8005d20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4a26      	ldr	r2, [pc, #152]	; (8005d64 <USB_SetTurnaroundTime+0x134>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d906      	bls.n	8005cde <USB_SetTurnaroundTime+0xae>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4a25      	ldr	r2, [pc, #148]	; (8005d68 <USB_SetTurnaroundTime+0x138>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d202      	bcs.n	8005cde <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005cd8:	2309      	movs	r3, #9
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	e020      	b.n	8005d20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	4a21      	ldr	r2, [pc, #132]	; (8005d68 <USB_SetTurnaroundTime+0x138>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d306      	bcc.n	8005cf4 <USB_SetTurnaroundTime+0xc4>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	4a20      	ldr	r2, [pc, #128]	; (8005d6c <USB_SetTurnaroundTime+0x13c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d802      	bhi.n	8005cf4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005cee:	2308      	movs	r3, #8
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	e015      	b.n	8005d20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4a1d      	ldr	r2, [pc, #116]	; (8005d6c <USB_SetTurnaroundTime+0x13c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d906      	bls.n	8005d0a <USB_SetTurnaroundTime+0xda>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4a1c      	ldr	r2, [pc, #112]	; (8005d70 <USB_SetTurnaroundTime+0x140>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d202      	bcs.n	8005d0a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d04:	2307      	movs	r3, #7
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	e00a      	b.n	8005d20 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d0a:	2306      	movs	r3, #6
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e007      	b.n	8005d20 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d102      	bne.n	8005d1c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d16:	2309      	movs	r3, #9
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	e001      	b.n	8005d20 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005d1c:	2309      	movs	r3, #9
 8005d1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	029b      	lsls	r3, r3, #10
 8005d34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	00d8acbf 	.word	0x00d8acbf
 8005d50:	00e4e1c0 	.word	0x00e4e1c0
 8005d54:	00f42400 	.word	0x00f42400
 8005d58:	01067380 	.word	0x01067380
 8005d5c:	011a499f 	.word	0x011a499f
 8005d60:	01312cff 	.word	0x01312cff
 8005d64:	014ca43f 	.word	0x014ca43f
 8005d68:	016e3600 	.word	0x016e3600
 8005d6c:	01a6ab1f 	.word	0x01a6ab1f
 8005d70:	01e84800 	.word	0x01e84800

08005d74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f043 0201 	orr.w	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f023 0201 	bic.w	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d115      	bne.n	8005e06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005de6:	2001      	movs	r0, #1
 8005de8:	f7fb fa5e 	bl	80012a8 <HAL_Delay>
      ms++;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3301      	adds	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f001 f972 	bl	80070dc <USB_GetMode>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d01e      	beq.n	8005e3c <USB_SetCurrentMode+0x84>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b31      	cmp	r3, #49	; 0x31
 8005e02:	d9f0      	bls.n	8005de6 <USB_SetCurrentMode+0x2e>
 8005e04:	e01a      	b.n	8005e3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d115      	bne.n	8005e38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e18:	2001      	movs	r0, #1
 8005e1a:	f7fb fa45 	bl	80012a8 <HAL_Delay>
      ms++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 f959 	bl	80070dc <USB_GetMode>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <USB_SetCurrentMode+0x84>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b31      	cmp	r3, #49	; 0x31
 8005e34:	d9f0      	bls.n	8005e18 <USB_SetCurrentMode+0x60>
 8005e36:	e001      	b.n	8005e3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e005      	b.n	8005e48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b32      	cmp	r3, #50	; 0x32
 8005e40:	d101      	bne.n	8005e46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e50:	b084      	sub	sp, #16
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b086      	sub	sp, #24
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	e009      	b.n	8005e84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	3340      	adds	r3, #64	; 0x40
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	3301      	adds	r3, #1
 8005e82:	613b      	str	r3, [r7, #16]
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b0e      	cmp	r3, #14
 8005e88:	d9f2      	bls.n	8005e70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d11c      	bne.n	8005eca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e9e:	f043 0302 	orr.w	r3, r3, #2
 8005ea2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
 8005ec8:	e00b      	b.n	8005ee2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ee8:	461a      	mov	r2, r3
 8005eea:	2300      	movs	r3, #0
 8005eec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efc:	461a      	mov	r2, r3
 8005efe:	680b      	ldr	r3, [r1, #0]
 8005f00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d10c      	bne.n	8005f22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d104      	bne.n	8005f18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f0e:	2100      	movs	r1, #0
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f945 	bl	80061a0 <USB_SetDevSpeed>
 8005f16:	e008      	b.n	8005f2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f18:	2101      	movs	r1, #1
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f940 	bl	80061a0 <USB_SetDevSpeed>
 8005f20:	e003      	b.n	8005f2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f22:	2103      	movs	r1, #3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f93b 	bl	80061a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f2a:	2110      	movs	r1, #16
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f8f3 	bl	8006118 <USB_FlushTxFifo>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f90f 	bl	8006160 <USB_FlushRxFifo>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f52:	461a      	mov	r2, r3
 8005f54:	2300      	movs	r3, #0
 8005f56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2300      	movs	r3, #0
 8005f62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	e043      	b.n	8005ffe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f8c:	d118      	bne.n	8005fc0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	e013      	b.n	8005fd2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	e008      	b.n	8005fd2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	461a      	mov	r2, r3
 8005fce:	2300      	movs	r3, #0
 8005fd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fde:	461a      	mov	r2, r3
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ff6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	613b      	str	r3, [r7, #16]
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	429a      	cmp	r2, r3
 8006004:	d3b7      	bcc.n	8005f76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006006:	2300      	movs	r3, #0
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	e043      	b.n	8006094 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800601e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006022:	d118      	bne.n	8006056 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006036:	461a      	mov	r2, r3
 8006038:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	e013      	b.n	8006068 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604c:	461a      	mov	r2, r3
 800604e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	e008      	b.n	8006068 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	461a      	mov	r2, r3
 8006064:	2300      	movs	r3, #0
 8006066:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	461a      	mov	r2, r3
 8006076:	2300      	movs	r3, #0
 8006078:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	461a      	mov	r2, r3
 8006088:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800608c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	3301      	adds	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	429a      	cmp	r2, r3
 800609a:	d3b7      	bcc.n	800600c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d105      	bne.n	80060d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	f043 0210 	orr.w	r2, r3, #16
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	4b0f      	ldr	r3, [pc, #60]	; (8006114 <USB_DevInit+0x2c4>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f043 0208 	orr.w	r2, r3, #8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d107      	bne.n	8006104 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060fc:	f043 0304 	orr.w	r3, r3, #4
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006104:	7dfb      	ldrb	r3, [r7, #23]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006110:	b004      	add	sp, #16
 8006112:	4770      	bx	lr
 8006114:	803c3800 	.word	0x803c3800

08006118 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	019b      	lsls	r3, r3, #6
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3301      	adds	r3, #1
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	4a08      	ldr	r2, [pc, #32]	; (800615c <USB_FlushTxFifo+0x44>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e006      	b.n	8006150 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b20      	cmp	r3, #32
 800614c:	d0f1      	beq.n	8006132 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	00030d40 	.word	0x00030d40

08006160 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2210      	movs	r2, #16
 8006170:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3301      	adds	r3, #1
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	4a08      	ldr	r2, [pc, #32]	; (800619c <USB_FlushRxFifo+0x3c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d901      	bls.n	8006182 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e006      	b.n	8006190 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0310 	and.w	r3, r3, #16
 800618a:	2b10      	cmp	r3, #16
 800618c:	d0f1      	beq.n	8006172 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	00030d40 	.word	0x00030d40

080061a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	68f9      	ldr	r1, [r7, #12]
 80061bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061c0:	4313      	orrs	r3, r2
 80061c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b087      	sub	sp, #28
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0306 	and.w	r3, r3, #6
 80061ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d102      	bne.n	80061f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80061f2:	2300      	movs	r3, #0
 80061f4:	75fb      	strb	r3, [r7, #23]
 80061f6:	e00a      	b.n	800620e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d002      	beq.n	8006204 <USB_GetDevSpeed+0x32>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b06      	cmp	r3, #6
 8006202:	d102      	bne.n	800620a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006204:	2302      	movs	r3, #2
 8006206:	75fb      	strb	r3, [r7, #23]
 8006208:	e001      	b.n	800620e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800620a:	230f      	movs	r3, #15
 800620c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800620e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006210:	4618      	mov	r0, r3
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d13a      	bne.n	80062ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623e:	69da      	ldr	r2, [r3, #28]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	2101      	movs	r1, #1
 800624a:	fa01 f303 	lsl.w	r3, r1, r3
 800624e:	b29b      	uxth	r3, r3
 8006250:	68f9      	ldr	r1, [r7, #12]
 8006252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006256:	4313      	orrs	r3, r2
 8006258:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d155      	bne.n	800631c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	78db      	ldrb	r3, [r3, #3]
 800628a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800628c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	059b      	lsls	r3, r3, #22
 8006292:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006294:	4313      	orrs	r3, r2
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	440a      	add	r2, r1
 800629e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	e036      	b.n	800631c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b4:	69da      	ldr	r2, [r3, #28]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	2101      	movs	r1, #1
 80062c0:	fa01 f303 	lsl.w	r3, r1, r3
 80062c4:	041b      	lsls	r3, r3, #16
 80062c6:	68f9      	ldr	r1, [r7, #12]
 80062c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062cc:	4313      	orrs	r3, r2
 80062ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d11a      	bne.n	800631c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	78db      	ldrb	r3, [r3, #3]
 8006300:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006302:	430b      	orrs	r3, r1
 8006304:	4313      	orrs	r3, r2
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	0151      	lsls	r1, r2, #5
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	440a      	add	r2, r1
 800630e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d161      	bne.n	800640c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800635a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800635e:	d11f      	bne.n	80063a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	440a      	add	r2, r1
 8006376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800637e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800639e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	2101      	movs	r1, #1
 80063b2:	fa01 f303 	lsl.w	r3, r1, r3
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	43db      	mvns	r3, r3
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063c0:	4013      	ands	r3, r2
 80063c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ca:	69da      	ldr	r2, [r3, #28]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	2101      	movs	r1, #1
 80063d6:	fa01 f303 	lsl.w	r3, r1, r3
 80063da:	b29b      	uxth	r3, r3
 80063dc:	43db      	mvns	r3, r3
 80063de:	68f9      	ldr	r1, [r7, #12]
 80063e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063e4:	4013      	ands	r3, r2
 80063e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	0159      	lsls	r1, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	440b      	add	r3, r1
 80063fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006402:	4619      	mov	r1, r3
 8006404:	4b35      	ldr	r3, [pc, #212]	; (80064dc <USB_DeactivateEndpoint+0x1b0>)
 8006406:	4013      	ands	r3, r2
 8006408:	600b      	str	r3, [r1, #0]
 800640a:	e060      	b.n	80064ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800641e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006422:	d11f      	bne.n	8006464 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	440a      	add	r2, r1
 800643a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800643e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006442:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	0151      	lsls	r1, r2, #5
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	440a      	add	r2, r1
 800645a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006462:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	f003 030f 	and.w	r3, r3, #15
 8006474:	2101      	movs	r1, #1
 8006476:	fa01 f303 	lsl.w	r3, r1, r3
 800647a:	041b      	lsls	r3, r3, #16
 800647c:	43db      	mvns	r3, r3
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006484:	4013      	ands	r3, r2
 8006486:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 030f 	and.w	r3, r3, #15
 8006498:	2101      	movs	r1, #1
 800649a:	fa01 f303 	lsl.w	r3, r1, r3
 800649e:	041b      	lsls	r3, r3, #16
 80064a0:	43db      	mvns	r3, r3
 80064a2:	68f9      	ldr	r1, [r7, #12]
 80064a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064a8:	4013      	ands	r3, r2
 80064aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	0159      	lsls	r1, r3, #5
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	440b      	add	r3, r1
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	4619      	mov	r1, r3
 80064c8:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <USB_DeactivateEndpoint+0x1b4>)
 80064ca:	4013      	ands	r3, r2
 80064cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	ec337800 	.word	0xec337800
 80064e0:	eff37800 	.word	0xeff37800

080064e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b01      	cmp	r3, #1
 8006502:	f040 815c 	bne.w	80067be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d132      	bne.n	8006574 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	440a      	add	r2, r1
 8006524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006528:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800652c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006530:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	440a      	add	r2, r1
 8006548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800654c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006550:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	0151      	lsls	r1, r2, #5
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	440a      	add	r2, r1
 8006568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656c:	0cdb      	lsrs	r3, r3, #19
 800656e:	04db      	lsls	r3, r3, #19
 8006570:	6113      	str	r3, [r2, #16]
 8006572:	e074      	b.n	800665e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	69fa      	ldr	r2, [r7, #28]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658e:	0cdb      	lsrs	r3, r3, #19
 8006590:	04db      	lsls	r3, r3, #19
 8006592:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	6959      	ldr	r1, [r3, #20]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	440b      	add	r3, r1
 80065d0:	1e59      	subs	r1, r3, #1
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80065da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80065dc:	4b9d      	ldr	r3, [pc, #628]	; (8006854 <USB_EPStartXfer+0x370>)
 80065de:	400b      	ands	r3, r1
 80065e0:	69b9      	ldr	r1, [r7, #24]
 80065e2:	0148      	lsls	r0, r1, #5
 80065e4:	69f9      	ldr	r1, [r7, #28]
 80065e6:	4401      	add	r1, r0
 80065e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065ec:	4313      	orrs	r3, r2
 80065ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fc:	691a      	ldr	r2, [r3, #16]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006606:	69b9      	ldr	r1, [r7, #24]
 8006608:	0148      	lsls	r0, r1, #5
 800660a:	69f9      	ldr	r1, [r7, #28]
 800660c:	4401      	add	r1, r0
 800660e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006612:	4313      	orrs	r3, r2
 8006614:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	78db      	ldrb	r3, [r3, #3]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d11f      	bne.n	800665e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	440a      	add	r2, r1
 8006634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006638:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800663c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	0151      	lsls	r1, r2, #5
 8006650:	69fa      	ldr	r2, [r7, #28]
 8006652:	440a      	add	r2, r1
 8006654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006658:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800665c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d14b      	bne.n	80066fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	461a      	mov	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	78db      	ldrb	r3, [r3, #3]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d128      	bne.n	80066da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006694:	2b00      	cmp	r3, #0
 8006696:	d110      	bne.n	80066ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	0151      	lsls	r1, r2, #5
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	440a      	add	r2, r1
 80066ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	e00f      	b.n	80066da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	0151      	lsls	r1, r2, #5
 80066cc:	69fa      	ldr	r2, [r7, #28]
 80066ce:	440a      	add	r2, r1
 80066d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	e12f      	b.n	800695c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	69fa      	ldr	r2, [r7, #28]
 8006710:	440a      	add	r2, r1
 8006712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006716:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800671a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	78db      	ldrb	r3, [r3, #3]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d015      	beq.n	8006750 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 8117 	beq.w	800695c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	2101      	movs	r1, #1
 8006740:	fa01 f303 	lsl.w	r3, r1, r3
 8006744:	69f9      	ldr	r1, [r7, #28]
 8006746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800674a:	4313      	orrs	r3, r2
 800674c:	634b      	str	r3, [r1, #52]	; 0x34
 800674e:	e105      	b.n	800695c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675c:	2b00      	cmp	r3, #0
 800675e:	d110      	bne.n	8006782 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	0151      	lsls	r1, r2, #5
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	440a      	add	r2, r1
 8006776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800677a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	e00f      	b.n	80067a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	0151      	lsls	r1, r2, #5
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	440a      	add	r2, r1
 8006798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	68d9      	ldr	r1, [r3, #12]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	781a      	ldrb	r2, [r3, #0]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	b298      	uxth	r0, r3
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	4603      	mov	r3, r0
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fa2b 	bl	8006c12 <USB_WritePacket>
 80067bc:	e0ce      	b.n	800695c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	0151      	lsls	r1, r2, #5
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	440a      	add	r2, r1
 80067d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d8:	0cdb      	lsrs	r3, r3, #19
 80067da:	04db      	lsls	r3, r3, #19
 80067dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006800:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d126      	bne.n	8006858 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006820:	69b9      	ldr	r1, [r7, #24]
 8006822:	0148      	lsls	r0, r1, #5
 8006824:	69f9      	ldr	r1, [r7, #28]
 8006826:	4401      	add	r1, r0
 8006828:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800682c:	4313      	orrs	r3, r2
 800682e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	440a      	add	r2, r1
 8006846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800684a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800684e:	6113      	str	r3, [r2, #16]
 8006850:	e036      	b.n	80068c0 <USB_EPStartXfer+0x3dc>
 8006852:	bf00      	nop
 8006854:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	695a      	ldr	r2, [r3, #20]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4413      	add	r3, r2
 8006862:	1e5a      	subs	r2, r3, #1
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	fbb2 f3f3 	udiv	r3, r2, r3
 800686c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	8afb      	ldrh	r3, [r7, #22]
 800687e:	04d9      	lsls	r1, r3, #19
 8006880:	4b39      	ldr	r3, [pc, #228]	; (8006968 <USB_EPStartXfer+0x484>)
 8006882:	400b      	ands	r3, r1
 8006884:	69b9      	ldr	r1, [r7, #24]
 8006886:	0148      	lsls	r0, r1, #5
 8006888:	69f9      	ldr	r1, [r7, #28]
 800688a:	4401      	add	r1, r0
 800688c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006890:	4313      	orrs	r3, r2
 8006892:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	8af9      	ldrh	r1, [r7, #22]
 80068a8:	fb01 f303 	mul.w	r3, r1, r3
 80068ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068b0:	69b9      	ldr	r1, [r7, #24]
 80068b2:	0148      	lsls	r0, r1, #5
 80068b4:	69f9      	ldr	r1, [r7, #28]
 80068b6:	4401      	add	r1, r0
 80068b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068bc:	4313      	orrs	r3, r2
 80068be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d10d      	bne.n	80068e2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	68d9      	ldr	r1, [r3, #12]
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068de:	460a      	mov	r2, r1
 80068e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	78db      	ldrb	r3, [r3, #3]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d128      	bne.n	800693c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d110      	bne.n	800691c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	0151      	lsls	r1, r2, #5
 800690c:	69fa      	ldr	r2, [r7, #28]
 800690e:	440a      	add	r2, r1
 8006910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006914:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	e00f      	b.n	800693c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	440a      	add	r2, r1
 8006932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	440a      	add	r2, r1
 8006952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006956:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800695a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3720      	adds	r7, #32
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	1ff80000 	.word	0x1ff80000

0800696c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	785b      	ldrb	r3, [r3, #1]
 8006988:	2b01      	cmp	r3, #1
 800698a:	f040 80cd 	bne.w	8006b28 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d132      	bne.n	80069fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f4:	0cdb      	lsrs	r3, r3, #19
 80069f6:	04db      	lsls	r3, r3, #19
 80069f8:	6113      	str	r3, [r2, #16]
 80069fa:	e04e      	b.n	8006a9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	0151      	lsls	r1, r2, #5
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	440a      	add	r2, r1
 8006a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a16:	0cdb      	lsrs	r3, r3, #19
 8006a18:	04db      	lsls	r3, r3, #19
 8006a1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	0151      	lsls	r1, r2, #5
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	440a      	add	r2, r1
 8006a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a3e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	695a      	ldr	r2, [r3, #20]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d903      	bls.n	8006a54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	0151      	lsls	r1, r2, #5
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	440a      	add	r2, r1
 8006a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a8a:	6939      	ldr	r1, [r7, #16]
 8006a8c:	0148      	lsls	r0, r1, #5
 8006a8e:	6979      	ldr	r1, [r7, #20]
 8006a90:	4401      	add	r1, r0
 8006a92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a96:	4313      	orrs	r3, r2
 8006a98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d11e      	bne.n	8006ade <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d009      	beq.n	8006abc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	e092      	b.n	8006c04 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	0151      	lsls	r1, r2, #5
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	440a      	add	r2, r1
 8006af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006afc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d07e      	beq.n	8006c04 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	2101      	movs	r1, #1
 8006b18:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1c:	6979      	ldr	r1, [r7, #20]
 8006b1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b22:	4313      	orrs	r3, r2
 8006b24:	634b      	str	r3, [r1, #52]	; 0x34
 8006b26:	e06d      	b.n	8006c04 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	0151      	lsls	r1, r2, #5
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	440a      	add	r2, r1
 8006b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b42:	0cdb      	lsrs	r3, r3, #19
 8006b44:	04db      	lsls	r3, r3, #19
 8006b46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	0151      	lsls	r1, r2, #5
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	440a      	add	r2, r1
 8006b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b6a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	0151      	lsls	r1, r2, #5
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	440a      	add	r2, r1
 8006b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bb2:	6939      	ldr	r1, [r7, #16]
 8006bb4:	0148      	lsls	r0, r1, #5
 8006bb6:	6979      	ldr	r1, [r7, #20]
 8006bb8:	4401      	add	r1, r0
 8006bba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d10d      	bne.n	8006be4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d009      	beq.n	8006be4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	68d9      	ldr	r1, [r3, #12]
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be0:	460a      	mov	r2, r1
 8006be2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b089      	sub	sp, #36	; 0x24
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	461a      	mov	r2, r3
 8006c20:	460b      	mov	r3, r1
 8006c22:	71fb      	strb	r3, [r7, #7]
 8006c24:	4613      	mov	r3, r2
 8006c26:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d123      	bne.n	8006c80 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c38:	88bb      	ldrh	r3, [r7, #4]
 8006c3a:	3303      	adds	r3, #3
 8006c3c:	089b      	lsrs	r3, r3, #2
 8006c3e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c40:	2300      	movs	r3, #0
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	e018      	b.n	8006c78 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	031a      	lsls	r2, r3, #12
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c52:	461a      	mov	r2, r3
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	3301      	adds	r3, #1
 8006c64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	3301      	adds	r3, #1
 8006c76:	61bb      	str	r3, [r7, #24]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d3e2      	bcc.n	8006c46 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3724      	adds	r7, #36	; 0x24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b08b      	sub	sp, #44	; 0x2c
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	089b      	lsrs	r3, r3, #2
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	623b      	str	r3, [r7, #32]
 8006cb8:	e014      	b.n	8006ce4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	601a      	str	r2, [r3, #0]
    pDest++;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	3301      	adds	r3, #1
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	3301      	adds	r3, #1
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	3301      	adds	r3, #1
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	623b      	str	r3, [r7, #32]
 8006ce4:	6a3a      	ldr	r2, [r7, #32]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d3e6      	bcc.n	8006cba <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006cec:	8bfb      	ldrh	r3, [r7, #30]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d01e      	beq.n	8006d30 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f107 0310 	add.w	r3, r7, #16
 8006d02:	6812      	ldr	r2, [r2, #0]
 8006d04:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	701a      	strb	r2, [r3, #0]
      i++;
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	3301      	adds	r3, #1
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006d24:	8bfb      	ldrh	r3, [r7, #30]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d2a:	8bfb      	ldrh	r3, [r7, #30]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1ea      	bne.n	8006d06 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	372c      	adds	r7, #44	; 0x2c
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d12c      	bne.n	8006db4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	db12      	blt.n	8006d92 <USB_EPSetStall+0x54>
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00f      	beq.n	8006d92 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	0151      	lsls	r1, r2, #5
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	440a      	add	r2, r1
 8006d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d90:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	e02b      	b.n	8006e0c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	db12      	blt.n	8006dec <USB_EPSetStall+0xae>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00f      	beq.n	8006dec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006de6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d128      	bne.n	8006e88 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	0151      	lsls	r1, r2, #5
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	440a      	add	r2, r1
 8006e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	78db      	ldrb	r3, [r3, #3]
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d003      	beq.n	8006e66 <USB_EPClearStall+0x4c>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	78db      	ldrb	r3, [r3, #3]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d138      	bne.n	8006ed8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	e027      	b.n	8006ed8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	0151      	lsls	r1, r2, #5
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	440a      	add	r2, r1
 8006e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ea6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	78db      	ldrb	r3, [r3, #3]
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d003      	beq.n	8006eb8 <USB_EPClearStall+0x9e>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	78db      	ldrb	r3, [r3, #3]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d10f      	bne.n	8006ed8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b085      	sub	sp, #20
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f04:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f08:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	78fb      	ldrb	r3, [r7, #3]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006f1a:	68f9      	ldr	r1, [r7, #12]
 8006f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f20:	4313      	orrs	r3, r2
 8006f22:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f4c:	f023 0303 	bic.w	r3, r3, #3
 8006f50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f60:	f023 0302 	bic.w	r3, r3, #2
 8006f64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f8e:	f023 0303 	bic.w	r3, r3, #3
 8006f92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fa2:	f043 0302 	orr.w	r3, r3, #2
 8006fa6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006fce:	68fb      	ldr	r3, [r7, #12]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	0c1b      	lsrs	r3, r3, #16
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	4013      	ands	r3, r2
 8007032:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	b29b      	uxth	r3, r3
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	4013      	ands	r3, r2
 8007070:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007072:	68bb      	ldr	r3, [r7, #8]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80070a4:	78fb      	ldrb	r3, [r7, #3]
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	fa22 f303 	lsr.w	r3, r2, r3
 80070b0:	01db      	lsls	r3, r3, #7
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4013      	ands	r3, r2
 80070cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070ce:	68bb      	ldr	r3, [r7, #8]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	371c      	adds	r7, #28
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	f003 0301 	and.w	r3, r3, #1
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007112:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007116:	f023 0307 	bic.w	r3, r3, #7
 800711a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800712a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800712e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
	...

08007140 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	460b      	mov	r3, r1
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	333c      	adds	r3, #60	; 0x3c
 8007156:	3304      	adds	r3, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	4a26      	ldr	r2, [pc, #152]	; (80071f8 <USB_EP0_OutStart+0xb8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d90a      	bls.n	800717a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007170:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007174:	d101      	bne.n	800717a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	e037      	b.n	80071ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007180:	461a      	mov	r2, r3
 8007182:	2300      	movs	r3, #0
 8007184:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007198:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a8:	f043 0318 	orr.w	r3, r3, #24
 80071ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80071c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80071c2:	7afb      	ldrb	r3, [r7, #11]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d10f      	bne.n	80071e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ce:	461a      	mov	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80071e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	4f54300a 	.word	0x4f54300a

080071fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	4a13      	ldr	r2, [pc, #76]	; (800725c <USB_CoreReset+0x60>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d901      	bls.n	8007218 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e01a      	b.n	800724e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	daf3      	bge.n	8007208 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f043 0201 	orr.w	r2, r3, #1
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3301      	adds	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	4a09      	ldr	r2, [pc, #36]	; (800725c <USB_CoreReset+0x60>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d901      	bls.n	8007240 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e006      	b.n	800724e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b01      	cmp	r3, #1
 800724a:	d0f1      	beq.n	8007230 <USB_CoreReset+0x34>

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	00030d40 	.word	0x00030d40

08007260 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800726c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007270:	f005 fd98 	bl	800cda4 <USBD_static_malloc>
 8007274:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d105      	bne.n	8007288 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007284:	2302      	movs	r3, #2
 8007286:	e066      	b.n	8007356 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	7c1b      	ldrb	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d119      	bne.n	80072cc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800729c:	2202      	movs	r2, #2
 800729e:	2181      	movs	r1, #129	; 0x81
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f005 fc5c 	bl	800cb5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072b0:	2202      	movs	r2, #2
 80072b2:	2101      	movs	r1, #1
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f005 fc52 	bl	800cb5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2210      	movs	r2, #16
 80072c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80072ca:	e016      	b.n	80072fa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072cc:	2340      	movs	r3, #64	; 0x40
 80072ce:	2202      	movs	r2, #2
 80072d0:	2181      	movs	r1, #129	; 0x81
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f005 fc43 	bl	800cb5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072de:	2340      	movs	r3, #64	; 0x40
 80072e0:	2202      	movs	r2, #2
 80072e2:	2101      	movs	r1, #1
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f005 fc3a 	bl	800cb5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2210      	movs	r2, #16
 80072f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80072fa:	2308      	movs	r3, #8
 80072fc:	2203      	movs	r2, #3
 80072fe:	2182      	movs	r1, #130	; 0x82
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f005 fc2c 	bl	800cb5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	7c1b      	ldrb	r3, [r3, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d109      	bne.n	8007344 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800733a:	2101      	movs	r1, #1
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f005 fcfd 	bl	800cd3c <USBD_LL_PrepareReceive>
 8007342:	e007      	b.n	8007354 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800734a:	2340      	movs	r3, #64	; 0x40
 800734c:	2101      	movs	r1, #1
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f005 fcf4 	bl	800cd3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800736a:	2181      	movs	r1, #129	; 0x81
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f005 fc1c 	bl	800cbaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007378:	2101      	movs	r1, #1
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f005 fc15 	bl	800cbaa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007388:	2182      	movs	r1, #130	; 0x82
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f005 fc0d 	bl	800cbaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00e      	beq.n	80073c8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ba:	4618      	mov	r0, r3
 80073bc:	f005 fd00 	bl	800cdc0 <USBD_static_free>
    pdev->pClassData = NULL;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e0af      	b.n	800755c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007404:	2b00      	cmp	r3, #0
 8007406:	d03f      	beq.n	8007488 <USBD_CDC_Setup+0xb4>
 8007408:	2b20      	cmp	r3, #32
 800740a:	f040 809f 	bne.w	800754c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	88db      	ldrh	r3, [r3, #6]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02e      	beq.n	8007474 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	b25b      	sxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	da16      	bge.n	800744e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800742c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	88d2      	ldrh	r2, [r2, #6]
 8007432:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	88db      	ldrh	r3, [r3, #6]
 8007438:	2b07      	cmp	r3, #7
 800743a:	bf28      	it	cs
 800743c:	2307      	movcs	r3, #7
 800743e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	89fa      	ldrh	r2, [r7, #14]
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 fb19 	bl	8008a7e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800744c:	e085      	b.n	800755a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	785a      	ldrb	r2, [r3, #1]
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	88db      	ldrh	r3, [r3, #6]
 800745c:	b2da      	uxtb	r2, r3
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007464:	6939      	ldr	r1, [r7, #16]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	88db      	ldrh	r3, [r3, #6]
 800746a:	461a      	mov	r2, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 fb32 	bl	8008ad6 <USBD_CtlPrepareRx>
      break;
 8007472:	e072      	b.n	800755a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	7850      	ldrb	r0, [r2, #1]
 8007480:	2200      	movs	r2, #0
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	4798      	blx	r3
      break;
 8007486:	e068      	b.n	800755a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	785b      	ldrb	r3, [r3, #1]
 800748c:	2b0b      	cmp	r3, #11
 800748e:	d852      	bhi.n	8007536 <USBD_CDC_Setup+0x162>
 8007490:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <USBD_CDC_Setup+0xc4>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074c9 	.word	0x080074c9
 800749c:	08007545 	.word	0x08007545
 80074a0:	08007537 	.word	0x08007537
 80074a4:	08007537 	.word	0x08007537
 80074a8:	08007537 	.word	0x08007537
 80074ac:	08007537 	.word	0x08007537
 80074b0:	08007537 	.word	0x08007537
 80074b4:	08007537 	.word	0x08007537
 80074b8:	08007537 	.word	0x08007537
 80074bc:	08007537 	.word	0x08007537
 80074c0:	080074f3 	.word	0x080074f3
 80074c4:	0800751d 	.word	0x0800751d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d107      	bne.n	80074e4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80074d4:	f107 030a 	add.w	r3, r7, #10
 80074d8:	2202      	movs	r2, #2
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 face 	bl	8008a7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074e2:	e032      	b.n	800754a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 fa58 	bl	800899c <USBD_CtlError>
            ret = USBD_FAIL;
 80074ec:	2303      	movs	r3, #3
 80074ee:	75fb      	strb	r3, [r7, #23]
          break;
 80074f0:	e02b      	b.n	800754a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d107      	bne.n	800750e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80074fe:	f107 030d 	add.w	r3, r7, #13
 8007502:	2201      	movs	r2, #1
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 fab9 	bl	8008a7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800750c:	e01d      	b.n	800754a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f001 fa43 	bl	800899c <USBD_CtlError>
            ret = USBD_FAIL;
 8007516:	2303      	movs	r3, #3
 8007518:	75fb      	strb	r3, [r7, #23]
          break;
 800751a:	e016      	b.n	800754a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b03      	cmp	r3, #3
 8007526:	d00f      	beq.n	8007548 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f001 fa36 	bl	800899c <USBD_CtlError>
            ret = USBD_FAIL;
 8007530:	2303      	movs	r3, #3
 8007532:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007534:	e008      	b.n	8007548 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 fa2f 	bl	800899c <USBD_CtlError>
          ret = USBD_FAIL;
 800753e:	2303      	movs	r3, #3
 8007540:	75fb      	strb	r3, [r7, #23]
          break;
 8007542:	e002      	b.n	800754a <USBD_CDC_Setup+0x176>
          break;
 8007544:	bf00      	nop
 8007546:	e008      	b.n	800755a <USBD_CDC_Setup+0x186>
          break;
 8007548:	bf00      	nop
      }
      break;
 800754a:	e006      	b.n	800755a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 fa24 	bl	800899c <USBD_CtlError>
      ret = USBD_FAIL;
 8007554:	2303      	movs	r3, #3
 8007556:	75fb      	strb	r3, [r7, #23]
      break;
 8007558:	bf00      	nop
  }

  return (uint8_t)ret;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007576:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007582:	2303      	movs	r3, #3
 8007584:	e04f      	b.n	8007626 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800758c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	3318      	adds	r3, #24
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d029      	beq.n	80075f8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	3318      	adds	r3, #24
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	78f9      	ldrb	r1, [r7, #3]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	460b      	mov	r3, r1
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	1a5b      	subs	r3, r3, r1
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4403      	add	r3, r0
 80075c4:	3344      	adds	r3, #68	; 0x44
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80075cc:	fb03 f301 	mul.w	r3, r3, r1
 80075d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d110      	bne.n	80075f8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	440b      	add	r3, r1
 80075e4:	3318      	adds	r3, #24
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80075ea:	78f9      	ldrb	r1, [r7, #3]
 80075ec:	2300      	movs	r3, #0
 80075ee:	2200      	movs	r2, #0
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f005 fb82 	bl	800ccfa <USBD_LL_Transmit>
 80075f6:	e015      	b.n	8007624 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007620:	78fa      	ldrb	r2, [r7, #3]
 8007622:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	460b      	mov	r3, r1
 8007638:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007640:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800764c:	2303      	movs	r3, #3
 800764e:	e015      	b.n	800767c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f005 fb92 	bl	800cd7e <USBD_LL_GetRxDataSize>
 800765a:	4602      	mov	r2, r0
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007676:	4611      	mov	r1, r2
 8007678:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007692:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800769a:	2303      	movs	r3, #3
 800769c:	e01b      	b.n	80076d6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d015      	beq.n	80076d4 <USBD_CDC_EP0_RxReady+0x50>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076ae:	2bff      	cmp	r3, #255	; 0xff
 80076b0:	d010      	beq.n	80076d4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80076c0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076c8:	b292      	uxth	r2, r2
 80076ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	22ff      	movs	r2, #255	; 0xff
 80076d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2243      	movs	r2, #67	; 0x43
 80076ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80076ee:	4b03      	ldr	r3, [pc, #12]	; (80076fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	20000094 	.word	0x20000094

08007700 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2243      	movs	r2, #67	; 0x43
 800770c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800770e:	4b03      	ldr	r3, [pc, #12]	; (800771c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	20000050 	.word	0x20000050

08007720 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2243      	movs	r2, #67	; 0x43
 800772c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800772e:	4b03      	ldr	r3, [pc, #12]	; (800773c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	200000d8 	.word	0x200000d8

08007740 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	220a      	movs	r2, #10
 800774c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800774e:	4b03      	ldr	r3, [pc, #12]	; (800775c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	2000000c 	.word	0x2000000c

08007760 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007770:	2303      	movs	r3, #3
 8007772:	e004      	b.n	800777e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800778a:	b480      	push	{r7}
 800778c:	b087      	sub	sp, #28
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800779c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e008      	b.n	80077ba <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	371c      	adds	r7, #28
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80077de:	2303      	movs	r3, #3
 80077e0:	e004      	b.n	80077ec <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007806:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007816:	2303      	movs	r3, #3
 8007818:	e01a      	b.n	8007850 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007820:	2b00      	cmp	r3, #0
 8007822:	d114      	bne.n	800784e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2201      	movs	r2, #1
 8007828:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007842:	2181      	movs	r1, #129	; 0x81
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f005 fa58 	bl	800ccfa <USBD_LL_Transmit>

    ret = USBD_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007866:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007872:	2303      	movs	r3, #3
 8007874:	e016      	b.n	80078a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	7c1b      	ldrb	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d109      	bne.n	8007892 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007888:	2101      	movs	r1, #1
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f005 fa56 	bl	800cd3c <USBD_LL_PrepareReceive>
 8007890:	e007      	b.n	80078a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007898:	2340      	movs	r3, #64	; 0x40
 800789a:	2101      	movs	r1, #1
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f005 fa4d 	bl	800cd3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e01f      	b.n	8007904 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	79fa      	ldrb	r2, [r7, #7]
 80078f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f005 f8c9 	bl	800ca90 <USBD_LL_Init>
 80078fe:	4603      	mov	r3, r0
 8007900:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007920:	2303      	movs	r3, #3
 8007922:	e016      	b.n	8007952 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00b      	beq.n	8007950 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800793e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007940:	f107 020e 	add.w	r2, r7, #14
 8007944:	4610      	mov	r0, r2
 8007946:	4798      	blx	r3
 8007948:	4602      	mov	r2, r0
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b082      	sub	sp, #8
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f005 f8e0 	bl	800cb28 <USBD_LL_Start>
 8007968:	4603      	mov	r3, r0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007994:	2303      	movs	r3, #3
 8007996:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d009      	beq.n	80079b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	78fa      	ldrb	r2, [r7, #3]
 80079ac:	4611      	mov	r1, r2
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	4798      	blx	r3
 80079b2:	4603      	mov	r3, r0
 80079b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d007      	beq.n	80079e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	4611      	mov	r1, r2
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	4798      	blx	r3
  }

  return USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 ff90 	bl	8008928 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a16:	461a      	mov	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a24:	f003 031f 	and.w	r3, r3, #31
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d01a      	beq.n	8007a62 <USBD_LL_SetupStage+0x72>
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d822      	bhi.n	8007a76 <USBD_LL_SetupStage+0x86>
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <USBD_LL_SetupStage+0x4a>
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d00a      	beq.n	8007a4e <USBD_LL_SetupStage+0x5e>
 8007a38:	e01d      	b.n	8007a76 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa62 	bl	8007f0c <USBD_StdDevReq>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a4c:	e020      	b.n	8007a90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fac6 	bl	8007fe8 <USBD_StdItfReq>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a60:	e016      	b.n	8007a90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fb05 	bl	800807a <USBD_StdEPReq>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]
      break;
 8007a74:	e00c      	b.n	8007a90 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f005 f8af 	bl	800cbe8 <USBD_LL_StallEP>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a8e:	bf00      	nop
  }

  return ret;
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d138      	bne.n	8007b20 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ab4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d14a      	bne.n	8007b56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d913      	bls.n	8007af4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	1ad2      	subs	r2, r2, r3
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	bf28      	it	cs
 8007ae6:	4613      	movcs	r3, r2
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f001 f80f 	bl	8008b10 <USBD_CtlContinueRx>
 8007af2:	e030      	b.n	8007b56 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d10b      	bne.n	8007b18 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f001 f80a 	bl	8008b32 <USBD_CtlSendStatus>
 8007b1e:	e01a      	b.n	8007b56 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d114      	bne.n	8007b56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00e      	beq.n	8007b56 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	7afa      	ldrb	r2, [r7, #11]
 8007b42:	4611      	mov	r1, r2
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	4798      	blx	r3
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	e000      	b.n	8007b58 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b6e:	7afb      	ldrb	r3, [r7, #11]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d16b      	bne.n	8007c4c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	3314      	adds	r3, #20
 8007b78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d156      	bne.n	8007c32 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d914      	bls.n	8007bba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	1ad2      	subs	r2, r2, r3
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 ff84 	bl	8008ab4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bac:	2300      	movs	r3, #0
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f005 f8c2 	bl	800cd3c <USBD_LL_PrepareReceive>
 8007bb8:	e03b      	b.n	8007c32 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d11c      	bne.n	8007c00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	685a      	ldr	r2, [r3, #4]
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d316      	bcc.n	8007c00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d20f      	bcs.n	8007c00 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007be0:	2200      	movs	r2, #0
 8007be2:	2100      	movs	r1, #0
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 ff65 	bl	8008ab4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f005 f89f 	bl	800cd3c <USBD_LL_PrepareReceive>
 8007bfe:	e018      	b.n	8007c32 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d10b      	bne.n	8007c24 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d005      	beq.n	8007c24 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c24:	2180      	movs	r1, #128	; 0x80
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f004 ffde 	bl	800cbe8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 ff93 	bl	8008b58 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d122      	bne.n	8007c82 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff fe98 	bl	8007972 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c4a:	e01a      	b.n	8007c82 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d114      	bne.n	8007c82 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00e      	beq.n	8007c82 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	7afa      	ldrb	r2, [r7, #11]
 8007c6e:	4611      	mov	r1, r2
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	4798      	blx	r3
 8007c74:	4603      	mov	r3, r0
 8007c76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	e000      	b.n	8007c84 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e02f      	b.n	8007d20 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00f      	beq.n	8007cea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d009      	beq.n	8007cea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	6852      	ldr	r2, [r2, #4]
 8007ce2:	b2d2      	uxtb	r2, r2
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cea:	2340      	movs	r3, #64	; 0x40
 8007cec:	2200      	movs	r2, #0
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f004 ff34 	bl	800cb5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2240      	movs	r2, #64	; 0x40
 8007d02:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d06:	2340      	movs	r3, #64	; 0x40
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2180      	movs	r1, #128	; 0x80
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f004 ff26 	bl	800cb5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2240      	movs	r2, #64	; 0x40
 8007d1c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	78fa      	ldrb	r2, [r7, #3]
 8007d38:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2204      	movs	r2, #4
 8007d62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	d106      	bne.n	8007d96 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e012      	b.n	8007de0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d10b      	bne.n	8007dde <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d005      	beq.n	8007dde <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e014      	b.n	8007e2c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d10d      	bne.n	8007e2a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d007      	beq.n	8007e2a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	78fa      	ldrb	r2, [r7, #3]
 8007e24:	4611      	mov	r1, r2
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e014      	b.n	8007e78 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d10d      	bne.n	8007e76 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d007      	beq.n	8007e76 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	4611      	mov	r1, r2
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b082      	sub	sp, #8
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d009      	beq.n	8007ec4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6852      	ldr	r2, [r2, #4]
 8007ebc:	b2d2      	uxtb	r2, r2
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	4798      	blx	r3
  }

  return USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b087      	sub	sp, #28
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007eec:	8a3b      	ldrh	r3, [r7, #16]
 8007eee:	021b      	lsls	r3, r3, #8
 8007ef0:	b21a      	sxth	r2, r3
 8007ef2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	b21b      	sxth	r3, r3
 8007efa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007efc:	89fb      	ldrh	r3, [r7, #14]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
	...

08007f0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f22:	2b40      	cmp	r3, #64	; 0x40
 8007f24:	d005      	beq.n	8007f32 <USBD_StdDevReq+0x26>
 8007f26:	2b40      	cmp	r3, #64	; 0x40
 8007f28:	d853      	bhi.n	8007fd2 <USBD_StdDevReq+0xc6>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00b      	beq.n	8007f46 <USBD_StdDevReq+0x3a>
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	d14f      	bne.n	8007fd2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	4798      	blx	r3
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
      break;
 8007f44:	e04a      	b.n	8007fdc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	785b      	ldrb	r3, [r3, #1]
 8007f4a:	2b09      	cmp	r3, #9
 8007f4c:	d83b      	bhi.n	8007fc6 <USBD_StdDevReq+0xba>
 8007f4e:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <USBD_StdDevReq+0x48>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007fa9 	.word	0x08007fa9
 8007f58:	08007fbd 	.word	0x08007fbd
 8007f5c:	08007fc7 	.word	0x08007fc7
 8007f60:	08007fb3 	.word	0x08007fb3
 8007f64:	08007fc7 	.word	0x08007fc7
 8007f68:	08007f87 	.word	0x08007f87
 8007f6c:	08007f7d 	.word	0x08007f7d
 8007f70:	08007fc7 	.word	0x08007fc7
 8007f74:	08007f9f 	.word	0x08007f9f
 8007f78:	08007f91 	.word	0x08007f91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f9de 	bl	8008340 <USBD_GetDescriptor>
          break;
 8007f84:	e024      	b.n	8007fd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fb43 	bl	8008614 <USBD_SetAddress>
          break;
 8007f8e:	e01f      	b.n	8007fd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fb82 	bl	800869c <USBD_SetConfig>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]
          break;
 8007f9c:	e018      	b.n	8007fd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fc21 	bl	80087e8 <USBD_GetConfig>
          break;
 8007fa6:	e013      	b.n	8007fd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fc52 	bl	8008854 <USBD_GetStatus>
          break;
 8007fb0:	e00e      	b.n	8007fd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fc81 	bl	80088bc <USBD_SetFeature>
          break;
 8007fba:	e009      	b.n	8007fd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc90 	bl	80088e4 <USBD_ClrFeature>
          break;
 8007fc4:	e004      	b.n	8007fd0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fce7 	bl	800899c <USBD_CtlError>
          break;
 8007fce:	bf00      	nop
      }
      break;
 8007fd0:	e004      	b.n	8007fdc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fce1 	bl	800899c <USBD_CtlError>
      break;
 8007fda:	bf00      	nop
  }

  return ret;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop

08007fe8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ffe:	2b40      	cmp	r3, #64	; 0x40
 8008000:	d005      	beq.n	800800e <USBD_StdItfReq+0x26>
 8008002:	2b40      	cmp	r3, #64	; 0x40
 8008004:	d82f      	bhi.n	8008066 <USBD_StdItfReq+0x7e>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <USBD_StdItfReq+0x26>
 800800a:	2b20      	cmp	r3, #32
 800800c:	d12b      	bne.n	8008066 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008014:	b2db      	uxtb	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	2b02      	cmp	r3, #2
 800801a:	d81d      	bhi.n	8008058 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	889b      	ldrh	r3, [r3, #4]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b01      	cmp	r3, #1
 8008024:	d813      	bhi.n	800804e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	4798      	blx	r3
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	88db      	ldrh	r3, [r3, #6]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d110      	bne.n	8008062 <USBD_StdItfReq+0x7a>
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10d      	bne.n	8008062 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fd73 	bl	8008b32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800804c:	e009      	b.n	8008062 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fca3 	bl	800899c <USBD_CtlError>
          break;
 8008056:	e004      	b.n	8008062 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fc9e 	bl	800899c <USBD_CtlError>
          break;
 8008060:	e000      	b.n	8008064 <USBD_StdItfReq+0x7c>
          break;
 8008062:	bf00      	nop
      }
      break;
 8008064:	e004      	b.n	8008070 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fc97 	bl	800899c <USBD_CtlError>
      break;
 800806e:	bf00      	nop
  }

  return ret;
 8008070:	7bfb      	ldrb	r3, [r7, #15]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	889b      	ldrh	r3, [r3, #4]
 800808c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008096:	2b40      	cmp	r3, #64	; 0x40
 8008098:	d007      	beq.n	80080aa <USBD_StdEPReq+0x30>
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	f200 8145 	bhi.w	800832a <USBD_StdEPReq+0x2b0>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00c      	beq.n	80080be <USBD_StdEPReq+0x44>
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	f040 8140 	bne.w	800832a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	4798      	blx	r3
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]
      break;
 80080bc:	e13a      	b.n	8008334 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	785b      	ldrb	r3, [r3, #1]
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d007      	beq.n	80080d6 <USBD_StdEPReq+0x5c>
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	f300 8129 	bgt.w	800831e <USBD_StdEPReq+0x2a4>
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d07f      	beq.n	80081d0 <USBD_StdEPReq+0x156>
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d03c      	beq.n	800814e <USBD_StdEPReq+0xd4>
 80080d4:	e123      	b.n	800831e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d002      	beq.n	80080e8 <USBD_StdEPReq+0x6e>
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d016      	beq.n	8008114 <USBD_StdEPReq+0x9a>
 80080e6:	e02c      	b.n	8008142 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00d      	beq.n	800810a <USBD_StdEPReq+0x90>
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	2b80      	cmp	r3, #128	; 0x80
 80080f2:	d00a      	beq.n	800810a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f004 fd75 	bl	800cbe8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080fe:	2180      	movs	r1, #128	; 0x80
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f004 fd71 	bl	800cbe8 <USBD_LL_StallEP>
 8008106:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008108:	e020      	b.n	800814c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fc45 	bl	800899c <USBD_CtlError>
              break;
 8008112:	e01b      	b.n	800814c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	885b      	ldrh	r3, [r3, #2]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10e      	bne.n	800813a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00b      	beq.n	800813a <USBD_StdEPReq+0xc0>
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b80      	cmp	r3, #128	; 0x80
 8008126:	d008      	beq.n	800813a <USBD_StdEPReq+0xc0>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	88db      	ldrh	r3, [r3, #6]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d104      	bne.n	800813a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f004 fd57 	bl	800cbe8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fcf9 	bl	8008b32 <USBD_CtlSendStatus>

              break;
 8008140:	e004      	b.n	800814c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fc29 	bl	800899c <USBD_CtlError>
              break;
 800814a:	bf00      	nop
          }
          break;
 800814c:	e0ec      	b.n	8008328 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b02      	cmp	r3, #2
 8008158:	d002      	beq.n	8008160 <USBD_StdEPReq+0xe6>
 800815a:	2b03      	cmp	r3, #3
 800815c:	d016      	beq.n	800818c <USBD_StdEPReq+0x112>
 800815e:	e030      	b.n	80081c2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00d      	beq.n	8008182 <USBD_StdEPReq+0x108>
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	2b80      	cmp	r3, #128	; 0x80
 800816a:	d00a      	beq.n	8008182 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f004 fd39 	bl	800cbe8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008176:	2180      	movs	r1, #128	; 0x80
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f004 fd35 	bl	800cbe8 <USBD_LL_StallEP>
 800817e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008180:	e025      	b.n	80081ce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fc09 	bl	800899c <USBD_CtlError>
              break;
 800818a:	e020      	b.n	80081ce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	885b      	ldrh	r3, [r3, #2]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d11b      	bne.n	80081cc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800819a:	2b00      	cmp	r3, #0
 800819c:	d004      	beq.n	80081a8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f004 fd3f 	bl	800cc26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fcc2 	bl	8008b32 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	4798      	blx	r3
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80081c0:	e004      	b.n	80081cc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fbe9 	bl	800899c <USBD_CtlError>
              break;
 80081ca:	e000      	b.n	80081ce <USBD_StdEPReq+0x154>
              break;
 80081cc:	bf00      	nop
          }
          break;
 80081ce:	e0ab      	b.n	8008328 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d002      	beq.n	80081e2 <USBD_StdEPReq+0x168>
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d032      	beq.n	8008246 <USBD_StdEPReq+0x1cc>
 80081e0:	e097      	b.n	8008312 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d007      	beq.n	80081f8 <USBD_StdEPReq+0x17e>
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	2b80      	cmp	r3, #128	; 0x80
 80081ec:	d004      	beq.n	80081f8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fbd3 	bl	800899c <USBD_CtlError>
                break;
 80081f6:	e091      	b.n	800831c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	da0b      	bge.n	8008218 <USBD_StdEPReq+0x19e>
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	3310      	adds	r3, #16
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	4413      	add	r3, r2
 8008214:	3304      	adds	r3, #4
 8008216:	e00b      	b.n	8008230 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800821e:	4613      	mov	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	4413      	add	r3, r2
 800822e:	3304      	adds	r3, #4
 8008230:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2202      	movs	r2, #2
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fc1d 	bl	8008a7e <USBD_CtlSendData>
              break;
 8008244:	e06a      	b.n	800831c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008246:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800824a:	2b00      	cmp	r3, #0
 800824c:	da11      	bge.n	8008272 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	f003 020f 	and.w	r2, r3, #15
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	440b      	add	r3, r1
 8008260:	3324      	adds	r3, #36	; 0x24
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d117      	bne.n	8008298 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fb96 	bl	800899c <USBD_CtlError>
                  break;
 8008270:	e054      	b.n	800831c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	f003 020f 	and.w	r2, r3, #15
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	440b      	add	r3, r1
 8008284:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d104      	bne.n	8008298 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fb83 	bl	800899c <USBD_CtlError>
                  break;
 8008296:	e041      	b.n	800831c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800829c:	2b00      	cmp	r3, #0
 800829e:	da0b      	bge.n	80082b8 <USBD_StdEPReq+0x23e>
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	3310      	adds	r3, #16
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	4413      	add	r3, r2
 80082b4:	3304      	adds	r3, #4
 80082b6:	e00b      	b.n	80082d0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	3304      	adds	r3, #4
 80082d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <USBD_StdEPReq+0x264>
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	2b80      	cmp	r3, #128	; 0x80
 80082dc:	d103      	bne.n	80082e6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e00e      	b.n	8008304 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f004 fcba 	bl	800cc64 <USBD_LL_IsStallEP>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2201      	movs	r2, #1
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	e002      	b.n	8008304 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2202      	movs	r2, #2
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fbb7 	bl	8008a7e <USBD_CtlSendData>
              break;
 8008310:	e004      	b.n	800831c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fb41 	bl	800899c <USBD_CtlError>
              break;
 800831a:	bf00      	nop
          }
          break;
 800831c:	e004      	b.n	8008328 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fb3b 	bl	800899c <USBD_CtlError>
          break;
 8008326:	bf00      	nop
      }
      break;
 8008328:	e004      	b.n	8008334 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fb35 	bl	800899c <USBD_CtlError>
      break;
 8008332:	bf00      	nop
  }

  return ret;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800834e:	2300      	movs	r3, #0
 8008350:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	885b      	ldrh	r3, [r3, #2]
 800835a:	0a1b      	lsrs	r3, r3, #8
 800835c:	b29b      	uxth	r3, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	2b06      	cmp	r3, #6
 8008362:	f200 8128 	bhi.w	80085b6 <USBD_GetDescriptor+0x276>
 8008366:	a201      	add	r2, pc, #4	; (adr r2, 800836c <USBD_GetDescriptor+0x2c>)
 8008368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836c:	08008389 	.word	0x08008389
 8008370:	080083a1 	.word	0x080083a1
 8008374:	080083e1 	.word	0x080083e1
 8008378:	080085b7 	.word	0x080085b7
 800837c:	080085b7 	.word	0x080085b7
 8008380:	08008557 	.word	0x08008557
 8008384:	08008583 	.word	0x08008583
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	7c12      	ldrb	r2, [r2, #16]
 8008394:	f107 0108 	add.w	r1, r7, #8
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3
 800839c:	60f8      	str	r0, [r7, #12]
      break;
 800839e:	e112      	b.n	80085c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	7c1b      	ldrb	r3, [r3, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10d      	bne.n	80083c4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b0:	f107 0208 	add.w	r2, r7, #8
 80083b4:	4610      	mov	r0, r2
 80083b6:	4798      	blx	r3
 80083b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3301      	adds	r3, #1
 80083be:	2202      	movs	r2, #2
 80083c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083c2:	e100      	b.n	80085c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	f107 0208 	add.w	r2, r7, #8
 80083d0:	4610      	mov	r0, r2
 80083d2:	4798      	blx	r3
 80083d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3301      	adds	r3, #1
 80083da:	2202      	movs	r2, #2
 80083dc:	701a      	strb	r2, [r3, #0]
      break;
 80083de:	e0f2      	b.n	80085c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	885b      	ldrh	r3, [r3, #2]
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	2b05      	cmp	r3, #5
 80083e8:	f200 80ac 	bhi.w	8008544 <USBD_GetDescriptor+0x204>
 80083ec:	a201      	add	r2, pc, #4	; (adr r2, 80083f4 <USBD_GetDescriptor+0xb4>)
 80083ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f2:	bf00      	nop
 80083f4:	0800840d 	.word	0x0800840d
 80083f8:	08008441 	.word	0x08008441
 80083fc:	08008475 	.word	0x08008475
 8008400:	080084a9 	.word	0x080084a9
 8008404:	080084dd 	.word	0x080084dd
 8008408:	08008511 	.word	0x08008511
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00b      	beq.n	8008430 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	7c12      	ldrb	r2, [r2, #16]
 8008424:	f107 0108 	add.w	r1, r7, #8
 8008428:	4610      	mov	r0, r2
 800842a:	4798      	blx	r3
 800842c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800842e:	e091      	b.n	8008554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fab2 	bl	800899c <USBD_CtlError>
            err++;
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	3301      	adds	r3, #1
 800843c:	72fb      	strb	r3, [r7, #11]
          break;
 800843e:	e089      	b.n	8008554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00b      	beq.n	8008464 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	7c12      	ldrb	r2, [r2, #16]
 8008458:	f107 0108 	add.w	r1, r7, #8
 800845c:	4610      	mov	r0, r2
 800845e:	4798      	blx	r3
 8008460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008462:	e077      	b.n	8008554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fa98 	bl	800899c <USBD_CtlError>
            err++;
 800846c:	7afb      	ldrb	r3, [r7, #11]
 800846e:	3301      	adds	r3, #1
 8008470:	72fb      	strb	r3, [r7, #11]
          break;
 8008472:	e06f      	b.n	8008554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00b      	beq.n	8008498 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	7c12      	ldrb	r2, [r2, #16]
 800848c:	f107 0108 	add.w	r1, r7, #8
 8008490:	4610      	mov	r0, r2
 8008492:	4798      	blx	r3
 8008494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008496:	e05d      	b.n	8008554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa7e 	bl	800899c <USBD_CtlError>
            err++;
 80084a0:	7afb      	ldrb	r3, [r7, #11]
 80084a2:	3301      	adds	r3, #1
 80084a4:	72fb      	strb	r3, [r7, #11]
          break;
 80084a6:	e055      	b.n	8008554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00b      	beq.n	80084cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	7c12      	ldrb	r2, [r2, #16]
 80084c0:	f107 0108 	add.w	r1, r7, #8
 80084c4:	4610      	mov	r0, r2
 80084c6:	4798      	blx	r3
 80084c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ca:	e043      	b.n	8008554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fa64 	bl	800899c <USBD_CtlError>
            err++;
 80084d4:	7afb      	ldrb	r3, [r7, #11]
 80084d6:	3301      	adds	r3, #1
 80084d8:	72fb      	strb	r3, [r7, #11]
          break;
 80084da:	e03b      	b.n	8008554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00b      	beq.n	8008500 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	7c12      	ldrb	r2, [r2, #16]
 80084f4:	f107 0108 	add.w	r1, r7, #8
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
 80084fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084fe:	e029      	b.n	8008554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fa4a 	bl	800899c <USBD_CtlError>
            err++;
 8008508:	7afb      	ldrb	r3, [r7, #11]
 800850a:	3301      	adds	r3, #1
 800850c:	72fb      	strb	r3, [r7, #11]
          break;
 800850e:	e021      	b.n	8008554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00b      	beq.n	8008534 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	7c12      	ldrb	r2, [r2, #16]
 8008528:	f107 0108 	add.w	r1, r7, #8
 800852c:	4610      	mov	r0, r2
 800852e:	4798      	blx	r3
 8008530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008532:	e00f      	b.n	8008554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa30 	bl	800899c <USBD_CtlError>
            err++;
 800853c:	7afb      	ldrb	r3, [r7, #11]
 800853e:	3301      	adds	r3, #1
 8008540:	72fb      	strb	r3, [r7, #11]
          break;
 8008542:	e007      	b.n	8008554 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fa28 	bl	800899c <USBD_CtlError>
          err++;
 800854c:	7afb      	ldrb	r3, [r7, #11]
 800854e:	3301      	adds	r3, #1
 8008550:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008552:	bf00      	nop
      }
      break;
 8008554:	e037      	b.n	80085c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	7c1b      	ldrb	r3, [r3, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008566:	f107 0208 	add.w	r2, r7, #8
 800856a:	4610      	mov	r0, r2
 800856c:	4798      	blx	r3
 800856e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008570:	e029      	b.n	80085c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fa11 	bl	800899c <USBD_CtlError>
        err++;
 800857a:	7afb      	ldrb	r3, [r7, #11]
 800857c:	3301      	adds	r3, #1
 800857e:	72fb      	strb	r3, [r7, #11]
      break;
 8008580:	e021      	b.n	80085c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	7c1b      	ldrb	r3, [r3, #16]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10d      	bne.n	80085a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008592:	f107 0208 	add.w	r2, r7, #8
 8008596:	4610      	mov	r0, r2
 8008598:	4798      	blx	r3
 800859a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3301      	adds	r3, #1
 80085a0:	2207      	movs	r2, #7
 80085a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085a4:	e00f      	b.n	80085c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f9f7 	bl	800899c <USBD_CtlError>
        err++;
 80085ae:	7afb      	ldrb	r3, [r7, #11]
 80085b0:	3301      	adds	r3, #1
 80085b2:	72fb      	strb	r3, [r7, #11]
      break;
 80085b4:	e007      	b.n	80085c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f9ef 	bl	800899c <USBD_CtlError>
      err++;
 80085be:	7afb      	ldrb	r3, [r7, #11]
 80085c0:	3301      	adds	r3, #1
 80085c2:	72fb      	strb	r3, [r7, #11]
      break;
 80085c4:	bf00      	nop
  }

  if (err != 0U)
 80085c6:	7afb      	ldrb	r3, [r7, #11]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d11e      	bne.n	800860a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	88db      	ldrh	r3, [r3, #6]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d016      	beq.n	8008602 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80085d4:	893b      	ldrh	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00e      	beq.n	80085f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	88da      	ldrh	r2, [r3, #6]
 80085de:	893b      	ldrh	r3, [r7, #8]
 80085e0:	4293      	cmp	r3, r2
 80085e2:	bf28      	it	cs
 80085e4:	4613      	movcs	r3, r2
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085ea:	893b      	ldrh	r3, [r7, #8]
 80085ec:	461a      	mov	r2, r3
 80085ee:	68f9      	ldr	r1, [r7, #12]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fa44 	bl	8008a7e <USBD_CtlSendData>
 80085f6:	e009      	b.n	800860c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f9ce 	bl	800899c <USBD_CtlError>
 8008600:	e004      	b.n	800860c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa95 	bl	8008b32 <USBD_CtlSendStatus>
 8008608:	e000      	b.n	800860c <USBD_GetDescriptor+0x2cc>
    return;
 800860a:	bf00      	nop
  }
}
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop

08008614 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	889b      	ldrh	r3, [r3, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d131      	bne.n	800868a <USBD_SetAddress+0x76>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	88db      	ldrh	r3, [r3, #6]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d12d      	bne.n	800868a <USBD_SetAddress+0x76>
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	885b      	ldrh	r3, [r3, #2]
 8008632:	2b7f      	cmp	r3, #127	; 0x7f
 8008634:	d829      	bhi.n	800868a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	885b      	ldrh	r3, [r3, #2]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008640:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b03      	cmp	r3, #3
 800864c:	d104      	bne.n	8008658 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f9a3 	bl	800899c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008656:	e01d      	b.n	8008694 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	7bfa      	ldrb	r2, [r7, #15]
 800865c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f004 fb29 	bl	800ccbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fa61 	bl	8008b32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d004      	beq.n	8008680 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2202      	movs	r2, #2
 800867a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800867e:	e009      	b.n	8008694 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008688:	e004      	b.n	8008694 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f985 	bl	800899c <USBD_CtlError>
  }
}
 8008692:	bf00      	nop
 8008694:	bf00      	nop
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	885b      	ldrh	r3, [r3, #2]
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	4b4c      	ldr	r3, [pc, #304]	; (80087e4 <USBD_SetConfig+0x148>)
 80086b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086b4:	4b4b      	ldr	r3, [pc, #300]	; (80087e4 <USBD_SetConfig+0x148>)
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d905      	bls.n	80086c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f96c 	bl	800899c <USBD_CtlError>
    return USBD_FAIL;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e088      	b.n	80087da <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d002      	beq.n	80086da <USBD_SetConfig+0x3e>
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d025      	beq.n	8008724 <USBD_SetConfig+0x88>
 80086d8:	e071      	b.n	80087be <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80086da:	4b42      	ldr	r3, [pc, #264]	; (80087e4 <USBD_SetConfig+0x148>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d01c      	beq.n	800871c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80086e2:	4b40      	ldr	r3, [pc, #256]	; (80087e4 <USBD_SetConfig+0x148>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086ec:	4b3d      	ldr	r3, [pc, #244]	; (80087e4 <USBD_SetConfig+0x148>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff f948 	bl	8007988 <USBD_SetClassConfig>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d004      	beq.n	800870c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f949 	bl	800899c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800870a:	e065      	b.n	80087d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fa10 	bl	8008b32 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2203      	movs	r2, #3
 8008716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800871a:	e05d      	b.n	80087d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fa08 	bl	8008b32 <USBD_CtlSendStatus>
      break;
 8008722:	e059      	b.n	80087d8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008724:	4b2f      	ldr	r3, [pc, #188]	; (80087e4 <USBD_SetConfig+0x148>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d112      	bne.n	8008752 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008734:	4b2b      	ldr	r3, [pc, #172]	; (80087e4 <USBD_SetConfig+0x148>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800873e:	4b29      	ldr	r3, [pc, #164]	; (80087e4 <USBD_SetConfig+0x148>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff f93b 	bl	80079c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f9f1 	bl	8008b32 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008750:	e042      	b.n	80087d8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008752:	4b24      	ldr	r3, [pc, #144]	; (80087e4 <USBD_SetConfig+0x148>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	429a      	cmp	r2, r3
 800875e:	d02a      	beq.n	80087b6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff f929 	bl	80079c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800876e:	4b1d      	ldr	r3, [pc, #116]	; (80087e4 <USBD_SetConfig+0x148>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008778:	4b1a      	ldr	r3, [pc, #104]	; (80087e4 <USBD_SetConfig+0x148>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff f902 	bl	8007988 <USBD_SetClassConfig>
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00f      	beq.n	80087ae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f903 	bl	800899c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	b2db      	uxtb	r3, r3
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff f90e 	bl	80079c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80087ac:	e014      	b.n	80087d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f9bf 	bl	8008b32 <USBD_CtlSendStatus>
      break;
 80087b4:	e010      	b.n	80087d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f9bb 	bl	8008b32 <USBD_CtlSendStatus>
      break;
 80087bc:	e00c      	b.n	80087d8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f8eb 	bl	800899c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087c6:	4b07      	ldr	r3, [pc, #28]	; (80087e4 <USBD_SetConfig+0x148>)
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff f8f7 	bl	80079c0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80087d2:	2303      	movs	r3, #3
 80087d4:	73fb      	strb	r3, [r7, #15]
      break;
 80087d6:	bf00      	nop
  }

  return ret;
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20000204 	.word	0x20000204

080087e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	88db      	ldrh	r3, [r3, #6]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d004      	beq.n	8008804 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f8cd 	bl	800899c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008802:	e023      	b.n	800884c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	dc02      	bgt.n	8008816 <USBD_GetConfig+0x2e>
 8008810:	2b00      	cmp	r3, #0
 8008812:	dc03      	bgt.n	800881c <USBD_GetConfig+0x34>
 8008814:	e015      	b.n	8008842 <USBD_GetConfig+0x5a>
 8008816:	2b03      	cmp	r3, #3
 8008818:	d00b      	beq.n	8008832 <USBD_GetConfig+0x4a>
 800881a:	e012      	b.n	8008842 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3308      	adds	r3, #8
 8008826:	2201      	movs	r2, #1
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f927 	bl	8008a7e <USBD_CtlSendData>
        break;
 8008830:	e00c      	b.n	800884c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	3304      	adds	r3, #4
 8008836:	2201      	movs	r2, #1
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f91f 	bl	8008a7e <USBD_CtlSendData>
        break;
 8008840:	e004      	b.n	800884c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f8a9 	bl	800899c <USBD_CtlError>
        break;
 800884a:	bf00      	nop
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008864:	b2db      	uxtb	r3, r3
 8008866:	3b01      	subs	r3, #1
 8008868:	2b02      	cmp	r3, #2
 800886a:	d81e      	bhi.n	80088aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	88db      	ldrh	r3, [r3, #6]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d004      	beq.n	800887e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f890 	bl	800899c <USBD_CtlError>
        break;
 800887c:	e01a      	b.n	80088b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800888a:	2b00      	cmp	r3, #0
 800888c:	d005      	beq.n	800889a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f043 0202 	orr.w	r2, r3, #2
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	330c      	adds	r3, #12
 800889e:	2202      	movs	r2, #2
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f8eb 	bl	8008a7e <USBD_CtlSendData>
      break;
 80088a8:	e004      	b.n	80088b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f875 	bl	800899c <USBD_CtlError>
      break;
 80088b2:	bf00      	nop
  }
}
 80088b4:	bf00      	nop
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	885b      	ldrh	r3, [r3, #2]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d106      	bne.n	80088dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f92b 	bl	8008b32 <USBD_CtlSendStatus>
  }
}
 80088dc:	bf00      	nop
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d80b      	bhi.n	8008914 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	885b      	ldrh	r3, [r3, #2]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d10c      	bne.n	800891e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f910 	bl	8008b32 <USBD_CtlSendStatus>
      }
      break;
 8008912:	e004      	b.n	800891e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f840 	bl	800899c <USBD_CtlError>
      break;
 800891c:	e000      	b.n	8008920 <USBD_ClrFeature+0x3c>
      break;
 800891e:	bf00      	nop
  }
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	781a      	ldrb	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	781a      	ldrb	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3301      	adds	r3, #1
 8008950:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff fabb 	bl	8007ece <SWAPBYTE>
 8008958:	4603      	mov	r3, r0
 800895a:	461a      	mov	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3301      	adds	r3, #1
 8008964:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3301      	adds	r3, #1
 800896a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f7ff faae 	bl	8007ece <SWAPBYTE>
 8008972:	4603      	mov	r3, r0
 8008974:	461a      	mov	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3301      	adds	r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f7ff faa1 	bl	8007ece <SWAPBYTE>
 800898c:	4603      	mov	r3, r0
 800898e:	461a      	mov	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	80da      	strh	r2, [r3, #6]
}
 8008994:	bf00      	nop
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80089a6:	2180      	movs	r1, #128	; 0x80
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f004 f91d 	bl	800cbe8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80089ae:	2100      	movs	r1, #0
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f004 f919 	bl	800cbe8 <USBD_LL_StallEP>
}
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b086      	sub	sp, #24
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	60b9      	str	r1, [r7, #8]
 80089c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d036      	beq.n	8008a42 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80089d8:	6938      	ldr	r0, [r7, #16]
 80089da:	f000 f836 	bl	8008a4a <USBD_GetLen>
 80089de:	4603      	mov	r3, r0
 80089e0:	3301      	adds	r3, #1
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	4413      	add	r3, r2
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	7812      	ldrb	r2, [r2, #0]
 80089f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
 80089fa:	3301      	adds	r3, #1
 80089fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	4413      	add	r3, r2
 8008a04:	2203      	movs	r2, #3
 8008a06:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a0e:	e013      	b.n	8008a38 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a10:	7dfb      	ldrb	r3, [r7, #23]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	4413      	add	r3, r2
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	7812      	ldrb	r2, [r2, #0]
 8008a1a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	613b      	str	r3, [r7, #16]
    idx++;
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	3301      	adds	r3, #1
 8008a26:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	2200      	movs	r2, #0
 8008a30:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	3301      	adds	r3, #1
 8008a36:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e7      	bne.n	8008a10 <USBD_GetString+0x52>
 8008a40:	e000      	b.n	8008a44 <USBD_GetString+0x86>
    return;
 8008a42:	bf00      	nop
  }
}
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b085      	sub	sp, #20
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a5a:	e005      	b.n	8008a68 <USBD_GetLen+0x1e>
  {
    len++;
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	3301      	adds	r3, #1
 8008a66:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1f5      	bne.n	8008a5c <USBD_GetLen+0x12>
  }

  return len;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f004 f928 	bl	800ccfa <USBD_LL_Transmit>

  return USBD_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f004 f917 	bl	800ccfa <USBD_LL_Transmit>

  return USBD_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	60f8      	str	r0, [r7, #12]
 8008ade:	60b9      	str	r1, [r7, #8]
 8008ae0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2203      	movs	r2, #3
 8008ae6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	2100      	movs	r1, #0
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f004 f91b 	bl	800cd3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	2100      	movs	r1, #0
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f004 f90a 	bl	800cd3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b082      	sub	sp, #8
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2204      	movs	r2, #4
 8008b3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b42:	2300      	movs	r3, #0
 8008b44:	2200      	movs	r2, #0
 8008b46:	2100      	movs	r1, #0
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f004 f8d6 	bl	800ccfa <USBD_LL_Transmit>

  return USBD_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2205      	movs	r2, #5
 8008b64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f004 f8e4 	bl	800cd3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <__NVIC_SetPriority>:
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	6039      	str	r1, [r7, #0]
 8008b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	db0a      	blt.n	8008baa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	490c      	ldr	r1, [pc, #48]	; (8008bcc <__NVIC_SetPriority+0x4c>)
 8008b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b9e:	0112      	lsls	r2, r2, #4
 8008ba0:	b2d2      	uxtb	r2, r2
 8008ba2:	440b      	add	r3, r1
 8008ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ba8:	e00a      	b.n	8008bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	4908      	ldr	r1, [pc, #32]	; (8008bd0 <__NVIC_SetPriority+0x50>)
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	3b04      	subs	r3, #4
 8008bb8:	0112      	lsls	r2, r2, #4
 8008bba:	b2d2      	uxtb	r2, r2
 8008bbc:	440b      	add	r3, r1
 8008bbe:	761a      	strb	r2, [r3, #24]
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	e000e100 	.word	0xe000e100
 8008bd0:	e000ed00 	.word	0xe000ed00

08008bd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008bd8:	4b05      	ldr	r3, [pc, #20]	; (8008bf0 <SysTick_Handler+0x1c>)
 8008bda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008bdc:	f002 fa9a 	bl	800b114 <xTaskGetSchedulerState>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d001      	beq.n	8008bea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008be6:	f003 f97f 	bl	800bee8 <xPortSysTickHandler>
  }
}
 8008bea:	bf00      	nop
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	e000e010 	.word	0xe000e010

08008bf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	f06f 0004 	mvn.w	r0, #4
 8008bfe:	f7ff ffbf 	bl	8008b80 <__NVIC_SetPriority>
#endif
}
 8008c02:	bf00      	nop
 8008c04:	bd80      	pop	{r7, pc}
	...

08008c08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c0e:	f3ef 8305 	mrs	r3, IPSR
 8008c12:	603b      	str	r3, [r7, #0]
  return(result);
 8008c14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c1a:	f06f 0305 	mvn.w	r3, #5
 8008c1e:	607b      	str	r3, [r7, #4]
 8008c20:	e00c      	b.n	8008c3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c22:	4b0a      	ldr	r3, [pc, #40]	; (8008c4c <osKernelInitialize+0x44>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d105      	bne.n	8008c36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c2a:	4b08      	ldr	r3, [pc, #32]	; (8008c4c <osKernelInitialize+0x44>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	607b      	str	r3, [r7, #4]
 8008c34:	e002      	b.n	8008c3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c3c:	687b      	ldr	r3, [r7, #4]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	20000208 	.word	0x20000208

08008c50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c56:	f3ef 8305 	mrs	r3, IPSR
 8008c5a:	603b      	str	r3, [r7, #0]
  return(result);
 8008c5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008c62:	f06f 0305 	mvn.w	r3, #5
 8008c66:	607b      	str	r3, [r7, #4]
 8008c68:	e010      	b.n	8008c8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c6a:	4b0b      	ldr	r3, [pc, #44]	; (8008c98 <osKernelStart+0x48>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d109      	bne.n	8008c86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c72:	f7ff ffbf 	bl	8008bf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c76:	4b08      	ldr	r3, [pc, #32]	; (8008c98 <osKernelStart+0x48>)
 8008c78:	2202      	movs	r2, #2
 8008c7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c7c:	f001 fdee 	bl	800a85c <vTaskStartScheduler>
      stat = osOK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	607b      	str	r3, [r7, #4]
 8008c84:	e002      	b.n	8008c8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c8c:	687b      	ldr	r3, [r7, #4]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	20000208 	.word	0x20000208

08008c9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08e      	sub	sp, #56	; 0x38
 8008ca0:	af04      	add	r7, sp, #16
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cac:	f3ef 8305 	mrs	r3, IPSR
 8008cb0:	617b      	str	r3, [r7, #20]
  return(result);
 8008cb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d17e      	bne.n	8008db6 <osThreadNew+0x11a>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d07b      	beq.n	8008db6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008cbe:	2380      	movs	r3, #128	; 0x80
 8008cc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008cc2:	2318      	movs	r3, #24
 8008cc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d045      	beq.n	8008d62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <osThreadNew+0x48>
        name = attr->name;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d008      	beq.n	8008d0a <osThreadNew+0x6e>
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	2b38      	cmp	r3, #56	; 0x38
 8008cfc:	d805      	bhi.n	8008d0a <osThreadNew+0x6e>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <osThreadNew+0x72>
        return (NULL);
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	e054      	b.n	8008db8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	089b      	lsrs	r3, r3, #2
 8008d1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00e      	beq.n	8008d44 <osThreadNew+0xa8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	2bbb      	cmp	r3, #187	; 0xbb
 8008d2c:	d90a      	bls.n	8008d44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d006      	beq.n	8008d44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <osThreadNew+0xa8>
        mem = 1;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	61bb      	str	r3, [r7, #24]
 8008d42:	e010      	b.n	8008d66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10c      	bne.n	8008d66 <osThreadNew+0xca>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d108      	bne.n	8008d66 <osThreadNew+0xca>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d104      	bne.n	8008d66 <osThreadNew+0xca>
          mem = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	61bb      	str	r3, [r7, #24]
 8008d60:	e001      	b.n	8008d66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d110      	bne.n	8008d8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d74:	9202      	str	r2, [sp, #8]
 8008d76:	9301      	str	r3, [sp, #4]
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	6a3a      	ldr	r2, [r7, #32]
 8008d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f001 fb7e 	bl	800a484 <xTaskCreateStatic>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	613b      	str	r3, [r7, #16]
 8008d8c:	e013      	b.n	8008db6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d110      	bne.n	8008db6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	f107 0310 	add.w	r3, r7, #16
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f001 fbc9 	bl	800a53e <xTaskCreate>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d001      	beq.n	8008db6 <osThreadNew+0x11a>
            hTask = NULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008db6:	693b      	ldr	r3, [r7, #16]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3728      	adds	r7, #40	; 0x28
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc8:	f3ef 8305 	mrs	r3, IPSR
 8008dcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <osDelay+0x1c>
    stat = osErrorISR;
 8008dd4:	f06f 0305 	mvn.w	r3, #5
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	e007      	b.n	8008dec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <osDelay+0x2c>
      vTaskDelay(ticks);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f001 fd04 	bl	800a7f4 <vTaskDelay>
    }
  }

  return (stat);
 8008dec:	68fb      	ldr	r3, [r7, #12]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b08a      	sub	sp, #40	; 0x28
 8008dfa:	af02      	add	r7, sp, #8
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e06:	f3ef 8305 	mrs	r3, IPSR
 8008e0a:	613b      	str	r3, [r7, #16]
  return(result);
 8008e0c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d175      	bne.n	8008efe <osSemaphoreNew+0x108>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d072      	beq.n	8008efe <osSemaphoreNew+0x108>
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d86e      	bhi.n	8008efe <osSemaphoreNew+0x108>
    mem = -1;
 8008e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e24:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d015      	beq.n	8008e58 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d006      	beq.n	8008e42 <osSemaphoreNew+0x4c>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	2b4f      	cmp	r3, #79	; 0x4f
 8008e3a:	d902      	bls.n	8008e42 <osSemaphoreNew+0x4c>
        mem = 1;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	61bb      	str	r3, [r7, #24]
 8008e40:	e00c      	b.n	8008e5c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d108      	bne.n	8008e5c <osSemaphoreNew+0x66>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d104      	bne.n	8008e5c <osSemaphoreNew+0x66>
          mem = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	61bb      	str	r3, [r7, #24]
 8008e56:	e001      	b.n	8008e5c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e62:	d04c      	beq.n	8008efe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d128      	bne.n	8008ebc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d10a      	bne.n	8008e86 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	2203      	movs	r2, #3
 8008e76:	9200      	str	r2, [sp, #0]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	2001      	movs	r0, #1
 8008e7e:	f000 fb5b 	bl	8009538 <xQueueGenericCreateStatic>
 8008e82:	61f8      	str	r0, [r7, #28]
 8008e84:	e005      	b.n	8008e92 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008e86:	2203      	movs	r2, #3
 8008e88:	2100      	movs	r1, #0
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	f000 fbcc 	bl	8009628 <xQueueGenericCreate>
 8008e90:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d022      	beq.n	8008ede <osSemaphoreNew+0xe8>
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d01f      	beq.n	8008ede <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	69f8      	ldr	r0, [r7, #28]
 8008ea6:	f000 fc87 	bl	80097b8 <xQueueGenericSend>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d016      	beq.n	8008ede <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008eb0:	69f8      	ldr	r0, [r7, #28]
 8008eb2:	f001 f913 	bl	800a0dc <vQueueDelete>
            hSemaphore = NULL;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	e010      	b.n	8008ede <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d108      	bne.n	8008ed4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	68b9      	ldr	r1, [r7, #8]
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fc09 	bl	80096e2 <xQueueCreateCountingSemaphoreStatic>
 8008ed0:	61f8      	str	r0, [r7, #28]
 8008ed2:	e004      	b.n	8008ede <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 fc3a 	bl	8009750 <xQueueCreateCountingSemaphore>
 8008edc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00c      	beq.n	8008efe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	e001      	b.n	8008ef6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008ef6:	6979      	ldr	r1, [r7, #20]
 8008ef8:	69f8      	ldr	r0, [r7, #28]
 8008efa:	f001 fa3b 	bl	800a374 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008efe:	69fb      	ldr	r3, [r7, #28]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3720      	adds	r7, #32
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d103      	bne.n	8008f28 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008f20:	f06f 0303 	mvn.w	r3, #3
 8008f24:	617b      	str	r3, [r7, #20]
 8008f26:	e039      	b.n	8008f9c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f28:	f3ef 8305 	mrs	r3, IPSR
 8008f2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d022      	beq.n	8008f7a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008f3a:	f06f 0303 	mvn.w	r3, #3
 8008f3e:	617b      	str	r3, [r7, #20]
 8008f40:	e02c      	b.n	8008f9c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008f42:	2300      	movs	r3, #0
 8008f44:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	6938      	ldr	r0, [r7, #16]
 8008f50:	f001 f844 	bl	8009fdc <xQueueReceiveFromISR>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d003      	beq.n	8008f62 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008f5a:	f06f 0302 	mvn.w	r3, #2
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	e01c      	b.n	8008f9c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d019      	beq.n	8008f9c <osSemaphoreAcquire+0x94>
 8008f68:	4b0f      	ldr	r3, [pc, #60]	; (8008fa8 <osSemaphoreAcquire+0xa0>)
 8008f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	e010      	b.n	8008f9c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6938      	ldr	r0, [r7, #16]
 8008f7e:	f000 ff21 	bl	8009dc4 <xQueueSemaphoreTake>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d009      	beq.n	8008f9c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008f8e:	f06f 0301 	mvn.w	r3, #1
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	e002      	b.n	8008f9c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008f96:	f06f 0302 	mvn.w	r3, #2
 8008f9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008f9c:	697b      	ldr	r3, [r7, #20]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	e000ed04 	.word	0xe000ed04

08008fac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d103      	bne.n	8008fca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008fc2:	f06f 0303 	mvn.w	r3, #3
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	e02c      	b.n	8009024 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fca:	f3ef 8305 	mrs	r3, IPSR
 8008fce:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d01a      	beq.n	800900c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008fda:	f107 0308 	add.w	r3, r7, #8
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6938      	ldr	r0, [r7, #16]
 8008fe2:	f000 fd82 	bl	8009aea <xQueueGiveFromISR>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d003      	beq.n	8008ff4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008fec:	f06f 0302 	mvn.w	r3, #2
 8008ff0:	617b      	str	r3, [r7, #20]
 8008ff2:	e017      	b.n	8009024 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d014      	beq.n	8009024 <osSemaphoreRelease+0x78>
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <osSemaphoreRelease+0x84>)
 8008ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	e00b      	b.n	8009024 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800900c:	2300      	movs	r3, #0
 800900e:	2200      	movs	r2, #0
 8009010:	2100      	movs	r1, #0
 8009012:	6938      	ldr	r0, [r7, #16]
 8009014:	f000 fbd0 	bl	80097b8 <xQueueGenericSend>
 8009018:	4603      	mov	r3, r0
 800901a:	2b01      	cmp	r3, #1
 800901c:	d002      	beq.n	8009024 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800901e:	f06f 0302 	mvn.w	r3, #2
 8009022:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009024:	697b      	ldr	r3, [r7, #20]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	e000ed04 	.word	0xe000ed04

08009034 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009034:	b580      	push	{r7, lr}
 8009036:	b08a      	sub	sp, #40	; 0x28
 8009038:	af02      	add	r7, sp, #8
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009040:	2300      	movs	r3, #0
 8009042:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009044:	f3ef 8305 	mrs	r3, IPSR
 8009048:	613b      	str	r3, [r7, #16]
  return(result);
 800904a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800904c:	2b00      	cmp	r3, #0
 800904e:	d15f      	bne.n	8009110 <osMessageQueueNew+0xdc>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d05c      	beq.n	8009110 <osMessageQueueNew+0xdc>
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d059      	beq.n	8009110 <osMessageQueueNew+0xdc>
    mem = -1;
 800905c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009060:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d029      	beq.n	80090bc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d012      	beq.n	8009096 <osMessageQueueNew+0x62>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	2b4f      	cmp	r3, #79	; 0x4f
 8009076:	d90e      	bls.n	8009096 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00a      	beq.n	8009096 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	695a      	ldr	r2, [r3, #20]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	fb01 f303 	mul.w	r3, r1, r3
 800908c:	429a      	cmp	r2, r3
 800908e:	d302      	bcc.n	8009096 <osMessageQueueNew+0x62>
        mem = 1;
 8009090:	2301      	movs	r3, #1
 8009092:	61bb      	str	r3, [r7, #24]
 8009094:	e014      	b.n	80090c0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d110      	bne.n	80090c0 <osMessageQueueNew+0x8c>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10c      	bne.n	80090c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d108      	bne.n	80090c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d104      	bne.n	80090c0 <osMessageQueueNew+0x8c>
          mem = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	61bb      	str	r3, [r7, #24]
 80090ba:	e001      	b.n	80090c0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d10b      	bne.n	80090de <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691a      	ldr	r2, [r3, #16]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	2100      	movs	r1, #0
 80090d0:	9100      	str	r1, [sp, #0]
 80090d2:	68b9      	ldr	r1, [r7, #8]
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 fa2f 	bl	8009538 <xQueueGenericCreateStatic>
 80090da:	61f8      	str	r0, [r7, #28]
 80090dc:	e008      	b.n	80090f0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d105      	bne.n	80090f0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80090e4:	2200      	movs	r2, #0
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f000 fa9d 	bl	8009628 <xQueueGenericCreate>
 80090ee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00c      	beq.n	8009110 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <osMessageQueueNew+0xd0>
        name = attr->name;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	617b      	str	r3, [r7, #20]
 8009102:	e001      	b.n	8009108 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009104:	2300      	movs	r3, #0
 8009106:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009108:	6979      	ldr	r1, [r7, #20]
 800910a:	69f8      	ldr	r0, [r7, #28]
 800910c:	f001 f932 	bl	800a374 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009110:	69fb      	ldr	r3, [r7, #28]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3720      	adds	r7, #32
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800911c:	b580      	push	{r7, lr}
 800911e:	b088      	sub	sp, #32
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	4613      	mov	r3, r2
 800912a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009130:	2300      	movs	r3, #0
 8009132:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009134:	f3ef 8305 	mrs	r3, IPSR
 8009138:	617b      	str	r3, [r7, #20]
  return(result);
 800913a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800913c:	2b00      	cmp	r3, #0
 800913e:	d028      	beq.n	8009192 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d005      	beq.n	8009152 <osMessageQueuePut+0x36>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <osMessageQueuePut+0x36>
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009152:	f06f 0303 	mvn.w	r3, #3
 8009156:	61fb      	str	r3, [r7, #28]
 8009158:	e038      	b.n	80091cc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800915a:	2300      	movs	r3, #0
 800915c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800915e:	f107 0210 	add.w	r2, r7, #16
 8009162:	2300      	movs	r3, #0
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	69b8      	ldr	r0, [r7, #24]
 8009168:	f000 fc24 	bl	80099b4 <xQueueGenericSendFromISR>
 800916c:	4603      	mov	r3, r0
 800916e:	2b01      	cmp	r3, #1
 8009170:	d003      	beq.n	800917a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009172:	f06f 0302 	mvn.w	r3, #2
 8009176:	61fb      	str	r3, [r7, #28]
 8009178:	e028      	b.n	80091cc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d025      	beq.n	80091cc <osMessageQueuePut+0xb0>
 8009180:	4b15      	ldr	r3, [pc, #84]	; (80091d8 <osMessageQueuePut+0xbc>)
 8009182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	e01c      	b.n	80091cc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <osMessageQueuePut+0x82>
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d103      	bne.n	80091a6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800919e:	f06f 0303 	mvn.w	r3, #3
 80091a2:	61fb      	str	r3, [r7, #28]
 80091a4:	e012      	b.n	80091cc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80091a6:	2300      	movs	r3, #0
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	68b9      	ldr	r1, [r7, #8]
 80091ac:	69b8      	ldr	r0, [r7, #24]
 80091ae:	f000 fb03 	bl	80097b8 <xQueueGenericSend>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d009      	beq.n	80091cc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80091be:	f06f 0301 	mvn.w	r3, #1
 80091c2:	61fb      	str	r3, [r7, #28]
 80091c4:	e002      	b.n	80091cc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80091c6:	f06f 0302 	mvn.w	r3, #2
 80091ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80091cc:	69fb      	ldr	r3, [r7, #28]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3720      	adds	r7, #32
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	e000ed04 	.word	0xe000ed04

080091dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091f2:	f3ef 8305 	mrs	r3, IPSR
 80091f6:	617b      	str	r3, [r7, #20]
  return(result);
 80091f8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d028      	beq.n	8009250 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <osMessageQueueGet+0x34>
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <osMessageQueueGet+0x34>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009210:	f06f 0303 	mvn.w	r3, #3
 8009214:	61fb      	str	r3, [r7, #28]
 8009216:	e037      	b.n	8009288 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009218:	2300      	movs	r3, #0
 800921a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800921c:	f107 0310 	add.w	r3, r7, #16
 8009220:	461a      	mov	r2, r3
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	69b8      	ldr	r0, [r7, #24]
 8009226:	f000 fed9 	bl	8009fdc <xQueueReceiveFromISR>
 800922a:	4603      	mov	r3, r0
 800922c:	2b01      	cmp	r3, #1
 800922e:	d003      	beq.n	8009238 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009230:	f06f 0302 	mvn.w	r3, #2
 8009234:	61fb      	str	r3, [r7, #28]
 8009236:	e027      	b.n	8009288 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d024      	beq.n	8009288 <osMessageQueueGet+0xac>
 800923e:	4b15      	ldr	r3, [pc, #84]	; (8009294 <osMessageQueueGet+0xb8>)
 8009240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	e01b      	b.n	8009288 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d002      	beq.n	800925c <osMessageQueueGet+0x80>
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d103      	bne.n	8009264 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800925c:	f06f 0303 	mvn.w	r3, #3
 8009260:	61fb      	str	r3, [r7, #28]
 8009262:	e011      	b.n	8009288 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	68b9      	ldr	r1, [r7, #8]
 8009268:	69b8      	ldr	r0, [r7, #24]
 800926a:	f000 fccb 	bl	8009c04 <xQueueReceive>
 800926e:	4603      	mov	r3, r0
 8009270:	2b01      	cmp	r3, #1
 8009272:	d009      	beq.n	8009288 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800927a:	f06f 0301 	mvn.w	r3, #1
 800927e:	61fb      	str	r3, [r7, #28]
 8009280:	e002      	b.n	8009288 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009282:	f06f 0302 	mvn.w	r3, #2
 8009286:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009288:	69fb      	ldr	r3, [r7, #28]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3720      	adds	r7, #32
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	e000ed04 	.word	0xe000ed04

08009298 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4a07      	ldr	r2, [pc, #28]	; (80092c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80092a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	4a06      	ldr	r2, [pc, #24]	; (80092c8 <vApplicationGetIdleTaskMemory+0x30>)
 80092ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2280      	movs	r2, #128	; 0x80
 80092b4:	601a      	str	r2, [r3, #0]
}
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	2000020c 	.word	0x2000020c
 80092c8:	200002c8 	.word	0x200002c8

080092cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4a07      	ldr	r2, [pc, #28]	; (80092f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80092dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	4a06      	ldr	r2, [pc, #24]	; (80092fc <vApplicationGetTimerTaskMemory+0x30>)
 80092e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092ea:	601a      	str	r2, [r3, #0]
}
 80092ec:	bf00      	nop
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	200004c8 	.word	0x200004c8
 80092fc:	20000584 	.word	0x20000584

08009300 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f103 0208 	add.w	r2, r3, #8
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009318:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f103 0208 	add.w	r2, r3, #8
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f103 0208 	add.w	r2, r3, #8
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800935a:	b480      	push	{r7}
 800935c:	b085      	sub	sp, #20
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	1c5a      	adds	r2, r3, #1
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	601a      	str	r2, [r3, #0]
}
 8009396:	bf00      	nop
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093a2:	b480      	push	{r7}
 80093a4:	b085      	sub	sp, #20
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b8:	d103      	bne.n	80093c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	e00c      	b.n	80093dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3308      	adds	r3, #8
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	e002      	b.n	80093d0 <vListInsert+0x2e>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d2f6      	bcs.n	80093ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	685a      	ldr	r2, [r3, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	683a      	ldr	r2, [r7, #0]
 80093f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	1c5a      	adds	r2, r3, #1
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	601a      	str	r2, [r3, #0]
}
 8009408:	bf00      	nop
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	6892      	ldr	r2, [r2, #8]
 800942a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	6852      	ldr	r2, [r2, #4]
 8009434:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	429a      	cmp	r2, r3
 800943e:	d103      	bne.n	8009448 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	1e5a      	subs	r2, r3, #1
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10a      	bne.n	8009492 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800948e:	bf00      	nop
 8009490:	e7fe      	b.n	8009490 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009492:	f002 fc97 	bl	800bdc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949e:	68f9      	ldr	r1, [r7, #12]
 80094a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80094a2:	fb01 f303 	mul.w	r3, r1, r3
 80094a6:	441a      	add	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c2:	3b01      	subs	r3, #1
 80094c4:	68f9      	ldr	r1, [r7, #12]
 80094c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80094c8:	fb01 f303 	mul.w	r3, r1, r3
 80094cc:	441a      	add	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	22ff      	movs	r2, #255	; 0xff
 80094d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	22ff      	movs	r2, #255	; 0xff
 80094de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d114      	bne.n	8009512 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d01a      	beq.n	8009526 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	3310      	adds	r3, #16
 80094f4:	4618      	mov	r0, r3
 80094f6:	f001 fc4b 	bl	800ad90 <xTaskRemoveFromEventList>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d012      	beq.n	8009526 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009500:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <xQueueGenericReset+0xcc>)
 8009502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	e009      	b.n	8009526 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3310      	adds	r3, #16
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff fef2 	bl	8009300 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3324      	adds	r3, #36	; 0x24
 8009520:	4618      	mov	r0, r3
 8009522:	f7ff feed 	bl	8009300 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009526:	f002 fc7d 	bl	800be24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800952a:	2301      	movs	r3, #1
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	e000ed04 	.word	0xe000ed04

08009538 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009538:	b580      	push	{r7, lr}
 800953a:	b08e      	sub	sp, #56	; 0x38
 800953c:	af02      	add	r7, sp, #8
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
 8009544:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10a      	bne.n	8009562 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800955e:	bf00      	nop
 8009560:	e7fe      	b.n	8009560 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	627b      	str	r3, [r7, #36]	; 0x24
}
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <xQueueGenericCreateStatic+0x52>
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <xQueueGenericCreateStatic+0x56>
 800958a:	2301      	movs	r3, #1
 800958c:	e000      	b.n	8009590 <xQueueGenericCreateStatic+0x58>
 800958e:	2300      	movs	r3, #0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	623b      	str	r3, [r7, #32]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d102      	bne.n	80095b6 <xQueueGenericCreateStatic+0x7e>
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <xQueueGenericCreateStatic+0x82>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e000      	b.n	80095bc <xQueueGenericCreateStatic+0x84>
 80095ba:	2300      	movs	r3, #0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10a      	bne.n	80095d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	61fb      	str	r3, [r7, #28]
}
 80095d2:	bf00      	nop
 80095d4:	e7fe      	b.n	80095d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095d6:	2350      	movs	r3, #80	; 0x50
 80095d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2b50      	cmp	r3, #80	; 0x50
 80095de:	d00a      	beq.n	80095f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	61bb      	str	r3, [r7, #24]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80095fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00d      	beq.n	800961e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800960a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800960e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	4613      	mov	r3, r2
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	68b9      	ldr	r1, [r7, #8]
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 f83f 	bl	800969c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009620:	4618      	mov	r0, r3
 8009622:	3730      	adds	r7, #48	; 0x30
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	; 0x28
 800962c:	af02      	add	r7, sp, #8
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	4613      	mov	r3, r2
 8009634:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <xQueueGenericCreate+0x2a>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	613b      	str	r3, [r7, #16]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	fb02 f303 	mul.w	r3, r2, r3
 800965a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	3350      	adds	r3, #80	; 0x50
 8009660:	4618      	mov	r0, r3
 8009662:	f002 fcd1 	bl	800c008 <pvPortMalloc>
 8009666:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d011      	beq.n	8009692 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	3350      	adds	r3, #80	; 0x50
 8009676:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009680:	79fa      	ldrb	r2, [r7, #7]
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	4613      	mov	r3, r2
 8009688:	697a      	ldr	r2, [r7, #20]
 800968a:	68b9      	ldr	r1, [r7, #8]
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 f805 	bl	800969c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009692:	69bb      	ldr	r3, [r7, #24]
	}
 8009694:	4618      	mov	r0, r3
 8009696:	3720      	adds	r7, #32
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d103      	bne.n	80096b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	e002      	b.n	80096be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096ca:	2101      	movs	r1, #1
 80096cc:	69b8      	ldr	r0, [r7, #24]
 80096ce:	f7ff fecb 	bl	8009468 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	78fa      	ldrb	r2, [r7, #3]
 80096d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096da:	bf00      	nop
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b08a      	sub	sp, #40	; 0x28
 80096e6:	af02      	add	r7, sp, #8
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	60b9      	str	r1, [r7, #8]
 80096ec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	61bb      	str	r3, [r7, #24]
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	429a      	cmp	r2, r3
 8009710:	d90a      	bls.n	8009728 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	617b      	str	r3, [r7, #20]
}
 8009724:	bf00      	nop
 8009726:	e7fe      	b.n	8009726 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009728:	2302      	movs	r3, #2
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	2100      	movs	r1, #0
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f7ff ff00 	bl	8009538 <xQueueGenericCreateStatic>
 8009738:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009746:	69fb      	ldr	r3, [r7, #28]
	}
 8009748:	4618      	mov	r0, r3
 800974a:	3720      	adds	r7, #32
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	613b      	str	r3, [r7, #16]
}
 8009772:	bf00      	nop
 8009774:	e7fe      	b.n	8009774 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	429a      	cmp	r2, r3
 800977c:	d90a      	bls.n	8009794 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	60fb      	str	r3, [r7, #12]
}
 8009790:	bf00      	nop
 8009792:	e7fe      	b.n	8009792 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009794:	2202      	movs	r2, #2
 8009796:	2100      	movs	r1, #0
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7ff ff45 	bl	8009628 <xQueueGenericCreate>
 800979e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80097ac:	697b      	ldr	r3, [r7, #20]
	}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08e      	sub	sp, #56	; 0x38
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097c6:	2300      	movs	r3, #0
 80097c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <xQueueGenericSend+0x32>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097e6:	bf00      	nop
 80097e8:	e7fe      	b.n	80097e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d103      	bne.n	80097f8 <xQueueGenericSend+0x40>
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <xQueueGenericSend+0x44>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e000      	b.n	80097fe <xQueueGenericSend+0x46>
 80097fc:	2300      	movs	r3, #0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <xQueueGenericSend+0x60>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	2b02      	cmp	r3, #2
 800981c:	d103      	bne.n	8009826 <xQueueGenericSend+0x6e>
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009822:	2b01      	cmp	r3, #1
 8009824:	d101      	bne.n	800982a <xQueueGenericSend+0x72>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <xQueueGenericSend+0x74>
 800982a:	2300      	movs	r3, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10a      	bne.n	8009846 <xQueueGenericSend+0x8e>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	623b      	str	r3, [r7, #32]
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009846:	f001 fc65 	bl	800b114 <xTaskGetSchedulerState>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d102      	bne.n	8009856 <xQueueGenericSend+0x9e>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <xQueueGenericSend+0xa2>
 8009856:	2301      	movs	r3, #1
 8009858:	e000      	b.n	800985c <xQueueGenericSend+0xa4>
 800985a:	2300      	movs	r3, #0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10a      	bne.n	8009876 <xQueueGenericSend+0xbe>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	61fb      	str	r3, [r7, #28]
}
 8009872:	bf00      	nop
 8009874:	e7fe      	b.n	8009874 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009876:	f002 faa5 	bl	800bdc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009882:	429a      	cmp	r2, r3
 8009884:	d302      	bcc.n	800988c <xQueueGenericSend+0xd4>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b02      	cmp	r3, #2
 800988a:	d129      	bne.n	80098e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009892:	f000 fc5e 	bl	800a152 <prvCopyDataToQueue>
 8009896:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	2b00      	cmp	r3, #0
 800989e:	d010      	beq.n	80098c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	3324      	adds	r3, #36	; 0x24
 80098a4:	4618      	mov	r0, r3
 80098a6:	f001 fa73 	bl	800ad90 <xTaskRemoveFromEventList>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d013      	beq.n	80098d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098b0:	4b3f      	ldr	r3, [pc, #252]	; (80099b0 <xQueueGenericSend+0x1f8>)
 80098b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	e00a      	b.n	80098d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d007      	beq.n	80098d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098c8:	4b39      	ldr	r3, [pc, #228]	; (80099b0 <xQueueGenericSend+0x1f8>)
 80098ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098d8:	f002 faa4 	bl	800be24 <vPortExitCritical>
				return pdPASS;
 80098dc:	2301      	movs	r3, #1
 80098de:	e063      	b.n	80099a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d103      	bne.n	80098ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098e6:	f002 fa9d 	bl	800be24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	e05c      	b.n	80099a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d106      	bne.n	8009902 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098f4:	f107 0314 	add.w	r3, r7, #20
 80098f8:	4618      	mov	r0, r3
 80098fa:	f001 faad 	bl	800ae58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098fe:	2301      	movs	r3, #1
 8009900:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009902:	f002 fa8f 	bl	800be24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009906:	f001 f819 	bl	800a93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800990a:	f002 fa5b 	bl	800bdc4 <vPortEnterCritical>
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009914:	b25b      	sxtb	r3, r3
 8009916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800991a:	d103      	bne.n	8009924 <xQueueGenericSend+0x16c>
 800991c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991e:	2200      	movs	r2, #0
 8009920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800992a:	b25b      	sxtb	r3, r3
 800992c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009930:	d103      	bne.n	800993a <xQueueGenericSend+0x182>
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800993a:	f002 fa73 	bl	800be24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800993e:	1d3a      	adds	r2, r7, #4
 8009940:	f107 0314 	add.w	r3, r7, #20
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f001 fa9c 	bl	800ae84 <xTaskCheckForTimeOut>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d124      	bne.n	800999c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009954:	f000 fcf5 	bl	800a342 <prvIsQueueFull>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d018      	beq.n	8009990 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	3310      	adds	r3, #16
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	4611      	mov	r1, r2
 8009966:	4618      	mov	r0, r3
 8009968:	f001 f9c2 	bl	800acf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800996c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800996e:	f000 fc80 	bl	800a272 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009972:	f000 fff1 	bl	800a958 <xTaskResumeAll>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	f47f af7c 	bne.w	8009876 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800997e:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <xQueueGenericSend+0x1f8>)
 8009980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	e772      	b.n	8009876 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009992:	f000 fc6e 	bl	800a272 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009996:	f000 ffdf 	bl	800a958 <xTaskResumeAll>
 800999a:	e76c      	b.n	8009876 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800999c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800999e:	f000 fc68 	bl	800a272 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099a2:	f000 ffd9 	bl	800a958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3738      	adds	r7, #56	; 0x38
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	e000ed04 	.word	0xe000ed04

080099b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b090      	sub	sp, #64	; 0x40
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10a      	bne.n	80099e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099de:	bf00      	nop
 80099e0:	e7fe      	b.n	80099e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d103      	bne.n	80099f0 <xQueueGenericSendFromISR+0x3c>
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <xQueueGenericSendFromISR+0x40>
 80099f0:	2301      	movs	r3, #1
 80099f2:	e000      	b.n	80099f6 <xQueueGenericSendFromISR+0x42>
 80099f4:	2300      	movs	r3, #0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10a      	bne.n	8009a10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d103      	bne.n	8009a1e <xQueueGenericSendFromISR+0x6a>
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d101      	bne.n	8009a22 <xQueueGenericSendFromISR+0x6e>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e000      	b.n	8009a24 <xQueueGenericSendFromISR+0x70>
 8009a22:	2300      	movs	r3, #0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10a      	bne.n	8009a3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	623b      	str	r3, [r7, #32]
}
 8009a3a:	bf00      	nop
 8009a3c:	e7fe      	b.n	8009a3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a3e:	f002 faa3 	bl	800bf88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a42:	f3ef 8211 	mrs	r2, BASEPRI
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	61fa      	str	r2, [r7, #28]
 8009a58:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d302      	bcc.n	8009a70 <xQueueGenericSendFromISR+0xbc>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d12f      	bne.n	8009ad0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	68b9      	ldr	r1, [r7, #8]
 8009a84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a86:	f000 fb64 	bl	800a152 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a92:	d112      	bne.n	8009aba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d016      	beq.n	8009aca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9e:	3324      	adds	r3, #36	; 0x24
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f001 f975 	bl	800ad90 <xTaskRemoveFromEventList>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00e      	beq.n	8009aca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00b      	beq.n	8009aca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	e007      	b.n	8009aca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009aba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009abe:	3301      	adds	r3, #1
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	b25a      	sxtb	r2, r3
 8009ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009aca:	2301      	movs	r3, #1
 8009acc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009ace:	e001      	b.n	8009ad4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ade:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3740      	adds	r7, #64	; 0x40
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b08e      	sub	sp, #56	; 0x38
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10a      	bne.n	8009b14 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	623b      	str	r3, [r7, #32]
}
 8009b10:	bf00      	nop
 8009b12:	e7fe      	b.n	8009b12 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00a      	beq.n	8009b32 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	61fb      	str	r3, [r7, #28]
}
 8009b2e:	bf00      	nop
 8009b30:	e7fe      	b.n	8009b30 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d103      	bne.n	8009b42 <xQueueGiveFromISR+0x58>
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d101      	bne.n	8009b46 <xQueueGiveFromISR+0x5c>
 8009b42:	2301      	movs	r3, #1
 8009b44:	e000      	b.n	8009b48 <xQueueGiveFromISR+0x5e>
 8009b46:	2300      	movs	r3, #0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10a      	bne.n	8009b62 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	61bb      	str	r3, [r7, #24]
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b62:	f002 fa11 	bl	800bf88 <vPortValidateInterruptPriority>
	__asm volatile
 8009b66:	f3ef 8211 	mrs	r2, BASEPRI
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	617a      	str	r2, [r7, #20]
 8009b7c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009b7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d22b      	bcs.n	8009bea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ba4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bac:	d112      	bne.n	8009bd4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d016      	beq.n	8009be4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	3324      	adds	r3, #36	; 0x24
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 f8e8 	bl	800ad90 <xTaskRemoveFromEventList>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00e      	beq.n	8009be4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00b      	beq.n	8009be4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	e007      	b.n	8009be4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bd8:	3301      	adds	r3, #1
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	b25a      	sxtb	r2, r3
 8009bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009be4:	2301      	movs	r3, #1
 8009be6:	637b      	str	r3, [r7, #52]	; 0x34
 8009be8:	e001      	b.n	8009bee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009bea:	2300      	movs	r3, #0
 8009bec:	637b      	str	r3, [r7, #52]	; 0x34
 8009bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f383 8811 	msr	BASEPRI, r3
}
 8009bf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3738      	adds	r7, #56	; 0x38
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08c      	sub	sp, #48	; 0x30
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c10:	2300      	movs	r3, #0
 8009c12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <xQueueReceive+0x30>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	623b      	str	r3, [r7, #32]
}
 8009c30:	bf00      	nop
 8009c32:	e7fe      	b.n	8009c32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d103      	bne.n	8009c42 <xQueueReceive+0x3e>
 8009c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <xQueueReceive+0x42>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e000      	b.n	8009c48 <xQueueReceive+0x44>
 8009c46:	2300      	movs	r3, #0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10a      	bne.n	8009c62 <xQueueReceive+0x5e>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	61fb      	str	r3, [r7, #28]
}
 8009c5e:	bf00      	nop
 8009c60:	e7fe      	b.n	8009c60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c62:	f001 fa57 	bl	800b114 <xTaskGetSchedulerState>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d102      	bne.n	8009c72 <xQueueReceive+0x6e>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <xQueueReceive+0x72>
 8009c72:	2301      	movs	r3, #1
 8009c74:	e000      	b.n	8009c78 <xQueueReceive+0x74>
 8009c76:	2300      	movs	r3, #0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <xQueueReceive+0x8e>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	61bb      	str	r3, [r7, #24]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c92:	f002 f897 	bl	800bdc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d01f      	beq.n	8009ce2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ca2:	68b9      	ldr	r1, [r7, #8]
 8009ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ca6:	f000 fabe 	bl	800a226 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	1e5a      	subs	r2, r3, #1
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00f      	beq.n	8009cda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbc:	3310      	adds	r3, #16
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 f866 	bl	800ad90 <xTaskRemoveFromEventList>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d007      	beq.n	8009cda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009cca:	4b3d      	ldr	r3, [pc, #244]	; (8009dc0 <xQueueReceive+0x1bc>)
 8009ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009cda:	f002 f8a3 	bl	800be24 <vPortExitCritical>
				return pdPASS;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e069      	b.n	8009db6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d103      	bne.n	8009cf0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ce8:	f002 f89c 	bl	800be24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009cec:	2300      	movs	r3, #0
 8009cee:	e062      	b.n	8009db6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d106      	bne.n	8009d04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cf6:	f107 0310 	add.w	r3, r7, #16
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f001 f8ac 	bl	800ae58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d00:	2301      	movs	r3, #1
 8009d02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d04:	f002 f88e 	bl	800be24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d08:	f000 fe18 	bl	800a93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d0c:	f002 f85a 	bl	800bdc4 <vPortEnterCritical>
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d16:	b25b      	sxtb	r3, r3
 8009d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d1c:	d103      	bne.n	8009d26 <xQueueReceive+0x122>
 8009d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d2c:	b25b      	sxtb	r3, r3
 8009d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d32:	d103      	bne.n	8009d3c <xQueueReceive+0x138>
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d3c:	f002 f872 	bl	800be24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d40:	1d3a      	adds	r2, r7, #4
 8009d42:	f107 0310 	add.w	r3, r7, #16
 8009d46:	4611      	mov	r1, r2
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f001 f89b 	bl	800ae84 <xTaskCheckForTimeOut>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d123      	bne.n	8009d9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d56:	f000 fade 	bl	800a316 <prvIsQueueEmpty>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d017      	beq.n	8009d90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	3324      	adds	r3, #36	; 0x24
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	4611      	mov	r1, r2
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 ffc1 	bl	800acf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d70:	f000 fa7f 	bl	800a272 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d74:	f000 fdf0 	bl	800a958 <xTaskResumeAll>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d189      	bne.n	8009c92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009d7e:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <xQueueReceive+0x1bc>)
 8009d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d84:	601a      	str	r2, [r3, #0]
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	e780      	b.n	8009c92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d92:	f000 fa6e 	bl	800a272 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d96:	f000 fddf 	bl	800a958 <xTaskResumeAll>
 8009d9a:	e77a      	b.n	8009c92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d9e:	f000 fa68 	bl	800a272 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009da2:	f000 fdd9 	bl	800a958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009da8:	f000 fab5 	bl	800a316 <prvIsQueueEmpty>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f43f af6f 	beq.w	8009c92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009db4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3730      	adds	r7, #48	; 0x30
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	e000ed04 	.word	0xe000ed04

08009dc4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b08e      	sub	sp, #56	; 0x38
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d10a      	bne.n	8009df6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	623b      	str	r3, [r7, #32]
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	61fb      	str	r3, [r7, #28]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e14:	f001 f97e 	bl	800b114 <xTaskGetSchedulerState>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d102      	bne.n	8009e24 <xQueueSemaphoreTake+0x60>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <xQueueSemaphoreTake+0x64>
 8009e24:	2301      	movs	r3, #1
 8009e26:	e000      	b.n	8009e2a <xQueueSemaphoreTake+0x66>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10a      	bne.n	8009e44 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	61bb      	str	r3, [r7, #24]
}
 8009e40:	bf00      	nop
 8009e42:	e7fe      	b.n	8009e42 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e44:	f001 ffbe 	bl	800bdc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d024      	beq.n	8009e9e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	1e5a      	subs	r2, r3, #1
 8009e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d104      	bne.n	8009e6e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009e64:	f001 facc 	bl	800b400 <pvTaskIncrementMutexHeldCount>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00f      	beq.n	8009e96 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e78:	3310      	adds	r3, #16
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 ff88 	bl	800ad90 <xTaskRemoveFromEventList>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d007      	beq.n	8009e96 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e86:	4b54      	ldr	r3, [pc, #336]	; (8009fd8 <xQueueSemaphoreTake+0x214>)
 8009e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e96:	f001 ffc5 	bl	800be24 <vPortExitCritical>
				return pdPASS;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e097      	b.n	8009fce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d111      	bne.n	8009ec8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00a      	beq.n	8009ec0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	617b      	str	r3, [r7, #20]
}
 8009ebc:	bf00      	nop
 8009ebe:	e7fe      	b.n	8009ebe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009ec0:	f001 ffb0 	bl	800be24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	e082      	b.n	8009fce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d106      	bne.n	8009edc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ece:	f107 030c 	add.w	r3, r7, #12
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 ffc0 	bl	800ae58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009edc:	f001 ffa2 	bl	800be24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ee0:	f000 fd2c 	bl	800a93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ee4:	f001 ff6e 	bl	800bdc4 <vPortEnterCritical>
 8009ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009eee:	b25b      	sxtb	r3, r3
 8009ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ef4:	d103      	bne.n	8009efe <xQueueSemaphoreTake+0x13a>
 8009ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f04:	b25b      	sxtb	r3, r3
 8009f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f0a:	d103      	bne.n	8009f14 <xQueueSemaphoreTake+0x150>
 8009f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f14:	f001 ff86 	bl	800be24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f18:	463a      	mov	r2, r7
 8009f1a:	f107 030c 	add.w	r3, r7, #12
 8009f1e:	4611      	mov	r1, r2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 ffaf 	bl	800ae84 <xTaskCheckForTimeOut>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d132      	bne.n	8009f92 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f2e:	f000 f9f2 	bl	800a316 <prvIsQueueEmpty>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d026      	beq.n	8009f86 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d109      	bne.n	8009f54 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009f40:	f001 ff40 	bl	800bdc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f001 f901 	bl	800b150 <xTaskPriorityInherit>
 8009f4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009f50:	f001 ff68 	bl	800be24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f56:	3324      	adds	r3, #36	; 0x24
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fec7 	bl	800acf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f64:	f000 f985 	bl	800a272 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f68:	f000 fcf6 	bl	800a958 <xTaskResumeAll>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f47f af68 	bne.w	8009e44 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009f74:	4b18      	ldr	r3, [pc, #96]	; (8009fd8 <xQueueSemaphoreTake+0x214>)
 8009f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	e75e      	b.n	8009e44 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f88:	f000 f973 	bl	800a272 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f8c:	f000 fce4 	bl	800a958 <xTaskResumeAll>
 8009f90:	e758      	b.n	8009e44 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009f92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f94:	f000 f96d 	bl	800a272 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f98:	f000 fcde 	bl	800a958 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f9e:	f000 f9ba 	bl	800a316 <prvIsQueueEmpty>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f43f af4d 	beq.w	8009e44 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00d      	beq.n	8009fcc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009fb0:	f001 ff08 	bl	800bdc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fb6:	f000 f8b4 	bl	800a122 <prvGetDisinheritPriorityAfterTimeout>
 8009fba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 f99a 	bl	800b2fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009fc8:	f001 ff2c 	bl	800be24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3738      	adds	r7, #56	; 0x38
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	e000ed04 	.word	0xe000ed04

08009fdc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08e      	sub	sp, #56	; 0x38
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10a      	bne.n	800a008 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	623b      	str	r3, [r7, #32]
}
 800a004:	bf00      	nop
 800a006:	e7fe      	b.n	800a006 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d103      	bne.n	800a016 <xQueueReceiveFromISR+0x3a>
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <xQueueReceiveFromISR+0x3e>
 800a016:	2301      	movs	r3, #1
 800a018:	e000      	b.n	800a01c <xQueueReceiveFromISR+0x40>
 800a01a:	2300      	movs	r3, #0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	61fb      	str	r3, [r7, #28]
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a036:	f001 ffa7 	bl	800bf88 <vPortValidateInterruptPriority>
	__asm volatile
 800a03a:	f3ef 8211 	mrs	r2, BASEPRI
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	61ba      	str	r2, [r7, #24]
 800a050:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a052:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a054:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d02f      	beq.n	800a0c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a070:	f000 f8d9 	bl	800a226 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a076:	1e5a      	subs	r2, r3, #1
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a07c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a084:	d112      	bne.n	800a0ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d016      	beq.n	800a0bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	3310      	adds	r3, #16
 800a092:	4618      	mov	r0, r3
 800a094:	f000 fe7c 	bl	800ad90 <xTaskRemoveFromEventList>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00e      	beq.n	800a0bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00b      	beq.n	800a0bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	e007      	b.n	800a0bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	b25a      	sxtb	r2, r3
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	637b      	str	r3, [r7, #52]	; 0x34
 800a0c0:	e001      	b.n	800a0c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	f383 8811 	msr	BASEPRI, r3
}
 800a0d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3738      	adds	r7, #56	; 0x38
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10a      	bne.n	800a104 <vQueueDelete+0x28>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	60bb      	str	r3, [r7, #8]
}
 800a100:	bf00      	nop
 800a102:	e7fe      	b.n	800a102 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 f95f 	bl	800a3c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a110:	2b00      	cmp	r3, #0
 800a112:	d102      	bne.n	800a11a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f002 f843 	bl	800c1a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a11a:	bf00      	nop
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a122:	b480      	push	{r7}
 800a124:	b085      	sub	sp, #20
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d006      	beq.n	800a140 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e001      	b.n	800a144 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a140:	2300      	movs	r3, #0
 800a142:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a144:	68fb      	ldr	r3, [r7, #12]
	}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b086      	sub	sp, #24
 800a156:	af00      	add	r7, sp, #0
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	60b9      	str	r1, [r7, #8]
 800a15c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a15e:	2300      	movs	r3, #0
 800a160:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a166:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10d      	bne.n	800a18c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d14d      	bne.n	800a214 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f001 f84f 	bl	800b220 <xTaskPriorityDisinherit>
 800a182:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	609a      	str	r2, [r3, #8]
 800a18a:	e043      	b.n	800a214 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d119      	bne.n	800a1c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6858      	ldr	r0, [r3, #4]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19a:	461a      	mov	r2, r3
 800a19c:	68b9      	ldr	r1, [r7, #8]
 800a19e:	f002 fe6b 	bl	800ce78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1aa:	441a      	add	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	685a      	ldr	r2, [r3, #4]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d32b      	bcc.n	800a214 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	605a      	str	r2, [r3, #4]
 800a1c4:	e026      	b.n	800a214 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	68d8      	ldr	r0, [r3, #12]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	68b9      	ldr	r1, [r7, #8]
 800a1d2:	f002 fe51 	bl	800ce78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	68da      	ldr	r2, [r3, #12]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	425b      	negs	r3, r3
 800a1e0:	441a      	add	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	68da      	ldr	r2, [r3, #12]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d207      	bcs.n	800a202 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	689a      	ldr	r2, [r3, #8]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fa:	425b      	negs	r3, r3
 800a1fc:	441a      	add	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b02      	cmp	r3, #2
 800a206:	d105      	bne.n	800a214 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	3b01      	subs	r3, #1
 800a212:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a21c:	697b      	ldr	r3, [r7, #20]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3718      	adds	r7, #24
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a234:	2b00      	cmp	r3, #0
 800a236:	d018      	beq.n	800a26a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	68da      	ldr	r2, [r3, #12]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a240:	441a      	add	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68da      	ldr	r2, [r3, #12]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d303      	bcc.n	800a25a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68d9      	ldr	r1, [r3, #12]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a262:	461a      	mov	r2, r3
 800a264:	6838      	ldr	r0, [r7, #0]
 800a266:	f002 fe07 	bl	800ce78 <memcpy>
	}
}
 800a26a:	bf00      	nop
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b084      	sub	sp, #16
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a27a:	f001 fda3 	bl	800bdc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a284:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a286:	e011      	b.n	800a2ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d012      	beq.n	800a2b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3324      	adds	r3, #36	; 0x24
 800a294:	4618      	mov	r0, r3
 800a296:	f000 fd7b 	bl	800ad90 <xTaskRemoveFromEventList>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d001      	beq.n	800a2a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2a0:	f000 fe52 	bl	800af48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	dce9      	bgt.n	800a288 <prvUnlockQueue+0x16>
 800a2b4:	e000      	b.n	800a2b8 <prvUnlockQueue+0x46>
					break;
 800a2b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	22ff      	movs	r2, #255	; 0xff
 800a2bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a2c0:	f001 fdb0 	bl	800be24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2c4:	f001 fd7e 	bl	800bdc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2d0:	e011      	b.n	800a2f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d012      	beq.n	800a300 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	3310      	adds	r3, #16
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fd56 	bl	800ad90 <xTaskRemoveFromEventList>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2ea:	f000 fe2d 	bl	800af48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2ee:	7bbb      	ldrb	r3, [r7, #14]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	dce9      	bgt.n	800a2d2 <prvUnlockQueue+0x60>
 800a2fe:	e000      	b.n	800a302 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a300:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	22ff      	movs	r2, #255	; 0xff
 800a306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a30a:	f001 fd8b 	bl	800be24 <vPortExitCritical>
}
 800a30e:	bf00      	nop
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a31e:	f001 fd51 	bl	800bdc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a326:	2b00      	cmp	r3, #0
 800a328:	d102      	bne.n	800a330 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a32a:	2301      	movs	r3, #1
 800a32c:	60fb      	str	r3, [r7, #12]
 800a32e:	e001      	b.n	800a334 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a330:	2300      	movs	r3, #0
 800a332:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a334:	f001 fd76 	bl	800be24 <vPortExitCritical>

	return xReturn;
 800a338:	68fb      	ldr	r3, [r7, #12]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b084      	sub	sp, #16
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a34a:	f001 fd3b 	bl	800bdc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a356:	429a      	cmp	r2, r3
 800a358:	d102      	bne.n	800a360 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a35a:	2301      	movs	r3, #1
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	e001      	b.n	800a364 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a360:	2300      	movs	r3, #0
 800a362:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a364:	f001 fd5e 	bl	800be24 <vPortExitCritical>

	return xReturn;
 800a368:	68fb      	ldr	r3, [r7, #12]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
	...

0800a374 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a37e:	2300      	movs	r3, #0
 800a380:	60fb      	str	r3, [r7, #12]
 800a382:	e014      	b.n	800a3ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a384:	4a0f      	ldr	r2, [pc, #60]	; (800a3c4 <vQueueAddToRegistry+0x50>)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10b      	bne.n	800a3a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a390:	490c      	ldr	r1, [pc, #48]	; (800a3c4 <vQueueAddToRegistry+0x50>)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	683a      	ldr	r2, [r7, #0]
 800a396:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a39a:	4a0a      	ldr	r2, [pc, #40]	; (800a3c4 <vQueueAddToRegistry+0x50>)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	00db      	lsls	r3, r3, #3
 800a3a0:	4413      	add	r3, r2
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3a6:	e006      	b.n	800a3b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	60fb      	str	r3, [r7, #12]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b07      	cmp	r3, #7
 800a3b2:	d9e7      	bls.n	800a384 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	200065f4 	.word	0x200065f4

0800a3c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	e016      	b.n	800a404 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a3d6:	4a10      	ldr	r2, [pc, #64]	; (800a418 <vQueueUnregisterQueue+0x50>)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	00db      	lsls	r3, r3, #3
 800a3dc:	4413      	add	r3, r2
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d10b      	bne.n	800a3fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a3e6:	4a0c      	ldr	r2, [pc, #48]	; (800a418 <vQueueUnregisterQueue+0x50>)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a3f0:	4a09      	ldr	r2, [pc, #36]	; (800a418 <vQueueUnregisterQueue+0x50>)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	4413      	add	r3, r2
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	605a      	str	r2, [r3, #4]
				break;
 800a3fc:	e006      	b.n	800a40c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3301      	adds	r3, #1
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b07      	cmp	r3, #7
 800a408:	d9e5      	bls.n	800a3d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a40a:	bf00      	nop
 800a40c:	bf00      	nop
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	200065f4 	.word	0x200065f4

0800a41c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a42c:	f001 fcca 	bl	800bdc4 <vPortEnterCritical>
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a436:	b25b      	sxtb	r3, r3
 800a438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a43c:	d103      	bne.n	800a446 <vQueueWaitForMessageRestricted+0x2a>
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a44c:	b25b      	sxtb	r3, r3
 800a44e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a452:	d103      	bne.n	800a45c <vQueueWaitForMessageRestricted+0x40>
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a45c:	f001 fce2 	bl	800be24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a464:	2b00      	cmp	r3, #0
 800a466:	d106      	bne.n	800a476 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	3324      	adds	r3, #36	; 0x24
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	68b9      	ldr	r1, [r7, #8]
 800a470:	4618      	mov	r0, r3
 800a472:	f000 fc61 	bl	800ad38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a476:	6978      	ldr	r0, [r7, #20]
 800a478:	f7ff fefb 	bl	800a272 <prvUnlockQueue>
	}
 800a47c:	bf00      	nop
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08e      	sub	sp, #56	; 0x38
 800a488:	af04      	add	r7, sp, #16
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10a      	bne.n	800a4ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800a498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	623b      	str	r3, [r7, #32]
}
 800a4aa:	bf00      	nop
 800a4ac:	e7fe      	b.n	800a4ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <xTaskCreateStatic+0x46>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	61fb      	str	r3, [r7, #28]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a4ca:	23bc      	movs	r3, #188	; 0xbc
 800a4cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	2bbc      	cmp	r3, #188	; 0xbc
 800a4d2:	d00a      	beq.n	800a4ea <xTaskCreateStatic+0x66>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	61bb      	str	r3, [r7, #24]
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d01e      	beq.n	800a530 <xTaskCreateStatic+0xac>
 800a4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d01b      	beq.n	800a530 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a500:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	2202      	movs	r2, #2
 800a506:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a50a:	2300      	movs	r3, #0
 800a50c:	9303      	str	r3, [sp, #12]
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	9302      	str	r3, [sp, #8]
 800a512:	f107 0314 	add.w	r3, r7, #20
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f000 f850 	bl	800a5c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a52a:	f000 f8f3 	bl	800a714 <prvAddNewTaskToReadyList>
 800a52e:	e001      	b.n	800a534 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a530:	2300      	movs	r3, #0
 800a532:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a534:	697b      	ldr	r3, [r7, #20]
	}
 800a536:	4618      	mov	r0, r3
 800a538:	3728      	adds	r7, #40	; 0x28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b08c      	sub	sp, #48	; 0x30
 800a542:	af04      	add	r7, sp, #16
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	60b9      	str	r1, [r7, #8]
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	4613      	mov	r3, r2
 800a54c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4618      	mov	r0, r3
 800a554:	f001 fd58 	bl	800c008 <pvPortMalloc>
 800a558:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00e      	beq.n	800a57e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a560:	20bc      	movs	r0, #188	; 0xbc
 800a562:	f001 fd51 	bl	800c008 <pvPortMalloc>
 800a566:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d003      	beq.n	800a576 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	631a      	str	r2, [r3, #48]	; 0x30
 800a574:	e005      	b.n	800a582 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a576:	6978      	ldr	r0, [r7, #20]
 800a578:	f001 fe12 	bl	800c1a0 <vPortFree>
 800a57c:	e001      	b.n	800a582 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d017      	beq.n	800a5b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a590:	88fa      	ldrh	r2, [r7, #6]
 800a592:	2300      	movs	r3, #0
 800a594:	9303      	str	r3, [sp, #12]
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	9302      	str	r3, [sp, #8]
 800a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	68b9      	ldr	r1, [r7, #8]
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 f80e 	bl	800a5c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5ac:	69f8      	ldr	r0, [r7, #28]
 800a5ae:	f000 f8b1 	bl	800a714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	e002      	b.n	800a5be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a5b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a5be:	69bb      	ldr	r3, [r7, #24]
	}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3720      	adds	r7, #32
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b088      	sub	sp, #32
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	461a      	mov	r2, r3
 800a5e0:	21a5      	movs	r1, #165	; 0xa5
 800a5e2:	f002 fc57 	bl	800ce94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	f023 0307 	bic.w	r3, r3, #7
 800a5fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	f003 0307 	and.w	r3, r3, #7
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00a      	beq.n	800a620 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	617b      	str	r3, [r7, #20]
}
 800a61c:	bf00      	nop
 800a61e:	e7fe      	b.n	800a61e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d01f      	beq.n	800a666 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a626:	2300      	movs	r3, #0
 800a628:	61fb      	str	r3, [r7, #28]
 800a62a:	e012      	b.n	800a652 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	4413      	add	r3, r2
 800a632:	7819      	ldrb	r1, [r3, #0]
 800a634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	4413      	add	r3, r2
 800a63a:	3334      	adds	r3, #52	; 0x34
 800a63c:	460a      	mov	r2, r1
 800a63e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	4413      	add	r3, r2
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d006      	beq.n	800a65a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	3301      	adds	r3, #1
 800a650:	61fb      	str	r3, [r7, #28]
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	2b0f      	cmp	r3, #15
 800a656:	d9e9      	bls.n	800a62c <prvInitialiseNewTask+0x64>
 800a658:	e000      	b.n	800a65c <prvInitialiseNewTask+0x94>
			{
				break;
 800a65a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a664:	e003      	b.n	800a66e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	2b37      	cmp	r3, #55	; 0x37
 800a672:	d901      	bls.n	800a678 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a674:	2337      	movs	r3, #55	; 0x37
 800a676:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a67c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a682:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	2200      	movs	r2, #0
 800a688:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	3304      	adds	r3, #4
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe fe56 	bl	8009340 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	3318      	adds	r3, #24
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fe fe51 	bl	8009340 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	3354      	adds	r3, #84	; 0x54
 800a6c8:	2260      	movs	r2, #96	; 0x60
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f002 fbe1 	bl	800ce94 <memset>
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d4:	4a0c      	ldr	r2, [pc, #48]	; (800a708 <prvInitialiseNewTask+0x140>)
 800a6d6:	659a      	str	r2, [r3, #88]	; 0x58
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6da:	4a0c      	ldr	r2, [pc, #48]	; (800a70c <prvInitialiseNewTask+0x144>)
 800a6dc:	65da      	str	r2, [r3, #92]	; 0x5c
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	4a0b      	ldr	r2, [pc, #44]	; (800a710 <prvInitialiseNewTask+0x148>)
 800a6e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	68f9      	ldr	r1, [r7, #12]
 800a6e8:	69b8      	ldr	r0, [r7, #24]
 800a6ea:	f001 fa3f 	bl	800bb6c <pxPortInitialiseStack>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d002      	beq.n	800a700 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a700:	bf00      	nop
 800a702:	3720      	adds	r7, #32
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	0800d25c 	.word	0x0800d25c
 800a70c:	0800d27c 	.word	0x0800d27c
 800a710:	0800d23c 	.word	0x0800d23c

0800a714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a71c:	f001 fb52 	bl	800bdc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a720:	4b2d      	ldr	r3, [pc, #180]	; (800a7d8 <prvAddNewTaskToReadyList+0xc4>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3301      	adds	r3, #1
 800a726:	4a2c      	ldr	r2, [pc, #176]	; (800a7d8 <prvAddNewTaskToReadyList+0xc4>)
 800a728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a72a:	4b2c      	ldr	r3, [pc, #176]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d109      	bne.n	800a746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a732:	4a2a      	ldr	r2, [pc, #168]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a738:	4b27      	ldr	r3, [pc, #156]	; (800a7d8 <prvAddNewTaskToReadyList+0xc4>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d110      	bne.n	800a762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a740:	f000 fc26 	bl	800af90 <prvInitialiseTaskLists>
 800a744:	e00d      	b.n	800a762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a746:	4b26      	ldr	r3, [pc, #152]	; (800a7e0 <prvAddNewTaskToReadyList+0xcc>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d109      	bne.n	800a762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a74e:	4b23      	ldr	r3, [pc, #140]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	429a      	cmp	r2, r3
 800a75a:	d802      	bhi.n	800a762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a75c:	4a1f      	ldr	r2, [pc, #124]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a762:	4b20      	ldr	r3, [pc, #128]	; (800a7e4 <prvAddNewTaskToReadyList+0xd0>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3301      	adds	r3, #1
 800a768:	4a1e      	ldr	r2, [pc, #120]	; (800a7e4 <prvAddNewTaskToReadyList+0xd0>)
 800a76a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a76c:	4b1d      	ldr	r3, [pc, #116]	; (800a7e4 <prvAddNewTaskToReadyList+0xd0>)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a778:	4b1b      	ldr	r3, [pc, #108]	; (800a7e8 <prvAddNewTaskToReadyList+0xd4>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d903      	bls.n	800a788 <prvAddNewTaskToReadyList+0x74>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	4a18      	ldr	r2, [pc, #96]	; (800a7e8 <prvAddNewTaskToReadyList+0xd4>)
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4a15      	ldr	r2, [pc, #84]	; (800a7ec <prvAddNewTaskToReadyList+0xd8>)
 800a796:	441a      	add	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3304      	adds	r3, #4
 800a79c:	4619      	mov	r1, r3
 800a79e:	4610      	mov	r0, r2
 800a7a0:	f7fe fddb 	bl	800935a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a7a4:	f001 fb3e 	bl	800be24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a7a8:	4b0d      	ldr	r3, [pc, #52]	; (800a7e0 <prvAddNewTaskToReadyList+0xcc>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00e      	beq.n	800a7ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a7b0:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d207      	bcs.n	800a7ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a7be:	4b0c      	ldr	r3, [pc, #48]	; (800a7f0 <prvAddNewTaskToReadyList+0xdc>)
 800a7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7ce:	bf00      	nop
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000e58 	.word	0x20000e58
 800a7dc:	20000984 	.word	0x20000984
 800a7e0:	20000e64 	.word	0x20000e64
 800a7e4:	20000e74 	.word	0x20000e74
 800a7e8:	20000e60 	.word	0x20000e60
 800a7ec:	20000988 	.word	0x20000988
 800a7f0:	e000ed04 	.word	0xe000ed04

0800a7f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d017      	beq.n	800a836 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a806:	4b13      	ldr	r3, [pc, #76]	; (800a854 <vTaskDelay+0x60>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <vTaskDelay+0x30>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	60bb      	str	r3, [r7, #8]
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a824:	f000 f88a 	bl	800a93c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a828:	2100      	movs	r1, #0
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fdfc 	bl	800b428 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a830:	f000 f892 	bl	800a958 <xTaskResumeAll>
 800a834:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d107      	bne.n	800a84c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a83c:	4b06      	ldr	r3, [pc, #24]	; (800a858 <vTaskDelay+0x64>)
 800a83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a84c:	bf00      	nop
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	20000e80 	.word	0x20000e80
 800a858:	e000ed04 	.word	0xe000ed04

0800a85c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	; 0x28
 800a860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a862:	2300      	movs	r3, #0
 800a864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a866:	2300      	movs	r3, #0
 800a868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a86a:	463a      	mov	r2, r7
 800a86c:	1d39      	adds	r1, r7, #4
 800a86e:	f107 0308 	add.w	r3, r7, #8
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe fd10 	bl	8009298 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	9202      	str	r2, [sp, #8]
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	2300      	movs	r3, #0
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	2300      	movs	r3, #0
 800a888:	460a      	mov	r2, r1
 800a88a:	4924      	ldr	r1, [pc, #144]	; (800a91c <vTaskStartScheduler+0xc0>)
 800a88c:	4824      	ldr	r0, [pc, #144]	; (800a920 <vTaskStartScheduler+0xc4>)
 800a88e:	f7ff fdf9 	bl	800a484 <xTaskCreateStatic>
 800a892:	4603      	mov	r3, r0
 800a894:	4a23      	ldr	r2, [pc, #140]	; (800a924 <vTaskStartScheduler+0xc8>)
 800a896:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a898:	4b22      	ldr	r3, [pc, #136]	; (800a924 <vTaskStartScheduler+0xc8>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	e001      	b.n	800a8aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d102      	bne.n	800a8b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a8b0:	f000 fe0e 	bl	800b4d0 <xTimerCreateTimerTask>
 800a8b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d11b      	bne.n	800a8f4 <vTaskStartScheduler+0x98>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	613b      	str	r3, [r7, #16]
}
 800a8ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8d0:	4b15      	ldr	r3, [pc, #84]	; (800a928 <vTaskStartScheduler+0xcc>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3354      	adds	r3, #84	; 0x54
 800a8d6:	4a15      	ldr	r2, [pc, #84]	; (800a92c <vTaskStartScheduler+0xd0>)
 800a8d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a8da:	4b15      	ldr	r3, [pc, #84]	; (800a930 <vTaskStartScheduler+0xd4>)
 800a8dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8e2:	4b14      	ldr	r3, [pc, #80]	; (800a934 <vTaskStartScheduler+0xd8>)
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a8e8:	4b13      	ldr	r3, [pc, #76]	; (800a938 <vTaskStartScheduler+0xdc>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8ee:	f001 f9c7 	bl	800bc80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8f2:	e00e      	b.n	800a912 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8fa:	d10a      	bne.n	800a912 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	60fb      	str	r3, [r7, #12]
}
 800a90e:	bf00      	nop
 800a910:	e7fe      	b.n	800a910 <vTaskStartScheduler+0xb4>
}
 800a912:	bf00      	nop
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	0800d0c4 	.word	0x0800d0c4
 800a920:	0800af61 	.word	0x0800af61
 800a924:	20000e7c 	.word	0x20000e7c
 800a928:	20000984 	.word	0x20000984
 800a92c:	20000184 	.word	0x20000184
 800a930:	20000e78 	.word	0x20000e78
 800a934:	20000e64 	.word	0x20000e64
 800a938:	20000e5c 	.word	0x20000e5c

0800a93c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a940:	4b04      	ldr	r3, [pc, #16]	; (800a954 <vTaskSuspendAll+0x18>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	4a03      	ldr	r2, [pc, #12]	; (800a954 <vTaskSuspendAll+0x18>)
 800a948:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a94a:	bf00      	nop
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	20000e80 	.word	0x20000e80

0800a958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a95e:	2300      	movs	r3, #0
 800a960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a962:	2300      	movs	r3, #0
 800a964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a966:	4b42      	ldr	r3, [pc, #264]	; (800aa70 <xTaskResumeAll+0x118>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10a      	bne.n	800a984 <xTaskResumeAll+0x2c>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	603b      	str	r3, [r7, #0]
}
 800a980:	bf00      	nop
 800a982:	e7fe      	b.n	800a982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a984:	f001 fa1e 	bl	800bdc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a988:	4b39      	ldr	r3, [pc, #228]	; (800aa70 <xTaskResumeAll+0x118>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3b01      	subs	r3, #1
 800a98e:	4a38      	ldr	r2, [pc, #224]	; (800aa70 <xTaskResumeAll+0x118>)
 800a990:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a992:	4b37      	ldr	r3, [pc, #220]	; (800aa70 <xTaskResumeAll+0x118>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d162      	bne.n	800aa60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a99a:	4b36      	ldr	r3, [pc, #216]	; (800aa74 <xTaskResumeAll+0x11c>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d05e      	beq.n	800aa60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9a2:	e02f      	b.n	800aa04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a4:	4b34      	ldr	r3, [pc, #208]	; (800aa78 <xTaskResumeAll+0x120>)
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3318      	adds	r3, #24
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe fd2f 	bl	8009414 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fe fd2a 	bl	8009414 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c4:	4b2d      	ldr	r3, [pc, #180]	; (800aa7c <xTaskResumeAll+0x124>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d903      	bls.n	800a9d4 <xTaskResumeAll+0x7c>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d0:	4a2a      	ldr	r2, [pc, #168]	; (800aa7c <xTaskResumeAll+0x124>)
 800a9d2:	6013      	str	r3, [r2, #0]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d8:	4613      	mov	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4a27      	ldr	r2, [pc, #156]	; (800aa80 <xTaskResumeAll+0x128>)
 800a9e2:	441a      	add	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f7fe fcb5 	bl	800935a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f4:	4b23      	ldr	r3, [pc, #140]	; (800aa84 <xTaskResumeAll+0x12c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d302      	bcc.n	800aa04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a9fe:	4b22      	ldr	r3, [pc, #136]	; (800aa88 <xTaskResumeAll+0x130>)
 800aa00:	2201      	movs	r2, #1
 800aa02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa04:	4b1c      	ldr	r3, [pc, #112]	; (800aa78 <xTaskResumeAll+0x120>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1cb      	bne.n	800a9a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa12:	f000 fb5f 	bl	800b0d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa16:	4b1d      	ldr	r3, [pc, #116]	; (800aa8c <xTaskResumeAll+0x134>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d010      	beq.n	800aa44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa22:	f000 f847 	bl	800aab4 <xTaskIncrementTick>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aa2c:	4b16      	ldr	r3, [pc, #88]	; (800aa88 <xTaskResumeAll+0x130>)
 800aa2e:	2201      	movs	r2, #1
 800aa30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1f1      	bne.n	800aa22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aa3e:	4b13      	ldr	r3, [pc, #76]	; (800aa8c <xTaskResumeAll+0x134>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa44:	4b10      	ldr	r3, [pc, #64]	; (800aa88 <xTaskResumeAll+0x130>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d009      	beq.n	800aa60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa50:	4b0f      	ldr	r3, [pc, #60]	; (800aa90 <xTaskResumeAll+0x138>)
 800aa52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa56:	601a      	str	r2, [r3, #0]
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa60:	f001 f9e0 	bl	800be24 <vPortExitCritical>

	return xAlreadyYielded;
 800aa64:	68bb      	ldr	r3, [r7, #8]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	20000e80 	.word	0x20000e80
 800aa74:	20000e58 	.word	0x20000e58
 800aa78:	20000e18 	.word	0x20000e18
 800aa7c:	20000e60 	.word	0x20000e60
 800aa80:	20000988 	.word	0x20000988
 800aa84:	20000984 	.word	0x20000984
 800aa88:	20000e6c 	.word	0x20000e6c
 800aa8c:	20000e68 	.word	0x20000e68
 800aa90:	e000ed04 	.word	0xe000ed04

0800aa94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa9a:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <xTaskGetTickCount+0x1c>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aaa0:	687b      	ldr	r3, [r7, #4]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	20000e5c 	.word	0x20000e5c

0800aab4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aaba:	2300      	movs	r3, #0
 800aabc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aabe:	4b4f      	ldr	r3, [pc, #316]	; (800abfc <xTaskIncrementTick+0x148>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f040 808f 	bne.w	800abe6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aac8:	4b4d      	ldr	r3, [pc, #308]	; (800ac00 <xTaskIncrementTick+0x14c>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3301      	adds	r3, #1
 800aace:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aad0:	4a4b      	ldr	r2, [pc, #300]	; (800ac00 <xTaskIncrementTick+0x14c>)
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d120      	bne.n	800ab1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aadc:	4b49      	ldr	r3, [pc, #292]	; (800ac04 <xTaskIncrementTick+0x150>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00a      	beq.n	800aafc <xTaskIncrementTick+0x48>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	603b      	str	r3, [r7, #0]
}
 800aaf8:	bf00      	nop
 800aafa:	e7fe      	b.n	800aafa <xTaskIncrementTick+0x46>
 800aafc:	4b41      	ldr	r3, [pc, #260]	; (800ac04 <xTaskIncrementTick+0x150>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	60fb      	str	r3, [r7, #12]
 800ab02:	4b41      	ldr	r3, [pc, #260]	; (800ac08 <xTaskIncrementTick+0x154>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a3f      	ldr	r2, [pc, #252]	; (800ac04 <xTaskIncrementTick+0x150>)
 800ab08:	6013      	str	r3, [r2, #0]
 800ab0a:	4a3f      	ldr	r2, [pc, #252]	; (800ac08 <xTaskIncrementTick+0x154>)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	4b3e      	ldr	r3, [pc, #248]	; (800ac0c <xTaskIncrementTick+0x158>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3301      	adds	r3, #1
 800ab16:	4a3d      	ldr	r2, [pc, #244]	; (800ac0c <xTaskIncrementTick+0x158>)
 800ab18:	6013      	str	r3, [r2, #0]
 800ab1a:	f000 fadb 	bl	800b0d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab1e:	4b3c      	ldr	r3, [pc, #240]	; (800ac10 <xTaskIncrementTick+0x15c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d349      	bcc.n	800abbc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab28:	4b36      	ldr	r3, [pc, #216]	; (800ac04 <xTaskIncrementTick+0x150>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d104      	bne.n	800ab3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab32:	4b37      	ldr	r3, [pc, #220]	; (800ac10 <xTaskIncrementTick+0x15c>)
 800ab34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab38:	601a      	str	r2, [r3, #0]
					break;
 800ab3a:	e03f      	b.n	800abbc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab3c:	4b31      	ldr	r3, [pc, #196]	; (800ac04 <xTaskIncrementTick+0x150>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d203      	bcs.n	800ab5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab54:	4a2e      	ldr	r2, [pc, #184]	; (800ac10 <xTaskIncrementTick+0x15c>)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab5a:	e02f      	b.n	800abbc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe fc57 	bl	8009414 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d004      	beq.n	800ab78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	3318      	adds	r3, #24
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fe fc4e 	bl	8009414 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7c:	4b25      	ldr	r3, [pc, #148]	; (800ac14 <xTaskIncrementTick+0x160>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d903      	bls.n	800ab8c <xTaskIncrementTick+0xd8>
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab88:	4a22      	ldr	r2, [pc, #136]	; (800ac14 <xTaskIncrementTick+0x160>)
 800ab8a:	6013      	str	r3, [r2, #0]
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab90:	4613      	mov	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4413      	add	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4a1f      	ldr	r2, [pc, #124]	; (800ac18 <xTaskIncrementTick+0x164>)
 800ab9a:	441a      	add	r2, r3
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	3304      	adds	r3, #4
 800aba0:	4619      	mov	r1, r3
 800aba2:	4610      	mov	r0, r2
 800aba4:	f7fe fbd9 	bl	800935a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abac:	4b1b      	ldr	r3, [pc, #108]	; (800ac1c <xTaskIncrementTick+0x168>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d3b8      	bcc.n	800ab28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800abb6:	2301      	movs	r3, #1
 800abb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abba:	e7b5      	b.n	800ab28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abbc:	4b17      	ldr	r3, [pc, #92]	; (800ac1c <xTaskIncrementTick+0x168>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc2:	4915      	ldr	r1, [pc, #84]	; (800ac18 <xTaskIncrementTick+0x164>)
 800abc4:	4613      	mov	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	440b      	add	r3, r1
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d901      	bls.n	800abd8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800abd4:	2301      	movs	r3, #1
 800abd6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800abd8:	4b11      	ldr	r3, [pc, #68]	; (800ac20 <xTaskIncrementTick+0x16c>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d007      	beq.n	800abf0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800abe0:	2301      	movs	r3, #1
 800abe2:	617b      	str	r3, [r7, #20]
 800abe4:	e004      	b.n	800abf0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800abe6:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <xTaskIncrementTick+0x170>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3301      	adds	r3, #1
 800abec:	4a0d      	ldr	r2, [pc, #52]	; (800ac24 <xTaskIncrementTick+0x170>)
 800abee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800abf0:	697b      	ldr	r3, [r7, #20]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	20000e80 	.word	0x20000e80
 800ac00:	20000e5c 	.word	0x20000e5c
 800ac04:	20000e10 	.word	0x20000e10
 800ac08:	20000e14 	.word	0x20000e14
 800ac0c:	20000e70 	.word	0x20000e70
 800ac10:	20000e78 	.word	0x20000e78
 800ac14:	20000e60 	.word	0x20000e60
 800ac18:	20000988 	.word	0x20000988
 800ac1c:	20000984 	.word	0x20000984
 800ac20:	20000e6c 	.word	0x20000e6c
 800ac24:	20000e68 	.word	0x20000e68

0800ac28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac2e:	4b2a      	ldr	r3, [pc, #168]	; (800acd8 <vTaskSwitchContext+0xb0>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac36:	4b29      	ldr	r3, [pc, #164]	; (800acdc <vTaskSwitchContext+0xb4>)
 800ac38:	2201      	movs	r2, #1
 800ac3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac3c:	e046      	b.n	800accc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ac3e:	4b27      	ldr	r3, [pc, #156]	; (800acdc <vTaskSwitchContext+0xb4>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac44:	4b26      	ldr	r3, [pc, #152]	; (800ace0 <vTaskSwitchContext+0xb8>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	e010      	b.n	800ac6e <vTaskSwitchContext+0x46>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10a      	bne.n	800ac68 <vTaskSwitchContext+0x40>
	__asm volatile
 800ac52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac56:	f383 8811 	msr	BASEPRI, r3
 800ac5a:	f3bf 8f6f 	isb	sy
 800ac5e:	f3bf 8f4f 	dsb	sy
 800ac62:	607b      	str	r3, [r7, #4]
}
 800ac64:	bf00      	nop
 800ac66:	e7fe      	b.n	800ac66 <vTaskSwitchContext+0x3e>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	60fb      	str	r3, [r7, #12]
 800ac6e:	491d      	ldr	r1, [pc, #116]	; (800ace4 <vTaskSwitchContext+0xbc>)
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d0e4      	beq.n	800ac4c <vTaskSwitchContext+0x24>
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4a15      	ldr	r2, [pc, #84]	; (800ace4 <vTaskSwitchContext+0xbc>)
 800ac8e:	4413      	add	r3, r2
 800ac90:	60bb      	str	r3, [r7, #8]
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	685a      	ldr	r2, [r3, #4]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	605a      	str	r2, [r3, #4]
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	3308      	adds	r3, #8
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d104      	bne.n	800acb2 <vTaskSwitchContext+0x8a>
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	605a      	str	r2, [r3, #4]
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	4a0b      	ldr	r2, [pc, #44]	; (800ace8 <vTaskSwitchContext+0xc0>)
 800acba:	6013      	str	r3, [r2, #0]
 800acbc:	4a08      	ldr	r2, [pc, #32]	; (800ace0 <vTaskSwitchContext+0xb8>)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acc2:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <vTaskSwitchContext+0xc0>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3354      	adds	r3, #84	; 0x54
 800acc8:	4a08      	ldr	r2, [pc, #32]	; (800acec <vTaskSwitchContext+0xc4>)
 800acca:	6013      	str	r3, [r2, #0]
}
 800accc:	bf00      	nop
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	20000e80 	.word	0x20000e80
 800acdc:	20000e6c 	.word	0x20000e6c
 800ace0:	20000e60 	.word	0x20000e60
 800ace4:	20000988 	.word	0x20000988
 800ace8:	20000984 	.word	0x20000984
 800acec:	20000184 	.word	0x20000184

0800acf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10a      	bne.n	800ad16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	60fb      	str	r3, [r7, #12]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad16:	4b07      	ldr	r3, [pc, #28]	; (800ad34 <vTaskPlaceOnEventList+0x44>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3318      	adds	r3, #24
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7fe fb3f 	bl	80093a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad24:	2101      	movs	r1, #1
 800ad26:	6838      	ldr	r0, [r7, #0]
 800ad28:	f000 fb7e 	bl	800b428 <prvAddCurrentTaskToDelayedList>
}
 800ad2c:	bf00      	nop
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	20000984 	.word	0x20000984

0800ad38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10a      	bne.n	800ad60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	617b      	str	r3, [r7, #20]
}
 800ad5c:	bf00      	nop
 800ad5e:	e7fe      	b.n	800ad5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad60:	4b0a      	ldr	r3, [pc, #40]	; (800ad8c <vTaskPlaceOnEventListRestricted+0x54>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3318      	adds	r3, #24
 800ad66:	4619      	mov	r1, r3
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7fe faf6 	bl	800935a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad7a:	6879      	ldr	r1, [r7, #4]
 800ad7c:	68b8      	ldr	r0, [r7, #8]
 800ad7e:	f000 fb53 	bl	800b428 <prvAddCurrentTaskToDelayedList>
	}
 800ad82:	bf00      	nop
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20000984 	.word	0x20000984

0800ad90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10a      	bne.n	800adbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	60fb      	str	r3, [r7, #12]
}
 800adb8:	bf00      	nop
 800adba:	e7fe      	b.n	800adba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	3318      	adds	r3, #24
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fe fb27 	bl	8009414 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adc6:	4b1e      	ldr	r3, [pc, #120]	; (800ae40 <xTaskRemoveFromEventList+0xb0>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d11d      	bne.n	800ae0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	3304      	adds	r3, #4
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe fb1e 	bl	8009414 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800addc:	4b19      	ldr	r3, [pc, #100]	; (800ae44 <xTaskRemoveFromEventList+0xb4>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d903      	bls.n	800adec <xTaskRemoveFromEventList+0x5c>
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade8:	4a16      	ldr	r2, [pc, #88]	; (800ae44 <xTaskRemoveFromEventList+0xb4>)
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf0:	4613      	mov	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4a13      	ldr	r2, [pc, #76]	; (800ae48 <xTaskRemoveFromEventList+0xb8>)
 800adfa:	441a      	add	r2, r3
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	3304      	adds	r3, #4
 800ae00:	4619      	mov	r1, r3
 800ae02:	4610      	mov	r0, r2
 800ae04:	f7fe faa9 	bl	800935a <vListInsertEnd>
 800ae08:	e005      	b.n	800ae16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	3318      	adds	r3, #24
 800ae0e:	4619      	mov	r1, r3
 800ae10:	480e      	ldr	r0, [pc, #56]	; (800ae4c <xTaskRemoveFromEventList+0xbc>)
 800ae12:	f7fe faa2 	bl	800935a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1a:	4b0d      	ldr	r3, [pc, #52]	; (800ae50 <xTaskRemoveFromEventList+0xc0>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d905      	bls.n	800ae30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae24:	2301      	movs	r3, #1
 800ae26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae28:	4b0a      	ldr	r3, [pc, #40]	; (800ae54 <xTaskRemoveFromEventList+0xc4>)
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	e001      	b.n	800ae34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ae30:	2300      	movs	r3, #0
 800ae32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae34:	697b      	ldr	r3, [r7, #20]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3718      	adds	r7, #24
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20000e80 	.word	0x20000e80
 800ae44:	20000e60 	.word	0x20000e60
 800ae48:	20000988 	.word	0x20000988
 800ae4c:	20000e18 	.word	0x20000e18
 800ae50:	20000984 	.word	0x20000984
 800ae54:	20000e6c 	.word	0x20000e6c

0800ae58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae60:	4b06      	ldr	r3, [pc, #24]	; (800ae7c <vTaskInternalSetTimeOutState+0x24>)
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae68:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <vTaskInternalSetTimeOutState+0x28>)
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	605a      	str	r2, [r3, #4]
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	20000e70 	.word	0x20000e70
 800ae80:	20000e5c 	.word	0x20000e5c

0800ae84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10a      	bne.n	800aeaa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	613b      	str	r3, [r7, #16]
}
 800aea6:	bf00      	nop
 800aea8:	e7fe      	b.n	800aea8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10a      	bne.n	800aec6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	60fb      	str	r3, [r7, #12]
}
 800aec2:	bf00      	nop
 800aec4:	e7fe      	b.n	800aec4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aec6:	f000 ff7d 	bl	800bdc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aeca:	4b1d      	ldr	r3, [pc, #116]	; (800af40 <xTaskCheckForTimeOut+0xbc>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aee2:	d102      	bne.n	800aeea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	61fb      	str	r3, [r7, #28]
 800aee8:	e023      	b.n	800af32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	4b15      	ldr	r3, [pc, #84]	; (800af44 <xTaskCheckForTimeOut+0xc0>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d007      	beq.n	800af06 <xTaskCheckForTimeOut+0x82>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	69ba      	ldr	r2, [r7, #24]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d302      	bcc.n	800af06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af00:	2301      	movs	r3, #1
 800af02:	61fb      	str	r3, [r7, #28]
 800af04:	e015      	b.n	800af32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d20b      	bcs.n	800af28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	1ad2      	subs	r2, r2, r3
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff ff9b 	bl	800ae58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af22:	2300      	movs	r3, #0
 800af24:	61fb      	str	r3, [r7, #28]
 800af26:	e004      	b.n	800af32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af2e:	2301      	movs	r3, #1
 800af30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af32:	f000 ff77 	bl	800be24 <vPortExitCritical>

	return xReturn;
 800af36:	69fb      	ldr	r3, [r7, #28]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3720      	adds	r7, #32
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	20000e5c 	.word	0x20000e5c
 800af44:	20000e70 	.word	0x20000e70

0800af48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af48:	b480      	push	{r7}
 800af4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af4c:	4b03      	ldr	r3, [pc, #12]	; (800af5c <vTaskMissedYield+0x14>)
 800af4e:	2201      	movs	r2, #1
 800af50:	601a      	str	r2, [r3, #0]
}
 800af52:	bf00      	nop
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	20000e6c 	.word	0x20000e6c

0800af60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af68:	f000 f852 	bl	800b010 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af6c:	4b06      	ldr	r3, [pc, #24]	; (800af88 <prvIdleTask+0x28>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d9f9      	bls.n	800af68 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af74:	4b05      	ldr	r3, [pc, #20]	; (800af8c <prvIdleTask+0x2c>)
 800af76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af84:	e7f0      	b.n	800af68 <prvIdleTask+0x8>
 800af86:	bf00      	nop
 800af88:	20000988 	.word	0x20000988
 800af8c:	e000ed04 	.word	0xe000ed04

0800af90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af96:	2300      	movs	r3, #0
 800af98:	607b      	str	r3, [r7, #4]
 800af9a:	e00c      	b.n	800afb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	4613      	mov	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4a12      	ldr	r2, [pc, #72]	; (800aff0 <prvInitialiseTaskLists+0x60>)
 800afa8:	4413      	add	r3, r2
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fe f9a8 	bl	8009300 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	3301      	adds	r3, #1
 800afb4:	607b      	str	r3, [r7, #4]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2b37      	cmp	r3, #55	; 0x37
 800afba:	d9ef      	bls.n	800af9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afbc:	480d      	ldr	r0, [pc, #52]	; (800aff4 <prvInitialiseTaskLists+0x64>)
 800afbe:	f7fe f99f 	bl	8009300 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afc2:	480d      	ldr	r0, [pc, #52]	; (800aff8 <prvInitialiseTaskLists+0x68>)
 800afc4:	f7fe f99c 	bl	8009300 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afc8:	480c      	ldr	r0, [pc, #48]	; (800affc <prvInitialiseTaskLists+0x6c>)
 800afca:	f7fe f999 	bl	8009300 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afce:	480c      	ldr	r0, [pc, #48]	; (800b000 <prvInitialiseTaskLists+0x70>)
 800afd0:	f7fe f996 	bl	8009300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afd4:	480b      	ldr	r0, [pc, #44]	; (800b004 <prvInitialiseTaskLists+0x74>)
 800afd6:	f7fe f993 	bl	8009300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afda:	4b0b      	ldr	r3, [pc, #44]	; (800b008 <prvInitialiseTaskLists+0x78>)
 800afdc:	4a05      	ldr	r2, [pc, #20]	; (800aff4 <prvInitialiseTaskLists+0x64>)
 800afde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afe0:	4b0a      	ldr	r3, [pc, #40]	; (800b00c <prvInitialiseTaskLists+0x7c>)
 800afe2:	4a05      	ldr	r2, [pc, #20]	; (800aff8 <prvInitialiseTaskLists+0x68>)
 800afe4:	601a      	str	r2, [r3, #0]
}
 800afe6:	bf00      	nop
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20000988 	.word	0x20000988
 800aff4:	20000de8 	.word	0x20000de8
 800aff8:	20000dfc 	.word	0x20000dfc
 800affc:	20000e18 	.word	0x20000e18
 800b000:	20000e2c 	.word	0x20000e2c
 800b004:	20000e44 	.word	0x20000e44
 800b008:	20000e10 	.word	0x20000e10
 800b00c:	20000e14 	.word	0x20000e14

0800b010 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b016:	e019      	b.n	800b04c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b018:	f000 fed4 	bl	800bdc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b01c:	4b10      	ldr	r3, [pc, #64]	; (800b060 <prvCheckTasksWaitingTermination+0x50>)
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3304      	adds	r3, #4
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fe f9f3 	bl	8009414 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b02e:	4b0d      	ldr	r3, [pc, #52]	; (800b064 <prvCheckTasksWaitingTermination+0x54>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	3b01      	subs	r3, #1
 800b034:	4a0b      	ldr	r2, [pc, #44]	; (800b064 <prvCheckTasksWaitingTermination+0x54>)
 800b036:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b038:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <prvCheckTasksWaitingTermination+0x58>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	4a0a      	ldr	r2, [pc, #40]	; (800b068 <prvCheckTasksWaitingTermination+0x58>)
 800b040:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b042:	f000 feef 	bl	800be24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f810 	bl	800b06c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b04c:	4b06      	ldr	r3, [pc, #24]	; (800b068 <prvCheckTasksWaitingTermination+0x58>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1e1      	bne.n	800b018 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b054:	bf00      	nop
 800b056:	bf00      	nop
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	20000e2c 	.word	0x20000e2c
 800b064:	20000e58 	.word	0x20000e58
 800b068:	20000e40 	.word	0x20000e40

0800b06c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3354      	adds	r3, #84	; 0x54
 800b078:	4618      	mov	r0, r3
 800b07a:	f001 ff21 	bl	800cec0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b084:	2b00      	cmp	r3, #0
 800b086:	d108      	bne.n	800b09a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08c:	4618      	mov	r0, r3
 800b08e:	f001 f887 	bl	800c1a0 <vPortFree>
				vPortFree( pxTCB );
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f001 f884 	bl	800c1a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b098:	e018      	b.n	800b0cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d103      	bne.n	800b0ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 f87b 	bl	800c1a0 <vPortFree>
	}
 800b0aa:	e00f      	b.n	800b0cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d00a      	beq.n	800b0cc <prvDeleteTCB+0x60>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	60fb      	str	r3, [r7, #12]
}
 800b0c8:	bf00      	nop
 800b0ca:	e7fe      	b.n	800b0ca <prvDeleteTCB+0x5e>
	}
 800b0cc:	bf00      	nop
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0da:	4b0c      	ldr	r3, [pc, #48]	; (800b10c <prvResetNextTaskUnblockTime+0x38>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d104      	bne.n	800b0ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <prvResetNextTaskUnblockTime+0x3c>)
 800b0e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0ec:	e008      	b.n	800b100 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ee:	4b07      	ldr	r3, [pc, #28]	; (800b10c <prvResetNextTaskUnblockTime+0x38>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	4a04      	ldr	r2, [pc, #16]	; (800b110 <prvResetNextTaskUnblockTime+0x3c>)
 800b0fe:	6013      	str	r3, [r2, #0]
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	20000e10 	.word	0x20000e10
 800b110:	20000e78 	.word	0x20000e78

0800b114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b11a:	4b0b      	ldr	r3, [pc, #44]	; (800b148 <xTaskGetSchedulerState+0x34>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d102      	bne.n	800b128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b122:	2301      	movs	r3, #1
 800b124:	607b      	str	r3, [r7, #4]
 800b126:	e008      	b.n	800b13a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b128:	4b08      	ldr	r3, [pc, #32]	; (800b14c <xTaskGetSchedulerState+0x38>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d102      	bne.n	800b136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b130:	2302      	movs	r3, #2
 800b132:	607b      	str	r3, [r7, #4]
 800b134:	e001      	b.n	800b13a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b136:	2300      	movs	r3, #0
 800b138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b13a:	687b      	ldr	r3, [r7, #4]
	}
 800b13c:	4618      	mov	r0, r3
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	20000e64 	.word	0x20000e64
 800b14c:	20000e80 	.word	0x20000e80

0800b150 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b15c:	2300      	movs	r3, #0
 800b15e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d051      	beq.n	800b20a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b16a:	4b2a      	ldr	r3, [pc, #168]	; (800b214 <xTaskPriorityInherit+0xc4>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b170:	429a      	cmp	r2, r3
 800b172:	d241      	bcs.n	800b1f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	db06      	blt.n	800b18a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b17c:	4b25      	ldr	r3, [pc, #148]	; (800b214 <xTaskPriorityInherit+0xc4>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b182:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	6959      	ldr	r1, [r3, #20]
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b192:	4613      	mov	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4a1f      	ldr	r2, [pc, #124]	; (800b218 <xTaskPriorityInherit+0xc8>)
 800b19c:	4413      	add	r3, r2
 800b19e:	4299      	cmp	r1, r3
 800b1a0:	d122      	bne.n	800b1e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fe f934 	bl	8009414 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1ac:	4b19      	ldr	r3, [pc, #100]	; (800b214 <xTaskPriorityInherit+0xc4>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ba:	4b18      	ldr	r3, [pc, #96]	; (800b21c <xTaskPriorityInherit+0xcc>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d903      	bls.n	800b1ca <xTaskPriorityInherit+0x7a>
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c6:	4a15      	ldr	r2, [pc, #84]	; (800b21c <xTaskPriorityInherit+0xcc>)
 800b1c8:	6013      	str	r3, [r2, #0]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4a10      	ldr	r2, [pc, #64]	; (800b218 <xTaskPriorityInherit+0xc8>)
 800b1d8:	441a      	add	r2, r3
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f7fe f8ba 	bl	800935a <vListInsertEnd>
 800b1e6:	e004      	b.n	800b1f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1e8:	4b0a      	ldr	r3, [pc, #40]	; (800b214 <xTaskPriorityInherit+0xc4>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	e008      	b.n	800b20a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1fc:	4b05      	ldr	r3, [pc, #20]	; (800b214 <xTaskPriorityInherit+0xc4>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b202:	429a      	cmp	r2, r3
 800b204:	d201      	bcs.n	800b20a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b206:	2301      	movs	r3, #1
 800b208:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b20a:	68fb      	ldr	r3, [r7, #12]
	}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20000984 	.word	0x20000984
 800b218:	20000988 	.word	0x20000988
 800b21c:	20000e60 	.word	0x20000e60

0800b220 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b22c:	2300      	movs	r3, #0
 800b22e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d056      	beq.n	800b2e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b236:	4b2e      	ldr	r3, [pc, #184]	; (800b2f0 <xTaskPriorityDisinherit+0xd0>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d00a      	beq.n	800b256 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	60fb      	str	r3, [r7, #12]
}
 800b252:	bf00      	nop
 800b254:	e7fe      	b.n	800b254 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10a      	bne.n	800b274 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	60bb      	str	r3, [r7, #8]
}
 800b270:	bf00      	nop
 800b272:	e7fe      	b.n	800b272 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b278:	1e5a      	subs	r2, r3, #1
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b286:	429a      	cmp	r2, r3
 800b288:	d02c      	beq.n	800b2e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d128      	bne.n	800b2e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	3304      	adds	r3, #4
 800b296:	4618      	mov	r0, r3
 800b298:	f7fe f8bc 	bl	8009414 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b4:	4b0f      	ldr	r3, [pc, #60]	; (800b2f4 <xTaskPriorityDisinherit+0xd4>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d903      	bls.n	800b2c4 <xTaskPriorityDisinherit+0xa4>
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	4a0c      	ldr	r2, [pc, #48]	; (800b2f4 <xTaskPriorityDisinherit+0xd4>)
 800b2c2:	6013      	str	r3, [r2, #0]
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4a09      	ldr	r2, [pc, #36]	; (800b2f8 <xTaskPriorityDisinherit+0xd8>)
 800b2d2:	441a      	add	r2, r3
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4610      	mov	r0, r2
 800b2dc:	f7fe f83d 	bl	800935a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2e4:	697b      	ldr	r3, [r7, #20]
	}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20000984 	.word	0x20000984
 800b2f4:	20000e60 	.word	0x20000e60
 800b2f8:	20000988 	.word	0x20000988

0800b2fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b088      	sub	sp, #32
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b30a:	2301      	movs	r3, #1
 800b30c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d06a      	beq.n	800b3ea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d10a      	bne.n	800b332 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	60fb      	str	r3, [r7, #12]
}
 800b32e:	bf00      	nop
 800b330:	e7fe      	b.n	800b330 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d902      	bls.n	800b342 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	61fb      	str	r3, [r7, #28]
 800b340:	e002      	b.n	800b348 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b346:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34c:	69fa      	ldr	r2, [r7, #28]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d04b      	beq.n	800b3ea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d146      	bne.n	800b3ea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b35c:	4b25      	ldr	r3, [pc, #148]	; (800b3f4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	69ba      	ldr	r2, [r7, #24]
 800b362:	429a      	cmp	r2, r3
 800b364:	d10a      	bne.n	800b37c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	60bb      	str	r3, [r7, #8]
}
 800b378:	bf00      	nop
 800b37a:	e7fe      	b.n	800b37a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b380:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	69fa      	ldr	r2, [r7, #28]
 800b386:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	db04      	blt.n	800b39a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	6959      	ldr	r1, [r3, #20]
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4413      	add	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4a13      	ldr	r2, [pc, #76]	; (800b3f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b3aa:	4413      	add	r3, r2
 800b3ac:	4299      	cmp	r1, r3
 800b3ae:	d11c      	bne.n	800b3ea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fe f82d 	bl	8009414 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3be:	4b0f      	ldr	r3, [pc, #60]	; (800b3fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d903      	bls.n	800b3ce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ca:	4a0c      	ldr	r2, [pc, #48]	; (800b3fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3cc:	6013      	str	r3, [r2, #0]
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4a07      	ldr	r2, [pc, #28]	; (800b3f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b3dc:	441a      	add	r2, r3
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	f7fd ffb8 	bl	800935a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3ea:	bf00      	nop
 800b3ec:	3720      	adds	r7, #32
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20000984 	.word	0x20000984
 800b3f8:	20000988 	.word	0x20000988
 800b3fc:	20000e60 	.word	0x20000e60

0800b400 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b400:	b480      	push	{r7}
 800b402:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b404:	4b07      	ldr	r3, [pc, #28]	; (800b424 <pvTaskIncrementMutexHeldCount+0x24>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d004      	beq.n	800b416 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b40c:	4b05      	ldr	r3, [pc, #20]	; (800b424 <pvTaskIncrementMutexHeldCount+0x24>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b412:	3201      	adds	r2, #1
 800b414:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b416:	4b03      	ldr	r3, [pc, #12]	; (800b424 <pvTaskIncrementMutexHeldCount+0x24>)
 800b418:	681b      	ldr	r3, [r3, #0]
	}
 800b41a:	4618      	mov	r0, r3
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	20000984 	.word	0x20000984

0800b428 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b432:	4b21      	ldr	r3, [pc, #132]	; (800b4b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b438:	4b20      	ldr	r3, [pc, #128]	; (800b4bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3304      	adds	r3, #4
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fd ffe8 	bl	8009414 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b44a:	d10a      	bne.n	800b462 <prvAddCurrentTaskToDelayedList+0x3a>
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d007      	beq.n	800b462 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b452:	4b1a      	ldr	r3, [pc, #104]	; (800b4bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3304      	adds	r3, #4
 800b458:	4619      	mov	r1, r3
 800b45a:	4819      	ldr	r0, [pc, #100]	; (800b4c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b45c:	f7fd ff7d 	bl	800935a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b460:	e026      	b.n	800b4b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4413      	add	r3, r2
 800b468:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b46a:	4b14      	ldr	r3, [pc, #80]	; (800b4bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	429a      	cmp	r2, r3
 800b478:	d209      	bcs.n	800b48e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b47a:	4b12      	ldr	r3, [pc, #72]	; (800b4c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	4b0f      	ldr	r3, [pc, #60]	; (800b4bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3304      	adds	r3, #4
 800b484:	4619      	mov	r1, r3
 800b486:	4610      	mov	r0, r2
 800b488:	f7fd ff8b 	bl	80093a2 <vListInsert>
}
 800b48c:	e010      	b.n	800b4b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b48e:	4b0e      	ldr	r3, [pc, #56]	; (800b4c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3304      	adds	r3, #4
 800b498:	4619      	mov	r1, r3
 800b49a:	4610      	mov	r0, r2
 800b49c:	f7fd ff81 	bl	80093a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4a0:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d202      	bcs.n	800b4b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b4aa:	4a08      	ldr	r2, [pc, #32]	; (800b4cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	6013      	str	r3, [r2, #0]
}
 800b4b0:	bf00      	nop
 800b4b2:	3710      	adds	r7, #16
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20000e5c 	.word	0x20000e5c
 800b4bc:	20000984 	.word	0x20000984
 800b4c0:	20000e44 	.word	0x20000e44
 800b4c4:	20000e14 	.word	0x20000e14
 800b4c8:	20000e10 	.word	0x20000e10
 800b4cc:	20000e78 	.word	0x20000e78

0800b4d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b08a      	sub	sp, #40	; 0x28
 800b4d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b4da:	f000 fb07 	bl	800baec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b4de:	4b1c      	ldr	r3, [pc, #112]	; (800b550 <xTimerCreateTimerTask+0x80>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d021      	beq.n	800b52a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b4ee:	1d3a      	adds	r2, r7, #4
 800b4f0:	f107 0108 	add.w	r1, r7, #8
 800b4f4:	f107 030c 	add.w	r3, r7, #12
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fd fee7 	bl	80092cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b4fe:	6879      	ldr	r1, [r7, #4]
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	9202      	str	r2, [sp, #8]
 800b506:	9301      	str	r3, [sp, #4]
 800b508:	2302      	movs	r3, #2
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	2300      	movs	r3, #0
 800b50e:	460a      	mov	r2, r1
 800b510:	4910      	ldr	r1, [pc, #64]	; (800b554 <xTimerCreateTimerTask+0x84>)
 800b512:	4811      	ldr	r0, [pc, #68]	; (800b558 <xTimerCreateTimerTask+0x88>)
 800b514:	f7fe ffb6 	bl	800a484 <xTaskCreateStatic>
 800b518:	4603      	mov	r3, r0
 800b51a:	4a10      	ldr	r2, [pc, #64]	; (800b55c <xTimerCreateTimerTask+0x8c>)
 800b51c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b51e:	4b0f      	ldr	r3, [pc, #60]	; (800b55c <xTimerCreateTimerTask+0x8c>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d001      	beq.n	800b52a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b526:	2301      	movs	r3, #1
 800b528:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d10a      	bne.n	800b546 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	613b      	str	r3, [r7, #16]
}
 800b542:	bf00      	nop
 800b544:	e7fe      	b.n	800b544 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b546:	697b      	ldr	r3, [r7, #20]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	20000eb4 	.word	0x20000eb4
 800b554:	0800d0cc 	.word	0x0800d0cc
 800b558:	0800b695 	.word	0x0800b695
 800b55c:	20000eb8 	.word	0x20000eb8

0800b560 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08a      	sub	sp, #40	; 0x28
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b56e:	2300      	movs	r3, #0
 800b570:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10a      	bne.n	800b58e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	623b      	str	r3, [r7, #32]
}
 800b58a:	bf00      	nop
 800b58c:	e7fe      	b.n	800b58c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b58e:	4b1a      	ldr	r3, [pc, #104]	; (800b5f8 <xTimerGenericCommand+0x98>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d02a      	beq.n	800b5ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	2b05      	cmp	r3, #5
 800b5a6:	dc18      	bgt.n	800b5da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b5a8:	f7ff fdb4 	bl	800b114 <xTaskGetSchedulerState>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d109      	bne.n	800b5c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b5b2:	4b11      	ldr	r3, [pc, #68]	; (800b5f8 <xTimerGenericCommand+0x98>)
 800b5b4:	6818      	ldr	r0, [r3, #0]
 800b5b6:	f107 0110 	add.w	r1, r7, #16
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5be:	f7fe f8fb 	bl	80097b8 <xQueueGenericSend>
 800b5c2:	6278      	str	r0, [r7, #36]	; 0x24
 800b5c4:	e012      	b.n	800b5ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b5c6:	4b0c      	ldr	r3, [pc, #48]	; (800b5f8 <xTimerGenericCommand+0x98>)
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	f107 0110 	add.w	r1, r7, #16
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f7fe f8f1 	bl	80097b8 <xQueueGenericSend>
 800b5d6:	6278      	str	r0, [r7, #36]	; 0x24
 800b5d8:	e008      	b.n	800b5ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b5da:	4b07      	ldr	r3, [pc, #28]	; (800b5f8 <xTimerGenericCommand+0x98>)
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	f107 0110 	add.w	r1, r7, #16
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	683a      	ldr	r2, [r7, #0]
 800b5e6:	f7fe f9e5 	bl	80099b4 <xQueueGenericSendFromISR>
 800b5ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3728      	adds	r7, #40	; 0x28
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20000eb4 	.word	0x20000eb4

0800b5fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af02      	add	r7, sp, #8
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b606:	4b22      	ldr	r3, [pc, #136]	; (800b690 <prvProcessExpiredTimer+0x94>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	3304      	adds	r3, #4
 800b614:	4618      	mov	r0, r3
 800b616:	f7fd fefd 	bl	8009414 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b620:	f003 0304 	and.w	r3, r3, #4
 800b624:	2b00      	cmp	r3, #0
 800b626:	d022      	beq.n	800b66e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	699a      	ldr	r2, [r3, #24]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	18d1      	adds	r1, r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	6978      	ldr	r0, [r7, #20]
 800b636:	f000 f8d1 	bl	800b7dc <prvInsertTimerInActiveList>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d01f      	beq.n	800b680 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b640:	2300      	movs	r3, #0
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	2300      	movs	r3, #0
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	2100      	movs	r1, #0
 800b64a:	6978      	ldr	r0, [r7, #20]
 800b64c:	f7ff ff88 	bl	800b560 <xTimerGenericCommand>
 800b650:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d113      	bne.n	800b680 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65c:	f383 8811 	msr	BASEPRI, r3
 800b660:	f3bf 8f6f 	isb	sy
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	60fb      	str	r3, [r7, #12]
}
 800b66a:	bf00      	nop
 800b66c:	e7fe      	b.n	800b66c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b674:	f023 0301 	bic.w	r3, r3, #1
 800b678:	b2da      	uxtb	r2, r3
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	6a1b      	ldr	r3, [r3, #32]
 800b684:	6978      	ldr	r0, [r7, #20]
 800b686:	4798      	blx	r3
}
 800b688:	bf00      	nop
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	20000eac 	.word	0x20000eac

0800b694 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b69c:	f107 0308 	add.w	r3, r7, #8
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 f857 	bl	800b754 <prvGetNextExpireTime>
 800b6a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f000 f803 	bl	800b6b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b6b2:	f000 f8d5 	bl	800b860 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6b6:	e7f1      	b.n	800b69c <prvTimerTask+0x8>

0800b6b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b6c2:	f7ff f93b 	bl	800a93c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6c6:	f107 0308 	add.w	r3, r7, #8
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 f866 	bl	800b79c <prvSampleTimeNow>
 800b6d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d130      	bne.n	800b73a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10a      	bne.n	800b6f4 <prvProcessTimerOrBlockTask+0x3c>
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d806      	bhi.n	800b6f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b6e6:	f7ff f937 	bl	800a958 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b6ea:	68f9      	ldr	r1, [r7, #12]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7ff ff85 	bl	800b5fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b6f2:	e024      	b.n	800b73e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d008      	beq.n	800b70c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b6fa:	4b13      	ldr	r3, [pc, #76]	; (800b748 <prvProcessTimerOrBlockTask+0x90>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <prvProcessTimerOrBlockTask+0x50>
 800b704:	2301      	movs	r3, #1
 800b706:	e000      	b.n	800b70a <prvProcessTimerOrBlockTask+0x52>
 800b708:	2300      	movs	r3, #0
 800b70a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b70c:	4b0f      	ldr	r3, [pc, #60]	; (800b74c <prvProcessTimerOrBlockTask+0x94>)
 800b70e:	6818      	ldr	r0, [r3, #0]
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	4619      	mov	r1, r3
 800b71a:	f7fe fe7f 	bl	800a41c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b71e:	f7ff f91b 	bl	800a958 <xTaskResumeAll>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10a      	bne.n	800b73e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b728:	4b09      	ldr	r3, [pc, #36]	; (800b750 <prvProcessTimerOrBlockTask+0x98>)
 800b72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b72e:	601a      	str	r2, [r3, #0]
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	f3bf 8f6f 	isb	sy
}
 800b738:	e001      	b.n	800b73e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b73a:	f7ff f90d 	bl	800a958 <xTaskResumeAll>
}
 800b73e:	bf00      	nop
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	20000eb0 	.word	0x20000eb0
 800b74c:	20000eb4 	.word	0x20000eb4
 800b750:	e000ed04 	.word	0xe000ed04

0800b754 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b75c:	4b0e      	ldr	r3, [pc, #56]	; (800b798 <prvGetNextExpireTime+0x44>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <prvGetNextExpireTime+0x16>
 800b766:	2201      	movs	r2, #1
 800b768:	e000      	b.n	800b76c <prvGetNextExpireTime+0x18>
 800b76a:	2200      	movs	r2, #0
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d105      	bne.n	800b784 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b778:	4b07      	ldr	r3, [pc, #28]	; (800b798 <prvGetNextExpireTime+0x44>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	60fb      	str	r3, [r7, #12]
 800b782:	e001      	b.n	800b788 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b784:	2300      	movs	r3, #0
 800b786:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b788:	68fb      	ldr	r3, [r7, #12]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	20000eac 	.word	0x20000eac

0800b79c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7a4:	f7ff f976 	bl	800aa94 <xTaskGetTickCount>
 800b7a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b7aa:	4b0b      	ldr	r3, [pc, #44]	; (800b7d8 <prvSampleTimeNow+0x3c>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d205      	bcs.n	800b7c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b7b4:	f000 f936 	bl	800ba24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	601a      	str	r2, [r3, #0]
 800b7be:	e002      	b.n	800b7c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b7c6:	4a04      	ldr	r2, [pc, #16]	; (800b7d8 <prvSampleTimeNow+0x3c>)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	20000ebc 	.word	0x20000ebc

0800b7dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	68ba      	ldr	r2, [r7, #8]
 800b7f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d812      	bhi.n	800b828 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	1ad2      	subs	r2, r2, r3
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d302      	bcc.n	800b816 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b810:	2301      	movs	r3, #1
 800b812:	617b      	str	r3, [r7, #20]
 800b814:	e01b      	b.n	800b84e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b816:	4b10      	ldr	r3, [pc, #64]	; (800b858 <prvInsertTimerInActiveList+0x7c>)
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	3304      	adds	r3, #4
 800b81e:	4619      	mov	r1, r3
 800b820:	4610      	mov	r0, r2
 800b822:	f7fd fdbe 	bl	80093a2 <vListInsert>
 800b826:	e012      	b.n	800b84e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d206      	bcs.n	800b83e <prvInsertTimerInActiveList+0x62>
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	429a      	cmp	r2, r3
 800b836:	d302      	bcc.n	800b83e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b838:	2301      	movs	r3, #1
 800b83a:	617b      	str	r3, [r7, #20]
 800b83c:	e007      	b.n	800b84e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b83e:	4b07      	ldr	r3, [pc, #28]	; (800b85c <prvInsertTimerInActiveList+0x80>)
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	3304      	adds	r3, #4
 800b846:	4619      	mov	r1, r3
 800b848:	4610      	mov	r0, r2
 800b84a:	f7fd fdaa 	bl	80093a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b84e:	697b      	ldr	r3, [r7, #20]
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	20000eb0 	.word	0x20000eb0
 800b85c:	20000eac 	.word	0x20000eac

0800b860 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b08e      	sub	sp, #56	; 0x38
 800b864:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b866:	e0ca      	b.n	800b9fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	da18      	bge.n	800b8a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b86e:	1d3b      	adds	r3, r7, #4
 800b870:	3304      	adds	r3, #4
 800b872:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10a      	bne.n	800b890 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	61fb      	str	r3, [r7, #28]
}
 800b88c:	bf00      	nop
 800b88e:	e7fe      	b.n	800b88e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b896:	6850      	ldr	r0, [r2, #4]
 800b898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b89a:	6892      	ldr	r2, [r2, #8]
 800b89c:	4611      	mov	r1, r2
 800b89e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f2c0 80aa 	blt.w	800b9fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d004      	beq.n	800b8be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	3304      	adds	r3, #4
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7fd fdab 	bl	8009414 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8be:	463b      	mov	r3, r7
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7ff ff6b 	bl	800b79c <prvSampleTimeNow>
 800b8c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b09      	cmp	r3, #9
 800b8cc:	f200 8097 	bhi.w	800b9fe <prvProcessReceivedCommands+0x19e>
 800b8d0:	a201      	add	r2, pc, #4	; (adr r2, 800b8d8 <prvProcessReceivedCommands+0x78>)
 800b8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d6:	bf00      	nop
 800b8d8:	0800b901 	.word	0x0800b901
 800b8dc:	0800b901 	.word	0x0800b901
 800b8e0:	0800b901 	.word	0x0800b901
 800b8e4:	0800b975 	.word	0x0800b975
 800b8e8:	0800b989 	.word	0x0800b989
 800b8ec:	0800b9d3 	.word	0x0800b9d3
 800b8f0:	0800b901 	.word	0x0800b901
 800b8f4:	0800b901 	.word	0x0800b901
 800b8f8:	0800b975 	.word	0x0800b975
 800b8fc:	0800b989 	.word	0x0800b989
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b906:	f043 0301 	orr.w	r3, r3, #1
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b916:	699b      	ldr	r3, [r3, #24]
 800b918:	18d1      	adds	r1, r2, r3
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b91e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b920:	f7ff ff5c 	bl	800b7dc <prvInsertTimerInActiveList>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d069      	beq.n	800b9fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b930:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b938:	f003 0304 	and.w	r3, r3, #4
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d05e      	beq.n	800b9fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b944:	699b      	ldr	r3, [r3, #24]
 800b946:	441a      	add	r2, r3
 800b948:	2300      	movs	r3, #0
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	2300      	movs	r3, #0
 800b94e:	2100      	movs	r1, #0
 800b950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b952:	f7ff fe05 	bl	800b560 <xTimerGenericCommand>
 800b956:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b958:	6a3b      	ldr	r3, [r7, #32]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d14f      	bne.n	800b9fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	61bb      	str	r3, [r7, #24]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b97a:	f023 0301 	bic.w	r3, r3, #1
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b986:	e03a      	b.n	800b9fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b98e:	f043 0301 	orr.w	r3, r3, #1
 800b992:	b2da      	uxtb	r2, r3
 800b994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10a      	bne.n	800b9be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	617b      	str	r3, [r7, #20]
}
 800b9ba:	bf00      	nop
 800b9bc:	e7fe      	b.n	800b9bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c0:	699a      	ldr	r2, [r3, #24]
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c4:	18d1      	adds	r1, r2, r3
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9cc:	f7ff ff06 	bl	800b7dc <prvInsertTimerInActiveList>
					break;
 800b9d0:	e015      	b.n	800b9fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d103      	bne.n	800b9e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b9e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9e2:	f000 fbdd 	bl	800c1a0 <vPortFree>
 800b9e6:	e00a      	b.n	800b9fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9ee:	f023 0301 	bic.w	r3, r3, #1
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b9fa:	e000      	b.n	800b9fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b9fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9fe:	4b08      	ldr	r3, [pc, #32]	; (800ba20 <prvProcessReceivedCommands+0x1c0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	1d39      	adds	r1, r7, #4
 800ba04:	2200      	movs	r2, #0
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fe f8fc 	bl	8009c04 <xQueueReceive>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	f47f af2a 	bne.w	800b868 <prvProcessReceivedCommands+0x8>
	}
}
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop
 800ba18:	3730      	adds	r7, #48	; 0x30
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	20000eb4 	.word	0x20000eb4

0800ba24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b088      	sub	sp, #32
 800ba28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba2a:	e048      	b.n	800babe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba2c:	4b2d      	ldr	r3, [pc, #180]	; (800bae4 <prvSwitchTimerLists+0xc0>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba36:	4b2b      	ldr	r3, [pc, #172]	; (800bae4 <prvSwitchTimerLists+0xc0>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	3304      	adds	r3, #4
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7fd fce5 	bl	8009414 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6a1b      	ldr	r3, [r3, #32]
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba58:	f003 0304 	and.w	r3, r3, #4
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d02e      	beq.n	800babe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	4413      	add	r3, r2
 800ba68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d90e      	bls.n	800ba90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba7e:	4b19      	ldr	r3, [pc, #100]	; (800bae4 <prvSwitchTimerLists+0xc0>)
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	3304      	adds	r3, #4
 800ba86:	4619      	mov	r1, r3
 800ba88:	4610      	mov	r0, r2
 800ba8a:	f7fd fc8a 	bl	80093a2 <vListInsert>
 800ba8e:	e016      	b.n	800babe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba90:	2300      	movs	r3, #0
 800ba92:	9300      	str	r3, [sp, #0]
 800ba94:	2300      	movs	r3, #0
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	2100      	movs	r1, #0
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff fd60 	bl	800b560 <xTimerGenericCommand>
 800baa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10a      	bne.n	800babe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800baa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baac:	f383 8811 	msr	BASEPRI, r3
 800bab0:	f3bf 8f6f 	isb	sy
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	603b      	str	r3, [r7, #0]
}
 800baba:	bf00      	nop
 800babc:	e7fe      	b.n	800babc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800babe:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <prvSwitchTimerLists+0xc0>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1b1      	bne.n	800ba2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bac8:	4b06      	ldr	r3, [pc, #24]	; (800bae4 <prvSwitchTimerLists+0xc0>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bace:	4b06      	ldr	r3, [pc, #24]	; (800bae8 <prvSwitchTimerLists+0xc4>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a04      	ldr	r2, [pc, #16]	; (800bae4 <prvSwitchTimerLists+0xc0>)
 800bad4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bad6:	4a04      	ldr	r2, [pc, #16]	; (800bae8 <prvSwitchTimerLists+0xc4>)
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	6013      	str	r3, [r2, #0]
}
 800badc:	bf00      	nop
 800bade:	3718      	adds	r7, #24
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20000eac 	.word	0x20000eac
 800bae8:	20000eb0 	.word	0x20000eb0

0800baec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800baf2:	f000 f967 	bl	800bdc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800baf6:	4b15      	ldr	r3, [pc, #84]	; (800bb4c <prvCheckForValidListAndQueue+0x60>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d120      	bne.n	800bb40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bafe:	4814      	ldr	r0, [pc, #80]	; (800bb50 <prvCheckForValidListAndQueue+0x64>)
 800bb00:	f7fd fbfe 	bl	8009300 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb04:	4813      	ldr	r0, [pc, #76]	; (800bb54 <prvCheckForValidListAndQueue+0x68>)
 800bb06:	f7fd fbfb 	bl	8009300 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb0a:	4b13      	ldr	r3, [pc, #76]	; (800bb58 <prvCheckForValidListAndQueue+0x6c>)
 800bb0c:	4a10      	ldr	r2, [pc, #64]	; (800bb50 <prvCheckForValidListAndQueue+0x64>)
 800bb0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb10:	4b12      	ldr	r3, [pc, #72]	; (800bb5c <prvCheckForValidListAndQueue+0x70>)
 800bb12:	4a10      	ldr	r2, [pc, #64]	; (800bb54 <prvCheckForValidListAndQueue+0x68>)
 800bb14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb16:	2300      	movs	r3, #0
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	4b11      	ldr	r3, [pc, #68]	; (800bb60 <prvCheckForValidListAndQueue+0x74>)
 800bb1c:	4a11      	ldr	r2, [pc, #68]	; (800bb64 <prvCheckForValidListAndQueue+0x78>)
 800bb1e:	2110      	movs	r1, #16
 800bb20:	200a      	movs	r0, #10
 800bb22:	f7fd fd09 	bl	8009538 <xQueueGenericCreateStatic>
 800bb26:	4603      	mov	r3, r0
 800bb28:	4a08      	ldr	r2, [pc, #32]	; (800bb4c <prvCheckForValidListAndQueue+0x60>)
 800bb2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb2c:	4b07      	ldr	r3, [pc, #28]	; (800bb4c <prvCheckForValidListAndQueue+0x60>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d005      	beq.n	800bb40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb34:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <prvCheckForValidListAndQueue+0x60>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	490b      	ldr	r1, [pc, #44]	; (800bb68 <prvCheckForValidListAndQueue+0x7c>)
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fe fc1a 	bl	800a374 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb40:	f000 f970 	bl	800be24 <vPortExitCritical>
}
 800bb44:	bf00      	nop
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20000eb4 	.word	0x20000eb4
 800bb50:	20000e84 	.word	0x20000e84
 800bb54:	20000e98 	.word	0x20000e98
 800bb58:	20000eac 	.word	0x20000eac
 800bb5c:	20000eb0 	.word	0x20000eb0
 800bb60:	20000f60 	.word	0x20000f60
 800bb64:	20000ec0 	.word	0x20000ec0
 800bb68:	0800d0d4 	.word	0x0800d0d4

0800bb6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	3b04      	subs	r3, #4
 800bb7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3b04      	subs	r3, #4
 800bb8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	f023 0201 	bic.w	r2, r3, #1
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3b04      	subs	r3, #4
 800bb9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb9c:	4a0c      	ldr	r2, [pc, #48]	; (800bbd0 <pxPortInitialiseStack+0x64>)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3b14      	subs	r3, #20
 800bba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	3b04      	subs	r3, #4
 800bbb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f06f 0202 	mvn.w	r2, #2
 800bbba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3b20      	subs	r3, #32
 800bbc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	0800bbd5 	.word	0x0800bbd5

0800bbd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bbde:	4b12      	ldr	r3, [pc, #72]	; (800bc28 <prvTaskExitError+0x54>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbe6:	d00a      	beq.n	800bbfe <prvTaskExitError+0x2a>
	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	60fb      	str	r3, [r7, #12]
}
 800bbfa:	bf00      	nop
 800bbfc:	e7fe      	b.n	800bbfc <prvTaskExitError+0x28>
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	60bb      	str	r3, [r7, #8]
}
 800bc10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc12:	bf00      	nop
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d0fc      	beq.n	800bc14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc1a:	bf00      	nop
 800bc1c:	bf00      	nop
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	2000011c 	.word	0x2000011c
 800bc2c:	00000000 	.word	0x00000000

0800bc30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc30:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <pxCurrentTCBConst2>)
 800bc32:	6819      	ldr	r1, [r3, #0]
 800bc34:	6808      	ldr	r0, [r1, #0]
 800bc36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3a:	f380 8809 	msr	PSP, r0
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f04f 0000 	mov.w	r0, #0
 800bc46:	f380 8811 	msr	BASEPRI, r0
 800bc4a:	4770      	bx	lr
 800bc4c:	f3af 8000 	nop.w

0800bc50 <pxCurrentTCBConst2>:
 800bc50:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc54:	bf00      	nop
 800bc56:	bf00      	nop

0800bc58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc58:	4808      	ldr	r0, [pc, #32]	; (800bc7c <prvPortStartFirstTask+0x24>)
 800bc5a:	6800      	ldr	r0, [r0, #0]
 800bc5c:	6800      	ldr	r0, [r0, #0]
 800bc5e:	f380 8808 	msr	MSP, r0
 800bc62:	f04f 0000 	mov.w	r0, #0
 800bc66:	f380 8814 	msr	CONTROL, r0
 800bc6a:	b662      	cpsie	i
 800bc6c:	b661      	cpsie	f
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	df00      	svc	0
 800bc78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc7a:	bf00      	nop
 800bc7c:	e000ed08 	.word	0xe000ed08

0800bc80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc86:	4b46      	ldr	r3, [pc, #280]	; (800bda0 <xPortStartScheduler+0x120>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a46      	ldr	r2, [pc, #280]	; (800bda4 <xPortStartScheduler+0x124>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d10a      	bne.n	800bca6 <xPortStartScheduler+0x26>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	613b      	str	r3, [r7, #16]
}
 800bca2:	bf00      	nop
 800bca4:	e7fe      	b.n	800bca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bca6:	4b3e      	ldr	r3, [pc, #248]	; (800bda0 <xPortStartScheduler+0x120>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a3f      	ldr	r2, [pc, #252]	; (800bda8 <xPortStartScheduler+0x128>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d10a      	bne.n	800bcc6 <xPortStartScheduler+0x46>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	60fb      	str	r3, [r7, #12]
}
 800bcc2:	bf00      	nop
 800bcc4:	e7fe      	b.n	800bcc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bcc6:	4b39      	ldr	r3, [pc, #228]	; (800bdac <xPortStartScheduler+0x12c>)
 800bcc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	22ff      	movs	r2, #255	; 0xff
 800bcd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bce8:	b2da      	uxtb	r2, r3
 800bcea:	4b31      	ldr	r3, [pc, #196]	; (800bdb0 <xPortStartScheduler+0x130>)
 800bcec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcee:	4b31      	ldr	r3, [pc, #196]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bcf0:	2207      	movs	r2, #7
 800bcf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcf4:	e009      	b.n	800bd0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bcf6:	4b2f      	ldr	r3, [pc, #188]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	4a2d      	ldr	r2, [pc, #180]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bcfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd00:	78fb      	ldrb	r3, [r7, #3]
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	005b      	lsls	r3, r3, #1
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd0a:	78fb      	ldrb	r3, [r7, #3]
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd12:	2b80      	cmp	r3, #128	; 0x80
 800bd14:	d0ef      	beq.n	800bcf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd16:	4b27      	ldr	r3, [pc, #156]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f1c3 0307 	rsb	r3, r3, #7
 800bd1e:	2b04      	cmp	r3, #4
 800bd20:	d00a      	beq.n	800bd38 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd26:	f383 8811 	msr	BASEPRI, r3
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	60bb      	str	r3, [r7, #8]
}
 800bd34:	bf00      	nop
 800bd36:	e7fe      	b.n	800bd36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd38:	4b1e      	ldr	r3, [pc, #120]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	021b      	lsls	r3, r3, #8
 800bd3e:	4a1d      	ldr	r2, [pc, #116]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bd40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd42:	4b1c      	ldr	r3, [pc, #112]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd4a:	4a1a      	ldr	r2, [pc, #104]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bd4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd56:	4b18      	ldr	r3, [pc, #96]	; (800bdb8 <xPortStartScheduler+0x138>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a17      	ldr	r2, [pc, #92]	; (800bdb8 <xPortStartScheduler+0x138>)
 800bd5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd62:	4b15      	ldr	r3, [pc, #84]	; (800bdb8 <xPortStartScheduler+0x138>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a14      	ldr	r2, [pc, #80]	; (800bdb8 <xPortStartScheduler+0x138>)
 800bd68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd6e:	f000 f8dd 	bl	800bf2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd72:	4b12      	ldr	r3, [pc, #72]	; (800bdbc <xPortStartScheduler+0x13c>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd78:	f000 f8fc 	bl	800bf74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd7c:	4b10      	ldr	r3, [pc, #64]	; (800bdc0 <xPortStartScheduler+0x140>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a0f      	ldr	r2, [pc, #60]	; (800bdc0 <xPortStartScheduler+0x140>)
 800bd82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd88:	f7ff ff66 	bl	800bc58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd8c:	f7fe ff4c 	bl	800ac28 <vTaskSwitchContext>
	prvTaskExitError();
 800bd90:	f7ff ff20 	bl	800bbd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3718      	adds	r7, #24
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	e000ed00 	.word	0xe000ed00
 800bda4:	410fc271 	.word	0x410fc271
 800bda8:	410fc270 	.word	0x410fc270
 800bdac:	e000e400 	.word	0xe000e400
 800bdb0:	20000fb0 	.word	0x20000fb0
 800bdb4:	20000fb4 	.word	0x20000fb4
 800bdb8:	e000ed20 	.word	0xe000ed20
 800bdbc:	2000011c 	.word	0x2000011c
 800bdc0:	e000ef34 	.word	0xe000ef34

0800bdc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	607b      	str	r3, [r7, #4]
}
 800bddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bdde:	4b0f      	ldr	r3, [pc, #60]	; (800be1c <vPortEnterCritical+0x58>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3301      	adds	r3, #1
 800bde4:	4a0d      	ldr	r2, [pc, #52]	; (800be1c <vPortEnterCritical+0x58>)
 800bde6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bde8:	4b0c      	ldr	r3, [pc, #48]	; (800be1c <vPortEnterCritical+0x58>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d10f      	bne.n	800be10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bdf0:	4b0b      	ldr	r3, [pc, #44]	; (800be20 <vPortEnterCritical+0x5c>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00a      	beq.n	800be10 <vPortEnterCritical+0x4c>
	__asm volatile
 800bdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	603b      	str	r3, [r7, #0]
}
 800be0c:	bf00      	nop
 800be0e:	e7fe      	b.n	800be0e <vPortEnterCritical+0x4a>
	}
}
 800be10:	bf00      	nop
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	2000011c 	.word	0x2000011c
 800be20:	e000ed04 	.word	0xe000ed04

0800be24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be2a:	4b12      	ldr	r3, [pc, #72]	; (800be74 <vPortExitCritical+0x50>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10a      	bne.n	800be48 <vPortExitCritical+0x24>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	607b      	str	r3, [r7, #4]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be48:	4b0a      	ldr	r3, [pc, #40]	; (800be74 <vPortExitCritical+0x50>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	4a09      	ldr	r2, [pc, #36]	; (800be74 <vPortExitCritical+0x50>)
 800be50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be52:	4b08      	ldr	r3, [pc, #32]	; (800be74 <vPortExitCritical+0x50>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d105      	bne.n	800be66 <vPortExitCritical+0x42>
 800be5a:	2300      	movs	r3, #0
 800be5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	f383 8811 	msr	BASEPRI, r3
}
 800be64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be66:	bf00      	nop
 800be68:	370c      	adds	r7, #12
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	2000011c 	.word	0x2000011c
	...

0800be80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be80:	f3ef 8009 	mrs	r0, PSP
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	4b15      	ldr	r3, [pc, #84]	; (800bee0 <pxCurrentTCBConst>)
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	f01e 0f10 	tst.w	lr, #16
 800be90:	bf08      	it	eq
 800be92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9a:	6010      	str	r0, [r2, #0]
 800be9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bea4:	f380 8811 	msr	BASEPRI, r0
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f7fe feba 	bl	800ac28 <vTaskSwitchContext>
 800beb4:	f04f 0000 	mov.w	r0, #0
 800beb8:	f380 8811 	msr	BASEPRI, r0
 800bebc:	bc09      	pop	{r0, r3}
 800bebe:	6819      	ldr	r1, [r3, #0]
 800bec0:	6808      	ldr	r0, [r1, #0]
 800bec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec6:	f01e 0f10 	tst.w	lr, #16
 800beca:	bf08      	it	eq
 800becc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bed0:	f380 8809 	msr	PSP, r0
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	f3af 8000 	nop.w

0800bee0 <pxCurrentTCBConst>:
 800bee0:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop

0800bee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	607b      	str	r3, [r7, #4]
}
 800bf00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf02:	f7fe fdd7 	bl	800aab4 <xTaskIncrementTick>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d003      	beq.n	800bf14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf0c:	4b06      	ldr	r3, [pc, #24]	; (800bf28 <xPortSysTickHandler+0x40>)
 800bf0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf12:	601a      	str	r2, [r3, #0]
 800bf14:	2300      	movs	r3, #0
 800bf16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	f383 8811 	msr	BASEPRI, r3
}
 800bf1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf20:	bf00      	nop
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	e000ed04 	.word	0xe000ed04

0800bf2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf30:	4b0b      	ldr	r3, [pc, #44]	; (800bf60 <vPortSetupTimerInterrupt+0x34>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf36:	4b0b      	ldr	r3, [pc, #44]	; (800bf64 <vPortSetupTimerInterrupt+0x38>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf3c:	4b0a      	ldr	r3, [pc, #40]	; (800bf68 <vPortSetupTimerInterrupt+0x3c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a0a      	ldr	r2, [pc, #40]	; (800bf6c <vPortSetupTimerInterrupt+0x40>)
 800bf42:	fba2 2303 	umull	r2, r3, r2, r3
 800bf46:	099b      	lsrs	r3, r3, #6
 800bf48:	4a09      	ldr	r2, [pc, #36]	; (800bf70 <vPortSetupTimerInterrupt+0x44>)
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf4e:	4b04      	ldr	r3, [pc, #16]	; (800bf60 <vPortSetupTimerInterrupt+0x34>)
 800bf50:	2207      	movs	r2, #7
 800bf52:	601a      	str	r2, [r3, #0]
}
 800bf54:	bf00      	nop
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	e000e010 	.word	0xe000e010
 800bf64:	e000e018 	.word	0xe000e018
 800bf68:	20000000 	.word	0x20000000
 800bf6c:	10624dd3 	.word	0x10624dd3
 800bf70:	e000e014 	.word	0xe000e014

0800bf74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf84 <vPortEnableVFP+0x10>
 800bf78:	6801      	ldr	r1, [r0, #0]
 800bf7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf7e:	6001      	str	r1, [r0, #0]
 800bf80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf82:	bf00      	nop
 800bf84:	e000ed88 	.word	0xe000ed88

0800bf88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf8e:	f3ef 8305 	mrs	r3, IPSR
 800bf92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b0f      	cmp	r3, #15
 800bf98:	d914      	bls.n	800bfc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf9a:	4a17      	ldr	r2, [pc, #92]	; (800bff8 <vPortValidateInterruptPriority+0x70>)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bfa4:	4b15      	ldr	r3, [pc, #84]	; (800bffc <vPortValidateInterruptPriority+0x74>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	7afa      	ldrb	r2, [r7, #11]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d20a      	bcs.n	800bfc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	607b      	str	r3, [r7, #4]
}
 800bfc0:	bf00      	nop
 800bfc2:	e7fe      	b.n	800bfc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bfc4:	4b0e      	ldr	r3, [pc, #56]	; (800c000 <vPortValidateInterruptPriority+0x78>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bfcc:	4b0d      	ldr	r3, [pc, #52]	; (800c004 <vPortValidateInterruptPriority+0x7c>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d90a      	bls.n	800bfea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	603b      	str	r3, [r7, #0]
}
 800bfe6:	bf00      	nop
 800bfe8:	e7fe      	b.n	800bfe8 <vPortValidateInterruptPriority+0x60>
	}
 800bfea:	bf00      	nop
 800bfec:	3714      	adds	r7, #20
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	e000e3f0 	.word	0xe000e3f0
 800bffc:	20000fb0 	.word	0x20000fb0
 800c000:	e000ed0c 	.word	0xe000ed0c
 800c004:	20000fb4 	.word	0x20000fb4

0800c008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b08a      	sub	sp, #40	; 0x28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c010:	2300      	movs	r3, #0
 800c012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c014:	f7fe fc92 	bl	800a93c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c018:	4b5b      	ldr	r3, [pc, #364]	; (800c188 <pvPortMalloc+0x180>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c020:	f000 f920 	bl	800c264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c024:	4b59      	ldr	r3, [pc, #356]	; (800c18c <pvPortMalloc+0x184>)
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4013      	ands	r3, r2
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f040 8093 	bne.w	800c158 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d01d      	beq.n	800c074 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c038:	2208      	movs	r2, #8
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4413      	add	r3, r2
 800c03e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f003 0307 	and.w	r3, r3, #7
 800c046:	2b00      	cmp	r3, #0
 800c048:	d014      	beq.n	800c074 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f023 0307 	bic.w	r3, r3, #7
 800c050:	3308      	adds	r3, #8
 800c052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f003 0307 	and.w	r3, r3, #7
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00a      	beq.n	800c074 <pvPortMalloc+0x6c>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	617b      	str	r3, [r7, #20]
}
 800c070:	bf00      	nop
 800c072:	e7fe      	b.n	800c072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d06e      	beq.n	800c158 <pvPortMalloc+0x150>
 800c07a:	4b45      	ldr	r3, [pc, #276]	; (800c190 <pvPortMalloc+0x188>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	429a      	cmp	r2, r3
 800c082:	d869      	bhi.n	800c158 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c084:	4b43      	ldr	r3, [pc, #268]	; (800c194 <pvPortMalloc+0x18c>)
 800c086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c088:	4b42      	ldr	r3, [pc, #264]	; (800c194 <pvPortMalloc+0x18c>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c08e:	e004      	b.n	800c09a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d903      	bls.n	800c0ac <pvPortMalloc+0xa4>
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1f1      	bne.n	800c090 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0ac:	4b36      	ldr	r3, [pc, #216]	; (800c188 <pvPortMalloc+0x180>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d050      	beq.n	800c158 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2208      	movs	r2, #8
 800c0bc:	4413      	add	r3, r2
 800c0be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	1ad2      	subs	r2, r2, r3
 800c0d0:	2308      	movs	r3, #8
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d91f      	bls.n	800c118 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4413      	add	r3, r2
 800c0de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	f003 0307 	and.w	r3, r3, #7
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00a      	beq.n	800c100 <pvPortMalloc+0xf8>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	613b      	str	r3, [r7, #16]
}
 800c0fc:	bf00      	nop
 800c0fe:	e7fe      	b.n	800c0fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	685a      	ldr	r2, [r3, #4]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	1ad2      	subs	r2, r2, r3
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c112:	69b8      	ldr	r0, [r7, #24]
 800c114:	f000 f908 	bl	800c328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c118:	4b1d      	ldr	r3, [pc, #116]	; (800c190 <pvPortMalloc+0x188>)
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	4a1b      	ldr	r2, [pc, #108]	; (800c190 <pvPortMalloc+0x188>)
 800c124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c126:	4b1a      	ldr	r3, [pc, #104]	; (800c190 <pvPortMalloc+0x188>)
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	4b1b      	ldr	r3, [pc, #108]	; (800c198 <pvPortMalloc+0x190>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d203      	bcs.n	800c13a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c132:	4b17      	ldr	r3, [pc, #92]	; (800c190 <pvPortMalloc+0x188>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a18      	ldr	r2, [pc, #96]	; (800c198 <pvPortMalloc+0x190>)
 800c138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13c:	685a      	ldr	r2, [r3, #4]
 800c13e:	4b13      	ldr	r3, [pc, #76]	; (800c18c <pvPortMalloc+0x184>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	431a      	orrs	r2, r3
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	2200      	movs	r2, #0
 800c14c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c14e:	4b13      	ldr	r3, [pc, #76]	; (800c19c <pvPortMalloc+0x194>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	3301      	adds	r3, #1
 800c154:	4a11      	ldr	r2, [pc, #68]	; (800c19c <pvPortMalloc+0x194>)
 800c156:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c158:	f7fe fbfe 	bl	800a958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	f003 0307 	and.w	r3, r3, #7
 800c162:	2b00      	cmp	r3, #0
 800c164:	d00a      	beq.n	800c17c <pvPortMalloc+0x174>
	__asm volatile
 800c166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	60fb      	str	r3, [r7, #12]
}
 800c178:	bf00      	nop
 800c17a:	e7fe      	b.n	800c17a <pvPortMalloc+0x172>
	return pvReturn;
 800c17c:	69fb      	ldr	r3, [r7, #28]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3728      	adds	r7, #40	; 0x28
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	20004bc0 	.word	0x20004bc0
 800c18c:	20004bd4 	.word	0x20004bd4
 800c190:	20004bc4 	.word	0x20004bc4
 800c194:	20004bb8 	.word	0x20004bb8
 800c198:	20004bc8 	.word	0x20004bc8
 800c19c:	20004bcc 	.word	0x20004bcc

0800c1a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d04d      	beq.n	800c24e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1b2:	2308      	movs	r3, #8
 800c1b4:	425b      	negs	r3, r3
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	685a      	ldr	r2, [r3, #4]
 800c1c4:	4b24      	ldr	r3, [pc, #144]	; (800c258 <vPortFree+0xb8>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4013      	ands	r3, r2
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10a      	bne.n	800c1e4 <vPortFree+0x44>
	__asm volatile
 800c1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	60fb      	str	r3, [r7, #12]
}
 800c1e0:	bf00      	nop
 800c1e2:	e7fe      	b.n	800c1e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00a      	beq.n	800c202 <vPortFree+0x62>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	60bb      	str	r3, [r7, #8]
}
 800c1fe:	bf00      	nop
 800c200:	e7fe      	b.n	800c200 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	685a      	ldr	r2, [r3, #4]
 800c206:	4b14      	ldr	r3, [pc, #80]	; (800c258 <vPortFree+0xb8>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4013      	ands	r3, r2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d01e      	beq.n	800c24e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d11a      	bne.n	800c24e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	4b0e      	ldr	r3, [pc, #56]	; (800c258 <vPortFree+0xb8>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	43db      	mvns	r3, r3
 800c222:	401a      	ands	r2, r3
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c228:	f7fe fb88 	bl	800a93c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	685a      	ldr	r2, [r3, #4]
 800c230:	4b0a      	ldr	r3, [pc, #40]	; (800c25c <vPortFree+0xbc>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4413      	add	r3, r2
 800c236:	4a09      	ldr	r2, [pc, #36]	; (800c25c <vPortFree+0xbc>)
 800c238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c23a:	6938      	ldr	r0, [r7, #16]
 800c23c:	f000 f874 	bl	800c328 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <vPortFree+0xc0>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3301      	adds	r3, #1
 800c246:	4a06      	ldr	r2, [pc, #24]	; (800c260 <vPortFree+0xc0>)
 800c248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c24a:	f7fe fb85 	bl	800a958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c24e:	bf00      	nop
 800c250:	3718      	adds	r7, #24
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20004bd4 	.word	0x20004bd4
 800c25c:	20004bc4 	.word	0x20004bc4
 800c260:	20004bd0 	.word	0x20004bd0

0800c264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c26a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c26e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c270:	4b27      	ldr	r3, [pc, #156]	; (800c310 <prvHeapInit+0xac>)
 800c272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f003 0307 	and.w	r3, r3, #7
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00c      	beq.n	800c298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3307      	adds	r3, #7
 800c282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f023 0307 	bic.w	r3, r3, #7
 800c28a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	4a1f      	ldr	r2, [pc, #124]	; (800c310 <prvHeapInit+0xac>)
 800c294:	4413      	add	r3, r2
 800c296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c29c:	4a1d      	ldr	r2, [pc, #116]	; (800c314 <prvHeapInit+0xb0>)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2a2:	4b1c      	ldr	r3, [pc, #112]	; (800c314 <prvHeapInit+0xb0>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2b0:	2208      	movs	r2, #8
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	1a9b      	subs	r3, r3, r2
 800c2b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f023 0307 	bic.w	r3, r3, #7
 800c2be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	4a15      	ldr	r2, [pc, #84]	; (800c318 <prvHeapInit+0xb4>)
 800c2c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c2c6:	4b14      	ldr	r3, [pc, #80]	; (800c318 <prvHeapInit+0xb4>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c2ce:	4b12      	ldr	r3, [pc, #72]	; (800c318 <prvHeapInit+0xb4>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	1ad2      	subs	r2, r2, r3
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2e4:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <prvHeapInit+0xb4>)
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	4a0a      	ldr	r2, [pc, #40]	; (800c31c <prvHeapInit+0xb8>)
 800c2f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	4a09      	ldr	r2, [pc, #36]	; (800c320 <prvHeapInit+0xbc>)
 800c2fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c2fc:	4b09      	ldr	r3, [pc, #36]	; (800c324 <prvHeapInit+0xc0>)
 800c2fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c302:	601a      	str	r2, [r3, #0]
}
 800c304:	bf00      	nop
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr
 800c310:	20000fb8 	.word	0x20000fb8
 800c314:	20004bb8 	.word	0x20004bb8
 800c318:	20004bc0 	.word	0x20004bc0
 800c31c:	20004bc8 	.word	0x20004bc8
 800c320:	20004bc4 	.word	0x20004bc4
 800c324:	20004bd4 	.word	0x20004bd4

0800c328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c330:	4b28      	ldr	r3, [pc, #160]	; (800c3d4 <prvInsertBlockIntoFreeList+0xac>)
 800c332:	60fb      	str	r3, [r7, #12]
 800c334:	e002      	b.n	800c33c <prvInsertBlockIntoFreeList+0x14>
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	429a      	cmp	r2, r3
 800c344:	d8f7      	bhi.n	800c336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	4413      	add	r3, r2
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	429a      	cmp	r2, r3
 800c356:	d108      	bne.n	800c36a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	685a      	ldr	r2, [r3, #4]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	441a      	add	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	441a      	add	r2, r3
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d118      	bne.n	800c3b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	4b15      	ldr	r3, [pc, #84]	; (800c3d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	429a      	cmp	r2, r3
 800c388:	d00d      	beq.n	800c3a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	441a      	add	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	e008      	b.n	800c3b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3a6:	4b0c      	ldr	r3, [pc, #48]	; (800c3d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	601a      	str	r2, [r3, #0]
 800c3ae:	e003      	b.n	800c3b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d002      	beq.n	800c3c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3c6:	bf00      	nop
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	20004bb8 	.word	0x20004bb8
 800c3d8:	20004bc0 	.word	0x20004bc0

0800c3dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	4912      	ldr	r1, [pc, #72]	; (800c42c <MX_USB_DEVICE_Init+0x50>)
 800c3e4:	4812      	ldr	r0, [pc, #72]	; (800c430 <MX_USB_DEVICE_Init+0x54>)
 800c3e6:	f7fb fa61 	bl	80078ac <USBD_Init>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c3f0:	f7f4 fc77 	bl	8000ce2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c3f4:	490f      	ldr	r1, [pc, #60]	; (800c434 <MX_USB_DEVICE_Init+0x58>)
 800c3f6:	480e      	ldr	r0, [pc, #56]	; (800c430 <MX_USB_DEVICE_Init+0x54>)
 800c3f8:	f7fb fa88 	bl	800790c <USBD_RegisterClass>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d001      	beq.n	800c406 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c402:	f7f4 fc6e 	bl	8000ce2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c406:	490c      	ldr	r1, [pc, #48]	; (800c438 <MX_USB_DEVICE_Init+0x5c>)
 800c408:	4809      	ldr	r0, [pc, #36]	; (800c430 <MX_USB_DEVICE_Init+0x54>)
 800c40a:	f7fb f9a9 	bl	8007760 <USBD_CDC_RegisterInterface>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d001      	beq.n	800c418 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c414:	f7f4 fc65 	bl	8000ce2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c418:	4805      	ldr	r0, [pc, #20]	; (800c430 <MX_USB_DEVICE_Init+0x54>)
 800c41a:	f7fb fa9e 	bl	800795a <USBD_Start>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c424:	f7f4 fc5d 	bl	8000ce2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c428:	bf00      	nop
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	20000134 	.word	0x20000134
 800c430:	20006634 	.word	0x20006634
 800c434:	20000018 	.word	0x20000018
 800c438:	20000120 	.word	0x20000120

0800c43c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c440:	2200      	movs	r2, #0
 800c442:	4905      	ldr	r1, [pc, #20]	; (800c458 <CDC_Init_FS+0x1c>)
 800c444:	4805      	ldr	r0, [pc, #20]	; (800c45c <CDC_Init_FS+0x20>)
 800c446:	f7fb f9a0 	bl	800778a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c44a:	4905      	ldr	r1, [pc, #20]	; (800c460 <CDC_Init_FS+0x24>)
 800c44c:	4803      	ldr	r0, [pc, #12]	; (800c45c <CDC_Init_FS+0x20>)
 800c44e:	f7fb f9ba 	bl	80077c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c452:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c454:	4618      	mov	r0, r3
 800c456:	bd80      	pop	{r7, pc}
 800c458:	20007104 	.word	0x20007104
 800c45c:	20006634 	.word	0x20006634
 800c460:	20006904 	.word	0x20006904

0800c464 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c464:	b480      	push	{r7}
 800c466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c468:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	4603      	mov	r3, r0
 800c47c:	6039      	str	r1, [r7, #0]
 800c47e:	71fb      	strb	r3, [r7, #7]
 800c480:	4613      	mov	r3, r2
 800c482:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c484:	79fb      	ldrb	r3, [r7, #7]
 800c486:	2b23      	cmp	r3, #35	; 0x23
 800c488:	d84a      	bhi.n	800c520 <CDC_Control_FS+0xac>
 800c48a:	a201      	add	r2, pc, #4	; (adr r2, 800c490 <CDC_Control_FS+0x1c>)
 800c48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c490:	0800c521 	.word	0x0800c521
 800c494:	0800c521 	.word	0x0800c521
 800c498:	0800c521 	.word	0x0800c521
 800c49c:	0800c521 	.word	0x0800c521
 800c4a0:	0800c521 	.word	0x0800c521
 800c4a4:	0800c521 	.word	0x0800c521
 800c4a8:	0800c521 	.word	0x0800c521
 800c4ac:	0800c521 	.word	0x0800c521
 800c4b0:	0800c521 	.word	0x0800c521
 800c4b4:	0800c521 	.word	0x0800c521
 800c4b8:	0800c521 	.word	0x0800c521
 800c4bc:	0800c521 	.word	0x0800c521
 800c4c0:	0800c521 	.word	0x0800c521
 800c4c4:	0800c521 	.word	0x0800c521
 800c4c8:	0800c521 	.word	0x0800c521
 800c4cc:	0800c521 	.word	0x0800c521
 800c4d0:	0800c521 	.word	0x0800c521
 800c4d4:	0800c521 	.word	0x0800c521
 800c4d8:	0800c521 	.word	0x0800c521
 800c4dc:	0800c521 	.word	0x0800c521
 800c4e0:	0800c521 	.word	0x0800c521
 800c4e4:	0800c521 	.word	0x0800c521
 800c4e8:	0800c521 	.word	0x0800c521
 800c4ec:	0800c521 	.word	0x0800c521
 800c4f0:	0800c521 	.word	0x0800c521
 800c4f4:	0800c521 	.word	0x0800c521
 800c4f8:	0800c521 	.word	0x0800c521
 800c4fc:	0800c521 	.word	0x0800c521
 800c500:	0800c521 	.word	0x0800c521
 800c504:	0800c521 	.word	0x0800c521
 800c508:	0800c521 	.word	0x0800c521
 800c50c:	0800c521 	.word	0x0800c521
 800c510:	0800c521 	.word	0x0800c521
 800c514:	0800c521 	.word	0x0800c521
 800c518:	0800c521 	.word	0x0800c521
 800c51c:	0800c521 	.word	0x0800c521
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c520:	bf00      	nop
  }

  return (USBD_OK);
 800c522:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c524:	4618      	mov	r0, r3
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c53a:	6879      	ldr	r1, [r7, #4]
 800c53c:	4805      	ldr	r0, [pc, #20]	; (800c554 <CDC_Receive_FS+0x24>)
 800c53e:	f7fb f942 	bl	80077c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c542:	4804      	ldr	r0, [pc, #16]	; (800c554 <CDC_Receive_FS+0x24>)
 800c544:	f7fb f988 	bl	8007858 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c548:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	20006634 	.word	0x20006634

0800c558 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	460b      	mov	r3, r1
 800c562:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c568:	4b0d      	ldr	r3, [pc, #52]	; (800c5a0 <CDC_Transmit_FS+0x48>)
 800c56a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c56e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c576:	2b00      	cmp	r3, #0
 800c578:	d001      	beq.n	800c57e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c57a:	2301      	movs	r3, #1
 800c57c:	e00b      	b.n	800c596 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c57e:	887b      	ldrh	r3, [r7, #2]
 800c580:	461a      	mov	r2, r3
 800c582:	6879      	ldr	r1, [r7, #4]
 800c584:	4806      	ldr	r0, [pc, #24]	; (800c5a0 <CDC_Transmit_FS+0x48>)
 800c586:	f7fb f900 	bl	800778a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c58a:	4805      	ldr	r0, [pc, #20]	; (800c5a0 <CDC_Transmit_FS+0x48>)
 800c58c:	f7fb f934 	bl	80077f8 <USBD_CDC_TransmitPacket>
 800c590:	4603      	mov	r3, r0
 800c592:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c594:	7bfb      	ldrb	r3, [r7, #15]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	20006634 	.word	0x20006634

0800c5a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b087      	sub	sp, #28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c5b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	371c      	adds	r7, #28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
	...

0800c5c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	6039      	str	r1, [r7, #0]
 800c5d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2212      	movs	r2, #18
 800c5d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c5da:	4b03      	ldr	r3, [pc, #12]	; (800c5e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr
 800c5e8:	20000150 	.word	0x20000150

0800c5ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	6039      	str	r1, [r7, #0]
 800c5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2204      	movs	r2, #4
 800c5fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c5fe:	4b03      	ldr	r3, [pc, #12]	; (800c60c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c600:	4618      	mov	r0, r3
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	20000164 	.word	0x20000164

0800c610 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	6039      	str	r1, [r7, #0]
 800c61a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c61c:	79fb      	ldrb	r3, [r7, #7]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d105      	bne.n	800c62e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	4907      	ldr	r1, [pc, #28]	; (800c644 <USBD_FS_ProductStrDescriptor+0x34>)
 800c626:	4808      	ldr	r0, [pc, #32]	; (800c648 <USBD_FS_ProductStrDescriptor+0x38>)
 800c628:	f7fc f9c9 	bl	80089be <USBD_GetString>
 800c62c:	e004      	b.n	800c638 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	4904      	ldr	r1, [pc, #16]	; (800c644 <USBD_FS_ProductStrDescriptor+0x34>)
 800c632:	4805      	ldr	r0, [pc, #20]	; (800c648 <USBD_FS_ProductStrDescriptor+0x38>)
 800c634:	f7fc f9c3 	bl	80089be <USBD_GetString>
  }
  return USBD_StrDesc;
 800c638:	4b02      	ldr	r3, [pc, #8]	; (800c644 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	20007904 	.word	0x20007904
 800c648:	0800d0dc 	.word	0x0800d0dc

0800c64c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	4603      	mov	r3, r0
 800c654:	6039      	str	r1, [r7, #0]
 800c656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	4904      	ldr	r1, [pc, #16]	; (800c66c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c65c:	4804      	ldr	r0, [pc, #16]	; (800c670 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c65e:	f7fc f9ae 	bl	80089be <USBD_GetString>
  return USBD_StrDesc;
 800c662:	4b02      	ldr	r3, [pc, #8]	; (800c66c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c664:	4618      	mov	r0, r3
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20007904 	.word	0x20007904
 800c670:	0800d0f4 	.word	0x0800d0f4

0800c674 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	4603      	mov	r3, r0
 800c67c:	6039      	str	r1, [r7, #0]
 800c67e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	221a      	movs	r2, #26
 800c684:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c686:	f000 f843 	bl	800c710 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c68a:	4b02      	ldr	r3, [pc, #8]	; (800c694 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	20000168 	.word	0x20000168

0800c698 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	4603      	mov	r3, r0
 800c6a0:	6039      	str	r1, [r7, #0]
 800c6a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c6a4:	79fb      	ldrb	r3, [r7, #7]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d105      	bne.n	800c6b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6aa:	683a      	ldr	r2, [r7, #0]
 800c6ac:	4907      	ldr	r1, [pc, #28]	; (800c6cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6ae:	4808      	ldr	r0, [pc, #32]	; (800c6d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6b0:	f7fc f985 	bl	80089be <USBD_GetString>
 800c6b4:	e004      	b.n	800c6c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	4904      	ldr	r1, [pc, #16]	; (800c6cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6ba:	4805      	ldr	r0, [pc, #20]	; (800c6d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6bc:	f7fc f97f 	bl	80089be <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6c0:	4b02      	ldr	r3, [pc, #8]	; (800c6cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	20007904 	.word	0x20007904
 800c6d0:	0800d108 	.word	0x0800d108

0800c6d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	4603      	mov	r3, r0
 800c6dc:	6039      	str	r1, [r7, #0]
 800c6de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6e0:	79fb      	ldrb	r3, [r7, #7]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d105      	bne.n	800c6f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	4907      	ldr	r1, [pc, #28]	; (800c708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6ea:	4808      	ldr	r0, [pc, #32]	; (800c70c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c6ec:	f7fc f967 	bl	80089be <USBD_GetString>
 800c6f0:	e004      	b.n	800c6fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	4904      	ldr	r1, [pc, #16]	; (800c708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6f6:	4805      	ldr	r0, [pc, #20]	; (800c70c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c6f8:	f7fc f961 	bl	80089be <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6fc:	4b02      	ldr	r3, [pc, #8]	; (800c708 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	20007904 	.word	0x20007904
 800c70c:	0800d114 	.word	0x0800d114

0800c710 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c716:	4b0f      	ldr	r3, [pc, #60]	; (800c754 <Get_SerialNum+0x44>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c71c:	4b0e      	ldr	r3, [pc, #56]	; (800c758 <Get_SerialNum+0x48>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c722:	4b0e      	ldr	r3, [pc, #56]	; (800c75c <Get_SerialNum+0x4c>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4413      	add	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d009      	beq.n	800c74a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c736:	2208      	movs	r2, #8
 800c738:	4909      	ldr	r1, [pc, #36]	; (800c760 <Get_SerialNum+0x50>)
 800c73a:	68f8      	ldr	r0, [r7, #12]
 800c73c:	f000 f814 	bl	800c768 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c740:	2204      	movs	r2, #4
 800c742:	4908      	ldr	r1, [pc, #32]	; (800c764 <Get_SerialNum+0x54>)
 800c744:	68b8      	ldr	r0, [r7, #8]
 800c746:	f000 f80f 	bl	800c768 <IntToUnicode>
  }
}
 800c74a:	bf00      	nop
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	1fff7a10 	.word	0x1fff7a10
 800c758:	1fff7a14 	.word	0x1fff7a14
 800c75c:	1fff7a18 	.word	0x1fff7a18
 800c760:	2000016a 	.word	0x2000016a
 800c764:	2000017a 	.word	0x2000017a

0800c768 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c768:	b480      	push	{r7}
 800c76a:	b087      	sub	sp, #28
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	4613      	mov	r3, r2
 800c774:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c77a:	2300      	movs	r3, #0
 800c77c:	75fb      	strb	r3, [r7, #23]
 800c77e:	e027      	b.n	800c7d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	0f1b      	lsrs	r3, r3, #28
 800c784:	2b09      	cmp	r3, #9
 800c786:	d80b      	bhi.n	800c7a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	0f1b      	lsrs	r3, r3, #28
 800c78c:	b2da      	uxtb	r2, r3
 800c78e:	7dfb      	ldrb	r3, [r7, #23]
 800c790:	005b      	lsls	r3, r3, #1
 800c792:	4619      	mov	r1, r3
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	440b      	add	r3, r1
 800c798:	3230      	adds	r2, #48	; 0x30
 800c79a:	b2d2      	uxtb	r2, r2
 800c79c:	701a      	strb	r2, [r3, #0]
 800c79e:	e00a      	b.n	800c7b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	0f1b      	lsrs	r3, r3, #28
 800c7a4:	b2da      	uxtb	r2, r3
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	440b      	add	r3, r1
 800c7b0:	3237      	adds	r2, #55	; 0x37
 800c7b2:	b2d2      	uxtb	r2, r2
 800c7b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	011b      	lsls	r3, r3, #4
 800c7ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c7bc:	7dfb      	ldrb	r3, [r7, #23]
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	68ba      	ldr	r2, [r7, #8]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c7ca:	7dfb      	ldrb	r3, [r7, #23]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	75fb      	strb	r3, [r7, #23]
 800c7d0:	7dfa      	ldrb	r2, [r7, #23]
 800c7d2:	79fb      	ldrb	r3, [r7, #7]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d3d3      	bcc.n	800c780 <IntToUnicode+0x18>
  }
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	371c      	adds	r7, #28
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
	...

0800c7e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b08a      	sub	sp, #40	; 0x28
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7f0:	f107 0314 	add.w	r3, r7, #20
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	601a      	str	r2, [r3, #0]
 800c7f8:	605a      	str	r2, [r3, #4]
 800c7fa:	609a      	str	r2, [r3, #8]
 800c7fc:	60da      	str	r2, [r3, #12]
 800c7fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c808:	d147      	bne.n	800c89a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c80a:	2300      	movs	r3, #0
 800c80c:	613b      	str	r3, [r7, #16]
 800c80e:	4b25      	ldr	r3, [pc, #148]	; (800c8a4 <HAL_PCD_MspInit+0xbc>)
 800c810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c812:	4a24      	ldr	r2, [pc, #144]	; (800c8a4 <HAL_PCD_MspInit+0xbc>)
 800c814:	f043 0301 	orr.w	r3, r3, #1
 800c818:	6313      	str	r3, [r2, #48]	; 0x30
 800c81a:	4b22      	ldr	r3, [pc, #136]	; (800c8a4 <HAL_PCD_MspInit+0xbc>)
 800c81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c81e:	f003 0301 	and.w	r3, r3, #1
 800c822:	613b      	str	r3, [r7, #16]
 800c824:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c82a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c82c:	2300      	movs	r3, #0
 800c82e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c830:	2300      	movs	r3, #0
 800c832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c834:	f107 0314 	add.w	r3, r7, #20
 800c838:	4619      	mov	r1, r3
 800c83a:	481b      	ldr	r0, [pc, #108]	; (800c8a8 <HAL_PCD_MspInit+0xc0>)
 800c83c:	f7f5 fb12 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c840:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c846:	2302      	movs	r3, #2
 800c848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c84a:	2300      	movs	r3, #0
 800c84c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c84e:	2300      	movs	r3, #0
 800c850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c852:	230a      	movs	r3, #10
 800c854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c856:	f107 0314 	add.w	r3, r7, #20
 800c85a:	4619      	mov	r1, r3
 800c85c:	4812      	ldr	r0, [pc, #72]	; (800c8a8 <HAL_PCD_MspInit+0xc0>)
 800c85e:	f7f5 fb01 	bl	8001e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c862:	4b10      	ldr	r3, [pc, #64]	; (800c8a4 <HAL_PCD_MspInit+0xbc>)
 800c864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c866:	4a0f      	ldr	r2, [pc, #60]	; (800c8a4 <HAL_PCD_MspInit+0xbc>)
 800c868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c86c:	6353      	str	r3, [r2, #52]	; 0x34
 800c86e:	2300      	movs	r3, #0
 800c870:	60fb      	str	r3, [r7, #12]
 800c872:	4b0c      	ldr	r3, [pc, #48]	; (800c8a4 <HAL_PCD_MspInit+0xbc>)
 800c874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c876:	4a0b      	ldr	r2, [pc, #44]	; (800c8a4 <HAL_PCD_MspInit+0xbc>)
 800c878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c87c:	6453      	str	r3, [r2, #68]	; 0x44
 800c87e:	4b09      	ldr	r3, [pc, #36]	; (800c8a4 <HAL_PCD_MspInit+0xbc>)
 800c880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c88a:	2200      	movs	r2, #0
 800c88c:	2105      	movs	r1, #5
 800c88e:	2043      	movs	r0, #67	; 0x43
 800c890:	f7f5 fabe 	bl	8001e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c894:	2043      	movs	r0, #67	; 0x43
 800c896:	f7f5 fad7 	bl	8001e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c89a:	bf00      	nop
 800c89c:	3728      	adds	r7, #40	; 0x28
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	40023800 	.word	0x40023800
 800c8a8:	40020000 	.word	0x40020000

0800c8ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	f7fb f894 	bl	80079f0 <USBD_LL_SetupStage>
}
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c8e2:	78fa      	ldrb	r2, [r7, #3]
 800c8e4:	6879      	ldr	r1, [r7, #4]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	00db      	lsls	r3, r3, #3
 800c8ea:	1a9b      	subs	r3, r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	440b      	add	r3, r1
 800c8f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	78fb      	ldrb	r3, [r7, #3]
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	f7fb f8ce 	bl	8007a9a <USBD_LL_DataOutStage>
}
 800c8fe:	bf00      	nop
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b082      	sub	sp, #8
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	460b      	mov	r3, r1
 800c910:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c918:	78fa      	ldrb	r2, [r7, #3]
 800c91a:	6879      	ldr	r1, [r7, #4]
 800c91c:	4613      	mov	r3, r2
 800c91e:	00db      	lsls	r3, r3, #3
 800c920:	1a9b      	subs	r3, r3, r2
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	440b      	add	r3, r1
 800c926:	3348      	adds	r3, #72	; 0x48
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	78fb      	ldrb	r3, [r7, #3]
 800c92c:	4619      	mov	r1, r3
 800c92e:	f7fb f917 	bl	8007b60 <USBD_LL_DataInStage>
}
 800c932:	bf00      	nop
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b082      	sub	sp, #8
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fb fa2b 	bl	8007da4 <USBD_LL_SOF>
}
 800c94e:	bf00      	nop
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b084      	sub	sp, #16
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c95e:	2301      	movs	r3, #1
 800c960:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d102      	bne.n	800c970 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c96a:	2300      	movs	r3, #0
 800c96c:	73fb      	strb	r3, [r7, #15]
 800c96e:	e008      	b.n	800c982 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	2b02      	cmp	r3, #2
 800c976:	d102      	bne.n	800c97e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c978:	2301      	movs	r3, #1
 800c97a:	73fb      	strb	r3, [r7, #15]
 800c97c:	e001      	b.n	800c982 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c97e:	f7f4 f9b0 	bl	8000ce2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c988:	7bfa      	ldrb	r2, [r7, #15]
 800c98a:	4611      	mov	r1, r2
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fb f9cb 	bl	8007d28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fb f977 	bl	8007c8c <USBD_LL_Reset>
}
 800c99e:	bf00      	nop
 800c9a0:	3710      	adds	r7, #16
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
	...

0800c9a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fb f9c6 	bl	8007d48 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	6812      	ldr	r2, [r2, #0]
 800c9ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9ce:	f043 0301 	orr.w	r3, r3, #1
 800c9d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6a1b      	ldr	r3, [r3, #32]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d005      	beq.n	800c9e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9dc:	4b04      	ldr	r3, [pc, #16]	; (800c9f0 <HAL_PCD_SuspendCallback+0x48>)
 800c9de:	691b      	ldr	r3, [r3, #16]
 800c9e0:	4a03      	ldr	r2, [pc, #12]	; (800c9f0 <HAL_PCD_SuspendCallback+0x48>)
 800c9e2:	f043 0306 	orr.w	r3, r3, #6
 800c9e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c9e8:	bf00      	nop
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	e000ed00 	.word	0xe000ed00

0800c9f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fb f9b6 	bl	8007d74 <USBD_LL_Resume>
}
 800ca08:	bf00      	nop
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca22:	78fa      	ldrb	r2, [r7, #3]
 800ca24:	4611      	mov	r1, r2
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fb fa04 	bl	8007e34 <USBD_LL_IsoOUTIncomplete>
}
 800ca2c:	bf00      	nop
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca46:	78fa      	ldrb	r2, [r7, #3]
 800ca48:	4611      	mov	r1, r2
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fb f9cc 	bl	8007de8 <USBD_LL_IsoINIncomplete>
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fb fa0a 	bl	8007e80 <USBD_LL_DevConnected>
}
 800ca6c:	bf00      	nop
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fb fa07 	bl	8007e96 <USBD_LL_DevDisconnected>
}
 800ca88:	bf00      	nop
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d13c      	bne.n	800cb1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800caa0:	4a20      	ldr	r2, [pc, #128]	; (800cb24 <USBD_LL_Init+0x94>)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	4a1e      	ldr	r2, [pc, #120]	; (800cb24 <USBD_LL_Init+0x94>)
 800caac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cab0:	4b1c      	ldr	r3, [pc, #112]	; (800cb24 <USBD_LL_Init+0x94>)
 800cab2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cab6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cab8:	4b1a      	ldr	r3, [pc, #104]	; (800cb24 <USBD_LL_Init+0x94>)
 800caba:	2204      	movs	r2, #4
 800cabc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cabe:	4b19      	ldr	r3, [pc, #100]	; (800cb24 <USBD_LL_Init+0x94>)
 800cac0:	2202      	movs	r2, #2
 800cac2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cac4:	4b17      	ldr	r3, [pc, #92]	; (800cb24 <USBD_LL_Init+0x94>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800caca:	4b16      	ldr	r3, [pc, #88]	; (800cb24 <USBD_LL_Init+0x94>)
 800cacc:	2202      	movs	r2, #2
 800cace:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cad0:	4b14      	ldr	r3, [pc, #80]	; (800cb24 <USBD_LL_Init+0x94>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cad6:	4b13      	ldr	r3, [pc, #76]	; (800cb24 <USBD_LL_Init+0x94>)
 800cad8:	2200      	movs	r2, #0
 800cada:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cadc:	4b11      	ldr	r3, [pc, #68]	; (800cb24 <USBD_LL_Init+0x94>)
 800cade:	2200      	movs	r2, #0
 800cae0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cae2:	4b10      	ldr	r3, [pc, #64]	; (800cb24 <USBD_LL_Init+0x94>)
 800cae4:	2200      	movs	r2, #0
 800cae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cae8:	4b0e      	ldr	r3, [pc, #56]	; (800cb24 <USBD_LL_Init+0x94>)
 800caea:	2200      	movs	r2, #0
 800caec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800caee:	480d      	ldr	r0, [pc, #52]	; (800cb24 <USBD_LL_Init+0x94>)
 800caf0:	f7f6 f984 	bl	8002dfc <HAL_PCD_Init>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cafa:	f7f4 f8f2 	bl	8000ce2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cafe:	2180      	movs	r1, #128	; 0x80
 800cb00:	4808      	ldr	r0, [pc, #32]	; (800cb24 <USBD_LL_Init+0x94>)
 800cb02:	f7f7 fae2 	bl	80040ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb06:	2240      	movs	r2, #64	; 0x40
 800cb08:	2100      	movs	r1, #0
 800cb0a:	4806      	ldr	r0, [pc, #24]	; (800cb24 <USBD_LL_Init+0x94>)
 800cb0c:	f7f7 fa96 	bl	800403c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb10:	2280      	movs	r2, #128	; 0x80
 800cb12:	2101      	movs	r1, #1
 800cb14:	4803      	ldr	r0, [pc, #12]	; (800cb24 <USBD_LL_Init+0x94>)
 800cb16:	f7f7 fa91 	bl	800403c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cb1a:	2300      	movs	r3, #0
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3708      	adds	r7, #8
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	20007b04 	.word	0x20007b04

0800cb28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb34:	2300      	movs	r3, #0
 800cb36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7f6 fa79 	bl	8003036 <HAL_PCD_Start>
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb48:	7bfb      	ldrb	r3, [r7, #15]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f000 f942 	bl	800cdd4 <USBD_Get_USB_Status>
 800cb50:	4603      	mov	r3, r0
 800cb52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb54:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	4608      	mov	r0, r1
 800cb68:	4611      	mov	r1, r2
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	70fb      	strb	r3, [r7, #3]
 800cb70:	460b      	mov	r3, r1
 800cb72:	70bb      	strb	r3, [r7, #2]
 800cb74:	4613      	mov	r3, r2
 800cb76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb86:	78bb      	ldrb	r3, [r7, #2]
 800cb88:	883a      	ldrh	r2, [r7, #0]
 800cb8a:	78f9      	ldrb	r1, [r7, #3]
 800cb8c:	f7f6 fe5d 	bl	800384a <HAL_PCD_EP_Open>
 800cb90:	4603      	mov	r3, r0
 800cb92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb94:	7bfb      	ldrb	r3, [r7, #15]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f000 f91c 	bl	800cdd4 <USBD_Get_USB_Status>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cba0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b084      	sub	sp, #16
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbc4:	78fa      	ldrb	r2, [r7, #3]
 800cbc6:	4611      	mov	r1, r2
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7f6 fea6 	bl	800391a <HAL_PCD_EP_Close>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f000 f8fd 	bl	800cdd4 <USBD_Get_USB_Status>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbde:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc02:	78fa      	ldrb	r2, [r7, #3]
 800cc04:	4611      	mov	r1, r2
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7f6 ff7e 	bl	8003b08 <HAL_PCD_EP_SetStall>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f000 f8de 	bl	800cdd4 <USBD_Get_USB_Status>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b084      	sub	sp, #16
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	460b      	mov	r3, r1
 800cc30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc40:	78fa      	ldrb	r2, [r7, #3]
 800cc42:	4611      	mov	r1, r2
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7f6 ffc3 	bl	8003bd0 <HAL_PCD_EP_ClrStall>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc4e:	7bfb      	ldrb	r3, [r7, #15]
 800cc50:	4618      	mov	r0, r3
 800cc52:	f000 f8bf 	bl	800cdd4 <USBD_Get_USB_Status>
 800cc56:	4603      	mov	r3, r0
 800cc58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b085      	sub	sp, #20
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	da0b      	bge.n	800cc98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc80:	78fb      	ldrb	r3, [r7, #3]
 800cc82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc86:	68f9      	ldr	r1, [r7, #12]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	00db      	lsls	r3, r3, #3
 800cc8c:	1a9b      	subs	r3, r3, r2
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	440b      	add	r3, r1
 800cc92:	333e      	adds	r3, #62	; 0x3e
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	e00b      	b.n	800ccb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc98:	78fb      	ldrb	r3, [r7, #3]
 800cc9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc9e:	68f9      	ldr	r1, [r7, #12]
 800cca0:	4613      	mov	r3, r2
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	1a9b      	subs	r3, r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	440b      	add	r3, r1
 800ccaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ccae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3714      	adds	r7, #20
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccd6:	78fa      	ldrb	r2, [r7, #3]
 800ccd8:	4611      	mov	r1, r2
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7f6 fd90 	bl	8003800 <HAL_PCD_SetAddress>
 800cce0:	4603      	mov	r3, r0
 800cce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cce4:	7bfb      	ldrb	r3, [r7, #15]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f000 f874 	bl	800cdd4 <USBD_Get_USB_Status>
 800ccec:	4603      	mov	r3, r0
 800ccee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3710      	adds	r7, #16
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b086      	sub	sp, #24
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	60f8      	str	r0, [r7, #12]
 800cd02:	607a      	str	r2, [r7, #4]
 800cd04:	603b      	str	r3, [r7, #0]
 800cd06:	460b      	mov	r3, r1
 800cd08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd18:	7af9      	ldrb	r1, [r7, #11]
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	f7f6 fea9 	bl	8003a74 <HAL_PCD_EP_Transmit>
 800cd22:	4603      	mov	r3, r0
 800cd24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f000 f853 	bl	800cdd4 <USBD_Get_USB_Status>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd32:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3718      	adds	r7, #24
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	607a      	str	r2, [r7, #4]
 800cd46:	603b      	str	r3, [r7, #0]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd5a:	7af9      	ldrb	r1, [r7, #11]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	f7f6 fe25 	bl	80039ae <HAL_PCD_EP_Receive>
 800cd64:	4603      	mov	r3, r0
 800cd66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd68:	7dfb      	ldrb	r3, [r7, #23]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f000 f832 	bl	800cdd4 <USBD_Get_USB_Status>
 800cd70:	4603      	mov	r3, r0
 800cd72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd74:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3718      	adds	r7, #24
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b082      	sub	sp, #8
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	460b      	mov	r3, r1
 800cd88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd90:	78fa      	ldrb	r2, [r7, #3]
 800cd92:	4611      	mov	r1, r2
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7f6 fe55 	bl	8003a44 <HAL_PCD_EP_GetRxCount>
 800cd9a:	4603      	mov	r3, r0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cdac:	4b03      	ldr	r3, [pc, #12]	; (800cdbc <USBD_static_malloc+0x18>)
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	20004bd8 	.word	0x20004bd8

0800cdc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]

}
 800cdc8:	bf00      	nop
 800cdca:	370c      	adds	r7, #12
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	4603      	mov	r3, r0
 800cddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cde2:	79fb      	ldrb	r3, [r7, #7]
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	d817      	bhi.n	800ce18 <USBD_Get_USB_Status+0x44>
 800cde8:	a201      	add	r2, pc, #4	; (adr r2, 800cdf0 <USBD_Get_USB_Status+0x1c>)
 800cdea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdee:	bf00      	nop
 800cdf0:	0800ce01 	.word	0x0800ce01
 800cdf4:	0800ce07 	.word	0x0800ce07
 800cdf8:	0800ce0d 	.word	0x0800ce0d
 800cdfc:	0800ce13 	.word	0x0800ce13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce00:	2300      	movs	r3, #0
 800ce02:	73fb      	strb	r3, [r7, #15]
    break;
 800ce04:	e00b      	b.n	800ce1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce06:	2303      	movs	r3, #3
 800ce08:	73fb      	strb	r3, [r7, #15]
    break;
 800ce0a:	e008      	b.n	800ce1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce10:	e005      	b.n	800ce1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce12:	2303      	movs	r3, #3
 800ce14:	73fb      	strb	r3, [r7, #15]
    break;
 800ce16:	e002      	b.n	800ce1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce18:	2303      	movs	r3, #3
 800ce1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce1c:	bf00      	nop
  }
  return usb_status;
 800ce1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3714      	adds	r7, #20
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <__libc_init_array>:
 800ce2c:	b570      	push	{r4, r5, r6, lr}
 800ce2e:	4d0d      	ldr	r5, [pc, #52]	; (800ce64 <__libc_init_array+0x38>)
 800ce30:	4c0d      	ldr	r4, [pc, #52]	; (800ce68 <__libc_init_array+0x3c>)
 800ce32:	1b64      	subs	r4, r4, r5
 800ce34:	10a4      	asrs	r4, r4, #2
 800ce36:	2600      	movs	r6, #0
 800ce38:	42a6      	cmp	r6, r4
 800ce3a:	d109      	bne.n	800ce50 <__libc_init_array+0x24>
 800ce3c:	4d0b      	ldr	r5, [pc, #44]	; (800ce6c <__libc_init_array+0x40>)
 800ce3e:	4c0c      	ldr	r4, [pc, #48]	; (800ce70 <__libc_init_array+0x44>)
 800ce40:	f000 f8f6 	bl	800d030 <_init>
 800ce44:	1b64      	subs	r4, r4, r5
 800ce46:	10a4      	asrs	r4, r4, #2
 800ce48:	2600      	movs	r6, #0
 800ce4a:	42a6      	cmp	r6, r4
 800ce4c:	d105      	bne.n	800ce5a <__libc_init_array+0x2e>
 800ce4e:	bd70      	pop	{r4, r5, r6, pc}
 800ce50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce54:	4798      	blx	r3
 800ce56:	3601      	adds	r6, #1
 800ce58:	e7ee      	b.n	800ce38 <__libc_init_array+0xc>
 800ce5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce5e:	4798      	blx	r3
 800ce60:	3601      	adds	r6, #1
 800ce62:	e7f2      	b.n	800ce4a <__libc_init_array+0x1e>
 800ce64:	0800d2a4 	.word	0x0800d2a4
 800ce68:	0800d2a4 	.word	0x0800d2a4
 800ce6c:	0800d2a4 	.word	0x0800d2a4
 800ce70:	0800d2a8 	.word	0x0800d2a8

0800ce74 <__retarget_lock_acquire_recursive>:
 800ce74:	4770      	bx	lr

0800ce76 <__retarget_lock_release_recursive>:
 800ce76:	4770      	bx	lr

0800ce78 <memcpy>:
 800ce78:	440a      	add	r2, r1
 800ce7a:	4291      	cmp	r1, r2
 800ce7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce80:	d100      	bne.n	800ce84 <memcpy+0xc>
 800ce82:	4770      	bx	lr
 800ce84:	b510      	push	{r4, lr}
 800ce86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce8e:	4291      	cmp	r1, r2
 800ce90:	d1f9      	bne.n	800ce86 <memcpy+0xe>
 800ce92:	bd10      	pop	{r4, pc}

0800ce94 <memset>:
 800ce94:	4402      	add	r2, r0
 800ce96:	4603      	mov	r3, r0
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d100      	bne.n	800ce9e <memset+0xa>
 800ce9c:	4770      	bx	lr
 800ce9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cea2:	e7f9      	b.n	800ce98 <memset+0x4>

0800cea4 <cleanup_glue>:
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	460c      	mov	r4, r1
 800cea8:	6809      	ldr	r1, [r1, #0]
 800ceaa:	4605      	mov	r5, r0
 800ceac:	b109      	cbz	r1, 800ceb2 <cleanup_glue+0xe>
 800ceae:	f7ff fff9 	bl	800cea4 <cleanup_glue>
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceba:	f000 b869 	b.w	800cf90 <_free_r>
	...

0800cec0 <_reclaim_reent>:
 800cec0:	4b2c      	ldr	r3, [pc, #176]	; (800cf74 <_reclaim_reent+0xb4>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4283      	cmp	r3, r0
 800cec6:	b570      	push	{r4, r5, r6, lr}
 800cec8:	4604      	mov	r4, r0
 800ceca:	d051      	beq.n	800cf70 <_reclaim_reent+0xb0>
 800cecc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cece:	b143      	cbz	r3, 800cee2 <_reclaim_reent+0x22>
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d14a      	bne.n	800cf6c <_reclaim_reent+0xac>
 800ced6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ced8:	6819      	ldr	r1, [r3, #0]
 800ceda:	b111      	cbz	r1, 800cee2 <_reclaim_reent+0x22>
 800cedc:	4620      	mov	r0, r4
 800cede:	f000 f857 	bl	800cf90 <_free_r>
 800cee2:	6961      	ldr	r1, [r4, #20]
 800cee4:	b111      	cbz	r1, 800ceec <_reclaim_reent+0x2c>
 800cee6:	4620      	mov	r0, r4
 800cee8:	f000 f852 	bl	800cf90 <_free_r>
 800ceec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ceee:	b111      	cbz	r1, 800cef6 <_reclaim_reent+0x36>
 800cef0:	4620      	mov	r0, r4
 800cef2:	f000 f84d 	bl	800cf90 <_free_r>
 800cef6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cef8:	b111      	cbz	r1, 800cf00 <_reclaim_reent+0x40>
 800cefa:	4620      	mov	r0, r4
 800cefc:	f000 f848 	bl	800cf90 <_free_r>
 800cf00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cf02:	b111      	cbz	r1, 800cf0a <_reclaim_reent+0x4a>
 800cf04:	4620      	mov	r0, r4
 800cf06:	f000 f843 	bl	800cf90 <_free_r>
 800cf0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cf0c:	b111      	cbz	r1, 800cf14 <_reclaim_reent+0x54>
 800cf0e:	4620      	mov	r0, r4
 800cf10:	f000 f83e 	bl	800cf90 <_free_r>
 800cf14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cf16:	b111      	cbz	r1, 800cf1e <_reclaim_reent+0x5e>
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f000 f839 	bl	800cf90 <_free_r>
 800cf1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cf20:	b111      	cbz	r1, 800cf28 <_reclaim_reent+0x68>
 800cf22:	4620      	mov	r0, r4
 800cf24:	f000 f834 	bl	800cf90 <_free_r>
 800cf28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf2a:	b111      	cbz	r1, 800cf32 <_reclaim_reent+0x72>
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f000 f82f 	bl	800cf90 <_free_r>
 800cf32:	69a3      	ldr	r3, [r4, #24]
 800cf34:	b1e3      	cbz	r3, 800cf70 <_reclaim_reent+0xb0>
 800cf36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf38:	4620      	mov	r0, r4
 800cf3a:	4798      	blx	r3
 800cf3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cf3e:	b1b9      	cbz	r1, 800cf70 <_reclaim_reent+0xb0>
 800cf40:	4620      	mov	r0, r4
 800cf42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf46:	f7ff bfad 	b.w	800cea4 <cleanup_glue>
 800cf4a:	5949      	ldr	r1, [r1, r5]
 800cf4c:	b941      	cbnz	r1, 800cf60 <_reclaim_reent+0xa0>
 800cf4e:	3504      	adds	r5, #4
 800cf50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf52:	2d80      	cmp	r5, #128	; 0x80
 800cf54:	68d9      	ldr	r1, [r3, #12]
 800cf56:	d1f8      	bne.n	800cf4a <_reclaim_reent+0x8a>
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f000 f819 	bl	800cf90 <_free_r>
 800cf5e:	e7ba      	b.n	800ced6 <_reclaim_reent+0x16>
 800cf60:	680e      	ldr	r6, [r1, #0]
 800cf62:	4620      	mov	r0, r4
 800cf64:	f000 f814 	bl	800cf90 <_free_r>
 800cf68:	4631      	mov	r1, r6
 800cf6a:	e7ef      	b.n	800cf4c <_reclaim_reent+0x8c>
 800cf6c:	2500      	movs	r5, #0
 800cf6e:	e7ef      	b.n	800cf50 <_reclaim_reent+0x90>
 800cf70:	bd70      	pop	{r4, r5, r6, pc}
 800cf72:	bf00      	nop
 800cf74:	20000184 	.word	0x20000184

0800cf78 <__malloc_lock>:
 800cf78:	4801      	ldr	r0, [pc, #4]	; (800cf80 <__malloc_lock+0x8>)
 800cf7a:	f7ff bf7b 	b.w	800ce74 <__retarget_lock_acquire_recursive>
 800cf7e:	bf00      	nop
 800cf80:	20007f10 	.word	0x20007f10

0800cf84 <__malloc_unlock>:
 800cf84:	4801      	ldr	r0, [pc, #4]	; (800cf8c <__malloc_unlock+0x8>)
 800cf86:	f7ff bf76 	b.w	800ce76 <__retarget_lock_release_recursive>
 800cf8a:	bf00      	nop
 800cf8c:	20007f10 	.word	0x20007f10

0800cf90 <_free_r>:
 800cf90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf92:	2900      	cmp	r1, #0
 800cf94:	d048      	beq.n	800d028 <_free_r+0x98>
 800cf96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf9a:	9001      	str	r0, [sp, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f1a1 0404 	sub.w	r4, r1, #4
 800cfa2:	bfb8      	it	lt
 800cfa4:	18e4      	addlt	r4, r4, r3
 800cfa6:	f7ff ffe7 	bl	800cf78 <__malloc_lock>
 800cfaa:	4a20      	ldr	r2, [pc, #128]	; (800d02c <_free_r+0x9c>)
 800cfac:	9801      	ldr	r0, [sp, #4]
 800cfae:	6813      	ldr	r3, [r2, #0]
 800cfb0:	4615      	mov	r5, r2
 800cfb2:	b933      	cbnz	r3, 800cfc2 <_free_r+0x32>
 800cfb4:	6063      	str	r3, [r4, #4]
 800cfb6:	6014      	str	r4, [r2, #0]
 800cfb8:	b003      	add	sp, #12
 800cfba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfbe:	f7ff bfe1 	b.w	800cf84 <__malloc_unlock>
 800cfc2:	42a3      	cmp	r3, r4
 800cfc4:	d90b      	bls.n	800cfde <_free_r+0x4e>
 800cfc6:	6821      	ldr	r1, [r4, #0]
 800cfc8:	1862      	adds	r2, r4, r1
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	bf04      	itt	eq
 800cfce:	681a      	ldreq	r2, [r3, #0]
 800cfd0:	685b      	ldreq	r3, [r3, #4]
 800cfd2:	6063      	str	r3, [r4, #4]
 800cfd4:	bf04      	itt	eq
 800cfd6:	1852      	addeq	r2, r2, r1
 800cfd8:	6022      	streq	r2, [r4, #0]
 800cfda:	602c      	str	r4, [r5, #0]
 800cfdc:	e7ec      	b.n	800cfb8 <_free_r+0x28>
 800cfde:	461a      	mov	r2, r3
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	b10b      	cbz	r3, 800cfe8 <_free_r+0x58>
 800cfe4:	42a3      	cmp	r3, r4
 800cfe6:	d9fa      	bls.n	800cfde <_free_r+0x4e>
 800cfe8:	6811      	ldr	r1, [r2, #0]
 800cfea:	1855      	adds	r5, r2, r1
 800cfec:	42a5      	cmp	r5, r4
 800cfee:	d10b      	bne.n	800d008 <_free_r+0x78>
 800cff0:	6824      	ldr	r4, [r4, #0]
 800cff2:	4421      	add	r1, r4
 800cff4:	1854      	adds	r4, r2, r1
 800cff6:	42a3      	cmp	r3, r4
 800cff8:	6011      	str	r1, [r2, #0]
 800cffa:	d1dd      	bne.n	800cfb8 <_free_r+0x28>
 800cffc:	681c      	ldr	r4, [r3, #0]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	6053      	str	r3, [r2, #4]
 800d002:	4421      	add	r1, r4
 800d004:	6011      	str	r1, [r2, #0]
 800d006:	e7d7      	b.n	800cfb8 <_free_r+0x28>
 800d008:	d902      	bls.n	800d010 <_free_r+0x80>
 800d00a:	230c      	movs	r3, #12
 800d00c:	6003      	str	r3, [r0, #0]
 800d00e:	e7d3      	b.n	800cfb8 <_free_r+0x28>
 800d010:	6825      	ldr	r5, [r4, #0]
 800d012:	1961      	adds	r1, r4, r5
 800d014:	428b      	cmp	r3, r1
 800d016:	bf04      	itt	eq
 800d018:	6819      	ldreq	r1, [r3, #0]
 800d01a:	685b      	ldreq	r3, [r3, #4]
 800d01c:	6063      	str	r3, [r4, #4]
 800d01e:	bf04      	itt	eq
 800d020:	1949      	addeq	r1, r1, r5
 800d022:	6021      	streq	r1, [r4, #0]
 800d024:	6054      	str	r4, [r2, #4]
 800d026:	e7c7      	b.n	800cfb8 <_free_r+0x28>
 800d028:	b003      	add	sp, #12
 800d02a:	bd30      	pop	{r4, r5, pc}
 800d02c:	20004df8 	.word	0x20004df8

0800d030 <_init>:
 800d030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d032:	bf00      	nop
 800d034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d036:	bc08      	pop	{r3}
 800d038:	469e      	mov	lr, r3
 800d03a:	4770      	bx	lr

0800d03c <_fini>:
 800d03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03e:	bf00      	nop
 800d040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d042:	bc08      	pop	{r3}
 800d044:	469e      	mov	lr, r3
 800d046:	4770      	bx	lr
