
FreeRTOS_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  0800e0e8  0800e0e8  0001e0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e404  0800e404  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e404  0800e404  0001e404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e40c  0800e40c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e40c  0800e40c  0001e40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e410  0800e410  0001e410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008154  200001e8  0800e5fc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000833c  0800e5fc  0002833c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030f1f  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fd7  00000000  00000000  00051137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002160  00000000  00000000  00057110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f20  00000000  00000000  00059270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ac5  00000000  00000000  0005b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d1cd  00000000  00000000  00084c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea7f5  00000000  00000000  000b1e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019c617  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092cc  00000000  00000000  0019c66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e0d0 	.word	0x0800e0d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e0d0 	.word	0x0800e0d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
return 0;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 ff84 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f896 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fa64 	bl	8000a84 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005bc:	f000 f974 	bl	80008a8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005c0:	f000 f9a0 	bl	8000904 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005c4:	f000 f9ce 	bl	8000964 <MX_SPI1_Init>
  MX_ADC1_Init();
 80005c8:	f000 f8f6 	bl	80007b8 <MX_ADC1_Init>
  MX_TIM4_Init();
 80005cc:	f000 fa00 	bl	80009d0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80005d0:	4829      	ldr	r0, [pc, #164]	; (8000678 <main+0xcc>)
 80005d2:	f001 f81d 	bl	8001610 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005d6:	2100      	movs	r1, #0
 80005d8:	4828      	ldr	r0, [pc, #160]	; (800067c <main+0xd0>)
 80005da:	f004 fe53 	bl	8005284 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005de:	f008 fc5f 	bl	8008ea0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BtnSem */
  BtnSemHandle = osSemaphoreNew(1, 1, &BtnSem_attributes);
 80005e2:	4a27      	ldr	r2, [pc, #156]	; (8000680 <main+0xd4>)
 80005e4:	2101      	movs	r1, #1
 80005e6:	2001      	movs	r0, #1
 80005e8:	f008 fd51 	bl	800908e <osSemaphoreNew>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a25      	ldr	r2, [pc, #148]	; (8000684 <main+0xd8>)
 80005f0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 80005f2:	4a25      	ldr	r2, [pc, #148]	; (8000688 <main+0xdc>)
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	200a      	movs	r0, #10
 80005f8:	f008 fe68 	bl	80092cc <osMessageQueueNew>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <main+0xe0>)
 8000600:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000602:	4a23      	ldr	r2, [pc, #140]	; (8000690 <main+0xe4>)
 8000604:	2100      	movs	r1, #0
 8000606:	4823      	ldr	r0, [pc, #140]	; (8000694 <main+0xe8>)
 8000608:	f008 fc94 	bl	8008f34 <osThreadNew>
 800060c:	4603      	mov	r3, r0
 800060e:	4a22      	ldr	r2, [pc, #136]	; (8000698 <main+0xec>)
 8000610:	6013      	str	r3, [r2, #0]

  /* creation of LED_BLUE_BLINK */
  LED_BLUE_BLINKHandle = osThreadNew(StartLED_BLUE_BLINK, NULL, &LED_BLUE_BLINK_attributes);
 8000612:	4a22      	ldr	r2, [pc, #136]	; (800069c <main+0xf0>)
 8000614:	2100      	movs	r1, #0
 8000616:	4822      	ldr	r0, [pc, #136]	; (80006a0 <main+0xf4>)
 8000618:	f008 fc8c 	bl	8008f34 <osThreadNew>
 800061c:	4603      	mov	r3, r0
 800061e:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <main+0xf8>)
 8000620:	6013      	str	r3, [r2, #0]

  /* creation of LED_YELLOW_ADC */
  LED_YELLOW_ADCHandle = osThreadNew(StartLED_YELLOW_ADC, NULL, &LED_YELLOW_ADC_attributes);
 8000622:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <main+0xfc>)
 8000624:	2100      	movs	r1, #0
 8000626:	4821      	ldr	r0, [pc, #132]	; (80006ac <main+0x100>)
 8000628:	f008 fc84 	bl	8008f34 <osThreadNew>
 800062c:	4603      	mov	r3, r0
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <main+0x104>)
 8000630:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(StartUART_Task, NULL, &UART_Task_attributes);
 8000632:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <main+0x108>)
 8000634:	2100      	movs	r1, #0
 8000636:	4820      	ldr	r0, [pc, #128]	; (80006b8 <main+0x10c>)
 8000638:	f008 fc7c 	bl	8008f34 <osThreadNew>
 800063c:	4603      	mov	r3, r0
 800063e:	4a1f      	ldr	r2, [pc, #124]	; (80006bc <main+0x110>)
 8000640:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Task */
  ADC_TaskHandle = osThreadNew(StartADC_Task, NULL, &ADC_Task_attributes);
 8000642:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <main+0x114>)
 8000644:	2100      	movs	r1, #0
 8000646:	481f      	ldr	r0, [pc, #124]	; (80006c4 <main+0x118>)
 8000648:	f008 fc74 	bl	8008f34 <osThreadNew>
 800064c:	4603      	mov	r3, r0
 800064e:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <main+0x11c>)
 8000650:	6013      	str	r3, [r2, #0]

  /* creation of TeadBtn_Task */
  TeadBtn_TaskHandle = osThreadNew(StartTeadBtn_Task, NULL, &TeadBtn_Task_attributes);
 8000652:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <main+0x120>)
 8000654:	2100      	movs	r1, #0
 8000656:	481e      	ldr	r0, [pc, #120]	; (80006d0 <main+0x124>)
 8000658:	f008 fc6c 	bl	8008f34 <osThreadNew>
 800065c:	4603      	mov	r3, r0
 800065e:	4a1d      	ldr	r2, [pc, #116]	; (80006d4 <main+0x128>)
 8000660:	6013      	str	r3, [r2, #0]

  /* creation of ShowResources */
  ShowResourcesHandle = osThreadNew(StartShowResources, NULL, &ShowResources_attributes);
 8000662:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <main+0x12c>)
 8000664:	2100      	movs	r1, #0
 8000666:	481d      	ldr	r0, [pc, #116]	; (80006dc <main+0x130>)
 8000668:	f008 fc64 	bl	8008f34 <osThreadNew>
 800066c:	4603      	mov	r3, r0
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <main+0x134>)
 8000670:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000672:	f008 fc39 	bl	8008ee8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0xca>
 8000678:	20005ec0 	.word	0x20005ec0
 800067c:	20005258 	.word	0x20005258
 8000680:	0800e324 	.word	0x0800e324
 8000684:	20005200 	.word	0x20005200
 8000688:	0800e30c 	.word	0x0800e30c
 800068c:	200057b4 	.word	0x200057b4
 8000690:	0800e210 	.word	0x0800e210
 8000694:	08000c7d 	.word	0x08000c7d
 8000698:	20005204 	.word	0x20005204
 800069c:	0800e234 	.word	0x0800e234
 80006a0:	08000c91 	.word	0x08000c91
 80006a4:	200065ac 	.word	0x200065ac
 80006a8:	0800e258 	.word	0x0800e258
 80006ac:	08000cc5 	.word	0x08000cc5
 80006b0:	20006490 	.word	0x20006490
 80006b4:	0800e27c 	.word	0x0800e27c
 80006b8:	08000cfd 	.word	0x08000cfd
 80006bc:	20005f08 	.word	0x20005f08
 80006c0:	0800e2a0 	.word	0x0800e2a0
 80006c4:	08000d31 	.word	0x08000d31
 80006c8:	20005eb8 	.word	0x20005eb8
 80006cc:	0800e2c4 	.word	0x0800e2c4
 80006d0:	08000d61 	.word	0x08000d61
 80006d4:	2000610c 	.word	0x2000610c
 80006d8:	0800e2e8 	.word	0x0800e2e8
 80006dc:	08000dc5 	.word	0x08000dc5
 80006e0:	20005ebc 	.word	0x20005ebc

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f00d f802 	bl	800d6fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <SystemClock_Config+0xcc>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <SystemClock_Config+0xd0>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000740:	2301      	movs	r3, #1
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000754:	2308      	movs	r3, #8
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000758:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800075c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075e:	2302      	movs	r3, #2
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000762:	2307      	movs	r3, #7
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	4618      	mov	r0, r3
 800076c:	f003 fe16 	bl	800439c <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000776:	f000 fbca 	bl	8000f0e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077e:	2302      	movs	r3, #2
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	2105      	movs	r1, #5
 8000798:	4618      	mov	r0, r3
 800079a:	f004 f877 	bl	800488c <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007a4:	f000 fbb3 	bl	8000f0e <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3750      	adds	r7, #80	; 0x50
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2220      	movs	r2, #32
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00c ff92 	bl	800d6fc <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007d8:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <MX_ADC1_Init+0xe0>)
 80007da:	4a30      	ldr	r2, [pc, #192]	; (800089c <MX_ADC1_Init+0xe4>)
 80007dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <MX_ADC1_Init+0xe0>)
 80007e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e6:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <MX_ADC1_Init+0xe0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007ec:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_ADC1_Init+0xe0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <MX_ADC1_Init+0xe0>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f8:	4b27      	ldr	r3, [pc, #156]	; (8000898 <MX_ADC1_Init+0xe0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <MX_ADC1_Init+0xe0>)
 8000802:	2200      	movs	r2, #0
 8000804:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <MX_ADC1_Init+0xe0>)
 8000808:	4a25      	ldr	r2, [pc, #148]	; (80008a0 <MX_ADC1_Init+0xe8>)
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_ADC1_Init+0xe0>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_ADC1_Init+0xe0>)
 8000814:	2201      	movs	r2, #1
 8000816:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_ADC1_Init+0xe0>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_ADC1_Init+0xe0>)
 8000822:	2201      	movs	r2, #1
 8000824:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000826:	481c      	ldr	r0, [pc, #112]	; (8000898 <MX_ADC1_Init+0xe0>)
 8000828:	f000 feae 	bl	8001588 <HAL_ADC_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000832:	f000 fb6c 	bl	8000f0e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000836:	2309      	movs	r3, #9
 8000838:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	4619      	mov	r1, r3
 8000848:	4813      	ldr	r0, [pc, #76]	; (8000898 <MX_ADC1_Init+0xe0>)
 800084a:	f000 ffc1 	bl	80017d0 <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000854:	f000 fb5b 	bl	8000f0e <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_9;
 8000858:	2309      	movs	r3, #9
 800085a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800085c:	2301      	movs	r3, #1
 800085e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_ADC1_Init+0xec>)
 800086e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_ADC1_Init+0xe0>)
 8000882:	f001 f9c3 	bl	8001c0c <HAL_ADCEx_InjectedConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800088c:	f000 fb3f 	bl	8000f0e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	3730      	adds	r7, #48	; 0x30
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20005ec0 	.word	0x20005ec0
 800089c:	40012000 	.word	0x40012000
 80008a0:	0f000001 	.word	0x0f000001
 80008a4:	000f0001 	.word	0x000f0001

080008a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_I2C1_Init+0x54>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_I2C1_Init+0x58>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008e6:	f001 fdf1 	bl	80024cc <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 fb0d 	bl	8000f0e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200052a0 	.word	0x200052a0
 80008fc:	40005400 	.word	0x40005400
 8000900:	000186a0 	.word	0x000186a0

08000904 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_I2S3_Init+0x54>)
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <MX_I2S3_Init+0x58>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_I2S3_Init+0x54>)
 8000910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000914:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_I2S3_Init+0x54>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_I2S3_Init+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_I2S3_Init+0x54>)
 8000924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000928:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_I2S3_Init+0x54>)
 800092c:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <MX_I2S3_Init+0x5c>)
 800092e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_I2S3_Init+0x54>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_I2S3_Init+0x54>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_I2S3_Init+0x54>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_I2S3_Init+0x54>)
 8000944:	f001 ff06 	bl	8002754 <HAL_I2S_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800094e:	f000 fade 	bl	8000f0e <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20006980 	.word	0x20006980
 800095c:	40003c00 	.word	0x40003c00
 8000960:	00017700 	.word	0x00017700

08000964 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_SPI1_Init+0x64>)
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <MX_SPI1_Init+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000974:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000994:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_SPI1_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_SPI1_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_SPI1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_SPI1_Init+0x64>)
 80009b0:	220a      	movs	r2, #10
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_SPI1_Init+0x64>)
 80009b6:	f004 fac3 	bl	8004f40 <HAL_SPI_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009c0:	f000 faa5 	bl	8000f0e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20006494 	.word	0x20006494
 80009cc:	40013000 	.word	0x40013000

080009d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009f2:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_TIM4_Init+0xac>)
 80009f4:	4a22      	ldr	r2, [pc, #136]	; (8000a80 <MX_TIM4_Init+0xb0>)
 80009f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300;
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_TIM4_Init+0xac>)
 80009fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_TIM4_Init+0xac>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_TIM4_Init+0xac>)
 8000a08:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_TIM4_Init+0xac>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_TIM4_Init+0xac>)
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a1a:	4818      	ldr	r0, [pc, #96]	; (8000a7c <MX_TIM4_Init+0xac>)
 8000a1c:	f004 fbe2 	bl	80051e4 <HAL_TIM_PWM_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000a26:	f000 fa72 	bl	8000f0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	4619      	mov	r1, r3
 8000a38:	4810      	ldr	r0, [pc, #64]	; (8000a7c <MX_TIM4_Init+0xac>)
 8000a3a:	f005 f953 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a44:	f000 fa63 	bl	8000f0e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a48:	2360      	movs	r3, #96	; 0x60
 8000a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <MX_TIM4_Init+0xac>)
 8000a60:	f004 fde0 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000a6a:	f000 fa50 	bl	8000f0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a6e:	4803      	ldr	r0, [pc, #12]	; (8000a7c <MX_TIM4_Init+0xac>)
 8000a70:	f000 fbf4 	bl	800125c <HAL_TIM_MspPostInit>

}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	; 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20005258 	.word	0x20005258
 8000a80:	40000800 	.word	0x40000800

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	4b71      	ldr	r3, [pc, #452]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a70      	ldr	r2, [pc, #448]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b6e      	ldr	r3, [pc, #440]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	4b6a      	ldr	r3, [pc, #424]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a69      	ldr	r2, [pc, #420]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b67      	ldr	r3, [pc, #412]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b63      	ldr	r3, [pc, #396]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a62      	ldr	r2, [pc, #392]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b60      	ldr	r3, [pc, #384]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b5c      	ldr	r3, [pc, #368]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a5b      	ldr	r2, [pc, #364]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b59      	ldr	r3, [pc, #356]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b55      	ldr	r3, [pc, #340]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a54      	ldr	r2, [pc, #336]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b52      	ldr	r3, [pc, #328]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a4d      	ldr	r2, [pc, #308]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b4b      	ldr	r3, [pc, #300]	; (8000c64 <MX_GPIO_Init+0x1e0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2108      	movs	r1, #8
 8000b46:	4848      	ldr	r0, [pc, #288]	; (8000c68 <MX_GPIO_Init+0x1e4>)
 8000b48:	f001 fc8c 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4846      	ldr	r0, [pc, #280]	; (8000c6c <MX_GPIO_Init+0x1e8>)
 8000b52:	f001 fc87 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f24e 0110 	movw	r1, #57360	; 0xe010
 8000b5c:	4844      	ldr	r0, [pc, #272]	; (8000c70 <MX_GPIO_Init+0x1ec>)
 8000b5e:	f001 fc81 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b62:	2308      	movs	r3, #8
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	483b      	ldr	r0, [pc, #236]	; (8000c68 <MX_GPIO_Init+0x1e4>)
 8000b7a:	f001 fabf 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4835      	ldr	r0, [pc, #212]	; (8000c6c <MX_GPIO_Init+0x1e8>)
 8000b96:	f001 fab1 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000baa:	2305      	movs	r3, #5
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	482d      	ldr	r0, [pc, #180]	; (8000c6c <MX_GPIO_Init+0x1e8>)
 8000bb6:	f001 faa1 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4829      	ldr	r0, [pc, #164]	; (8000c74 <MX_GPIO_Init+0x1f0>)
 8000bce:	f001 fa95 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4824      	ldr	r0, [pc, #144]	; (8000c78 <MX_GPIO_Init+0x1f4>)
 8000be6:	f001 fa89 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bfc:	2305      	movs	r3, #5
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	481c      	ldr	r0, [pc, #112]	; (8000c78 <MX_GPIO_Init+0x1f4>)
 8000c08:	f001 fa78 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8000c0c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4812      	ldr	r0, [pc, #72]	; (8000c70 <MX_GPIO_Init+0x1ec>)
 8000c26:	f001 fa69 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_GPIO_Init+0x1ec>)
 8000c3e:	f001 fa5d 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c46:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_GPIO_Init+0x1e4>)
 8000c58:	f001 fa50 	bl	80020fc <HAL_GPIO_Init>

}
 8000c5c:	bf00      	nop
 8000c5e:	3730      	adds	r7, #48	; 0x30
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	40020c00 	.word	0x40020c00
 8000c74:	40020000 	.word	0x40020000
 8000c78:	40020400 	.word	0x40020400

08000c7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c84:	f00b ffbe 	bl	800cc04 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f008 f9e5 	bl	8009058 <osDelay>
 8000c8e:	e7fb      	b.n	8000c88 <StartDefaultTask+0xc>

08000c90 <StartLED_BLUE_BLINK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_BLUE_BLINK */
void StartLED_BLUE_BLINK(void *argument)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_BLUE_BLINK */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9e:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <StartLED_BLUE_BLINK+0x30>)
 8000ca0:	f001 fbe0 	bl	8002464 <HAL_GPIO_WritePin>
	  osDelay(100);
 8000ca4:	2064      	movs	r0, #100	; 0x64
 8000ca6:	f008 f9d7 	bl	8009058 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <StartLED_BLUE_BLINK+0x30>)
 8000cb2:	f001 fbd7 	bl	8002464 <HAL_GPIO_WritePin>
	  osDelay(900);
 8000cb6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000cba:	f008 f9cd 	bl	8009058 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000cbe:	e7eb      	b.n	8000c98 <StartLED_BLUE_BLINK+0x8>
 8000cc0:	40020c00 	.word	0x40020c00

08000cc4 <StartLED_YELLOW_ADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_YELLOW_ADC */
void StartLED_YELLOW_ADC(void *argument)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_YELLOW_ADC */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreAcquire(BtnSemHandle, osWaitForever) == osOK);							// Waiting on press button
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <StartLED_YELLOW_ADC+0x30>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f008 fa63 	bl	80091a0 <osSemaphoreAcquire>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <StartLED_YELLOW_ADC+0x34>)
 8000ce0:	f001 fbd9 	bl	8002496 <HAL_GPIO_TogglePin>

//		  char test_str[] = "HELLO \n\r";
//		  CDC_Transmit_FS(test_str, sizeof(test_str));

		  osDelay(100);
 8000ce4:	2064      	movs	r0, #100	; 0x64
 8000ce6:	f008 f9b7 	bl	8009058 <osDelay>
	  }
	  osDelay(100);
 8000cea:	2064      	movs	r0, #100	; 0x64
 8000cec:	f008 f9b4 	bl	8009058 <osDelay>
	  if(osSemaphoreAcquire(BtnSemHandle, osWaitForever) == osOK);							// Waiting on press button
 8000cf0:	e7ec      	b.n	8000ccc <StartLED_YELLOW_ADC+0x8>
 8000cf2:	bf00      	nop
 8000cf4:	20005200 	.word	0x20005200
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <StartUART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_Task */
void StartUART_Task(void *argument)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0a2      	sub	sp, #136	; 0x88
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_Task */
  /* Infinite loop */
	QUEUE_t msg;
  for(;;)
  {
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);		// Write for data on queue
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <StartUART_Task+0x30>)
 8000d06:	6818      	ldr	r0, [r3, #0]
 8000d08:	f107 0108 	add.w	r1, r7, #8
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d10:	2200      	movs	r2, #0
 8000d12:	f008 fbaf 	bl	8009474 <osMessageQueueGet>
	CDC_Transmit_FS(msg.Buf, sizeof(msg.Buf));						// Transmit data over virtual comport
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	2180      	movs	r1, #128	; 0x80
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00c f82f 	bl	800cd80 <CDC_Transmit_FS>
    osDelay(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f008 f998 	bl	8009058 <osDelay>
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);		// Write for data on queue
 8000d28:	e7ec      	b.n	8000d04 <StartUART_Task+0x8>
 8000d2a:	bf00      	nop
 8000d2c:	200057b4 	.word	0x200057b4

08000d30 <StartADC_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC_Task */
void StartADC_Task(void *argument)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC_Task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000d38:	4807      	ldr	r0, [pc, #28]	; (8000d58 <StartADC_Task+0x28>)
 8000d3a:	f000 fc69 	bl	8001610 <HAL_ADC_Start>
	  uint16_t adc_res = HAL_ADC_GetValue(&hadc1);						// Read Voltage on potentiometer
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <StartADC_Task+0x28>)
 8000d40:	f000 fd38 	bl	80017b4 <HAL_ADC_GetValue>
 8000d44:	4603      	mov	r3, r0
 8000d46:	81fb      	strh	r3, [r7, #14]
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, adc_res);			// Set PWM generation
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <StartADC_Task+0x2c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	89fa      	ldrh	r2, [r7, #14]
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
	  osDelay(100);
 8000d50:	2064      	movs	r0, #100	; 0x64
 8000d52:	f008 f981 	bl	8009058 <osDelay>
  {
 8000d56:	e7ef      	b.n	8000d38 <StartADC_Task+0x8>
 8000d58:	20005ec0 	.word	0x20005ec0
 8000d5c:	20005258 	.word	0x20005258

08000d60 <StartTeadBtn_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeadBtn_Task */
void StartTeadBtn_Task(void *argument)
{
 8000d60:	b5b0      	push	{r4, r5, r7, lr}
 8000d62:	b0a2      	sub	sp, #136	; 0x88
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeadBtn_Task */
  /* Infinite loop */
	QUEUE_t msg;
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000d68:	2101      	movs	r1, #1
 8000d6a:	4812      	ldr	r0, [pc, #72]	; (8000db4 <StartTeadBtn_Task+0x54>)
 8000d6c:	f001 fb62 	bl	8002434 <HAL_GPIO_ReadPin>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d01a      	beq.n	8000dac <StartTeadBtn_Task+0x4c>
	  {
		  osSemaphoreRelease(BtnSemHandle);								// Set BtnSemHandle semaphore
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <StartTeadBtn_Task+0x58>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f008 fa62 	bl	8009244 <osSemaphoreRelease>
		  strcpy(msg.Buf, "Btn pressed!!!\r\n");						// Write message
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <StartTeadBtn_Task+0x5c>)
 8000d86:	461c      	mov	r4, r3
 8000d88:	4615      	mov	r5, r2
 8000d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8e:	682b      	ldr	r3, [r5, #0]
 8000d90:	7023      	strb	r3, [r4, #0]
		  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);	// Write data on queue
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <StartTeadBtn_Task+0x60>)
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	f107 0108 	add.w	r1, r7, #8
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f008 fb08 	bl	80093b4 <osMessageQueuePut>
		  osDelay(300);
 8000da4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000da8:	f008 f956 	bl	8009058 <osDelay>
	  }
	  osDelay(100);
 8000dac:	2064      	movs	r0, #100	; 0x64
 8000dae:	f008 f953 	bl	8009058 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000db2:	e7d9      	b.n	8000d68 <StartTeadBtn_Task+0x8>
 8000db4:	40020000 	.word	0x40020000
 8000db8:	20005200 	.word	0x20005200
 8000dbc:	0800e160 	.word	0x0800e160
 8000dc0:	200057b4 	.word	0x200057b4

08000dc4 <StartShowResources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowResources */
void StartShowResources(void *argument)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b08f      	sub	sp, #60	; 0x3c
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowResources */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 8000dcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dd0:	f008 f942 	bl	8009058 <osDelay>

    char str_freememory[20] = {0};
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
    char buff[10] = {0};
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	809a      	strh	r2, [r3, #4]
    strcat(str_freememory, "Free memory: ");
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff f9e9 	bl	80001d0 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	f107 0318 	add.w	r3, r7, #24
 8000e06:	4413      	add	r3, r2
 8000e08:	4a35      	ldr	r2, [pc, #212]	; (8000ee0 <StartShowResources+0x11c>)
 8000e0a:	461c      	mov	r4, r3
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e10:	6020      	str	r0, [r4, #0]
 8000e12:	6061      	str	r1, [r4, #4]
 8000e14:	60a2      	str	r2, [r4, #8]
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	81a3      	strh	r3, [r4, #12]

    freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8000e1a:	f00b fe2b 	bl	800ca74 <xPortGetFreeHeapSize>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <StartShowResources+0x120>)
 8000e24:	601a      	str	r2, [r3, #0]
    itoa(freemem, buff, 10);
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <StartShowResources+0x120>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f107 010c 	add.w	r1, r7, #12
 8000e2e:	220a      	movs	r2, #10
 8000e30:	4618      	mov	r0, r3
 8000e32:	f00c fc51 	bl	800d6d8 <itoa>
    strcat(str_freememory, buff);
 8000e36:	f107 020c 	add.w	r2, r7, #12
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f00c fd57 	bl	800d8f4 <strcat>

    vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8000e46:	4828      	ldr	r0, [pc, #160]	; (8000ee8 <StartShowResources+0x124>)
 8000e48:	f00a fe48 	bl	800badc <vTaskList>
//    strcat(str_management_memory_str, str_freememory);			// Add to the end of strint

    char str_sig = '-';
 8000e4c:	232d      	movs	r3, #45	; 0x2d
 8000e4e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char str_end_of_line[3] = {'\r','\n'};
 8000e52:	4a26      	ldr	r2, [pc, #152]	; (8000eec <StartShowResources+0x128>)
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	8019      	strh	r1, [r3, #0]
 8000e5e:	3302      	adds	r3, #2
 8000e60:	0c12      	lsrs	r2, r2, #16
 8000e62:	701a      	strb	r2, [r3, #0]
    int sum = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
    for(int i = 0; i <= sizeof(str_management_memory_str); i++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8000e6c:	e032      	b.n	8000ed4 <StartShowResources+0x110>
    {
    	if(str_management_memory_str[i] == '\0')
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <StartShowResources+0x124>)
 8000e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d129      	bne.n	8000ece <StartShowResources+0x10a>
    	{
    		for(uint8_t j = 0; j<= 40; j++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e80:	e00f      	b.n	8000ea2 <StartShowResources+0xde>
    		{
    			sum = i + j;
 8000e82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e88:	4413      	add	r3, r2
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
    			str_management_memory_str[sum] = str_sig;
 8000e8c:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <StartShowResources+0x124>)
 8000e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e90:	4413      	add	r3, r2
 8000e92:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000e96:	701a      	strb	r2, [r3, #0]
    		for(uint8_t j = 0; j<= 40; j++)
 8000e98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ea6:	2b28      	cmp	r3, #40	; 0x28
 8000ea8:	d9eb      	bls.n	8000e82 <StartShowResources+0xbe>
//    		strcat(str_management_memory_str, str_freememory);

//    		strcat(str_management_memory_str, str_end_of_line);
//    	    strcat(str_management_memory_str, str_freememory);			// Add to the end of string
//    	    strcat(str_management_memory_str, str_end_of_line);
    		str_management_memory_str[sum++] = '\r';
 8000eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eac:	1c5a      	adds	r2, r3, #1
 8000eae:	637a      	str	r2, [r7, #52]	; 0x34
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <StartShowResources+0x124>)
 8000eb2:	210d      	movs	r1, #13
 8000eb4:	54d1      	strb	r1, [r2, r3]
    		str_management_memory_str[sum++] = '\n';
 8000eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	637a      	str	r2, [r7, #52]	; 0x34
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <StartShowResources+0x124>)
 8000ebe:	210a      	movs	r1, #10
 8000ec0:	54d1      	strb	r1, [r2, r3]

//      	strcat(str_management_memory_str, str_freememory);
//
//    		strcat(str_management_memory_str, '\n');

    		CDC_Transmit_FS(str_management_memory_str, sizeof(str_management_memory_str));
 8000ec2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <StartShowResources+0x124>)
 8000ec8:	f00b ff5a 	bl	800cd80 <CDC_Transmit_FS>
    		//CDC_Transmit_FS(str_end_of_line, sizeof(str_end_of_line));
    		break;
 8000ecc:	e006      	b.n	8000edc <StartShowResources+0x118>
    for(int i = 0; i <= sizeof(str_management_memory_str); i++)
 8000ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8000ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eda:	d9c8      	bls.n	8000e6e <StartShowResources+0xaa>
  {
 8000edc:	e776      	b.n	8000dcc <StartShowResources+0x8>
 8000ede:	bf00      	nop
 8000ee0:	0800e174 	.word	0x0800e174
 8000ee4:	200005ec 	.word	0x200005ec
 8000ee8:	20000204 	.word	0x20000204
 8000eec:	0800e184 	.word	0x0800e184

08000ef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f00:	d101      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f02:	f000 fafd 	bl	8001500 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f12:	b672      	cpsid	i
}
 8000f14:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <Error_Handler+0x8>

08000f18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_MspInit+0x54>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <HAL_MspInit+0x54>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_MspInit+0x54>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_MspInit+0x54>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_MspInit+0x54>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_MspInit+0x54>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	210f      	movs	r1, #15
 8000f5a:	f06f 0001 	mvn.w	r0, #1
 8000f5e:	f001 f8a3 	bl	80020a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800

08000f70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_ADC_MspInit+0x7c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d127      	bne.n	8000fe2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_ADC_MspInit+0x84>)
 8000fde:	f001 f88d 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_I2C_MspInit+0x84>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12c      	bne.n	8001074 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_I2C_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001036:	f44f 7310 	mov.w	r3, #576	; 0x240
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103c:	2312      	movs	r3, #18
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001040:	2301      	movs	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001048:	2304      	movs	r3, #4
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	480c      	ldr	r0, [pc, #48]	; (8001084 <HAL_I2C_MspInit+0x8c>)
 8001054:	f001 f852 	bl	80020fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_I2C_MspInit+0x88>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001062:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_I2C_MspInit+0x88>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40005400 	.word	0x40005400
 8001080:	40023800 	.word	0x40023800
 8001084:	40020400 	.word	0x40020400

08001088 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	; 0x38
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a31      	ldr	r2, [pc, #196]	; (8001178 <HAL_I2S_MspInit+0xf0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d15a      	bne.n	800116e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010b8:	2301      	movs	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80010bc:	23c0      	movs	r3, #192	; 0xc0
 80010be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 fdf9 	bl	8004cc0 <HAL_RCCEx_PeriphCLKConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80010d4:	f7ff ff1b 	bl	8000f0e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_I2S_MspInit+0xf4>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_I2S_MspInit+0xf4>)
 80010e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e6:	6413      	str	r3, [r2, #64]	; 0x40
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_I2S_MspInit+0xf4>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	4b20      	ldr	r3, [pc, #128]	; (800117c <HAL_I2S_MspInit+0xf4>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	4a1f      	ldr	r2, [pc, #124]	; (800117c <HAL_I2S_MspInit+0xf4>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6313      	str	r3, [r2, #48]	; 0x30
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <HAL_I2S_MspInit+0xf4>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_I2S_MspInit+0xf4>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_I2S_MspInit+0xf4>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_I2S_MspInit+0xf4>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800112c:	2310      	movs	r3, #16
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800113c:	2306      	movs	r3, #6
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <HAL_I2S_MspInit+0xf8>)
 8001148:	f000 ffd8 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800114c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800115e:	2306      	movs	r3, #6
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	4806      	ldr	r0, [pc, #24]	; (8001184 <HAL_I2S_MspInit+0xfc>)
 800116a:	f000 ffc7 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3738      	adds	r7, #56	; 0x38
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40003c00 	.word	0x40003c00
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020800 	.word	0x40020800

08001188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_SPI_MspInit+0x84>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12b      	bne.n	8001202 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011e2:	23e0      	movs	r3, #224	; 0xe0
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011f2:	2305      	movs	r3, #5
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_SPI_MspInit+0x8c>)
 80011fe:	f000 ff7d 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40013000 	.word	0x40013000
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <HAL_TIM_PWM_MspInit+0x3c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10d      	bne.n	8001246 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_TIM_PWM_MspInit+0x40>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a09      	ldr	r2, [pc, #36]	; (8001258 <HAL_TIM_PWM_MspInit+0x40>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <HAL_TIM_PWM_MspInit+0x40>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40000800 	.word	0x40000800
 8001258:	40023800 	.word	0x40023800

0800125c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <HAL_TIM_MspPostInit+0x68>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d11e      	bne.n	80012bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_TIM_MspPostInit+0x6c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <HAL_TIM_MspPostInit+0x6c>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_TIM_MspPostInit+0x6c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4619      	mov	r1, r3
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_TIM_MspPostInit+0x70>)
 80012b8:	f000 ff20 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	3720      	adds	r7, #32
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40000800 	.word	0x40000800
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020c00 	.word	0x40020c00

080012d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	201c      	movs	r0, #28
 80012e6:	f000 fedf 	bl	80020a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ea:	201c      	movs	r0, #28
 80012ec:	f000 fef8 	bl	80020e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_InitTick+0xa8>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <HAL_InitTick+0xa8>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_InitTick+0xa8>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800130c:	f107 0210 	add.w	r2, r7, #16
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f003 fca0 	bl	8004c5c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800131c:	f003 fc8a 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8001320:	4603      	mov	r3, r0
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <HAL_InitTick+0xac>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	0c9b      	lsrs	r3, r3, #18
 8001330:	3b01      	subs	r3, #1
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0xb0>)
 8001336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_InitTick+0xb0>)
 800133e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001342:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_InitTick+0xb0>)
 8001346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001348:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_InitTick+0xb0>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_InitTick+0xb0>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <HAL_InitTick+0xb0>)
 8001358:	f003 fe7b 	bl	8005052 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d104      	bne.n	800136c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <HAL_InitTick+0xb0>)
 8001364:	f003 fece 	bl	8005104 <HAL_TIM_Base_Start_IT>
 8001368:	4603      	mov	r3, r0
 800136a:	e000      	b.n	800136e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	3730      	adds	r7, #48	; 0x30
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	431bde83 	.word	0x431bde83
 8001380:	200069c8 	.word	0x200069c8

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM2_IRQHandler+0x10>)
 80013b6:	f004 f82d 	bl	8005414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200069c8 	.word	0x200069c8

080013c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <OTG_FS_IRQHandler+0x10>)
 80013ca:	f001 ffb3 	bl	8003334 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20007f24 	.word	0x20007f24

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f00c f924 	bl	800d654 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20020000 	.word	0x20020000
 8001438:	00000400 	.word	0x00000400
 800143c:	200005f0 	.word	0x200005f0
 8001440:	20008340 	.word	0x20008340

08001444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800146e:	490e      	ldr	r1, [pc, #56]	; (80014a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001470:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001484:	4c0b      	ldr	r4, [pc, #44]	; (80014b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001492:	f7ff ffd7 	bl	8001444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f00c f8e3 	bl	800d660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff f887 	bl	80005ac <main>
  bx  lr    
 800149e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80014ac:	0800e414 	.word	0x0800e414
  ldr r2, =_sbss
 80014b0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80014b4:	2000833c 	.word	0x2000833c

080014b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>
	...

080014bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_Init+0x40>)
 80014c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_Init+0x40>)
 80014d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x40>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 fdd4 	bl	8002092 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	200f      	movs	r0, #15
 80014ec:	f7ff fef0 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff fd12 	bl	8000f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023c00 	.word	0x40023c00

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x24>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_IncTick+0x24>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008
 8001524:	20006a10 	.word	0x20006a10

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <HAL_GetTick+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20006a10 	.word	0x20006a10

08001540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff ffee 	bl	8001528 <HAL_GetTick>
 800154c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001558:	d005      	beq.n	8001566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_Delay+0x44>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001566:	bf00      	nop
 8001568:	f7ff ffde 	bl	8001528 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	429a      	cmp	r2, r3
 8001576:	d8f7      	bhi.n	8001568 <HAL_Delay+0x28>
  {
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000008 	.word	0x20000008

08001588 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e033      	b.n	8001606 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fce2 	bl	8000f70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d118      	bne.n	80015f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ce:	f023 0302 	bic.w	r3, r3, #2
 80015d2:	f043 0202 	orr.w	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fa1a 	bl	8001a14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f023 0303 	bic.w	r3, r3, #3
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
 80015f6:	e001      	b.n	80015fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_ADC_Start+0x1a>
 8001626:	2302      	movs	r3, #2
 8001628:	e0b2      	b.n	8001790 <HAL_ADC_Start+0x180>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b01      	cmp	r3, #1
 800163e:	d018      	beq.n	8001672 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001650:	4b52      	ldr	r3, [pc, #328]	; (800179c <HAL_ADC_Start+0x18c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a52      	ldr	r2, [pc, #328]	; (80017a0 <HAL_ADC_Start+0x190>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	0c9a      	lsrs	r2, r3, #18
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001664:	e002      	b.n	800166c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3b01      	subs	r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f9      	bne.n	8001666 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b01      	cmp	r3, #1
 800167e:	d17a      	bne.n	8001776 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d007      	beq.n	80016b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016be:	d106      	bne.n	80016ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	f023 0206 	bic.w	r2, r3, #6
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	645a      	str	r2, [r3, #68]	; 0x44
 80016cc:	e002      	b.n	80016d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_ADC_Start+0x194>)
 80016de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d12a      	bne.n	800174c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a2b      	ldr	r2, [pc, #172]	; (80017a8 <HAL_ADC_Start+0x198>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d015      	beq.n	800172c <HAL_ADC_Start+0x11c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a29      	ldr	r2, [pc, #164]	; (80017ac <HAL_ADC_Start+0x19c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d105      	bne.n	8001716 <HAL_ADC_Start+0x106>
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <HAL_ADC_Start+0x194>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a25      	ldr	r2, [pc, #148]	; (80017b0 <HAL_ADC_Start+0x1a0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d136      	bne.n	800178e <HAL_ADC_Start+0x17e>
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_ADC_Start+0x194>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	2b00      	cmp	r3, #0
 800172a:	d130      	bne.n	800178e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d129      	bne.n	800178e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	e020      	b.n	800178e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <HAL_ADC_Start+0x198>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d11b      	bne.n	800178e <HAL_ADC_Start+0x17e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d114      	bne.n	800178e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	e00b      	b.n	800178e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f043 0210 	orr.w	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f043 0201 	orr.w	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	20000000 	.word	0x20000000
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	40012300 	.word	0x40012300
 80017a8:	40012000 	.word	0x40012000
 80017ac:	40012100 	.word	0x40012100
 80017b0:	40012200 	.word	0x40012200

080017b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x1c>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e105      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x228>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b09      	cmp	r3, #9
 80017fa:	d925      	bls.n	8001848 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68d9      	ldr	r1, [r3, #12]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	3b1e      	subs	r3, #30
 8001812:	2207      	movs	r2, #7
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43da      	mvns	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	400a      	ands	r2, r1
 8001820:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68d9      	ldr	r1, [r3, #12]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	4618      	mov	r0, r3
 8001834:	4603      	mov	r3, r0
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4403      	add	r3, r0
 800183a:	3b1e      	subs	r3, #30
 800183c:	409a      	lsls	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	e022      	b.n	800188e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6919      	ldr	r1, [r3, #16]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	4613      	mov	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4413      	add	r3, r2
 800185c:	2207      	movs	r2, #7
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	400a      	ands	r2, r1
 800186a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6919      	ldr	r1, [r3, #16]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	4603      	mov	r3, r0
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4403      	add	r3, r0
 8001884:	409a      	lsls	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b06      	cmp	r3, #6
 8001894:	d824      	bhi.n	80018e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	3b05      	subs	r3, #5
 80018a8:	221f      	movs	r2, #31
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	400a      	ands	r2, r1
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	3b05      	subs	r3, #5
 80018d2:	fa00 f203 	lsl.w	r2, r0, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	635a      	str	r2, [r3, #52]	; 0x34
 80018de:	e04c      	b.n	800197a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d824      	bhi.n	8001932 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	3b23      	subs	r3, #35	; 0x23
 80018fa:	221f      	movs	r2, #31
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43da      	mvns	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	400a      	ands	r2, r1
 8001908:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	4618      	mov	r0, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	3b23      	subs	r3, #35	; 0x23
 8001924:	fa00 f203 	lsl.w	r2, r0, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	631a      	str	r2, [r3, #48]	; 0x30
 8001930:	e023      	b.n	800197a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	3b41      	subs	r3, #65	; 0x41
 8001944:	221f      	movs	r2, #31
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	400a      	ands	r2, r1
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	4618      	mov	r0, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	3b41      	subs	r3, #65	; 0x41
 800196e:	fa00 f203 	lsl.w	r2, r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_ADC_ConfigChannel+0x234>)
 800197c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <HAL_ADC_ConfigChannel+0x238>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d109      	bne.n	800199c <HAL_ADC_ConfigChannel+0x1cc>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b12      	cmp	r3, #18
 800198e:	d105      	bne.n	800199c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <HAL_ADC_ConfigChannel+0x238>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d123      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x21e>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b10      	cmp	r3, #16
 80019ac:	d003      	beq.n	80019b6 <HAL_ADC_ConfigChannel+0x1e6>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b11      	cmp	r3, #17
 80019b4:	d11b      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d111      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_ADC_ConfigChannel+0x23c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_ADC_ConfigChannel+0x240>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	0c9a      	lsrs	r2, r3, #18
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f9      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40012300 	.word	0x40012300
 8001a08:	40012000 	.word	0x40012000
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	431bde83 	.word	0x431bde83

08001a14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a1c:	4b79      	ldr	r3, [pc, #484]	; (8001c04 <ADC_Init+0x1f0>)
 8001a1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	021a      	lsls	r2, r3, #8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6859      	ldr	r1, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6899      	ldr	r1, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <ADC_Init+0x1f4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d022      	beq.n	8001af2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6899      	ldr	r1, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6899      	ldr	r1, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	e00f      	b.n	8001b12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0202 	bic.w	r2, r2, #2
 8001b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6899      	ldr	r1, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	7e1b      	ldrb	r3, [r3, #24]
 8001b2c:	005a      	lsls	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01b      	beq.n	8001b78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6859      	ldr	r1, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	035a      	lsls	r2, r3, #13
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	e007      	b.n	8001b88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	051a      	lsls	r2, r3, #20
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6899      	ldr	r1, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bca:	025a      	lsls	r2, r3, #9
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6899      	ldr	r1, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	029a      	lsls	r2, r3, #10
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	609a      	str	r2, [r3, #8]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	40012300 	.word	0x40012300
 8001c08:	0f000001 	.word	0x0f000001

08001c0c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e17d      	b.n	8001f20 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	d925      	bls.n	8001c80 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68d9      	ldr	r1, [r3, #12]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	3b1e      	subs	r3, #30
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43da      	mvns	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	400a      	ands	r2, r1
 8001c58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68d9      	ldr	r1, [r3, #12]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4403      	add	r3, r0
 8001c72:	3b1e      	subs	r3, #30
 8001c74:	409a      	lsls	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	e022      	b.n	8001cc6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6919      	ldr	r1, [r3, #16]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	2207      	movs	r2, #7
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6919      	ldr	r1, [r3, #16]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4403      	add	r3, r0
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001cd4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	051a      	lsls	r2, r3, #20
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3303      	adds	r3, #3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	221f      	movs	r2, #31
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43da      	mvns	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	3303      	adds	r3, #3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a74      	ldr	r2, [pc, #464]	; (8001f2c <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d022      	beq.n	8001da4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001d6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6899      	ldr	r1, [r3, #8]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	699a      	ldr	r2, [r3, #24]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001d8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6899      	ldr	r1, [r3, #8]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	69da      	ldr	r2, [r3, #28]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	e00f      	b.n	8001dc4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001db2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001dc2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	7d5b      	ldrb	r3, [r3, #21]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	e007      	b.n	8001dee <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dec:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	7d1b      	ldrb	r3, [r3, #20]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	e007      	b.n	8001e18 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e16:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d02e      	beq.n	8001e7e <HAL_ADCEx_InjectedConfigChannel+0x272>
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d840      	bhi.n	8001ea6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d002      	beq.n	8001e2e <HAL_ADCEx_InjectedConfigChannel+0x222>
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d014      	beq.n	8001e56 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8001e2c:	e03b      	b.n	8001ea6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001e3c:	f023 030f 	bic.w	r3, r3, #15
 8001e40:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6959      	ldr	r1, [r3, #20]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	615a      	str	r2, [r3, #20]
      break;
 8001e54:	e03b      	b.n	8001ece <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001e64:	f023 030f 	bic.w	r3, r3, #15
 8001e68:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6999      	ldr	r1, [r3, #24]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	619a      	str	r2, [r3, #24]
      break;
 8001e7c:	e027      	b.n	8001ece <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001e8c:	f023 030f 	bic.w	r3, r3, #15
 8001e90:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69d9      	ldr	r1, [r3, #28]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	61da      	str	r2, [r3, #28]
      break;
 8001ea4:	e013      	b.n	8001ece <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001eb4:	f023 030f 	bic.w	r3, r3, #15
 8001eb8:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6a19      	ldr	r1, [r3, #32]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	621a      	str	r2, [r3, #32]
      break;
 8001ecc:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d109      	bne.n	8001ef0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b12      	cmp	r3, #18
 8001ee2:	d105      	bne.n	8001ef0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10d      	bne.n	8001f16 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d003      	beq.n	8001f0a <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b11      	cmp	r3, #17
 8001f08:	d105      	bne.n	8001f16 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	000f0001 	.word	0x000f0001
 8001f30:	40012300 	.word	0x40012300
 8001f34:	40012000 	.word	0x40012000

08001f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f54:	4013      	ands	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <__NVIC_GetPriorityGrouping+0x18>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0307 	and.w	r3, r3, #7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db0b      	blt.n	8001fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4907      	ldr	r1, [pc, #28]	; (8001fd4 <__NVIC_EnableIRQ+0x38>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000e100 	.word	0xe000e100

08001fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db0a      	blt.n	8002002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	490c      	ldr	r1, [pc, #48]	; (8002024 <__NVIC_SetPriority+0x4c>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	0112      	lsls	r2, r2, #4
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002000:	e00a      	b.n	8002018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4908      	ldr	r1, [pc, #32]	; (8002028 <__NVIC_SetPriority+0x50>)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	3b04      	subs	r3, #4
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	440b      	add	r3, r1
 8002016:	761a      	strb	r2, [r3, #24]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000e100 	.word	0xe000e100
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	; 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f1c3 0307 	rsb	r3, r3, #7
 8002046:	2b04      	cmp	r3, #4
 8002048:	bf28      	it	cs
 800204a:	2304      	movcs	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3304      	adds	r3, #4
 8002052:	2b06      	cmp	r3, #6
 8002054:	d902      	bls.n	800205c <NVIC_EncodePriority+0x30>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3b03      	subs	r3, #3
 800205a:	e000      	b.n	800205e <NVIC_EncodePriority+0x32>
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	401a      	ands	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43d9      	mvns	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	4313      	orrs	r3, r2
         );
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ff4c 	bl	8001f38 <__NVIC_SetPriorityGrouping>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ba:	f7ff ff61 	bl	8001f80 <__NVIC_GetPriorityGrouping>
 80020be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f7ff ffb1 	bl	800202c <NVIC_EncodePriority>
 80020ca:	4602      	mov	r2, r0
 80020cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff80 	bl	8001fd8 <__NVIC_SetPriority>
}
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff54 	bl	8001f9c <__NVIC_EnableIRQ>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	e16b      	b.n	80023f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	f040 815a 	bne.w	80023ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d005      	beq.n	800214e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214a:	2b02      	cmp	r3, #2
 800214c:	d130      	bne.n	80021b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002184:	2201      	movs	r2, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 0201 	and.w	r2, r3, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d017      	beq.n	80021ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d123      	bne.n	8002240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	08da      	lsrs	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3208      	adds	r2, #8
 8002200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	220f      	movs	r2, #15
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3208      	adds	r2, #8
 800223a:	69b9      	ldr	r1, [r7, #24]
 800223c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0203 	and.w	r2, r3, #3
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80b4 	beq.w	80023ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b60      	ldr	r3, [pc, #384]	; (8002408 <HAL_GPIO_Init+0x30c>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a5f      	ldr	r2, [pc, #380]	; (8002408 <HAL_GPIO_Init+0x30c>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b5d      	ldr	r3, [pc, #372]	; (8002408 <HAL_GPIO_Init+0x30c>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800229e:	4a5b      	ldr	r2, [pc, #364]	; (800240c <HAL_GPIO_Init+0x310>)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a52      	ldr	r2, [pc, #328]	; (8002410 <HAL_GPIO_Init+0x314>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02b      	beq.n	8002322 <HAL_GPIO_Init+0x226>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a51      	ldr	r2, [pc, #324]	; (8002414 <HAL_GPIO_Init+0x318>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d025      	beq.n	800231e <HAL_GPIO_Init+0x222>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a50      	ldr	r2, [pc, #320]	; (8002418 <HAL_GPIO_Init+0x31c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01f      	beq.n	800231a <HAL_GPIO_Init+0x21e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4f      	ldr	r2, [pc, #316]	; (800241c <HAL_GPIO_Init+0x320>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0x21a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4e      	ldr	r2, [pc, #312]	; (8002420 <HAL_GPIO_Init+0x324>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0x216>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4d      	ldr	r2, [pc, #308]	; (8002424 <HAL_GPIO_Init+0x328>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_Init+0x212>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <HAL_GPIO_Init+0x32c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_Init+0x20e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4b      	ldr	r2, [pc, #300]	; (800242c <HAL_GPIO_Init+0x330>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_Init+0x20a>
 8002302:	2307      	movs	r3, #7
 8002304:	e00e      	b.n	8002324 <HAL_GPIO_Init+0x228>
 8002306:	2308      	movs	r3, #8
 8002308:	e00c      	b.n	8002324 <HAL_GPIO_Init+0x228>
 800230a:	2306      	movs	r3, #6
 800230c:	e00a      	b.n	8002324 <HAL_GPIO_Init+0x228>
 800230e:	2305      	movs	r3, #5
 8002310:	e008      	b.n	8002324 <HAL_GPIO_Init+0x228>
 8002312:	2304      	movs	r3, #4
 8002314:	e006      	b.n	8002324 <HAL_GPIO_Init+0x228>
 8002316:	2303      	movs	r3, #3
 8002318:	e004      	b.n	8002324 <HAL_GPIO_Init+0x228>
 800231a:	2302      	movs	r3, #2
 800231c:	e002      	b.n	8002324 <HAL_GPIO_Init+0x228>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_GPIO_Init+0x228>
 8002322:	2300      	movs	r3, #0
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	f002 0203 	and.w	r2, r2, #3
 800232a:	0092      	lsls	r2, r2, #2
 800232c:	4093      	lsls	r3, r2
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002334:	4935      	ldr	r1, [pc, #212]	; (800240c <HAL_GPIO_Init+0x310>)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	3302      	adds	r3, #2
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002342:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <HAL_GPIO_Init+0x334>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002366:	4a32      	ldr	r2, [pc, #200]	; (8002430 <HAL_GPIO_Init+0x334>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800236c:	4b30      	ldr	r3, [pc, #192]	; (8002430 <HAL_GPIO_Init+0x334>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002390:	4a27      	ldr	r2, [pc, #156]	; (8002430 <HAL_GPIO_Init+0x334>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_GPIO_Init+0x334>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ba:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <HAL_GPIO_Init+0x334>)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_GPIO_Init+0x334>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e4:	4a12      	ldr	r2, [pc, #72]	; (8002430 <HAL_GPIO_Init+0x334>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3301      	adds	r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b0f      	cmp	r3, #15
 80023f4:	f67f ae90 	bls.w	8002118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	40013800 	.word	0x40013800
 8002410:	40020000 	.word	0x40020000
 8002414:	40020400 	.word	0x40020400
 8002418:	40020800 	.word	0x40020800
 800241c:	40020c00 	.word	0x40020c00
 8002420:	40021000 	.word	0x40021000
 8002424:	40021400 	.word	0x40021400
 8002428:	40021800 	.word	0x40021800
 800242c:	40021c00 	.word	0x40021c00
 8002430:	40013c00 	.word	0x40013c00

08002434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	e001      	b.n	8002456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002456:	7bfb      	ldrb	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
 8002470:	4613      	mov	r3, r2
 8002472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002474:	787b      	ldrb	r3, [r7, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002480:	e003      	b.n	800248a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	041a      	lsls	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	619a      	str	r2, [r3, #24]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002496:	b480      	push	{r7}
 8002498:	b085      	sub	sp, #20
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024a8:	887a      	ldrh	r2, [r7, #2]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4013      	ands	r3, r2
 80024ae:	041a      	lsls	r2, r3, #16
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	887b      	ldrh	r3, [r7, #2]
 80024b6:	400b      	ands	r3, r1
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	619a      	str	r2, [r3, #24]
}
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e12b      	b.n	8002736 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fd80 	bl	8000ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2224      	movs	r2, #36	; 0x24
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800251e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800252e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002530:	f002 fb80 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8002534:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4a81      	ldr	r2, [pc, #516]	; (8002740 <HAL_I2C_Init+0x274>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d807      	bhi.n	8002550 <HAL_I2C_Init+0x84>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4a80      	ldr	r2, [pc, #512]	; (8002744 <HAL_I2C_Init+0x278>)
 8002544:	4293      	cmp	r3, r2
 8002546:	bf94      	ite	ls
 8002548:	2301      	movls	r3, #1
 800254a:	2300      	movhi	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e006      	b.n	800255e <HAL_I2C_Init+0x92>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a7d      	ldr	r2, [pc, #500]	; (8002748 <HAL_I2C_Init+0x27c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	bf94      	ite	ls
 8002558:	2301      	movls	r3, #1
 800255a:	2300      	movhi	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0e7      	b.n	8002736 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a78      	ldr	r2, [pc, #480]	; (800274c <HAL_I2C_Init+0x280>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	0c9b      	lsrs	r3, r3, #18
 8002570:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a6a      	ldr	r2, [pc, #424]	; (8002740 <HAL_I2C_Init+0x274>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d802      	bhi.n	80025a0 <HAL_I2C_Init+0xd4>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3301      	adds	r3, #1
 800259e:	e009      	b.n	80025b4 <HAL_I2C_Init+0xe8>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	4a69      	ldr	r2, [pc, #420]	; (8002750 <HAL_I2C_Init+0x284>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	099b      	lsrs	r3, r3, #6
 80025b2:	3301      	adds	r3, #1
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	495c      	ldr	r1, [pc, #368]	; (8002740 <HAL_I2C_Init+0x274>)
 80025d0:	428b      	cmp	r3, r1
 80025d2:	d819      	bhi.n	8002608 <HAL_I2C_Init+0x13c>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1e59      	subs	r1, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e2:	1c59      	adds	r1, r3, #1
 80025e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025e8:	400b      	ands	r3, r1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_I2C_Init+0x138>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1e59      	subs	r1, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	e051      	b.n	80026a8 <HAL_I2C_Init+0x1dc>
 8002604:	2304      	movs	r3, #4
 8002606:	e04f      	b.n	80026a8 <HAL_I2C_Init+0x1dc>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d111      	bne.n	8002634 <HAL_I2C_Init+0x168>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1e58      	subs	r0, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	440b      	add	r3, r1
 800261e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e012      	b.n	800265a <HAL_I2C_Init+0x18e>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1e58      	subs	r0, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	0099      	lsls	r1, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	fbb0 f3f3 	udiv	r3, r0, r3
 800264a:	3301      	adds	r3, #1
 800264c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Init+0x196>
 800265e:	2301      	movs	r3, #1
 8002660:	e022      	b.n	80026a8 <HAL_I2C_Init+0x1dc>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10e      	bne.n	8002688 <HAL_I2C_Init+0x1bc>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1e58      	subs	r0, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	440b      	add	r3, r1
 8002678:	fbb0 f3f3 	udiv	r3, r0, r3
 800267c:	3301      	adds	r3, #1
 800267e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002686:	e00f      	b.n	80026a8 <HAL_I2C_Init+0x1dc>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1e58      	subs	r0, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	0099      	lsls	r1, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	6809      	ldr	r1, [r1, #0]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69da      	ldr	r2, [r3, #28]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6911      	ldr	r1, [r2, #16]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68d2      	ldr	r2, [r2, #12]
 80026e2:	4311      	orrs	r1, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	000186a0 	.word	0x000186a0
 8002744:	001e847f 	.word	0x001e847f
 8002748:	003d08ff 	.word	0x003d08ff
 800274c:	431bde83 	.word	0x431bde83
 8002750:	10624dd3 	.word	0x10624dd3

08002754 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e128      	b.n	80029b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a90      	ldr	r2, [pc, #576]	; (80029c0 <HAL_I2S_Init+0x26c>)
 800277e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7fe fc81 	bl	8001088 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2202      	movs	r2, #2
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800279c:	f023 030f 	bic.w	r3, r3, #15
 80027a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2202      	movs	r2, #2
 80027a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d060      	beq.n	8002874 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027ba:	2310      	movs	r3, #16
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e001      	b.n	80027c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d802      	bhi.n	80027d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f002 fb56 	bl	8004e84 <HAL_RCCEx_GetPeriphCLKFreq>
 80027d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e2:	d125      	bne.n	8002830 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d010      	beq.n	800280e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	461a      	mov	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	3305      	adds	r3, #5
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	e01f      	b.n	800284e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	fbb2 f2f3 	udiv	r2, r2, r3
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	461a      	mov	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	3305      	adds	r3, #5
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	e00e      	b.n	800284e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	fbb2 f2f3 	udiv	r2, r2, r3
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	461a      	mov	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	3305      	adds	r3, #5
 800284c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4a5c      	ldr	r2, [pc, #368]	; (80029c4 <HAL_I2S_Init+0x270>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	08db      	lsrs	r3, r3, #3
 8002858:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	e003      	b.n	800287c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002874:	2302      	movs	r3, #2
 8002876:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d902      	bls.n	8002888 <HAL_I2S_Init+0x134>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	2bff      	cmp	r3, #255	; 0xff
 8002886:	d907      	bls.n	8002898 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	f043 0210 	orr.w	r2, r3, #16
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e08f      	b.n	80029b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	ea42 0103 	orr.w	r1, r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028b6:	f023 030f 	bic.w	r3, r3, #15
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6851      	ldr	r1, [r2, #4]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6892      	ldr	r2, [r2, #8]
 80028c2:	4311      	orrs	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68d2      	ldr	r2, [r2, #12]
 80028c8:	4311      	orrs	r1, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6992      	ldr	r2, [r2, #24]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d161      	bne.n	80029a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a38      	ldr	r2, [pc, #224]	; (80029c8 <HAL_I2S_Init+0x274>)
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a37      	ldr	r2, [pc, #220]	; (80029cc <HAL_I2S_Init+0x278>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_I2S_Init+0x1a4>
 80028f4:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <HAL_I2S_Init+0x27c>)
 80028f6:	e001      	b.n	80028fc <HAL_I2S_Init+0x1a8>
 80028f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	4932      	ldr	r1, [pc, #200]	; (80029cc <HAL_I2S_Init+0x278>)
 8002904:	428a      	cmp	r2, r1
 8002906:	d101      	bne.n	800290c <HAL_I2S_Init+0x1b8>
 8002908:	4a31      	ldr	r2, [pc, #196]	; (80029d0 <HAL_I2S_Init+0x27c>)
 800290a:	e001      	b.n	8002910 <HAL_I2S_Init+0x1bc>
 800290c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002910:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002914:	f023 030f 	bic.w	r3, r3, #15
 8002918:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <HAL_I2S_Init+0x278>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_I2S_Init+0x1d4>
 8002924:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <HAL_I2S_Init+0x27c>)
 8002926:	e001      	b.n	800292c <HAL_I2S_Init+0x1d8>
 8002928:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800292c:	2202      	movs	r2, #2
 800292e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a25      	ldr	r2, [pc, #148]	; (80029cc <HAL_I2S_Init+0x278>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_I2S_Init+0x1ea>
 800293a:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <HAL_I2S_Init+0x27c>)
 800293c:	e001      	b.n	8002942 <HAL_I2S_Init+0x1ee>
 800293e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294e:	d003      	beq.n	8002958 <HAL_I2S_Init+0x204>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d103      	bne.n	8002960 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	e001      	b.n	8002964 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800296e:	4313      	orrs	r3, r2
 8002970:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002978:	4313      	orrs	r3, r2
 800297a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002982:	4313      	orrs	r3, r2
 8002984:	b29a      	uxth	r2, r3
 8002986:	897b      	ldrh	r3, [r7, #10]
 8002988:	4313      	orrs	r3, r2
 800298a:	b29b      	uxth	r3, r3
 800298c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002990:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a0d      	ldr	r2, [pc, #52]	; (80029cc <HAL_I2S_Init+0x278>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d101      	bne.n	80029a0 <HAL_I2S_Init+0x24c>
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_I2S_Init+0x27c>)
 800299e:	e001      	b.n	80029a4 <HAL_I2S_Init+0x250>
 80029a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029a4:	897a      	ldrh	r2, [r7, #10]
 80029a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	08002acb 	.word	0x08002acb
 80029c4:	cccccccd 	.word	0xcccccccd
 80029c8:	08002be1 	.word	0x08002be1
 80029cc:	40003800 	.word	0x40003800
 80029d0:	40003400 	.word	0x40003400

080029d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	881a      	ldrh	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	1c9a      	adds	r2, r3, #2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10e      	bne.n	8002a64 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a54:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffb8 	bl	80029d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	1c9a      	adds	r2, r3, #2
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10e      	bne.n	8002ac2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ab2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff93 	bl	80029e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d13a      	bne.n	8002b5c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d109      	bne.n	8002b04 <I2S_IRQHandler+0x3a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d102      	bne.n	8002b04 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ffb4 	bl	8002a6c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d126      	bne.n	8002b5c <I2S_IRQHandler+0x92>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d11f      	bne.n	8002b5c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f043 0202 	orr.w	r2, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ff50 	bl	80029fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d136      	bne.n	8002bd6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d109      	bne.n	8002b86 <I2S_IRQHandler+0xbc>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7c:	2b80      	cmp	r3, #128	; 0x80
 8002b7e:	d102      	bne.n	8002b86 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff45 	bl	8002a10 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d122      	bne.n	8002bd6 <I2S_IRQHandler+0x10c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d11b      	bne.n	8002bd6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	f043 0204 	orr.w	r2, r3, #4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff13 	bl	80029fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4aa2      	ldr	r2, [pc, #648]	; (8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bfa:	4ba2      	ldr	r3, [pc, #648]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bfc:	e001      	b.n	8002c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a9b      	ldr	r2, [pc, #620]	; (8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c18:	4b9a      	ldr	r3, [pc, #616]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c1a:	e001      	b.n	8002c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2c:	d004      	beq.n	8002c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 8099 	bne.w	8002d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d107      	bne.n	8002c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f925 	bl	8002e9c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9c8 	bl	8002ffc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d13a      	bne.n	8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d035      	beq.n	8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a7e      	ldr	r2, [pc, #504]	; (8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d101      	bne.n	8002c8e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c8a:	4b7e      	ldr	r3, [pc, #504]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c8c:	e001      	b.n	8002c92 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4979      	ldr	r1, [pc, #484]	; (8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c9a:	428b      	cmp	r3, r1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c9e:	4b79      	ldr	r3, [pc, #484]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ca0:	e001      	b.n	8002ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002ca2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ca6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002caa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f043 0202 	orr.w	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff fe88 	bl	80029fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	f040 80be 	bne.w	8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80b8 	beq.w	8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d12:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a59      	ldr	r2, [pc, #356]	; (8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d1e:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d20:	e001      	b.n	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4954      	ldr	r1, [pc, #336]	; (8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d2e:	428b      	cmp	r3, r1
 8002d30:	d101      	bne.n	8002d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d32:	4b54      	ldr	r3, [pc, #336]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d34:	e001      	b.n	8002d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d3e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f043 0204 	orr.w	r2, r3, #4
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fe4a 	bl	80029fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d68:	e084      	b.n	8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d107      	bne.n	8002d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f8be 	bl	8002f00 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f8fd 	bl	8002f98 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d12f      	bne.n	8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d02a      	beq.n	8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dc0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a2e      	ldr	r2, [pc, #184]	; (8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d101      	bne.n	8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dce:	e001      	b.n	8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002dd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4929      	ldr	r1, [pc, #164]	; (8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ddc:	428b      	cmp	r3, r1
 8002dde:	d101      	bne.n	8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002de0:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002de2:	e001      	b.n	8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002de4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f043 0202 	orr.w	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff fdfa 	bl	80029fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d131      	bne.n	8002e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d02c      	beq.n	8002e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e26:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e28:	e001      	b.n	8002e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4912      	ldr	r1, [pc, #72]	; (8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e36:	428b      	cmp	r3, r1
 8002e38:	d101      	bne.n	8002e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e3c:	e001      	b.n	8002e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002e3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e46:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e56:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	f043 0204 	orr.w	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff fdc5 	bl	80029fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e72:	e000      	b.n	8002e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e74:	bf00      	nop
}
 8002e76:	bf00      	nop
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40003800 	.word	0x40003800
 8002e84:	40003400 	.word	0x40003400

08002e88 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	1c99      	adds	r1, r3, #2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6251      	str	r1, [r2, #36]	; 0x24
 8002eae:	881a      	ldrh	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d113      	bne.n	8002ef6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002edc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d106      	bne.n	8002ef6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ffc9 	bl	8002e88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	1c99      	adds	r1, r3, #2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6251      	str	r1, [r2, #36]	; 0x24
 8002f12:	8819      	ldrh	r1, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <I2SEx_TxISR_I2SExt+0x90>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <I2SEx_TxISR_I2SExt+0x22>
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <I2SEx_TxISR_I2SExt+0x94>)
 8002f20:	e001      	b.n	8002f26 <I2SEx_TxISR_I2SExt+0x26>
 8002f22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f26:	460a      	mov	r2, r1
 8002f28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d121      	bne.n	8002f86 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <I2SEx_TxISR_I2SExt+0x90>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d101      	bne.n	8002f50 <I2SEx_TxISR_I2SExt+0x50>
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <I2SEx_TxISR_I2SExt+0x94>)
 8002f4e:	e001      	b.n	8002f54 <I2SEx_TxISR_I2SExt+0x54>
 8002f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	490d      	ldr	r1, [pc, #52]	; (8002f90 <I2SEx_TxISR_I2SExt+0x90>)
 8002f5c:	428b      	cmp	r3, r1
 8002f5e:	d101      	bne.n	8002f64 <I2SEx_TxISR_I2SExt+0x64>
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <I2SEx_TxISR_I2SExt+0x94>)
 8002f62:	e001      	b.n	8002f68 <I2SEx_TxISR_I2SExt+0x68>
 8002f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d106      	bne.n	8002f86 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff81 	bl	8002e88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40003800 	.word	0x40003800
 8002f94:	40003400 	.word	0x40003400

08002f98 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68d8      	ldr	r0, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	1c99      	adds	r1, r3, #2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fb0:	b282      	uxth	r2, r0
 8002fb2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d113      	bne.n	8002ff4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fda:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ff4a 	bl	8002e88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a20      	ldr	r2, [pc, #128]	; (800308c <I2SEx_RxISR_I2SExt+0x90>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <I2SEx_RxISR_I2SExt+0x16>
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <I2SEx_RxISR_I2SExt+0x94>)
 8003010:	e001      	b.n	8003016 <I2SEx_RxISR_I2SExt+0x1a>
 8003012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003016:	68d8      	ldr	r0, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	1c99      	adds	r1, r3, #2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003022:	b282      	uxth	r2, r0
 8003024:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d121      	bne.n	8003082 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a12      	ldr	r2, [pc, #72]	; (800308c <I2SEx_RxISR_I2SExt+0x90>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <I2SEx_RxISR_I2SExt+0x50>
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <I2SEx_RxISR_I2SExt+0x94>)
 800304a:	e001      	b.n	8003050 <I2SEx_RxISR_I2SExt+0x54>
 800304c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	490d      	ldr	r1, [pc, #52]	; (800308c <I2SEx_RxISR_I2SExt+0x90>)
 8003058:	428b      	cmp	r3, r1
 800305a:	d101      	bne.n	8003060 <I2SEx_RxISR_I2SExt+0x64>
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <I2SEx_RxISR_I2SExt+0x94>)
 800305e:	e001      	b.n	8003064 <I2SEx_RxISR_I2SExt+0x68>
 8003060:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003064:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003068:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ff03 	bl	8002e88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40003800 	.word	0x40003800
 8003090:	40003400 	.word	0x40003400

08003094 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003096:	b08f      	sub	sp, #60	; 0x3c
 8003098:	af0a      	add	r7, sp, #40	; 0x28
 800309a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e10f      	b.n	80032c6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d106      	bne.n	80030c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f009 ffa5 	bl	800d010 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2203      	movs	r2, #3
 80030ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f002 ffa2 	bl	800602e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	687e      	ldr	r6, [r7, #4]
 80030f2:	466d      	mov	r5, sp
 80030f4:	f106 0410 	add.w	r4, r6, #16
 80030f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003100:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003104:	e885 0003 	stmia.w	r5, {r0, r1}
 8003108:	1d33      	adds	r3, r6, #4
 800310a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800310c:	6838      	ldr	r0, [r7, #0]
 800310e:	f002 fe79 	bl	8005e04 <USB_CoreInit>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0d0      	b.n	80032c6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f002 ff90 	bl	8006050 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	e04a      	b.n	80031cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	333d      	adds	r3, #61	; 0x3d
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	333c      	adds	r3, #60	; 0x3c
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	b298      	uxth	r0, r3
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3342      	adds	r3, #66	; 0x42
 8003172:	4602      	mov	r2, r0
 8003174:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	333f      	adds	r3, #63	; 0x3f
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800318a:	7bfa      	ldrb	r2, [r7, #15]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3344      	adds	r3, #68	; 0x44
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3348      	adds	r3, #72	; 0x48
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031b2:	7bfa      	ldrb	r2, [r7, #15]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	3350      	adds	r3, #80	; 0x50
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	3301      	adds	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d3af      	bcc.n	8003136 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	73fb      	strb	r3, [r7, #15]
 80031da:	e044      	b.n	8003266 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003204:	7bfa      	ldrb	r2, [r7, #15]
 8003206:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800324a:	7bfa      	ldrb	r2, [r7, #15]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	3301      	adds	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d3b5      	bcc.n	80031dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	687e      	ldr	r6, [r7, #4]
 8003278:	466d      	mov	r5, sp
 800327a:	f106 0410 	add.w	r4, r6, #16
 800327e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003286:	e894 0003 	ldmia.w	r4, {r0, r1}
 800328a:	e885 0003 	stmia.w	r5, {r0, r1}
 800328e:	1d33      	adds	r3, r6, #4
 8003290:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003292:	6838      	ldr	r0, [r7, #0]
 8003294:	f002 ff28 	bl	80060e8 <USB_DevInit>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00d      	b.n	80032c6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 ffa4 	bl	800720c <USB_DevDisconnect>

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_PCD_Start+0x1c>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e020      	b.n	800332c <HAL_PCD_Start+0x5e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d109      	bne.n	800330e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d005      	beq.n	800330e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f002 fe7a 	bl	800600c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f003 ff54 	bl	80071ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b08d      	sub	sp, #52	; 0x34
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f004 f812 	bl	8007374 <USB_GetMode>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 839d 	bne.w	8003a92 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f003 ff76 	bl	800724e <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8393 	beq.w	8003a90 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f003 ff6d 	bl	800724e <USB_ReadInterrupts>
 8003374:	4603      	mov	r3, r0
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b02      	cmp	r3, #2
 800337c:	d107      	bne.n	800338e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f002 0202 	and.w	r2, r2, #2
 800338c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f003 ff5b 	bl	800724e <USB_ReadInterrupts>
 8003398:	4603      	mov	r3, r0
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d161      	bne.n	8003466 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0210 	bic.w	r2, r2, #16
 80033b0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f003 020f 	and.w	r2, r3, #15
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	3304      	adds	r3, #4
 80033d0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	0c5b      	lsrs	r3, r3, #17
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d124      	bne.n	8003428 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d035      	beq.n	8003456 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	6a38      	ldr	r0, [r7, #32]
 80033fe:	f003 fd92 	bl	8006f26 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800340e:	441a      	add	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	091b      	lsrs	r3, r3, #4
 800341c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003420:	441a      	add	r2, r3
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	619a      	str	r2, [r3, #24]
 8003426:	e016      	b.n	8003456 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	0c5b      	lsrs	r3, r3, #17
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	2b06      	cmp	r3, #6
 8003432:	d110      	bne.n	8003456 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800343a:	2208      	movs	r2, #8
 800343c:	4619      	mov	r1, r3
 800343e:	6a38      	ldr	r0, [r7, #32]
 8003440:	f003 fd71 	bl	8006f26 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003450:	441a      	add	r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0210 	orr.w	r2, r2, #16
 8003464:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f003 feef 	bl	800724e <USB_ReadInterrupts>
 8003470:	4603      	mov	r3, r0
 8003472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003476:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800347a:	d16e      	bne.n	800355a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f003 fef5 	bl	8007274 <USB_ReadDevAllOutEpInterrupt>
 800348a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800348c:	e062      	b.n	8003554 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d057      	beq.n	8003548 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 ff1a 	bl	80072dc <USB_ReadDevOutEPInterrupt>
 80034a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00c      	beq.n	80034ce <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c0:	461a      	mov	r2, r3
 80034c2:	2301      	movs	r3, #1
 80034c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fdb1 	bl	8004030 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00c      	beq.n	80034f2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e4:	461a      	mov	r2, r3
 80034e6:	2308      	movs	r3, #8
 80034e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 feab 	bl	8004248 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003508:	461a      	mov	r2, r3
 800350a:	2310      	movs	r3, #16
 800350c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	2320      	movs	r3, #32
 8003528:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d009      	beq.n	8003548 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003540:	461a      	mov	r2, r3
 8003542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003546:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	3301      	adds	r3, #1
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003556:	2b00      	cmp	r3, #0
 8003558:	d199      	bne.n	800348e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f003 fe75 	bl	800724e <USB_ReadInterrupts>
 8003564:	4603      	mov	r3, r0
 8003566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800356a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800356e:	f040 80c0 	bne.w	80036f2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f003 fe96 	bl	80072a8 <USB_ReadDevAllInEpInterrupt>
 800357c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003582:	e0b2      	b.n	80036ea <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80a7 	beq.w	80036de <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f003 febc 	bl	8007318 <USB_ReadDevInEPInterrupt>
 80035a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d057      	beq.n	800365c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	2201      	movs	r2, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69f9      	ldr	r1, [r7, #28]
 80035c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035cc:	4013      	ands	r3, r2
 80035ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035dc:	461a      	mov	r2, r3
 80035de:	2301      	movs	r3, #1
 80035e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d132      	bne.n	8003650 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3348      	adds	r3, #72	; 0x48
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003600:	4613      	mov	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4403      	add	r3, r0
 800360a:	3344      	adds	r3, #68	; 0x44
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4419      	add	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4403      	add	r3, r0
 800361e:	3348      	adds	r3, #72	; 0x48
 8003620:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	2b00      	cmp	r3, #0
 8003626:	d113      	bne.n	8003650 <HAL_PCD_IRQHandler+0x31c>
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	3350      	adds	r3, #80	; 0x50
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d108      	bne.n	8003650 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003648:	461a      	mov	r2, r3
 800364a:	2101      	movs	r1, #1
 800364c:	f003 fec4 	bl	80073d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	b2db      	uxtb	r3, r3
 8003654:	4619      	mov	r1, r3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f009 fd69 	bl	800d12e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003672:	461a      	mov	r2, r3
 8003674:	2308      	movs	r3, #8
 8003676:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368e:	461a      	mov	r2, r3
 8003690:	2310      	movs	r3, #16
 8003692:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036aa:	461a      	mov	r2, r3
 80036ac:	2340      	movs	r3, #64	; 0x40
 80036ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c6:	461a      	mov	r2, r3
 80036c8:	2302      	movs	r3, #2
 80036ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fc1b 	bl	8003f14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	3301      	adds	r3, #1
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f47f af49 	bne.w	8003584 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f003 fda9 	bl	800724e <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003706:	d122      	bne.n	800374e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003722:	2b01      	cmp	r3, #1
 8003724:	d108      	bne.n	8003738 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800372e:	2100      	movs	r1, #0
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fe27 	bl	8004384 <HAL_PCDEx_LPM_Callback>
 8003736:	e002      	b.n	800373e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f009 fd6f 	bl	800d21c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800374c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f003 fd7b 	bl	800724e <USB_ReadInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800375e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003762:	d112      	bne.n	800378a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d102      	bne.n	800377a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f009 fd2b 	bl	800d1d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003788:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f003 fd5d 	bl	800724e <USB_ReadInterrupts>
 8003794:	4603      	mov	r3, r0
 8003796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379e:	f040 80c7 	bne.w	8003930 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2110      	movs	r1, #16
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 fdf7 	bl	80063b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c6:	e056      	b.n	8003876 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d4:	461a      	mov	r2, r3
 80037d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ec:	0151      	lsls	r1, r2, #5
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	440a      	add	r2, r1
 80037f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037fa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800380c:	0151      	lsls	r1, r2, #5
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	440a      	add	r2, r1
 8003812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003816:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800381a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003828:	461a      	mov	r2, r3
 800382a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800382e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003840:	0151      	lsls	r1, r2, #5
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	440a      	add	r2, r1
 8003846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800384a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800384e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	440a      	add	r2, r1
 8003866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800386a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800386e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	3301      	adds	r3, #1
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800387c:	429a      	cmp	r2, r3
 800387e:	d3a3      	bcc.n	80037c8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800388e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003892:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	2b00      	cmp	r3, #0
 800389a:	d016      	beq.n	80038ca <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ac:	f043 030b 	orr.w	r3, r3, #11
 80038b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c2:	f043 030b 	orr.w	r3, r3, #11
 80038c6:	6453      	str	r3, [r2, #68]	; 0x44
 80038c8:	e015      	b.n	80038f6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f0:	f043 030b 	orr.w	r3, r3, #11
 80038f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003904:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003908:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800391a:	461a      	mov	r2, r3
 800391c:	f003 fd5c 	bl	80073d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800392e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f003 fc8a 	bl	800724e <USB_ReadInterrupts>
 800393a:	4603      	mov	r3, r0
 800393c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003944:	d124      	bne.n	8003990 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f003 fd20 	bl	8007390 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f002 fd88 	bl	800646a <USB_GetDevSpeed>
 800395a:	4603      	mov	r3, r0
 800395c:	461a      	mov	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681c      	ldr	r4, [r3, #0]
 8003966:	f001 f959 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 800396a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	4620      	mov	r0, r4
 8003976:	f002 faa7 	bl	8005ec8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f009 fbff 	bl	800d17e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800398e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f003 fc5a 	bl	800724e <USB_ReadInterrupts>
 800399a:	4603      	mov	r3, r0
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d10a      	bne.n	80039ba <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f009 fbdc 	bl	800d162 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f002 0208 	and.w	r2, r2, #8
 80039b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f003 fc45 	bl	800724e <USB_ReadInterrupts>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ce:	d10f      	bne.n	80039f0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	4619      	mov	r1, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f009 fc3e 	bl	800d25c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80039ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f003 fc2a 	bl	800724e <USB_ReadInterrupts>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a04:	d10f      	bne.n	8003a26 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f009 fc11 	bl	800d238 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f003 fc0f 	bl	800724e <USB_ReadInterrupts>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d10a      	bne.n	8003a52 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f009 fc1f 	bl	800d280 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f003 fbf9 	bl	800724e <USB_ReadInterrupts>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d115      	bne.n	8003a92 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f009 fc0f 	bl	800d29c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	e000      	b.n	8003a92 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003a90:	bf00      	nop
    }
  }
}
 8003a92:	3734      	adds	r7, #52	; 0x34
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd90      	pop	{r4, r7, pc}

08003a98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_PCD_SetAddress+0x1a>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e013      	b.n	8003ada <HAL_PCD_SetAddress+0x42>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f003 fb57 	bl	800717e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	4608      	mov	r0, r1
 8003aec:	4611      	mov	r1, r2
 8003aee:	461a      	mov	r2, r3
 8003af0:	4603      	mov	r3, r0
 8003af2:	70fb      	strb	r3, [r7, #3]
 8003af4:	460b      	mov	r3, r1
 8003af6:	803b      	strh	r3, [r7, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	da0f      	bge.n	8003b28 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	f003 020f 	and.w	r2, r3, #15
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	3338      	adds	r3, #56	; 0x38
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	705a      	strb	r2, [r3, #1]
 8003b26:	e00f      	b.n	8003b48 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	f003 020f 	and.w	r2, r3, #15
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b54:	883a      	ldrh	r2, [r7, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	78ba      	ldrb	r2, [r7, #2]
 8003b5e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b72:	78bb      	ldrb	r3, [r7, #2]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d102      	bne.n	8003b7e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_PCD_EP_Open+0xaa>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e00e      	b.n	8003baa <HAL_PCD_EP_Open+0xc8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68f9      	ldr	r1, [r7, #12]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f002 fc8a 	bl	80064b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003ba8:	7afb      	ldrb	r3, [r7, #11]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	da0f      	bge.n	8003be6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	f003 020f 	and.w	r2, r3, #15
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	3338      	adds	r3, #56	; 0x38
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3304      	adds	r3, #4
 8003bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	705a      	strb	r2, [r3, #1]
 8003be4:	e00f      	b.n	8003c06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_PCD_EP_Close+0x6e>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e00e      	b.n	8003c3e <HAL_PCD_EP_Close+0x8c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68f9      	ldr	r1, [r7, #12]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f002 fcc8 	bl	80065c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b086      	sub	sp, #24
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	460b      	mov	r3, r1
 8003c54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c56:	7afb      	ldrb	r3, [r7, #11]
 8003c58:	f003 020f 	and.w	r2, r3, #15
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c88:	7afb      	ldrb	r3, [r7, #11]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d102      	bne.n	8003ca2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d109      	bne.n	8003cc0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6979      	ldr	r1, [r7, #20]
 8003cba:	f002 ffa3 	bl	8006c04 <USB_EP0StartXfer>
 8003cbe:	e008      	b.n	8003cd2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	6979      	ldr	r1, [r7, #20]
 8003cce:	f002 fd55 	bl	800677c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	f003 020f 	and.w	r2, r3, #15
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d1c:	7afb      	ldrb	r3, [r7, #11]
 8003d1e:	f003 020f 	and.w	r2, r3, #15
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	3338      	adds	r3, #56	; 0x38
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	3304      	adds	r3, #4
 8003d32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2200      	movs	r2, #0
 8003d44:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d4c:	7afb      	ldrb	r3, [r7, #11]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d102      	bne.n	8003d66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d66:	7afb      	ldrb	r3, [r7, #11]
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6979      	ldr	r1, [r7, #20]
 8003d7e:	f002 ff41 	bl	8006c04 <USB_EP0StartXfer>
 8003d82:	e008      	b.n	8003d96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6979      	ldr	r1, [r7, #20]
 8003d92:	f002 fcf3 	bl	800677c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	f003 020f 	and.w	r2, r3, #15
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d901      	bls.n	8003dbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e050      	b.n	8003e60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da0f      	bge.n	8003de6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	f003 020f 	and.w	r2, r3, #15
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	3338      	adds	r3, #56	; 0x38
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4413      	add	r3, r2
 8003dda:	3304      	adds	r3, #4
 8003ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	705a      	strb	r2, [r3, #1]
 8003de4:	e00d      	b.n	8003e02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_PCD_EP_SetStall+0x82>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e01e      	b.n	8003e60 <HAL_PCD_EP_SetStall+0xc0>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f003 f8d0 	bl	8006fd6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	b2d9      	uxtb	r1, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e50:	461a      	mov	r2, r3
 8003e52:	f003 fac1 	bl	80073d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	f003 020f 	and.w	r2, r3, #15
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d901      	bls.n	8003e86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e042      	b.n	8003f0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	da0f      	bge.n	8003eae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	f003 020f 	and.w	r2, r3, #15
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	3338      	adds	r3, #56	; 0x38
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	705a      	strb	r2, [r3, #1]
 8003eac:	e00f      	b.n	8003ece <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	f003 020f 	and.w	r2, r3, #15
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_PCD_EP_ClrStall+0x86>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e00e      	b.n	8003f0c <HAL_PCD_EP_ClrStall+0xa4>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f003 f8d8 	bl	80070b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	3338      	adds	r3, #56	; 0x38
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	4413      	add	r3, r2
 8003f38:	3304      	adds	r3, #4
 8003f3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d901      	bls.n	8003f4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e06c      	b.n	8004026 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d902      	bls.n	8003f68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	3303      	adds	r3, #3
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f70:	e02b      	b.n	8003fca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d902      	bls.n	8003f8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3303      	adds	r3, #3
 8003f92:	089b      	lsrs	r3, r3, #2
 8003f94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	68d9      	ldr	r1, [r3, #12]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	4603      	mov	r3, r0
 8003fac:	6978      	ldr	r0, [r7, #20]
 8003fae:	f002 ff7c 	bl	8006eaa <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	441a      	add	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d809      	bhi.n	8003ff4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d203      	bcs.n	8003ff4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1be      	bne.n	8003f72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d811      	bhi.n	8004024 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	2201      	movs	r2, #1
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	43db      	mvns	r3, r3
 800401a:	6939      	ldr	r1, [r7, #16]
 800401c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004020:	4013      	ands	r3, r2
 8004022:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	333c      	adds	r3, #60	; 0x3c
 8004048:	3304      	adds	r3, #4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b01      	cmp	r3, #1
 8004064:	f040 80a0 	bne.w	80041a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d015      	beq.n	800409e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4a72      	ldr	r2, [pc, #456]	; (8004240 <PCD_EP_OutXfrComplete_int+0x210>)
 8004076:	4293      	cmp	r3, r2
 8004078:	f240 80dd 	bls.w	8004236 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 80d7 	beq.w	8004236 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004094:	461a      	mov	r2, r3
 8004096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409a:	6093      	str	r3, [r2, #8]
 800409c:	e0cb      	b.n	8004236 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d009      	beq.n	80040bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b4:	461a      	mov	r2, r3
 80040b6:	2320      	movs	r3, #32
 80040b8:	6093      	str	r3, [r2, #8]
 80040ba:	e0bc      	b.n	8004236 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f040 80b7 	bne.w	8004236 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a5d      	ldr	r2, [pc, #372]	; (8004240 <PCD_EP_OutXfrComplete_int+0x210>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d90f      	bls.n	80040f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e6:	461a      	mov	r2, r3
 80040e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ec:	6093      	str	r3, [r2, #8]
 80040ee:	e0a2      	b.n	8004236 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004102:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	0159      	lsls	r1, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	440b      	add	r3, r1
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004116:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4403      	add	r3, r0
 8004126:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800412a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4403      	add	r3, r0
 800414e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4419      	add	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	4613      	mov	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4403      	add	r3, r0
 8004164:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004168:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d114      	bne.n	800419a <PCD_EP_OutXfrComplete_int+0x16a>
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d108      	bne.n	800419a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004192:	461a      	mov	r2, r3
 8004194:	2101      	movs	r1, #1
 8004196:	f003 f91f 	bl	80073d8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f008 ffa9 	bl	800d0f8 <HAL_PCD_DataOutStageCallback>
 80041a6:	e046      	b.n	8004236 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a26      	ldr	r2, [pc, #152]	; (8004244 <PCD_EP_OutXfrComplete_int+0x214>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d124      	bne.n	80041fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c6:	461a      	mov	r2, r3
 80041c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041cc:	6093      	str	r3, [r2, #8]
 80041ce:	e032      	b.n	8004236 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d008      	beq.n	80041ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e6:	461a      	mov	r2, r3
 80041e8:	2320      	movs	r3, #32
 80041ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f008 ff80 	bl	800d0f8 <HAL_PCD_DataOutStageCallback>
 80041f8:	e01d      	b.n	8004236 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d114      	bne.n	800422a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d108      	bne.n	800422a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004222:	461a      	mov	r2, r3
 8004224:	2100      	movs	r1, #0
 8004226:	f003 f8d7 	bl	80073d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f008 ff61 	bl	800d0f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	4f54300a 	.word	0x4f54300a
 8004244:	4f54310a 	.word	0x4f54310a

08004248 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	333c      	adds	r3, #60	; 0x3c
 8004260:	3304      	adds	r3, #4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a15      	ldr	r2, [pc, #84]	; (80042d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d90e      	bls.n	800429c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	461a      	mov	r2, r3
 8004296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800429a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f008 ff19 	bl	800d0d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d90c      	bls.n	80042c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d108      	bne.n	80042c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042bc:	461a      	mov	r2, r3
 80042be:	2101      	movs	r1, #1
 80042c0:	f003 f88a 	bl	80073d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	4f54300a 	.word	0x4f54300a

080042d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
 80042e0:	4613      	mov	r3, r2
 80042e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d107      	bne.n	8004302 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042f2:	883b      	ldrh	r3, [r7, #0]
 80042f4:	0419      	lsls	r1, r3, #16
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004300:	e028      	b.n	8004354 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	4413      	add	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	e00d      	b.n	8004332 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	3340      	adds	r3, #64	; 0x40
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4413      	add	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	3301      	adds	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
 8004332:	7bfa      	ldrb	r2, [r7, #15]
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	3b01      	subs	r3, #1
 8004338:	429a      	cmp	r2, r3
 800433a:	d3ec      	bcc.n	8004316 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800433c:	883b      	ldrh	r3, [r7, #0]
 800433e:	0418      	lsls	r0, r3, #16
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6819      	ldr	r1, [r3, #0]
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	3b01      	subs	r3, #1
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	4302      	orrs	r2, r0
 800434c:	3340      	adds	r3, #64	; 0x40
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e264      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d075      	beq.n	80044a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ba:	4ba3      	ldr	r3, [pc, #652]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d00c      	beq.n	80043e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c6:	4ba0      	ldr	r3, [pc, #640]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d112      	bne.n	80043f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4b9d      	ldr	r3, [pc, #628]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043de:	d10b      	bne.n	80043f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	4b99      	ldr	r3, [pc, #612]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d05b      	beq.n	80044a4 <HAL_RCC_OscConfig+0x108>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d157      	bne.n	80044a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e23f      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004400:	d106      	bne.n	8004410 <HAL_RCC_OscConfig+0x74>
 8004402:	4b91      	ldr	r3, [pc, #580]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a90      	ldr	r2, [pc, #576]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e01d      	b.n	800444c <HAL_RCC_OscConfig+0xb0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004418:	d10c      	bne.n	8004434 <HAL_RCC_OscConfig+0x98>
 800441a:	4b8b      	ldr	r3, [pc, #556]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a8a      	ldr	r2, [pc, #552]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b88      	ldr	r3, [pc, #544]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a87      	ldr	r2, [pc, #540]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e00b      	b.n	800444c <HAL_RCC_OscConfig+0xb0>
 8004434:	4b84      	ldr	r3, [pc, #528]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a83      	ldr	r2, [pc, #524]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 800443a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b81      	ldr	r3, [pc, #516]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a80      	ldr	r2, [pc, #512]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d013      	beq.n	800447c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fd f868 	bl	8001528 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800445c:	f7fd f864 	bl	8001528 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	; 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e204      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	4b76      	ldr	r3, [pc, #472]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0xc0>
 800447a:	e014      	b.n	80044a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fd f854 	bl	8001528 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004484:	f7fd f850 	bl	8001528 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	; 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e1f0      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	4b6c      	ldr	r3, [pc, #432]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0xe8>
 80044a2:	e000      	b.n	80044a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d063      	beq.n	800457a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044b2:	4b65      	ldr	r3, [pc, #404]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044be:	4b62      	ldr	r3, [pc, #392]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d11c      	bne.n	8004504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ca:	4b5f      	ldr	r3, [pc, #380]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d116      	bne.n	8004504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	4b5c      	ldr	r3, [pc, #368]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_RCC_OscConfig+0x152>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d001      	beq.n	80044ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e1c4      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ee:	4b56      	ldr	r3, [pc, #344]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4952      	ldr	r1, [pc, #328]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004502:	e03a      	b.n	800457a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d020      	beq.n	800454e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800450c:	4b4f      	ldr	r3, [pc, #316]	; (800464c <HAL_RCC_OscConfig+0x2b0>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fd f809 	bl	8001528 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800451a:	f7fd f805 	bl	8001528 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e1a5      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452c:	4b46      	ldr	r3, [pc, #280]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004538:	4b43      	ldr	r3, [pc, #268]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4940      	ldr	r1, [pc, #256]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	4313      	orrs	r3, r2
 800454a:	600b      	str	r3, [r1, #0]
 800454c:	e015      	b.n	800457a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454e:	4b3f      	ldr	r3, [pc, #252]	; (800464c <HAL_RCC_OscConfig+0x2b0>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fc ffe8 	bl	8001528 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800455c:	f7fc ffe4 	bl	8001528 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e184      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	4b36      	ldr	r3, [pc, #216]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d030      	beq.n	80045e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458e:	4b30      	ldr	r3, [pc, #192]	; (8004650 <HAL_RCC_OscConfig+0x2b4>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fc ffc8 	bl	8001528 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459c:	f7fc ffc4 	bl	8001528 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e164      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ae:	4b26      	ldr	r3, [pc, #152]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x200>
 80045ba:	e015      	b.n	80045e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045bc:	4b24      	ldr	r3, [pc, #144]	; (8004650 <HAL_RCC_OscConfig+0x2b4>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7fc ffb1 	bl	8001528 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ca:	f7fc ffad 	bl	8001528 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e14d      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80045de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80a0 	beq.w	8004736 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f6:	2300      	movs	r3, #0
 80045f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	4a0e      	ldr	r2, [pc, #56]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004614:	6413      	str	r3, [r2, #64]	; 0x40
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004622:	2301      	movs	r3, #1
 8004624:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCC_OscConfig+0x2b8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d121      	bne.n	8004676 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004632:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_RCC_OscConfig+0x2b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a07      	ldr	r2, [pc, #28]	; (8004654 <HAL_RCC_OscConfig+0x2b8>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463e:	f7fc ff73 	bl	8001528 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	e011      	b.n	800466a <HAL_RCC_OscConfig+0x2ce>
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800
 800464c:	42470000 	.word	0x42470000
 8004650:	42470e80 	.word	0x42470e80
 8004654:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004658:	f7fc ff66 	bl	8001528 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e106      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466a:	4b85      	ldr	r3, [pc, #532]	; (8004880 <HAL_RCC_OscConfig+0x4e4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d106      	bne.n	800468c <HAL_RCC_OscConfig+0x2f0>
 800467e:	4b81      	ldr	r3, [pc, #516]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	4a80      	ldr	r2, [pc, #512]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6713      	str	r3, [r2, #112]	; 0x70
 800468a:	e01c      	b.n	80046c6 <HAL_RCC_OscConfig+0x32a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b05      	cmp	r3, #5
 8004692:	d10c      	bne.n	80046ae <HAL_RCC_OscConfig+0x312>
 8004694:	4b7b      	ldr	r3, [pc, #492]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	4a7a      	ldr	r2, [pc, #488]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 800469a:	f043 0304 	orr.w	r3, r3, #4
 800469e:	6713      	str	r3, [r2, #112]	; 0x70
 80046a0:	4b78      	ldr	r3, [pc, #480]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a77      	ldr	r2, [pc, #476]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	e00b      	b.n	80046c6 <HAL_RCC_OscConfig+0x32a>
 80046ae:	4b75      	ldr	r3, [pc, #468]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	4a74      	ldr	r2, [pc, #464]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ba:	4b72      	ldr	r3, [pc, #456]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	4a71      	ldr	r2, [pc, #452]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 80046c0:	f023 0304 	bic.w	r3, r3, #4
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d015      	beq.n	80046fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ce:	f7fc ff2b 	bl	8001528 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d4:	e00a      	b.n	80046ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d6:	f7fc ff27 	bl	8001528 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e0c5      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ec:	4b65      	ldr	r3, [pc, #404]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ee      	beq.n	80046d6 <HAL_RCC_OscConfig+0x33a>
 80046f8:	e014      	b.n	8004724 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fa:	f7fc ff15 	bl	8001528 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004700:	e00a      	b.n	8004718 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fc ff11 	bl	8001528 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0af      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004718:	4b5a      	ldr	r3, [pc, #360]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ee      	bne.n	8004702 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d105      	bne.n	8004736 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472a:	4b56      	ldr	r3, [pc, #344]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	4a55      	ldr	r2, [pc, #340]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 8004730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004734:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 809b 	beq.w	8004876 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004740:	4b50      	ldr	r3, [pc, #320]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 030c 	and.w	r3, r3, #12
 8004748:	2b08      	cmp	r3, #8
 800474a:	d05c      	beq.n	8004806 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d141      	bne.n	80047d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004754:	4b4c      	ldr	r3, [pc, #304]	; (8004888 <HAL_RCC_OscConfig+0x4ec>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475a:	f7fc fee5 	bl	8001528 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004762:	f7fc fee1 	bl	8001528 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e081      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004774:	4b43      	ldr	r3, [pc, #268]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f0      	bne.n	8004762 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	019b      	lsls	r3, r3, #6
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	085b      	lsrs	r3, r3, #1
 8004798:	3b01      	subs	r3, #1
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	061b      	lsls	r3, r3, #24
 80047a4:	4937      	ldr	r1, [pc, #220]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047aa:	4b37      	ldr	r3, [pc, #220]	; (8004888 <HAL_RCC_OscConfig+0x4ec>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fc feba 	bl	8001528 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fc feb6 	bl	8001528 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e056      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ca:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x41c>
 80047d6:	e04e      	b.n	8004876 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d8:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <HAL_RCC_OscConfig+0x4ec>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047de:	f7fc fea3 	bl	8001528 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e6:	f7fc fe9f 	bl	8001528 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e03f      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f8:	4b22      	ldr	r3, [pc, #136]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f0      	bne.n	80047e6 <HAL_RCC_OscConfig+0x44a>
 8004804:	e037      	b.n	8004876 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e032      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004812:	4b1c      	ldr	r3, [pc, #112]	; (8004884 <HAL_RCC_OscConfig+0x4e8>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d028      	beq.n	8004872 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d121      	bne.n	8004872 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d11a      	bne.n	8004872 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004842:	4013      	ands	r3, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004848:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800484a:	4293      	cmp	r3, r2
 800484c:	d111      	bne.n	8004872 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	3b01      	subs	r3, #1
 800485c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d107      	bne.n	8004872 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d001      	beq.n	8004876 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40007000 	.word	0x40007000
 8004884:	40023800 	.word	0x40023800
 8004888:	42470060 	.word	0x42470060

0800488c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0cc      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a0:	4b68      	ldr	r3, [pc, #416]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d90c      	bls.n	80048c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b65      	ldr	r3, [pc, #404]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	4b63      	ldr	r3, [pc, #396]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0b8      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d020      	beq.n	8004916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e0:	4b59      	ldr	r3, [pc, #356]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4a58      	ldr	r2, [pc, #352]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f8:	4b53      	ldr	r3, [pc, #332]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4a52      	ldr	r2, [pc, #328]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004904:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	494d      	ldr	r1, [pc, #308]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d044      	beq.n	80049ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d107      	bne.n	800493a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	4b47      	ldr	r3, [pc, #284]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d119      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e07f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d003      	beq.n	800494a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004946:	2b03      	cmp	r3, #3
 8004948:	d107      	bne.n	800495a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494a:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e06f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495a:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e067      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496a:	4b37      	ldr	r3, [pc, #220]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 0203 	bic.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4934      	ldr	r1, [pc, #208]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800497c:	f7fc fdd4 	bl	8001528 <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	e00a      	b.n	800499a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004984:	f7fc fdd0 	bl	8001528 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e04f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499a:	4b2b      	ldr	r3, [pc, #172]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 020c 	and.w	r2, r3, #12
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d1eb      	bne.n	8004984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ac:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d20c      	bcs.n	80049d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e032      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e0:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4916      	ldr	r1, [pc, #88]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	490e      	ldr	r1, [pc, #56]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a12:	f000 f821 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8004a16:	4602      	mov	r2, r0
 8004a18:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	490a      	ldr	r1, [pc, #40]	; (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 8004a24:	5ccb      	ldrb	r3, [r1, r3]
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fc fc4c 	bl	80012d0 <HAL_InitTick>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40023c00 	.word	0x40023c00
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	0800e334 	.word	0x0800e334
 8004a50:	20000000 	.word	0x20000000
 8004a54:	20000004 	.word	0x20000004

08004a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a70:	4b67      	ldr	r3, [pc, #412]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d00d      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x40>
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	f200 80bd 	bhi.w	8004bfc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x34>
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d003      	beq.n	8004a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a8a:	e0b7      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a8c:	4b61      	ldr	r3, [pc, #388]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a8e:	60bb      	str	r3, [r7, #8]
       break;
 8004a90:	e0b7      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a92:	4b61      	ldr	r3, [pc, #388]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a94:	60bb      	str	r3, [r7, #8]
      break;
 8004a96:	e0b4      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a98:	4b5d      	ldr	r3, [pc, #372]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa2:	4b5b      	ldr	r3, [pc, #364]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d04d      	beq.n	8004b4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aae:	4b58      	ldr	r3, [pc, #352]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004abe:	f04f 0100 	mov.w	r1, #0
 8004ac2:	ea02 0800 	and.w	r8, r2, r0
 8004ac6:	ea03 0901 	and.w	r9, r3, r1
 8004aca:	4640      	mov	r0, r8
 8004acc:	4649      	mov	r1, r9
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	014b      	lsls	r3, r1, #5
 8004ad8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004adc:	0142      	lsls	r2, r0, #5
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	ebb0 0008 	subs.w	r0, r0, r8
 8004ae6:	eb61 0109 	sbc.w	r1, r1, r9
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	018b      	lsls	r3, r1, #6
 8004af4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004af8:	0182      	lsls	r2, r0, #6
 8004afa:	1a12      	subs	r2, r2, r0
 8004afc:	eb63 0301 	sbc.w	r3, r3, r1
 8004b00:	f04f 0000 	mov.w	r0, #0
 8004b04:	f04f 0100 	mov.w	r1, #0
 8004b08:	00d9      	lsls	r1, r3, #3
 8004b0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b0e:	00d0      	lsls	r0, r2, #3
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	eb12 0208 	adds.w	r2, r2, r8
 8004b18:	eb43 0309 	adc.w	r3, r3, r9
 8004b1c:	f04f 0000 	mov.w	r0, #0
 8004b20:	f04f 0100 	mov.w	r1, #0
 8004b24:	0259      	lsls	r1, r3, #9
 8004b26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b2a:	0250      	lsls	r0, r2, #9
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	f7fb fba0 	bl	8000280 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4613      	mov	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e04a      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4a:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	099b      	lsrs	r3, r3, #6
 8004b50:	461a      	mov	r2, r3
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b5a:	f04f 0100 	mov.w	r1, #0
 8004b5e:	ea02 0400 	and.w	r4, r2, r0
 8004b62:	ea03 0501 	and.w	r5, r3, r1
 8004b66:	4620      	mov	r0, r4
 8004b68:	4629      	mov	r1, r5
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	014b      	lsls	r3, r1, #5
 8004b74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b78:	0142      	lsls	r2, r0, #5
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	1b00      	subs	r0, r0, r4
 8004b80:	eb61 0105 	sbc.w	r1, r1, r5
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	018b      	lsls	r3, r1, #6
 8004b8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b92:	0182      	lsls	r2, r0, #6
 8004b94:	1a12      	subs	r2, r2, r0
 8004b96:	eb63 0301 	sbc.w	r3, r3, r1
 8004b9a:	f04f 0000 	mov.w	r0, #0
 8004b9e:	f04f 0100 	mov.w	r1, #0
 8004ba2:	00d9      	lsls	r1, r3, #3
 8004ba4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ba8:	00d0      	lsls	r0, r2, #3
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	1912      	adds	r2, r2, r4
 8004bb0:	eb45 0303 	adc.w	r3, r5, r3
 8004bb4:	f04f 0000 	mov.w	r0, #0
 8004bb8:	f04f 0100 	mov.w	r1, #0
 8004bbc:	0299      	lsls	r1, r3, #10
 8004bbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004bc2:	0290      	lsls	r0, r2, #10
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	f7fb fb54 	bl	8000280 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4613      	mov	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	3301      	adds	r3, #1
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	60bb      	str	r3, [r7, #8]
      break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bfe:	60bb      	str	r3, [r7, #8]
      break;
 8004c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c02:	68bb      	ldr	r3, [r7, #8]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c0e:	bf00      	nop
 8004c10:	40023800 	.word	0x40023800
 8004c14:	00f42400 	.word	0x00f42400
 8004c18:	007a1200 	.word	0x007a1200

08004c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c20:	4b03      	ldr	r3, [pc, #12]	; (8004c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c22:	681b      	ldr	r3, [r3, #0]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20000000 	.word	0x20000000

08004c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c38:	f7ff fff0 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	0a9b      	lsrs	r3, r3, #10
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	4903      	ldr	r1, [pc, #12]	; (8004c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c4a:	5ccb      	ldrb	r3, [r1, r3]
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40023800 	.word	0x40023800
 8004c58:	0800e344 	.word	0x0800e344

08004c5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	220f      	movs	r2, #15
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c6c:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 0203 	and.w	r2, r3, #3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c78:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c84:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c90:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	08db      	lsrs	r3, r3, #3
 8004c96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c9e:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <HAL_RCC_GetClockConfig+0x60>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0207 	and.w	r2, r3, #7
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	601a      	str	r2, [r3, #0]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	40023c00 	.word	0x40023c00

08004cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d105      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d035      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ce8:	4b62      	ldr	r3, [pc, #392]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cee:	f7fc fc1b 	bl	8001528 <HAL_GetTick>
 8004cf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cf6:	f7fc fc17 	bl	8001528 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e0b0      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d08:	4b5b      	ldr	r3, [pc, #364]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	019a      	lsls	r2, r3, #6
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	071b      	lsls	r3, r3, #28
 8004d20:	4955      	ldr	r1, [pc, #340]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d28:	4b52      	ldr	r3, [pc, #328]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d2e:	f7fc fbfb 	bl	8001528 <HAL_GetTick>
 8004d32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d36:	f7fc fbf7 	bl	8001528 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e090      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d48:	4b4b      	ldr	r3, [pc, #300]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8083 	beq.w	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	4b44      	ldr	r3, [pc, #272]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	4a43      	ldr	r2, [pc, #268]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d70:	6413      	str	r3, [r2, #64]	; 0x40
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d7e:	4b3f      	ldr	r3, [pc, #252]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a3e      	ldr	r2, [pc, #248]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d8a:	f7fc fbcd 	bl	8001528 <HAL_GetTick>
 8004d8e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d90:	e008      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d92:	f7fc fbc9 	bl	8001528 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e062      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004da4:	4b35      	ldr	r3, [pc, #212]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004db0:	4b31      	ldr	r3, [pc, #196]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d02f      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d028      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dce:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dd8:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dde:	4b28      	ldr	r3, [pc, #160]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004de4:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dea:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d114      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004df6:	f7fc fb97 	bl	8001528 <HAL_GetTick>
 8004dfa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dfe:	f7fc fb93 	bl	8001528 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e02a      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e14:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0ee      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2c:	d10d      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e42:	490d      	ldr	r1, [pc, #52]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	608b      	str	r3, [r1, #8]
 8004e48:	e005      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e54:	6093      	str	r3, [r2, #8]
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e62:	4905      	ldr	r1, [pc, #20]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	42470068 	.word	0x42470068
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	40007000 	.word	0x40007000
 8004e80:	42470e40 	.word	0x42470e40

08004e84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d13e      	bne.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ea2:	4b23      	ldr	r3, [pc, #140]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d12f      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004eb8:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004eba:	617b      	str	r3, [r7, #20]
          break;
 8004ebc:	e02f      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ebe:	4b1c      	ldr	r3, [pc, #112]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eca:	d108      	bne.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ecc:	4b18      	ldr	r3, [pc, #96]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ed4:	4a18      	ldr	r2, [pc, #96]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	e007      	b.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ede:	4b14      	ldr	r3, [pc, #80]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ee6:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eec:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004eee:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef4:	099b      	lsrs	r3, r3, #6
 8004ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	fb02 f303 	mul.w	r3, r2, r3
 8004f00:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f02:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f08:	0f1b      	lsrs	r3, r3, #28
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	617b      	str	r3, [r7, #20]
          break;
 8004f16:	e002      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
          break;
 8004f1c:	bf00      	nop
        }
      }
      break;
 8004f1e:	bf00      	nop
    }
  }
  return frequency;
 8004f20:	697b      	ldr	r3, [r7, #20]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40023800 	.word	0x40023800
 8004f34:	00bb8000 	.word	0x00bb8000
 8004f38:	007a1200 	.word	0x007a1200
 8004f3c:	00f42400 	.word	0x00f42400

08004f40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e07b      	b.n	800504a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d108      	bne.n	8004f6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f62:	d009      	beq.n	8004f78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	61da      	str	r2, [r3, #28]
 8004f6a:	e005      	b.n	8004f78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fc f8f8 	bl	8001188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffc:	ea42 0103 	orr.w	r1, r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005004:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	0c1b      	lsrs	r3, r3, #16
 8005016:	f003 0104 	and.w	r1, r3, #4
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	f003 0210 	and.w	r2, r3, #16
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005038:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e041      	b.n	80050e8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f839 	bl	80050f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f000 fbb1 	bl	80057f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d001      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e04e      	b.n	80051ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a23      	ldr	r2, [pc, #140]	; (80051c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d022      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005146:	d01d      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <HAL_TIM_Base_Start_IT+0xc8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d018      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d013      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00e      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d009      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a19      	ldr	r2, [pc, #100]	; (80051dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d111      	bne.n	80051a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b06      	cmp	r3, #6
 8005194:	d010      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a6:	e007      	b.n	80051b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40010400 	.word	0x40010400
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40001800 	.word	0x40001800

080051e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e041      	b.n	800527a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fc f804 	bl	8001218 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3304      	adds	r3, #4
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f000 fae8 	bl	80057f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <HAL_TIM_PWM_Start+0x24>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	bf14      	ite	ne
 80052a0:	2301      	movne	r3, #1
 80052a2:	2300      	moveq	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e022      	b.n	80052ee <HAL_TIM_PWM_Start+0x6a>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d109      	bne.n	80052c2 <HAL_TIM_PWM_Start+0x3e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	bf14      	ite	ne
 80052ba:	2301      	movne	r3, #1
 80052bc:	2300      	moveq	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	e015      	b.n	80052ee <HAL_TIM_PWM_Start+0x6a>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d109      	bne.n	80052dc <HAL_TIM_PWM_Start+0x58>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	e008      	b.n	80052ee <HAL_TIM_PWM_Start+0x6a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	bf14      	ite	ne
 80052e8:	2301      	movne	r3, #1
 80052ea:	2300      	moveq	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e07c      	b.n	80053f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_PWM_Start+0x82>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005304:	e013      	b.n	800532e <HAL_TIM_PWM_Start+0xaa>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b04      	cmp	r3, #4
 800530a:	d104      	bne.n	8005316 <HAL_TIM_PWM_Start+0x92>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005314:	e00b      	b.n	800532e <HAL_TIM_PWM_Start+0xaa>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d104      	bne.n	8005326 <HAL_TIM_PWM_Start+0xa2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	e003      	b.n	800532e <HAL_TIM_PWM_Start+0xaa>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2201      	movs	r2, #1
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fcae 	bl	8005c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a2d      	ldr	r2, [pc, #180]	; (80053f8 <HAL_TIM_PWM_Start+0x174>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_TIM_PWM_Start+0xcc>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a2c      	ldr	r2, [pc, #176]	; (80053fc <HAL_TIM_PWM_Start+0x178>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d101      	bne.n	8005354 <HAL_TIM_PWM_Start+0xd0>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <HAL_TIM_PWM_Start+0xd2>
 8005354:	2300      	movs	r3, #0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005368:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <HAL_TIM_PWM_Start+0x174>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d022      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537c:	d01d      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <HAL_TIM_PWM_Start+0x17c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d018      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <HAL_TIM_PWM_Start+0x180>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <HAL_TIM_PWM_Start+0x184>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00e      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a16      	ldr	r2, [pc, #88]	; (80053fc <HAL_TIM_PWM_Start+0x178>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a18      	ldr	r2, [pc, #96]	; (800540c <HAL_TIM_PWM_Start+0x188>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a16      	ldr	r2, [pc, #88]	; (8005410 <HAL_TIM_PWM_Start+0x18c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d111      	bne.n	80053de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d010      	beq.n	80053ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053dc:	e007      	b.n	80053ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0201 	orr.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40010400 	.word	0x40010400
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	40000c00 	.word	0x40000c00
 800540c:	40014000 	.word	0x40014000
 8005410:	40001800 	.word	0x40001800

08005414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b02      	cmp	r3, #2
 8005428:	d122      	bne.n	8005470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b02      	cmp	r3, #2
 8005436:	d11b      	bne.n	8005470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0202 	mvn.w	r2, #2
 8005440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f9b0 	bl	80057bc <HAL_TIM_IC_CaptureCallback>
 800545c:	e005      	b.n	800546a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f9a2 	bl	80057a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f9b3 	bl	80057d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b04      	cmp	r3, #4
 800547c:	d122      	bne.n	80054c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b04      	cmp	r3, #4
 800548a:	d11b      	bne.n	80054c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0204 	mvn.w	r2, #4
 8005494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f986 	bl	80057bc <HAL_TIM_IC_CaptureCallback>
 80054b0:	e005      	b.n	80054be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f978 	bl	80057a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f989 	bl	80057d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d122      	bne.n	8005518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d11b      	bne.n	8005518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0208 	mvn.w	r2, #8
 80054e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2204      	movs	r2, #4
 80054ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f95c 	bl	80057bc <HAL_TIM_IC_CaptureCallback>
 8005504:	e005      	b.n	8005512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f94e 	bl	80057a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f95f 	bl	80057d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0310 	and.w	r3, r3, #16
 8005522:	2b10      	cmp	r3, #16
 8005524:	d122      	bne.n	800556c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b10      	cmp	r3, #16
 8005532:	d11b      	bne.n	800556c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0210 	mvn.w	r2, #16
 800553c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2208      	movs	r2, #8
 8005542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f932 	bl	80057bc <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f924 	bl	80057a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f935 	bl	80057d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b01      	cmp	r3, #1
 8005578:	d10e      	bne.n	8005598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b01      	cmp	r3, #1
 8005586:	d107      	bne.n	8005598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0201 	mvn.w	r2, #1
 8005590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fb fcac 	bl	8000ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a2:	2b80      	cmp	r3, #128	; 0x80
 80055a4:	d10e      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b0:	2b80      	cmp	r3, #128	; 0x80
 80055b2:	d107      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fc16 	bl	8005df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d10e      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d107      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f8fa 	bl	80057e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d10e      	bne.n	800561c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b20      	cmp	r3, #32
 800560a:	d107      	bne.n	800561c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0220 	mvn.w	r2, #32
 8005614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fbe0 	bl	8005ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800563e:	2302      	movs	r3, #2
 8005640:	e0ae      	b.n	80057a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b0c      	cmp	r3, #12
 800564e:	f200 809f 	bhi.w	8005790 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005652:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	0800568d 	.word	0x0800568d
 800565c:	08005791 	.word	0x08005791
 8005660:	08005791 	.word	0x08005791
 8005664:	08005791 	.word	0x08005791
 8005668:	080056cd 	.word	0x080056cd
 800566c:	08005791 	.word	0x08005791
 8005670:	08005791 	.word	0x08005791
 8005674:	08005791 	.word	0x08005791
 8005678:	0800570f 	.word	0x0800570f
 800567c:	08005791 	.word	0x08005791
 8005680:	08005791 	.word	0x08005791
 8005684:	08005791 	.word	0x08005791
 8005688:	0800574f 	.word	0x0800574f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 f950 	bl	8005938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0208 	orr.w	r2, r2, #8
 80056a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0204 	bic.w	r2, r2, #4
 80056b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6999      	ldr	r1, [r3, #24]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	619a      	str	r2, [r3, #24]
      break;
 80056ca:	e064      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 f9a0 	bl	8005a18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6999      	ldr	r1, [r3, #24]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	021a      	lsls	r2, r3, #8
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	619a      	str	r2, [r3, #24]
      break;
 800570c:	e043      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	4618      	mov	r0, r3
 8005716:	f000 f9f5 	bl	8005b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0208 	orr.w	r2, r2, #8
 8005728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0204 	bic.w	r2, r2, #4
 8005738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69d9      	ldr	r1, [r3, #28]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	61da      	str	r2, [r3, #28]
      break;
 800574c:	e023      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fa49 	bl	8005bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69d9      	ldr	r1, [r3, #28]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	021a      	lsls	r2, r3, #8
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	61da      	str	r2, [r3, #28]
      break;
 800578e:	e002      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
      break;
 8005794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a40      	ldr	r2, [pc, #256]	; (800590c <TIM_Base_SetConfig+0x114>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d013      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005816:	d00f      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a3d      	ldr	r2, [pc, #244]	; (8005910 <TIM_Base_SetConfig+0x118>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00b      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a3c      	ldr	r2, [pc, #240]	; (8005914 <TIM_Base_SetConfig+0x11c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d007      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a3b      	ldr	r2, [pc, #236]	; (8005918 <TIM_Base_SetConfig+0x120>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a3a      	ldr	r2, [pc, #232]	; (800591c <TIM_Base_SetConfig+0x124>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d108      	bne.n	800584a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2f      	ldr	r2, [pc, #188]	; (800590c <TIM_Base_SetConfig+0x114>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d02b      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005858:	d027      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2c      	ldr	r2, [pc, #176]	; (8005910 <TIM_Base_SetConfig+0x118>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d023      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2b      	ldr	r2, [pc, #172]	; (8005914 <TIM_Base_SetConfig+0x11c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d01f      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2a      	ldr	r2, [pc, #168]	; (8005918 <TIM_Base_SetConfig+0x120>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01b      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a29      	ldr	r2, [pc, #164]	; (800591c <TIM_Base_SetConfig+0x124>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d017      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a28      	ldr	r2, [pc, #160]	; (8005920 <TIM_Base_SetConfig+0x128>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a27      	ldr	r2, [pc, #156]	; (8005924 <TIM_Base_SetConfig+0x12c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00f      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a26      	ldr	r2, [pc, #152]	; (8005928 <TIM_Base_SetConfig+0x130>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00b      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a25      	ldr	r2, [pc, #148]	; (800592c <TIM_Base_SetConfig+0x134>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d007      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a24      	ldr	r2, [pc, #144]	; (8005930 <TIM_Base_SetConfig+0x138>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d003      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a23      	ldr	r2, [pc, #140]	; (8005934 <TIM_Base_SetConfig+0x13c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d108      	bne.n	80058bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a0a      	ldr	r2, [pc, #40]	; (800590c <TIM_Base_SetConfig+0x114>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_Base_SetConfig+0xf8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a0c      	ldr	r2, [pc, #48]	; (800591c <TIM_Base_SetConfig+0x124>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d103      	bne.n	80058f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	615a      	str	r2, [r3, #20]
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000
 8005910:	40000400 	.word	0x40000400
 8005914:	40000800 	.word	0x40000800
 8005918:	40000c00 	.word	0x40000c00
 800591c:	40010400 	.word	0x40010400
 8005920:	40014000 	.word	0x40014000
 8005924:	40014400 	.word	0x40014400
 8005928:	40014800 	.word	0x40014800
 800592c:	40001800 	.word	0x40001800
 8005930:	40001c00 	.word	0x40001c00
 8005934:	40002000 	.word	0x40002000

08005938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	f023 0201 	bic.w	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0303 	bic.w	r3, r3, #3
 800596e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 0302 	bic.w	r3, r3, #2
 8005980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a20      	ldr	r2, [pc, #128]	; (8005a10 <TIM_OC1_SetConfig+0xd8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_OC1_SetConfig+0x64>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a1f      	ldr	r2, [pc, #124]	; (8005a14 <TIM_OC1_SetConfig+0xdc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d10c      	bne.n	80059b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f023 0308 	bic.w	r3, r3, #8
 80059a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f023 0304 	bic.w	r3, r3, #4
 80059b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <TIM_OC1_SetConfig+0xd8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_OC1_SetConfig+0x8e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a14      	ldr	r2, [pc, #80]	; (8005a14 <TIM_OC1_SetConfig+0xdc>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d111      	bne.n	80059ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	621a      	str	r2, [r3, #32]
}
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	40010000 	.word	0x40010000
 8005a14:	40010400 	.word	0x40010400

08005a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	f023 0210 	bic.w	r2, r3, #16
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f023 0320 	bic.w	r3, r3, #32
 8005a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a22      	ldr	r2, [pc, #136]	; (8005afc <TIM_OC2_SetConfig+0xe4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_OC2_SetConfig+0x68>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <TIM_OC2_SetConfig+0xe8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d10d      	bne.n	8005a9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a17      	ldr	r2, [pc, #92]	; (8005afc <TIM_OC2_SetConfig+0xe4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_OC2_SetConfig+0x94>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a16      	ldr	r2, [pc, #88]	; (8005b00 <TIM_OC2_SetConfig+0xe8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d113      	bne.n	8005ad4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	621a      	str	r2, [r3, #32]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40010000 	.word	0x40010000
 8005b00:	40010400 	.word	0x40010400

08005b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a21      	ldr	r2, [pc, #132]	; (8005be4 <TIM_OC3_SetConfig+0xe0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_OC3_SetConfig+0x66>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a20      	ldr	r2, [pc, #128]	; (8005be8 <TIM_OC3_SetConfig+0xe4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d10d      	bne.n	8005b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a16      	ldr	r2, [pc, #88]	; (8005be4 <TIM_OC3_SetConfig+0xe0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d003      	beq.n	8005b96 <TIM_OC3_SetConfig+0x92>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <TIM_OC3_SetConfig+0xe4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d113      	bne.n	8005bbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	621a      	str	r2, [r3, #32]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	40010000 	.word	0x40010000
 8005be8:	40010400 	.word	0x40010400

08005bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	021b      	lsls	r3, r3, #8
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	031b      	lsls	r3, r3, #12
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <TIM_OC4_SetConfig+0xa4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_OC4_SetConfig+0x68>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a11      	ldr	r2, [pc, #68]	; (8005c94 <TIM_OC4_SetConfig+0xa8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d109      	bne.n	8005c68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	019b      	lsls	r3, r3, #6
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	621a      	str	r2, [r3, #32]
}
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40010000 	.word	0x40010000
 8005c94:	40010400 	.word	0x40010400

08005c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2201      	movs	r2, #1
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1a      	ldr	r2, [r3, #32]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	401a      	ands	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a1a      	ldr	r2, [r3, #32]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
	...

08005ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e05a      	b.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d022      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d48:	d01d      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1d      	ldr	r2, [pc, #116]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d018      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1b      	ldr	r2, [pc, #108]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1a      	ldr	r2, [pc, #104]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00e      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a18      	ldr	r2, [pc, #96]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d009      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a15      	ldr	r2, [pc, #84]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d10c      	bne.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	40010400 	.word	0x40010400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40001800 	.word	0x40001800

08005ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e04:	b084      	sub	sp, #16
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	f107 001c 	add.w	r0, r7, #28
 8005e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d122      	bne.n	8005e62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d105      	bne.n	8005e56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f001 fb1c 	bl	8007494 <USB_CoreReset>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	73fb      	strb	r3, [r7, #15]
 8005e60:	e01a      	b.n	8005e98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 fb10 	bl	8007494 <USB_CoreReset>
 8005e74:	4603      	mov	r3, r0
 8005e76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
 8005e8a:	e005      	b.n	8005e98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d10b      	bne.n	8005eb6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f043 0206 	orr.w	r2, r3, #6
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f043 0220 	orr.w	r2, r3, #32
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ec2:	b004      	add	sp, #16
 8005ec4:	4770      	bx	lr
	...

08005ec8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d165      	bne.n	8005fa8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4a41      	ldr	r2, [pc, #260]	; (8005fe4 <USB_SetTurnaroundTime+0x11c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d906      	bls.n	8005ef2 <USB_SetTurnaroundTime+0x2a>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4a40      	ldr	r2, [pc, #256]	; (8005fe8 <USB_SetTurnaroundTime+0x120>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d202      	bcs.n	8005ef2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005eec:	230f      	movs	r3, #15
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e062      	b.n	8005fb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4a3c      	ldr	r2, [pc, #240]	; (8005fe8 <USB_SetTurnaroundTime+0x120>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d306      	bcc.n	8005f08 <USB_SetTurnaroundTime+0x40>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	4a3b      	ldr	r2, [pc, #236]	; (8005fec <USB_SetTurnaroundTime+0x124>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d202      	bcs.n	8005f08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f02:	230e      	movs	r3, #14
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	e057      	b.n	8005fb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4a38      	ldr	r2, [pc, #224]	; (8005fec <USB_SetTurnaroundTime+0x124>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d306      	bcc.n	8005f1e <USB_SetTurnaroundTime+0x56>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4a37      	ldr	r2, [pc, #220]	; (8005ff0 <USB_SetTurnaroundTime+0x128>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d202      	bcs.n	8005f1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005f18:	230d      	movs	r3, #13
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	e04c      	b.n	8005fb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	4a33      	ldr	r2, [pc, #204]	; (8005ff0 <USB_SetTurnaroundTime+0x128>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d306      	bcc.n	8005f34 <USB_SetTurnaroundTime+0x6c>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	4a32      	ldr	r2, [pc, #200]	; (8005ff4 <USB_SetTurnaroundTime+0x12c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d802      	bhi.n	8005f34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005f2e:	230c      	movs	r3, #12
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e041      	b.n	8005fb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4a2f      	ldr	r2, [pc, #188]	; (8005ff4 <USB_SetTurnaroundTime+0x12c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d906      	bls.n	8005f4a <USB_SetTurnaroundTime+0x82>
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4a2e      	ldr	r2, [pc, #184]	; (8005ff8 <USB_SetTurnaroundTime+0x130>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d802      	bhi.n	8005f4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005f44:	230b      	movs	r3, #11
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	e036      	b.n	8005fb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	4a2a      	ldr	r2, [pc, #168]	; (8005ff8 <USB_SetTurnaroundTime+0x130>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d906      	bls.n	8005f60 <USB_SetTurnaroundTime+0x98>
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4a29      	ldr	r2, [pc, #164]	; (8005ffc <USB_SetTurnaroundTime+0x134>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d802      	bhi.n	8005f60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005f5a:	230a      	movs	r3, #10
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	e02b      	b.n	8005fb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <USB_SetTurnaroundTime+0x134>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d906      	bls.n	8005f76 <USB_SetTurnaroundTime+0xae>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4a25      	ldr	r2, [pc, #148]	; (8006000 <USB_SetTurnaroundTime+0x138>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d202      	bcs.n	8005f76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f70:	2309      	movs	r3, #9
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	e020      	b.n	8005fb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	4a21      	ldr	r2, [pc, #132]	; (8006000 <USB_SetTurnaroundTime+0x138>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d306      	bcc.n	8005f8c <USB_SetTurnaroundTime+0xc4>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4a20      	ldr	r2, [pc, #128]	; (8006004 <USB_SetTurnaroundTime+0x13c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d802      	bhi.n	8005f8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f86:	2308      	movs	r3, #8
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	e015      	b.n	8005fb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <USB_SetTurnaroundTime+0x13c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d906      	bls.n	8005fa2 <USB_SetTurnaroundTime+0xda>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4a1c      	ldr	r2, [pc, #112]	; (8006008 <USB_SetTurnaroundTime+0x140>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d202      	bcs.n	8005fa2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f9c:	2307      	movs	r3, #7
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	e00a      	b.n	8005fb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005fa2:	2306      	movs	r3, #6
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	e007      	b.n	8005fb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d102      	bne.n	8005fb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005fae:	2309      	movs	r3, #9
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	e001      	b.n	8005fb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005fb4:	2309      	movs	r3, #9
 8005fb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	029b      	lsls	r3, r3, #10
 8005fcc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	00d8acbf 	.word	0x00d8acbf
 8005fe8:	00e4e1c0 	.word	0x00e4e1c0
 8005fec:	00f42400 	.word	0x00f42400
 8005ff0:	01067380 	.word	0x01067380
 8005ff4:	011a499f 	.word	0x011a499f
 8005ff8:	01312cff 	.word	0x01312cff
 8005ffc:	014ca43f 	.word	0x014ca43f
 8006000:	016e3600 	.word	0x016e3600
 8006004:	01a6ab1f 	.word	0x01a6ab1f
 8006008:	01e84800 	.word	0x01e84800

0800600c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f043 0201 	orr.w	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f023 0201 	bic.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d115      	bne.n	800609e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800607e:	2001      	movs	r0, #1
 8006080:	f7fb fa5e 	bl	8001540 <HAL_Delay>
      ms++;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3301      	adds	r3, #1
 8006088:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f001 f972 	bl	8007374 <USB_GetMode>
 8006090:	4603      	mov	r3, r0
 8006092:	2b01      	cmp	r3, #1
 8006094:	d01e      	beq.n	80060d4 <USB_SetCurrentMode+0x84>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b31      	cmp	r3, #49	; 0x31
 800609a:	d9f0      	bls.n	800607e <USB_SetCurrentMode+0x2e>
 800609c:	e01a      	b.n	80060d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d115      	bne.n	80060d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060b0:	2001      	movs	r0, #1
 80060b2:	f7fb fa45 	bl	8001540 <HAL_Delay>
      ms++;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 f959 	bl	8007374 <USB_GetMode>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <USB_SetCurrentMode+0x84>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b31      	cmp	r3, #49	; 0x31
 80060cc:	d9f0      	bls.n	80060b0 <USB_SetCurrentMode+0x60>
 80060ce:	e001      	b.n	80060d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e005      	b.n	80060e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b32      	cmp	r3, #50	; 0x32
 80060d8:	d101      	bne.n	80060de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060e8:	b084      	sub	sp, #16
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b086      	sub	sp, #24
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006102:	2300      	movs	r3, #0
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	e009      	b.n	800611c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	3340      	adds	r3, #64	; 0x40
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	2200      	movs	r2, #0
 8006114:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	3301      	adds	r3, #1
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b0e      	cmp	r3, #14
 8006120:	d9f2      	bls.n	8006108 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d11c      	bne.n	8006162 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006136:	f043 0302 	orr.w	r3, r3, #2
 800613a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	639a      	str	r2, [r3, #56]	; 0x38
 8006160:	e00b      	b.n	800617a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006180:	461a      	mov	r2, r3
 8006182:	2300      	movs	r3, #0
 8006184:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	4619      	mov	r1, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006194:	461a      	mov	r2, r3
 8006196:	680b      	ldr	r3, [r1, #0]
 8006198:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10c      	bne.n	80061ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061a6:	2100      	movs	r1, #0
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f945 	bl	8006438 <USB_SetDevSpeed>
 80061ae:	e008      	b.n	80061c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061b0:	2101      	movs	r1, #1
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f940 	bl	8006438 <USB_SetDevSpeed>
 80061b8:	e003      	b.n	80061c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061ba:	2103      	movs	r1, #3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f93b 	bl	8006438 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061c2:	2110      	movs	r1, #16
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f8f3 	bl	80063b0 <USB_FlushTxFifo>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f90f 	bl	80063f8 <USB_FlushRxFifo>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ea:	461a      	mov	r2, r3
 80061ec:	2300      	movs	r3, #0
 80061ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f6:	461a      	mov	r2, r3
 80061f8:	2300      	movs	r3, #0
 80061fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	461a      	mov	r2, r3
 8006204:	2300      	movs	r3, #0
 8006206:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	e043      	b.n	8006296 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006220:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006224:	d118      	bne.n	8006258 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	461a      	mov	r2, r3
 800623a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	e013      	b.n	800626a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624e:	461a      	mov	r2, r3
 8006250:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e008      	b.n	800626a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	461a      	mov	r2, r3
 8006266:	2300      	movs	r3, #0
 8006268:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006276:	461a      	mov	r2, r3
 8006278:	2300      	movs	r3, #0
 800627a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006288:	461a      	mov	r2, r3
 800628a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800628e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	3301      	adds	r3, #1
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	d3b7      	bcc.n	800620e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800629e:	2300      	movs	r3, #0
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	e043      	b.n	800632c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ba:	d118      	bne.n	80062ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ce:	461a      	mov	r2, r3
 80062d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e013      	b.n	8006300 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e4:	461a      	mov	r2, r3
 80062e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	e008      	b.n	8006300 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	461a      	mov	r2, r3
 80062fc:	2300      	movs	r3, #0
 80062fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630c:	461a      	mov	r2, r3
 800630e:	2300      	movs	r3, #0
 8006310:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	461a      	mov	r2, r3
 8006320:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006324:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3301      	adds	r3, #1
 800632a:	613b      	str	r3, [r7, #16]
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	429a      	cmp	r2, r3
 8006332:	d3b7      	bcc.n	80062a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006346:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006354:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	2b00      	cmp	r3, #0
 800635a:	d105      	bne.n	8006368 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	f043 0210 	orr.w	r2, r3, #16
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699a      	ldr	r2, [r3, #24]
 800636c:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <USB_DevInit+0x2c4>)
 800636e:	4313      	orrs	r3, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f043 0208 	orr.w	r2, r3, #8
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d107      	bne.n	800639c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006394:	f043 0304 	orr.w	r3, r3, #4
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800639c:	7dfb      	ldrb	r3, [r7, #23]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063a8:	b004      	add	sp, #16
 80063aa:	4770      	bx	lr
 80063ac:	803c3800 	.word	0x803c3800

080063b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	019b      	lsls	r3, r3, #6
 80063c2:	f043 0220 	orr.w	r2, r3, #32
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3301      	adds	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	4a08      	ldr	r2, [pc, #32]	; (80063f4 <USB_FlushTxFifo+0x44>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d901      	bls.n	80063da <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e006      	b.n	80063e8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d0f1      	beq.n	80063ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	00030d40 	.word	0x00030d40

080063f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2210      	movs	r2, #16
 8006408:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3301      	adds	r3, #1
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	4a08      	ldr	r2, [pc, #32]	; (8006434 <USB_FlushRxFifo+0x3c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d901      	bls.n	800641a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e006      	b.n	8006428 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b10      	cmp	r3, #16
 8006424:	d0f1      	beq.n	800640a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	00030d40 	.word	0x00030d40

08006438 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	68f9      	ldr	r1, [r7, #12]
 8006454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006458:	4313      	orrs	r3, r2
 800645a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800646a:	b480      	push	{r7}
 800646c:	b087      	sub	sp, #28
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 0306 	and.w	r3, r3, #6
 8006482:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d102      	bne.n	8006490 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800648a:	2300      	movs	r3, #0
 800648c:	75fb      	strb	r3, [r7, #23]
 800648e:	e00a      	b.n	80064a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d002      	beq.n	800649c <USB_GetDevSpeed+0x32>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b06      	cmp	r3, #6
 800649a:	d102      	bne.n	80064a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800649c:	2302      	movs	r3, #2
 800649e:	75fb      	strb	r3, [r7, #23]
 80064a0:	e001      	b.n	80064a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80064a2:	230f      	movs	r3, #15
 80064a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d13a      	bne.n	8006546 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	f003 030f 	and.w	r3, r3, #15
 80064e0:	2101      	movs	r1, #1
 80064e2:	fa01 f303 	lsl.w	r3, r1, r3
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	68f9      	ldr	r1, [r7, #12]
 80064ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064ee:	4313      	orrs	r3, r2
 80064f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d155      	bne.n	80065b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	78db      	ldrb	r3, [r3, #3]
 8006522:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006524:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	059b      	lsls	r3, r3, #22
 800652a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800652c:	4313      	orrs	r3, r2
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	440a      	add	r2, r1
 8006536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800653e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	e036      	b.n	80065b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654c:	69da      	ldr	r2, [r3, #28]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	2101      	movs	r1, #1
 8006558:	fa01 f303 	lsl.w	r3, r1, r3
 800655c:	041b      	lsls	r3, r3, #16
 800655e:	68f9      	ldr	r1, [r7, #12]
 8006560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006564:	4313      	orrs	r3, r2
 8006566:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d11a      	bne.n	80065b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	78db      	ldrb	r3, [r3, #3]
 8006598:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800659a:	430b      	orrs	r3, r1
 800659c:	4313      	orrs	r3, r2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	0151      	lsls	r1, r2, #5
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	440a      	add	r2, r1
 80065a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	785b      	ldrb	r3, [r3, #1]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d161      	bne.n	80066a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f6:	d11f      	bne.n	8006638 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	440a      	add	r2, r1
 800660e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006612:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006616:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	440a      	add	r2, r1
 800662e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006636:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	2101      	movs	r1, #1
 800664a:	fa01 f303 	lsl.w	r3, r1, r3
 800664e:	b29b      	uxth	r3, r3
 8006650:	43db      	mvns	r3, r3
 8006652:	68f9      	ldr	r1, [r7, #12]
 8006654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006658:	4013      	ands	r3, r2
 800665a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006662:	69da      	ldr	r2, [r3, #28]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f003 030f 	and.w	r3, r3, #15
 800666c:	2101      	movs	r1, #1
 800666e:	fa01 f303 	lsl.w	r3, r1, r3
 8006672:	b29b      	uxth	r3, r3
 8006674:	43db      	mvns	r3, r3
 8006676:	68f9      	ldr	r1, [r7, #12]
 8006678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800667c:	4013      	ands	r3, r2
 800667e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	0159      	lsls	r1, r3, #5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	440b      	add	r3, r1
 8006696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669a:	4619      	mov	r1, r3
 800669c:	4b35      	ldr	r3, [pc, #212]	; (8006774 <USB_DeactivateEndpoint+0x1b0>)
 800669e:	4013      	ands	r3, r2
 80066a0:	600b      	str	r3, [r1, #0]
 80066a2:	e060      	b.n	8006766 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ba:	d11f      	bne.n	80066fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	0151      	lsls	r1, r2, #5
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	440a      	add	r2, r1
 80066d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	2101      	movs	r1, #1
 800670e:	fa01 f303 	lsl.w	r3, r1, r3
 8006712:	041b      	lsls	r3, r3, #16
 8006714:	43db      	mvns	r3, r3
 8006716:	68f9      	ldr	r1, [r7, #12]
 8006718:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800671c:	4013      	ands	r3, r2
 800671e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006726:	69da      	ldr	r2, [r3, #28]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	2101      	movs	r1, #1
 8006732:	fa01 f303 	lsl.w	r3, r1, r3
 8006736:	041b      	lsls	r3, r3, #16
 8006738:	43db      	mvns	r3, r3
 800673a:	68f9      	ldr	r1, [r7, #12]
 800673c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006740:	4013      	ands	r3, r2
 8006742:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	0159      	lsls	r1, r3, #5
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	440b      	add	r3, r1
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	4619      	mov	r1, r3
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <USB_DeactivateEndpoint+0x1b4>)
 8006762:	4013      	ands	r3, r2
 8006764:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	ec337800 	.word	0xec337800
 8006778:	eff37800 	.word	0xeff37800

0800677c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08a      	sub	sp, #40	; 0x28
 8006780:	af02      	add	r7, sp, #8
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	4613      	mov	r3, r2
 8006788:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	785b      	ldrb	r3, [r3, #1]
 8006798:	2b01      	cmp	r3, #1
 800679a:	f040 815c 	bne.w	8006a56 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d132      	bne.n	800680c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	0151      	lsls	r1, r2, #5
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	440a      	add	r2, r1
 80067bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	0151      	lsls	r1, r2, #5
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	440a      	add	r2, r1
 80067e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006804:	0cdb      	lsrs	r3, r3, #19
 8006806:	04db      	lsls	r3, r3, #19
 8006808:	6113      	str	r3, [r2, #16]
 800680a:	e074      	b.n	80068f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	0151      	lsls	r1, r2, #5
 800681e:	69fa      	ldr	r2, [r7, #28]
 8006820:	440a      	add	r2, r1
 8006822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006826:	0cdb      	lsrs	r3, r3, #19
 8006828:	04db      	lsls	r3, r3, #19
 800682a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006846:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800684a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800684e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	6959      	ldr	r1, [r3, #20]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	440b      	add	r3, r1
 8006868:	1e59      	subs	r1, r3, #1
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006872:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006874:	4b9d      	ldr	r3, [pc, #628]	; (8006aec <USB_EPStartXfer+0x370>)
 8006876:	400b      	ands	r3, r1
 8006878:	69b9      	ldr	r1, [r7, #24]
 800687a:	0148      	lsls	r0, r1, #5
 800687c:	69f9      	ldr	r1, [r7, #28]
 800687e:	4401      	add	r1, r0
 8006880:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006884:	4313      	orrs	r3, r2
 8006886:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006894:	691a      	ldr	r2, [r3, #16]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800689e:	69b9      	ldr	r1, [r7, #24]
 80068a0:	0148      	lsls	r0, r1, #5
 80068a2:	69f9      	ldr	r1, [r7, #28]
 80068a4:	4401      	add	r1, r0
 80068a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068aa:	4313      	orrs	r3, r2
 80068ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	78db      	ldrb	r3, [r3, #3]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d11f      	bne.n	80068f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80068d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	69fa      	ldr	r2, [r7, #28]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d14b      	bne.n	8006994 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006910:	461a      	mov	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	78db      	ldrb	r3, [r3, #3]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d128      	bne.n	8006972 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692c:	2b00      	cmp	r3, #0
 800692e:	d110      	bne.n	8006952 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	e00f      	b.n	8006972 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	440a      	add	r2, r1
 8006968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800696c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006970:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	440a      	add	r2, r1
 8006988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800698c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	e12f      	b.n	8006bf4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	78db      	ldrb	r3, [r3, #3]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d015      	beq.n	80069e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 8117 	beq.w	8006bf4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	2101      	movs	r1, #1
 80069d8:	fa01 f303 	lsl.w	r3, r1, r3
 80069dc:	69f9      	ldr	r1, [r7, #28]
 80069de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e2:	4313      	orrs	r3, r2
 80069e4:	634b      	str	r3, [r1, #52]	; 0x34
 80069e6:	e105      	b.n	8006bf4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d110      	bne.n	8006a1a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	69fa      	ldr	r2, [r7, #28]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	e00f      	b.n	8006a3a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	0151      	lsls	r1, r2, #5
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	440a      	add	r2, r1
 8006a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a38:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	68d9      	ldr	r1, [r3, #12]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	781a      	ldrb	r2, [r3, #0]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	b298      	uxth	r0, r3
 8006a48:	79fb      	ldrb	r3, [r7, #7]
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fa2b 	bl	8006eaa <USB_WritePacket>
 8006a54:	e0ce      	b.n	8006bf4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	0151      	lsls	r1, r2, #5
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	440a      	add	r2, r1
 8006a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a70:	0cdb      	lsrs	r3, r3, #19
 8006a72:	04db      	lsls	r3, r3, #19
 8006a74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d126      	bne.n	8006af0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aae:	691a      	ldr	r2, [r3, #16]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ab8:	69b9      	ldr	r1, [r7, #24]
 8006aba:	0148      	lsls	r0, r1, #5
 8006abc:	69f9      	ldr	r1, [r7, #28]
 8006abe:	4401      	add	r1, r0
 8006ac0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	0151      	lsls	r1, r2, #5
 8006ada:	69fa      	ldr	r2, [r7, #28]
 8006adc:	440a      	add	r2, r1
 8006ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ae6:	6113      	str	r3, [r2, #16]
 8006ae8:	e036      	b.n	8006b58 <USB_EPStartXfer+0x3dc>
 8006aea:	bf00      	nop
 8006aec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	695a      	ldr	r2, [r3, #20]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	4413      	add	r3, r2
 8006afa:	1e5a      	subs	r2, r3, #1
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b04:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b12:	691a      	ldr	r2, [r3, #16]
 8006b14:	8afb      	ldrh	r3, [r7, #22]
 8006b16:	04d9      	lsls	r1, r3, #19
 8006b18:	4b39      	ldr	r3, [pc, #228]	; (8006c00 <USB_EPStartXfer+0x484>)
 8006b1a:	400b      	ands	r3, r1
 8006b1c:	69b9      	ldr	r1, [r7, #24]
 8006b1e:	0148      	lsls	r0, r1, #5
 8006b20:	69f9      	ldr	r1, [r7, #28]
 8006b22:	4401      	add	r1, r0
 8006b24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	8af9      	ldrh	r1, [r7, #22]
 8006b40:	fb01 f303 	mul.w	r3, r1, r3
 8006b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b48:	69b9      	ldr	r1, [r7, #24]
 8006b4a:	0148      	lsls	r0, r1, #5
 8006b4c:	69f9      	ldr	r1, [r7, #28]
 8006b4e:	4401      	add	r1, r0
 8006b50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b54:	4313      	orrs	r3, r2
 8006b56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b58:	79fb      	ldrb	r3, [r7, #7]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d10d      	bne.n	8006b7a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	68d9      	ldr	r1, [r3, #12]
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b76:	460a      	mov	r2, r1
 8006b78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	78db      	ldrb	r3, [r3, #3]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d128      	bne.n	8006bd4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d110      	bne.n	8006bb4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	0151      	lsls	r1, r2, #5
 8006ba4:	69fa      	ldr	r2, [r7, #28]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	e00f      	b.n	8006bd4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3720      	adds	r7, #32
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	1ff80000 	.word	0x1ff80000

08006c04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	785b      	ldrb	r3, [r3, #1]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	f040 80cd 	bne.w	8006dc0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d132      	bne.n	8006c94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	0151      	lsls	r1, r2, #5
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	440a      	add	r2, r1
 8006c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8c:	0cdb      	lsrs	r3, r3, #19
 8006c8e:	04db      	lsls	r3, r3, #19
 8006c90:	6113      	str	r3, [r2, #16]
 8006c92:	e04e      	b.n	8006d32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cae:	0cdb      	lsrs	r3, r3, #19
 8006cb0:	04db      	lsls	r3, r3, #19
 8006cb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	695a      	ldr	r2, [r3, #20]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d903      	bls.n	8006cec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d18:	691a      	ldr	r2, [r3, #16]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d22:	6939      	ldr	r1, [r7, #16]
 8006d24:	0148      	lsls	r0, r1, #5
 8006d26:	6979      	ldr	r1, [r7, #20]
 8006d28:	4401      	add	r1, r0
 8006d2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d11e      	bne.n	8006d76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d009      	beq.n	8006d54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	0151      	lsls	r1, r2, #5
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	440a      	add	r2, r1
 8006d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	e092      	b.n	8006e9c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d07e      	beq.n	8006e9c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	2101      	movs	r1, #1
 8006db0:	fa01 f303 	lsl.w	r3, r1, r3
 8006db4:	6979      	ldr	r1, [r7, #20]
 8006db6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	634b      	str	r3, [r1, #52]	; 0x34
 8006dbe:	e06d      	b.n	8006e9c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	0151      	lsls	r1, r2, #5
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	440a      	add	r2, r1
 8006dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dda:	0cdb      	lsrs	r3, r3, #19
 8006ddc:	04db      	lsls	r3, r3, #19
 8006dde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dfa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dfe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e02:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	0151      	lsls	r1, r2, #5
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	440a      	add	r2, r1
 8006e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e4a:	6939      	ldr	r1, [r7, #16]
 8006e4c:	0148      	lsls	r0, r1, #5
 8006e4e:	6979      	ldr	r1, [r7, #20]
 8006e50:	4401      	add	r1, r0
 8006e52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e56:	4313      	orrs	r3, r2
 8006e58:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d10d      	bne.n	8006e7c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d009      	beq.n	8006e7c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	68d9      	ldr	r1, [r3, #12]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e78:	460a      	mov	r2, r1
 8006e7a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b089      	sub	sp, #36	; 0x24
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	460b      	mov	r3, r1
 8006eba:	71fb      	strb	r3, [r7, #7]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006ec8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d123      	bne.n	8006f18 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ed0:	88bb      	ldrh	r3, [r7, #4]
 8006ed2:	3303      	adds	r3, #3
 8006ed4:	089b      	lsrs	r3, r3, #2
 8006ed6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ed8:	2300      	movs	r3, #0
 8006eda:	61bb      	str	r3, [r7, #24]
 8006edc:	e018      	b.n	8006f10 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	031a      	lsls	r2, r3, #12
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eea:	461a      	mov	r2, r3
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	3301      	adds	r3, #1
 8006efc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	3301      	adds	r3, #1
 8006f02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	3301      	adds	r3, #1
 8006f08:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	61bb      	str	r3, [r7, #24]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d3e2      	bcc.n	8006ede <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3724      	adds	r7, #36	; 0x24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b08b      	sub	sp, #44	; 0x2c
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	4613      	mov	r3, r2
 8006f32:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f3c:	88fb      	ldrh	r3, [r7, #6]
 8006f3e:	089b      	lsrs	r3, r3, #2
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	f003 0303 	and.w	r3, r3, #3
 8006f4a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	623b      	str	r3, [r7, #32]
 8006f50:	e014      	b.n	8006f7c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	3301      	adds	r3, #1
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	3301      	adds	r3, #1
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	3301      	adds	r3, #1
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	623b      	str	r3, [r7, #32]
 8006f7c:	6a3a      	ldr	r2, [r7, #32]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d3e6      	bcc.n	8006f52 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f84:	8bfb      	ldrh	r3, [r7, #30]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d01e      	beq.n	8006fc8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f94:	461a      	mov	r2, r3
 8006f96:	f107 0310 	add.w	r3, r7, #16
 8006f9a:	6812      	ldr	r2, [r2, #0]
 8006f9c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	701a      	strb	r2, [r3, #0]
      i++;
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	623b      	str	r3, [r7, #32]
      pDest++;
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	3301      	adds	r3, #1
 8006fba:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006fbc:	8bfb      	ldrh	r3, [r7, #30]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006fc2:	8bfb      	ldrh	r3, [r7, #30]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1ea      	bne.n	8006f9e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	372c      	adds	r7, #44	; 0x2c
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d12c      	bne.n	800704c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	db12      	blt.n	800702a <USB_EPSetStall+0x54>
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00f      	beq.n	800702a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	440a      	add	r2, r1
 8007020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007024:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007028:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	0151      	lsls	r1, r2, #5
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	440a      	add	r2, r1
 8007040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	e02b      	b.n	80070a4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	db12      	blt.n	8007084 <USB_EPSetStall+0xae>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00f      	beq.n	8007084 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800707e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007082:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	0151      	lsls	r1, r2, #5
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	440a      	add	r2, r1
 800709a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800709e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	785b      	ldrb	r3, [r3, #1]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d128      	bne.n	8007120 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	78db      	ldrb	r3, [r3, #3]
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d003      	beq.n	80070fe <USB_EPClearStall+0x4c>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	78db      	ldrb	r3, [r3, #3]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d138      	bne.n	8007170 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	0151      	lsls	r1, r2, #5
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	440a      	add	r2, r1
 8007114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e027      	b.n	8007170 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800713e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	78db      	ldrb	r3, [r3, #3]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d003      	beq.n	8007150 <USB_EPClearStall+0x9e>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	78db      	ldrb	r3, [r3, #3]
 800714c:	2b02      	cmp	r3, #2
 800714e:	d10f      	bne.n	8007170 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	0151      	lsls	r1, r2, #5
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	440a      	add	r2, r1
 8007166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800716e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	460b      	mov	r3, r1
 8007188:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800719c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80071a0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	011b      	lsls	r3, r3, #4
 80071ae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80071b2:	68f9      	ldr	r1, [r7, #12]
 80071b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b8:	4313      	orrs	r3, r2
 80071ba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071e4:	f023 0303 	bic.w	r3, r3, #3
 80071e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071f8:	f023 0302 	bic.w	r3, r3, #2
 80071fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007226:	f023 0303 	bic.w	r3, r3, #3
 800722a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800723a:	f043 0302 	orr.w	r3, r3, #2
 800723e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	4013      	ands	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007266:	68fb      	ldr	r3, [r7, #12]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4013      	ands	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	0c1b      	lsrs	r3, r3, #16
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	4013      	ands	r3, r2
 80072ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	b29b      	uxth	r3, r3
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80072ec:	78fb      	ldrb	r3, [r7, #3]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	4013      	ands	r3, r2
 8007308:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800730a:	68bb      	ldr	r3, [r7, #8]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	fa22 f303 	lsr.w	r3, r2, r3
 8007348:	01db      	lsls	r3, r3, #7
 800734a:	b2db      	uxtb	r3, r3
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4013      	ands	r3, r2
 8007364:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007366:	68bb      	ldr	r3, [r7, #8]
}
 8007368:	4618      	mov	r0, r3
 800736a:	371c      	adds	r7, #28
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	f003 0301 	and.w	r3, r3, #1
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80073ae:	f023 0307 	bic.w	r3, r3, #7
 80073b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	460b      	mov	r3, r1
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	333c      	adds	r3, #60	; 0x3c
 80073ee:	3304      	adds	r3, #4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	4a26      	ldr	r2, [pc, #152]	; (8007490 <USB_EP0_OutStart+0xb8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d90a      	bls.n	8007412 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800740c:	d101      	bne.n	8007412 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	e037      	b.n	8007482 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007418:	461a      	mov	r2, r3
 800741a:	2300      	movs	r3, #0
 800741c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007430:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007440:	f043 0318 	orr.w	r3, r3, #24
 8007444:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007454:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007458:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800745a:	7afb      	ldrb	r3, [r7, #11]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d10f      	bne.n	8007480 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007466:	461a      	mov	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800747a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800747e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	4f54300a 	.word	0x4f54300a

08007494 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	3301      	adds	r3, #1
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	4a13      	ldr	r2, [pc, #76]	; (80074f4 <USB_CoreReset+0x60>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d901      	bls.n	80074b0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e01a      	b.n	80074e6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	daf3      	bge.n	80074a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	f043 0201 	orr.w	r2, r3, #1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3301      	adds	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	4a09      	ldr	r2, [pc, #36]	; (80074f4 <USB_CoreReset+0x60>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d901      	bls.n	80074d8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e006      	b.n	80074e6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d0f1      	beq.n	80074c8 <USB_CoreReset+0x34>

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	00030d40 	.word	0x00030d40

080074f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007504:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007508:	f006 f860 	bl	800d5cc <USBD_static_malloc>
 800750c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d105      	bne.n	8007520 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800751c:	2302      	movs	r3, #2
 800751e:	e066      	b.n	80075ee <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	7c1b      	ldrb	r3, [r3, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d119      	bne.n	8007564 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007534:	2202      	movs	r2, #2
 8007536:	2181      	movs	r1, #129	; 0x81
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f005 ff24 	bl	800d386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007548:	2202      	movs	r2, #2
 800754a:	2101      	movs	r1, #1
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f005 ff1a 	bl	800d386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2210      	movs	r2, #16
 800755e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007562:	e016      	b.n	8007592 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007564:	2340      	movs	r3, #64	; 0x40
 8007566:	2202      	movs	r2, #2
 8007568:	2181      	movs	r1, #129	; 0x81
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f005 ff0b 	bl	800d386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007576:	2340      	movs	r3, #64	; 0x40
 8007578:	2202      	movs	r2, #2
 800757a:	2101      	movs	r1, #1
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f005 ff02 	bl	800d386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2210      	movs	r2, #16
 800758e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007592:	2308      	movs	r3, #8
 8007594:	2203      	movs	r2, #3
 8007596:	2182      	movs	r1, #130	; 0x82
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f005 fef4 	bl	800d386 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	7c1b      	ldrb	r3, [r3, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d109      	bne.n	80075dc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075d2:	2101      	movs	r1, #1
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f005 ffc5 	bl	800d564 <USBD_LL_PrepareReceive>
 80075da:	e007      	b.n	80075ec <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075e2:	2340      	movs	r3, #64	; 0x40
 80075e4:	2101      	movs	r1, #1
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f005 ffbc 	bl	800d564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	460b      	mov	r3, r1
 8007600:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007602:	2181      	movs	r1, #129	; 0x81
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f005 fee4 	bl	800d3d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007610:	2101      	movs	r1, #1
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f005 fedd 	bl	800d3d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007620:	2182      	movs	r1, #130	; 0x82
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f005 fed5 	bl	800d3d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00e      	beq.n	8007660 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007652:	4618      	mov	r0, r3
 8007654:	f005 ffc8 	bl	800d5e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800767c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007690:	2303      	movs	r3, #3
 8007692:	e0af      	b.n	80077f4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800769c:	2b00      	cmp	r3, #0
 800769e:	d03f      	beq.n	8007720 <USBD_CDC_Setup+0xb4>
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	f040 809f 	bne.w	80077e4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	88db      	ldrh	r3, [r3, #6]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d02e      	beq.n	800770c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	b25b      	sxtb	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	da16      	bge.n	80076e6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80076c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	88d2      	ldrh	r2, [r2, #6]
 80076ca:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	88db      	ldrh	r3, [r3, #6]
 80076d0:	2b07      	cmp	r3, #7
 80076d2:	bf28      	it	cs
 80076d4:	2307      	movcs	r3, #7
 80076d6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	89fa      	ldrh	r2, [r7, #14]
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fb19 	bl	8008d16 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80076e4:	e085      	b.n	80077f2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	785a      	ldrb	r2, [r3, #1]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	88db      	ldrh	r3, [r3, #6]
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80076fc:	6939      	ldr	r1, [r7, #16]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	88db      	ldrh	r3, [r3, #6]
 8007702:	461a      	mov	r2, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 fb32 	bl	8008d6e <USBD_CtlPrepareRx>
      break;
 800770a:	e072      	b.n	80077f2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	7850      	ldrb	r0, [r2, #1]
 8007718:	2200      	movs	r2, #0
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	4798      	blx	r3
      break;
 800771e:	e068      	b.n	80077f2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b0b      	cmp	r3, #11
 8007726:	d852      	bhi.n	80077ce <USBD_CDC_Setup+0x162>
 8007728:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <USBD_CDC_Setup+0xc4>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	08007761 	.word	0x08007761
 8007734:	080077dd 	.word	0x080077dd
 8007738:	080077cf 	.word	0x080077cf
 800773c:	080077cf 	.word	0x080077cf
 8007740:	080077cf 	.word	0x080077cf
 8007744:	080077cf 	.word	0x080077cf
 8007748:	080077cf 	.word	0x080077cf
 800774c:	080077cf 	.word	0x080077cf
 8007750:	080077cf 	.word	0x080077cf
 8007754:	080077cf 	.word	0x080077cf
 8007758:	0800778b 	.word	0x0800778b
 800775c:	080077b5 	.word	0x080077b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b03      	cmp	r3, #3
 800776a:	d107      	bne.n	800777c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800776c:	f107 030a 	add.w	r3, r7, #10
 8007770:	2202      	movs	r2, #2
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 face 	bl	8008d16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800777a:	e032      	b.n	80077e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 fa58 	bl	8008c34 <USBD_CtlError>
            ret = USBD_FAIL;
 8007784:	2303      	movs	r3, #3
 8007786:	75fb      	strb	r3, [r7, #23]
          break;
 8007788:	e02b      	b.n	80077e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b03      	cmp	r3, #3
 8007794:	d107      	bne.n	80077a6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007796:	f107 030d 	add.w	r3, r7, #13
 800779a:	2201      	movs	r2, #1
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 fab9 	bl	8008d16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077a4:	e01d      	b.n	80077e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 fa43 	bl	8008c34 <USBD_CtlError>
            ret = USBD_FAIL;
 80077ae:	2303      	movs	r3, #3
 80077b0:	75fb      	strb	r3, [r7, #23]
          break;
 80077b2:	e016      	b.n	80077e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d00f      	beq.n	80077e0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f001 fa36 	bl	8008c34 <USBD_CtlError>
            ret = USBD_FAIL;
 80077c8:	2303      	movs	r3, #3
 80077ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077cc:	e008      	b.n	80077e0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 fa2f 	bl	8008c34 <USBD_CtlError>
          ret = USBD_FAIL;
 80077d6:	2303      	movs	r3, #3
 80077d8:	75fb      	strb	r3, [r7, #23]
          break;
 80077da:	e002      	b.n	80077e2 <USBD_CDC_Setup+0x176>
          break;
 80077dc:	bf00      	nop
 80077de:	e008      	b.n	80077f2 <USBD_CDC_Setup+0x186>
          break;
 80077e0:	bf00      	nop
      }
      break;
 80077e2:	e006      	b.n	80077f2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 fa24 	bl	8008c34 <USBD_CtlError>
      ret = USBD_FAIL;
 80077ec:	2303      	movs	r3, #3
 80077ee:	75fb      	strb	r3, [r7, #23]
      break;
 80077f0:	bf00      	nop
  }

  return (uint8_t)ret;
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800780e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800781a:	2303      	movs	r3, #3
 800781c:	e04f      	b.n	80078be <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007824:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007826:	78fa      	ldrb	r2, [r7, #3]
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	3318      	adds	r3, #24
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d029      	beq.n	8007890 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800783c:	78fa      	ldrb	r2, [r7, #3]
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	4613      	mov	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	3318      	adds	r3, #24
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	78f9      	ldrb	r1, [r7, #3]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	460b      	mov	r3, r1
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	1a5b      	subs	r3, r3, r1
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4403      	add	r3, r0
 800785c:	3344      	adds	r3, #68	; 0x44
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	fbb2 f1f3 	udiv	r1, r2, r3
 8007864:	fb03 f301 	mul.w	r3, r3, r1
 8007868:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800786a:	2b00      	cmp	r3, #0
 800786c:	d110      	bne.n	8007890 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800786e:	78fa      	ldrb	r2, [r7, #3]
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	3318      	adds	r3, #24
 800787e:	2200      	movs	r2, #0
 8007880:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007882:	78f9      	ldrb	r1, [r7, #3]
 8007884:	2300      	movs	r3, #0
 8007886:	2200      	movs	r2, #0
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f005 fe4a 	bl	800d522 <USBD_LL_Transmit>
 800788e:	e015      	b.n	80078bc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80078b8:	78fa      	ldrb	r2, [r7, #3]
 80078ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	460b      	mov	r3, r1
 80078d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e015      	b.n	8007914 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f005 fe5a 	bl	800d5a6 <USBD_LL_GetRxDataSize>
 80078f2:	4602      	mov	r2, r0
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800790e:	4611      	mov	r1, r2
 8007910:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800792a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007932:	2303      	movs	r3, #3
 8007934:	e01b      	b.n	800796e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d015      	beq.n	800796c <USBD_CDC_EP0_RxReady+0x50>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007946:	2bff      	cmp	r3, #255	; 0xff
 8007948:	d010      	beq.n	800796c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007958:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007960:	b292      	uxth	r2, r2
 8007962:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	22ff      	movs	r2, #255	; 0xff
 8007968:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2243      	movs	r2, #67	; 0x43
 8007984:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007986:	4b03      	ldr	r3, [pc, #12]	; (8007994 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007988:	4618      	mov	r0, r3
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	20000094 	.word	0x20000094

08007998 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2243      	movs	r2, #67	; 0x43
 80079a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80079a6:	4b03      	ldr	r3, [pc, #12]	; (80079b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	20000050 	.word	0x20000050

080079b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2243      	movs	r2, #67	; 0x43
 80079c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80079c6:	4b03      	ldr	r3, [pc, #12]	; (80079d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	200000d8 	.word	0x200000d8

080079d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	220a      	movs	r2, #10
 80079e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079e6:	4b03      	ldr	r3, [pc, #12]	; (80079f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	2000000c 	.word	0x2000000c

080079f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e004      	b.n	8007a16 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b087      	sub	sp, #28
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a34:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e008      	b.n	8007a52 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a6e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e004      	b.n	8007a84 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a9e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e01a      	b.n	8007ae8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d114      	bne.n	8007ae6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ada:	2181      	movs	r1, #129	; 0x81
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f005 fd20 	bl	800d522 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007afe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e016      	b.n	8007b3c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	7c1b      	ldrb	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d109      	bne.n	8007b2a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b20:	2101      	movs	r1, #1
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f005 fd1e 	bl	800d564 <USBD_LL_PrepareReceive>
 8007b28:	e007      	b.n	8007b3a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b30:	2340      	movs	r3, #64	; 0x40
 8007b32:	2101      	movs	r1, #1
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f005 fd15 	bl	800d564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e01f      	b.n	8007b9c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	79fa      	ldrb	r2, [r7, #7]
 8007b8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f005 fb91 	bl	800d2b8 <USBD_LL_Init>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e016      	b.n	8007bea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	f107 020e 	add.w	r2, r7, #14
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4798      	blx	r3
 8007be0:	4602      	mov	r2, r0
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f005 fba8 	bl	800d350 <USBD_LL_Start>
 8007c00:	4603      	mov	r3, r0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d009      	beq.n	8007c4e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	78fa      	ldrb	r2, [r7, #3]
 8007c44:	4611      	mov	r1, r2
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	4798      	blx	r3
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d007      	beq.n	8007c7e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	78fa      	ldrb	r2, [r7, #3]
 8007c78:	4611      	mov	r1, r2
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	4798      	blx	r3
  }

  return USBD_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 ff90 	bl	8008bc0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007cae:	461a      	mov	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cbc:	f003 031f 	and.w	r3, r3, #31
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d01a      	beq.n	8007cfa <USBD_LL_SetupStage+0x72>
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d822      	bhi.n	8007d0e <USBD_LL_SetupStage+0x86>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <USBD_LL_SetupStage+0x4a>
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d00a      	beq.n	8007ce6 <USBD_LL_SetupStage+0x5e>
 8007cd0:	e01d      	b.n	8007d0e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa62 	bl	80081a4 <USBD_StdDevReq>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce4:	e020      	b.n	8007d28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fac6 	bl	8008280 <USBD_StdItfReq>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf8:	e016      	b.n	8007d28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fb05 	bl	8008312 <USBD_StdEPReq>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d0c:	e00c      	b.n	8007d28 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f005 fb77 	bl	800d410 <USBD_LL_StallEP>
 8007d22:	4603      	mov	r3, r0
 8007d24:	73fb      	strb	r3, [r7, #15]
      break;
 8007d26:	bf00      	nop
  }

  return ret;
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b086      	sub	sp, #24
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	607a      	str	r2, [r7, #4]
 8007d3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d138      	bne.n	8007db8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d14a      	bne.n	8007dee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d913      	bls.n	8007d8c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	1ad2      	subs	r2, r2, r3
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	bf28      	it	cs
 8007d7e:	4613      	movcs	r3, r2
 8007d80:	461a      	mov	r2, r3
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f001 f80f 	bl	8008da8 <USBD_CtlContinueRx>
 8007d8a:	e030      	b.n	8007dee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d10b      	bne.n	8007db0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f001 f80a 	bl	8008dca <USBD_CtlSendStatus>
 8007db6:	e01a      	b.n	8007dee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d114      	bne.n	8007dee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00e      	beq.n	8007dee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	7afa      	ldrb	r2, [r7, #11]
 8007dda:	4611      	mov	r1, r2
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	4798      	blx	r3
 8007de0:	4603      	mov	r3, r0
 8007de2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	e000      	b.n	8007df0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	460b      	mov	r3, r1
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e06:	7afb      	ldrb	r3, [r7, #11]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d16b      	bne.n	8007ee4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3314      	adds	r3, #20
 8007e10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d156      	bne.n	8007eca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d914      	bls.n	8007e52 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	1ad2      	subs	r2, r2, r3
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 ff84 	bl	8008d4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e44:	2300      	movs	r3, #0
 8007e46:	2200      	movs	r2, #0
 8007e48:	2100      	movs	r1, #0
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f005 fb8a 	bl	800d564 <USBD_LL_PrepareReceive>
 8007e50:	e03b      	b.n	8007eca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d11c      	bne.n	8007e98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d316      	bcc.n	8007e98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d20f      	bcs.n	8007e98 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 ff65 	bl	8008d4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2100      	movs	r1, #0
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f005 fb67 	bl	800d564 <USBD_LL_PrepareReceive>
 8007e96:	e018      	b.n	8007eca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d10b      	bne.n	8007ebc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d005      	beq.n	8007ebc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ebc:	2180      	movs	r1, #128	; 0x80
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f005 faa6 	bl	800d410 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 ff93 	bl	8008df0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d122      	bne.n	8007f1a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7ff fe98 	bl	8007c0a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ee2:	e01a      	b.n	8007f1a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d114      	bne.n	8007f1a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00e      	beq.n	8007f1a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	7afa      	ldrb	r2, [r7, #11]
 8007f06:	4611      	mov	r1, r2
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	4798      	blx	r3
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	e000      	b.n	8007f1c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e02f      	b.n	8007fb8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00f      	beq.n	8007f82 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d009      	beq.n	8007f82 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	6852      	ldr	r2, [r2, #4]
 8007f7a:	b2d2      	uxtb	r2, r2
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f82:	2340      	movs	r3, #64	; 0x40
 8007f84:	2200      	movs	r2, #0
 8007f86:	2100      	movs	r1, #0
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f005 f9fc 	bl	800d386 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2240      	movs	r2, #64	; 0x40
 8007f9a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f9e:	2340      	movs	r3, #64	; 0x40
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2180      	movs	r1, #128	; 0x80
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f005 f9ee 	bl	800d386 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2240      	movs	r2, #64	; 0x40
 8007fb4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2204      	movs	r2, #4
 8007ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b04      	cmp	r3, #4
 800801e:	d106      	bne.n	800802e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008026:	b2da      	uxtb	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800804e:	2303      	movs	r3, #3
 8008050:	e012      	b.n	8008078 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b03      	cmp	r3, #3
 800805c:	d10b      	bne.n	8008076 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008096:	2303      	movs	r3, #3
 8008098:	e014      	b.n	80080c4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d10d      	bne.n	80080c2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d007      	beq.n	80080c2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	4611      	mov	r1, r2
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e014      	b.n	8008110 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d10d      	bne.n	800810e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d007      	beq.n	800810e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	78fa      	ldrb	r2, [r7, #3]
 8008108:	4611      	mov	r1, r2
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008144:	2b00      	cmp	r3, #0
 8008146:	d009      	beq.n	800815c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	6852      	ldr	r2, [r2, #4]
 8008154:	b2d2      	uxtb	r2, r2
 8008156:	4611      	mov	r1, r2
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	4798      	blx	r3
  }

  return USBD_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008166:	b480      	push	{r7}
 8008168:	b087      	sub	sp, #28
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	3301      	adds	r3, #1
 800817c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008184:	8a3b      	ldrh	r3, [r7, #16]
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	b21a      	sxth	r2, r3
 800818a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800818e:	4313      	orrs	r3, r2
 8008190:	b21b      	sxth	r3, r3
 8008192:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008194:	89fb      	ldrh	r3, [r7, #14]
}
 8008196:	4618      	mov	r0, r3
 8008198:	371c      	adds	r7, #28
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
	...

080081a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081ba:	2b40      	cmp	r3, #64	; 0x40
 80081bc:	d005      	beq.n	80081ca <USBD_StdDevReq+0x26>
 80081be:	2b40      	cmp	r3, #64	; 0x40
 80081c0:	d853      	bhi.n	800826a <USBD_StdDevReq+0xc6>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00b      	beq.n	80081de <USBD_StdDevReq+0x3a>
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	d14f      	bne.n	800826a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	4798      	blx	r3
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]
      break;
 80081dc:	e04a      	b.n	8008274 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	785b      	ldrb	r3, [r3, #1]
 80081e2:	2b09      	cmp	r3, #9
 80081e4:	d83b      	bhi.n	800825e <USBD_StdDevReq+0xba>
 80081e6:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <USBD_StdDevReq+0x48>)
 80081e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ec:	08008241 	.word	0x08008241
 80081f0:	08008255 	.word	0x08008255
 80081f4:	0800825f 	.word	0x0800825f
 80081f8:	0800824b 	.word	0x0800824b
 80081fc:	0800825f 	.word	0x0800825f
 8008200:	0800821f 	.word	0x0800821f
 8008204:	08008215 	.word	0x08008215
 8008208:	0800825f 	.word	0x0800825f
 800820c:	08008237 	.word	0x08008237
 8008210:	08008229 	.word	0x08008229
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f9de 	bl	80085d8 <USBD_GetDescriptor>
          break;
 800821c:	e024      	b.n	8008268 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fb43 	bl	80088ac <USBD_SetAddress>
          break;
 8008226:	e01f      	b.n	8008268 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fb82 	bl	8008934 <USBD_SetConfig>
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]
          break;
 8008234:	e018      	b.n	8008268 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fc21 	bl	8008a80 <USBD_GetConfig>
          break;
 800823e:	e013      	b.n	8008268 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fc52 	bl	8008aec <USBD_GetStatus>
          break;
 8008248:	e00e      	b.n	8008268 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fc81 	bl	8008b54 <USBD_SetFeature>
          break;
 8008252:	e009      	b.n	8008268 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fc90 	bl	8008b7c <USBD_ClrFeature>
          break;
 800825c:	e004      	b.n	8008268 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fce7 	bl	8008c34 <USBD_CtlError>
          break;
 8008266:	bf00      	nop
      }
      break;
 8008268:	e004      	b.n	8008274 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fce1 	bl	8008c34 <USBD_CtlError>
      break;
 8008272:	bf00      	nop
  }

  return ret;
 8008274:	7bfb      	ldrb	r3, [r7, #15]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop

08008280 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008296:	2b40      	cmp	r3, #64	; 0x40
 8008298:	d005      	beq.n	80082a6 <USBD_StdItfReq+0x26>
 800829a:	2b40      	cmp	r3, #64	; 0x40
 800829c:	d82f      	bhi.n	80082fe <USBD_StdItfReq+0x7e>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <USBD_StdItfReq+0x26>
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	d12b      	bne.n	80082fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d81d      	bhi.n	80082f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	889b      	ldrh	r3, [r3, #4]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d813      	bhi.n	80082e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	4798      	blx	r3
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	88db      	ldrh	r3, [r3, #6]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d110      	bne.n	80082fa <USBD_StdItfReq+0x7a>
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10d      	bne.n	80082fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fd73 	bl	8008dca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082e4:	e009      	b.n	80082fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fca3 	bl	8008c34 <USBD_CtlError>
          break;
 80082ee:	e004      	b.n	80082fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fc9e 	bl	8008c34 <USBD_CtlError>
          break;
 80082f8:	e000      	b.n	80082fc <USBD_StdItfReq+0x7c>
          break;
 80082fa:	bf00      	nop
      }
      break;
 80082fc:	e004      	b.n	8008308 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fc97 	bl	8008c34 <USBD_CtlError>
      break;
 8008306:	bf00      	nop
  }

  return ret;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	889b      	ldrh	r3, [r3, #4]
 8008324:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800832e:	2b40      	cmp	r3, #64	; 0x40
 8008330:	d007      	beq.n	8008342 <USBD_StdEPReq+0x30>
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	f200 8145 	bhi.w	80085c2 <USBD_StdEPReq+0x2b0>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00c      	beq.n	8008356 <USBD_StdEPReq+0x44>
 800833c:	2b20      	cmp	r3, #32
 800833e:	f040 8140 	bne.w	80085c2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	4798      	blx	r3
 8008350:	4603      	mov	r3, r0
 8008352:	73fb      	strb	r3, [r7, #15]
      break;
 8008354:	e13a      	b.n	80085cc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	785b      	ldrb	r3, [r3, #1]
 800835a:	2b03      	cmp	r3, #3
 800835c:	d007      	beq.n	800836e <USBD_StdEPReq+0x5c>
 800835e:	2b03      	cmp	r3, #3
 8008360:	f300 8129 	bgt.w	80085b6 <USBD_StdEPReq+0x2a4>
 8008364:	2b00      	cmp	r3, #0
 8008366:	d07f      	beq.n	8008468 <USBD_StdEPReq+0x156>
 8008368:	2b01      	cmp	r3, #1
 800836a:	d03c      	beq.n	80083e6 <USBD_StdEPReq+0xd4>
 800836c:	e123      	b.n	80085b6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d002      	beq.n	8008380 <USBD_StdEPReq+0x6e>
 800837a:	2b03      	cmp	r3, #3
 800837c:	d016      	beq.n	80083ac <USBD_StdEPReq+0x9a>
 800837e:	e02c      	b.n	80083da <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <USBD_StdEPReq+0x90>
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b80      	cmp	r3, #128	; 0x80
 800838a:	d00a      	beq.n	80083a2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f005 f83d 	bl	800d410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008396:	2180      	movs	r1, #128	; 0x80
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f005 f839 	bl	800d410 <USBD_LL_StallEP>
 800839e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083a0:	e020      	b.n	80083e4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fc45 	bl	8008c34 <USBD_CtlError>
              break;
 80083aa:	e01b      	b.n	80083e4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	885b      	ldrh	r3, [r3, #2]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10e      	bne.n	80083d2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <USBD_StdEPReq+0xc0>
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b80      	cmp	r3, #128	; 0x80
 80083be:	d008      	beq.n	80083d2 <USBD_StdEPReq+0xc0>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	88db      	ldrh	r3, [r3, #6]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d104      	bne.n	80083d2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f005 f81f 	bl	800d410 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fcf9 	bl	8008dca <USBD_CtlSendStatus>

              break;
 80083d8:	e004      	b.n	80083e4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fc29 	bl	8008c34 <USBD_CtlError>
              break;
 80083e2:	bf00      	nop
          }
          break;
 80083e4:	e0ec      	b.n	80085c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d002      	beq.n	80083f8 <USBD_StdEPReq+0xe6>
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d016      	beq.n	8008424 <USBD_StdEPReq+0x112>
 80083f6:	e030      	b.n	800845a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00d      	beq.n	800841a <USBD_StdEPReq+0x108>
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b80      	cmp	r3, #128	; 0x80
 8008402:	d00a      	beq.n	800841a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f005 f801 	bl	800d410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800840e:	2180      	movs	r1, #128	; 0x80
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f004 fffd 	bl	800d410 <USBD_LL_StallEP>
 8008416:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008418:	e025      	b.n	8008466 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fc09 	bl	8008c34 <USBD_CtlError>
              break;
 8008422:	e020      	b.n	8008466 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	885b      	ldrh	r3, [r3, #2]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d11b      	bne.n	8008464 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008432:	2b00      	cmp	r3, #0
 8008434:	d004      	beq.n	8008440 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f005 f807 	bl	800d44e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fcc2 	bl	8008dca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	4798      	blx	r3
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008458:	e004      	b.n	8008464 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fbe9 	bl	8008c34 <USBD_CtlError>
              break;
 8008462:	e000      	b.n	8008466 <USBD_StdEPReq+0x154>
              break;
 8008464:	bf00      	nop
          }
          break;
 8008466:	e0ab      	b.n	80085c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d002      	beq.n	800847a <USBD_StdEPReq+0x168>
 8008474:	2b03      	cmp	r3, #3
 8008476:	d032      	beq.n	80084de <USBD_StdEPReq+0x1cc>
 8008478:	e097      	b.n	80085aa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d007      	beq.n	8008490 <USBD_StdEPReq+0x17e>
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b80      	cmp	r3, #128	; 0x80
 8008484:	d004      	beq.n	8008490 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fbd3 	bl	8008c34 <USBD_CtlError>
                break;
 800848e:	e091      	b.n	80085b4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008494:	2b00      	cmp	r3, #0
 8008496:	da0b      	bge.n	80084b0 <USBD_StdEPReq+0x19e>
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800849e:	4613      	mov	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	3310      	adds	r3, #16
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	4413      	add	r3, r2
 80084ac:	3304      	adds	r3, #4
 80084ae:	e00b      	b.n	80084c8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	4413      	add	r3, r2
 80084c6:	3304      	adds	r3, #4
 80084c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2202      	movs	r2, #2
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fc1d 	bl	8008d16 <USBD_CtlSendData>
              break;
 80084dc:	e06a      	b.n	80085b4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80084de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	da11      	bge.n	800850a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	f003 020f 	and.w	r2, r3, #15
 80084ec:	6879      	ldr	r1, [r7, #4]
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	440b      	add	r3, r1
 80084f8:	3324      	adds	r3, #36	; 0x24
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d117      	bne.n	8008530 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fb96 	bl	8008c34 <USBD_CtlError>
                  break;
 8008508:	e054      	b.n	80085b4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	f003 020f 	and.w	r2, r3, #15
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	440b      	add	r3, r1
 800851c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d104      	bne.n	8008530 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fb83 	bl	8008c34 <USBD_CtlError>
                  break;
 800852e:	e041      	b.n	80085b4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008534:	2b00      	cmp	r3, #0
 8008536:	da0b      	bge.n	8008550 <USBD_StdEPReq+0x23e>
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800853e:	4613      	mov	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	3310      	adds	r3, #16
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	4413      	add	r3, r2
 800854c:	3304      	adds	r3, #4
 800854e:	e00b      	b.n	8008568 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	4413      	add	r3, r2
 8008566:	3304      	adds	r3, #4
 8008568:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <USBD_StdEPReq+0x264>
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2b80      	cmp	r3, #128	; 0x80
 8008574:	d103      	bne.n	800857e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	e00e      	b.n	800859c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800857e:	7bbb      	ldrb	r3, [r7, #14]
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f004 ff82 	bl	800d48c <USBD_LL_IsStallEP>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2201      	movs	r2, #1
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	e002      	b.n	800859c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2202      	movs	r2, #2
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fbb7 	bl	8008d16 <USBD_CtlSendData>
              break;
 80085a8:	e004      	b.n	80085b4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fb41 	bl	8008c34 <USBD_CtlError>
              break;
 80085b2:	bf00      	nop
          }
          break;
 80085b4:	e004      	b.n	80085c0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fb3b 	bl	8008c34 <USBD_CtlError>
          break;
 80085be:	bf00      	nop
      }
      break;
 80085c0:	e004      	b.n	80085cc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fb35 	bl	8008c34 <USBD_CtlError>
      break;
 80085ca:	bf00      	nop
  }

  return ret;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	885b      	ldrh	r3, [r3, #2]
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	2b06      	cmp	r3, #6
 80085fa:	f200 8128 	bhi.w	800884e <USBD_GetDescriptor+0x276>
 80085fe:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <USBD_GetDescriptor+0x2c>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008621 	.word	0x08008621
 8008608:	08008639 	.word	0x08008639
 800860c:	08008679 	.word	0x08008679
 8008610:	0800884f 	.word	0x0800884f
 8008614:	0800884f 	.word	0x0800884f
 8008618:	080087ef 	.word	0x080087ef
 800861c:	0800881b 	.word	0x0800881b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	7c12      	ldrb	r2, [r2, #16]
 800862c:	f107 0108 	add.w	r1, r7, #8
 8008630:	4610      	mov	r0, r2
 8008632:	4798      	blx	r3
 8008634:	60f8      	str	r0, [r7, #12]
      break;
 8008636:	e112      	b.n	800885e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	7c1b      	ldrb	r3, [r3, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10d      	bne.n	800865c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008648:	f107 0208 	add.w	r2, r7, #8
 800864c:	4610      	mov	r0, r2
 800864e:	4798      	blx	r3
 8008650:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3301      	adds	r3, #1
 8008656:	2202      	movs	r2, #2
 8008658:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800865a:	e100      	b.n	800885e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	f107 0208 	add.w	r2, r7, #8
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
 800866c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3301      	adds	r3, #1
 8008672:	2202      	movs	r2, #2
 8008674:	701a      	strb	r2, [r3, #0]
      break;
 8008676:	e0f2      	b.n	800885e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	885b      	ldrh	r3, [r3, #2]
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b05      	cmp	r3, #5
 8008680:	f200 80ac 	bhi.w	80087dc <USBD_GetDescriptor+0x204>
 8008684:	a201      	add	r2, pc, #4	; (adr r2, 800868c <USBD_GetDescriptor+0xb4>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	080086a5 	.word	0x080086a5
 8008690:	080086d9 	.word	0x080086d9
 8008694:	0800870d 	.word	0x0800870d
 8008698:	08008741 	.word	0x08008741
 800869c:	08008775 	.word	0x08008775
 80086a0:	080087a9 	.word	0x080087a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00b      	beq.n	80086c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	7c12      	ldrb	r2, [r2, #16]
 80086bc:	f107 0108 	add.w	r1, r7, #8
 80086c0:	4610      	mov	r0, r2
 80086c2:	4798      	blx	r3
 80086c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086c6:	e091      	b.n	80087ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fab2 	bl	8008c34 <USBD_CtlError>
            err++;
 80086d0:	7afb      	ldrb	r3, [r7, #11]
 80086d2:	3301      	adds	r3, #1
 80086d4:	72fb      	strb	r3, [r7, #11]
          break;
 80086d6:	e089      	b.n	80087ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00b      	beq.n	80086fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	7c12      	ldrb	r2, [r2, #16]
 80086f0:	f107 0108 	add.w	r1, r7, #8
 80086f4:	4610      	mov	r0, r2
 80086f6:	4798      	blx	r3
 80086f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086fa:	e077      	b.n	80087ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fa98 	bl	8008c34 <USBD_CtlError>
            err++;
 8008704:	7afb      	ldrb	r3, [r7, #11]
 8008706:	3301      	adds	r3, #1
 8008708:	72fb      	strb	r3, [r7, #11]
          break;
 800870a:	e06f      	b.n	80087ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00b      	beq.n	8008730 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	7c12      	ldrb	r2, [r2, #16]
 8008724:	f107 0108 	add.w	r1, r7, #8
 8008728:	4610      	mov	r0, r2
 800872a:	4798      	blx	r3
 800872c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800872e:	e05d      	b.n	80087ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fa7e 	bl	8008c34 <USBD_CtlError>
            err++;
 8008738:	7afb      	ldrb	r3, [r7, #11]
 800873a:	3301      	adds	r3, #1
 800873c:	72fb      	strb	r3, [r7, #11]
          break;
 800873e:	e055      	b.n	80087ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00b      	beq.n	8008764 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	7c12      	ldrb	r2, [r2, #16]
 8008758:	f107 0108 	add.w	r1, r7, #8
 800875c:	4610      	mov	r0, r2
 800875e:	4798      	blx	r3
 8008760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008762:	e043      	b.n	80087ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fa64 	bl	8008c34 <USBD_CtlError>
            err++;
 800876c:	7afb      	ldrb	r3, [r7, #11]
 800876e:	3301      	adds	r3, #1
 8008770:	72fb      	strb	r3, [r7, #11]
          break;
 8008772:	e03b      	b.n	80087ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00b      	beq.n	8008798 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	7c12      	ldrb	r2, [r2, #16]
 800878c:	f107 0108 	add.w	r1, r7, #8
 8008790:	4610      	mov	r0, r2
 8008792:	4798      	blx	r3
 8008794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008796:	e029      	b.n	80087ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fa4a 	bl	8008c34 <USBD_CtlError>
            err++;
 80087a0:	7afb      	ldrb	r3, [r7, #11]
 80087a2:	3301      	adds	r3, #1
 80087a4:	72fb      	strb	r3, [r7, #11]
          break;
 80087a6:	e021      	b.n	80087ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00b      	beq.n	80087cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	7c12      	ldrb	r2, [r2, #16]
 80087c0:	f107 0108 	add.w	r1, r7, #8
 80087c4:	4610      	mov	r0, r2
 80087c6:	4798      	blx	r3
 80087c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ca:	e00f      	b.n	80087ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fa30 	bl	8008c34 <USBD_CtlError>
            err++;
 80087d4:	7afb      	ldrb	r3, [r7, #11]
 80087d6:	3301      	adds	r3, #1
 80087d8:	72fb      	strb	r3, [r7, #11]
          break;
 80087da:	e007      	b.n	80087ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fa28 	bl	8008c34 <USBD_CtlError>
          err++;
 80087e4:	7afb      	ldrb	r3, [r7, #11]
 80087e6:	3301      	adds	r3, #1
 80087e8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80087ea:	bf00      	nop
      }
      break;
 80087ec:	e037      	b.n	800885e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	7c1b      	ldrb	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d109      	bne.n	800880a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087fe:	f107 0208 	add.w	r2, r7, #8
 8008802:	4610      	mov	r0, r2
 8008804:	4798      	blx	r3
 8008806:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008808:	e029      	b.n	800885e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fa11 	bl	8008c34 <USBD_CtlError>
        err++;
 8008812:	7afb      	ldrb	r3, [r7, #11]
 8008814:	3301      	adds	r3, #1
 8008816:	72fb      	strb	r3, [r7, #11]
      break;
 8008818:	e021      	b.n	800885e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	7c1b      	ldrb	r3, [r3, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10d      	bne.n	800883e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882a:	f107 0208 	add.w	r2, r7, #8
 800882e:	4610      	mov	r0, r2
 8008830:	4798      	blx	r3
 8008832:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3301      	adds	r3, #1
 8008838:	2207      	movs	r2, #7
 800883a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800883c:	e00f      	b.n	800885e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f9f7 	bl	8008c34 <USBD_CtlError>
        err++;
 8008846:	7afb      	ldrb	r3, [r7, #11]
 8008848:	3301      	adds	r3, #1
 800884a:	72fb      	strb	r3, [r7, #11]
      break;
 800884c:	e007      	b.n	800885e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f9ef 	bl	8008c34 <USBD_CtlError>
      err++;
 8008856:	7afb      	ldrb	r3, [r7, #11]
 8008858:	3301      	adds	r3, #1
 800885a:	72fb      	strb	r3, [r7, #11]
      break;
 800885c:	bf00      	nop
  }

  if (err != 0U)
 800885e:	7afb      	ldrb	r3, [r7, #11]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d11e      	bne.n	80088a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	88db      	ldrh	r3, [r3, #6]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d016      	beq.n	800889a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800886c:	893b      	ldrh	r3, [r7, #8]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00e      	beq.n	8008890 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	88da      	ldrh	r2, [r3, #6]
 8008876:	893b      	ldrh	r3, [r7, #8]
 8008878:	4293      	cmp	r3, r2
 800887a:	bf28      	it	cs
 800887c:	4613      	movcs	r3, r2
 800887e:	b29b      	uxth	r3, r3
 8008880:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008882:	893b      	ldrh	r3, [r7, #8]
 8008884:	461a      	mov	r2, r3
 8008886:	68f9      	ldr	r1, [r7, #12]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fa44 	bl	8008d16 <USBD_CtlSendData>
 800888e:	e009      	b.n	80088a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f9ce 	bl	8008c34 <USBD_CtlError>
 8008898:	e004      	b.n	80088a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fa95 	bl	8008dca <USBD_CtlSendStatus>
 80088a0:	e000      	b.n	80088a4 <USBD_GetDescriptor+0x2cc>
    return;
 80088a2:	bf00      	nop
  }
}
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop

080088ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	889b      	ldrh	r3, [r3, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d131      	bne.n	8008922 <USBD_SetAddress+0x76>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	88db      	ldrh	r3, [r3, #6]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d12d      	bne.n	8008922 <USBD_SetAddress+0x76>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	885b      	ldrh	r3, [r3, #2]
 80088ca:	2b7f      	cmp	r3, #127	; 0x7f
 80088cc:	d829      	bhi.n	8008922 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	885b      	ldrh	r3, [r3, #2]
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d104      	bne.n	80088f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f9a3 	bl	8008c34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ee:	e01d      	b.n	800892c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7bfa      	ldrb	r2, [r7, #15]
 80088f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f004 fdf1 	bl	800d4e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fa61 	bl	8008dca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d004      	beq.n	8008918 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2202      	movs	r2, #2
 8008912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008916:	e009      	b.n	800892c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008920:	e004      	b.n	800892c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f985 	bl	8008c34 <USBD_CtlError>
  }
}
 800892a:	bf00      	nop
 800892c:	bf00      	nop
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	885b      	ldrh	r3, [r3, #2]
 8008946:	b2da      	uxtb	r2, r3
 8008948:	4b4c      	ldr	r3, [pc, #304]	; (8008a7c <USBD_SetConfig+0x148>)
 800894a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800894c:	4b4b      	ldr	r3, [pc, #300]	; (8008a7c <USBD_SetConfig+0x148>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d905      	bls.n	8008960 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f96c 	bl	8008c34 <USBD_CtlError>
    return USBD_FAIL;
 800895c:	2303      	movs	r3, #3
 800895e:	e088      	b.n	8008a72 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b02      	cmp	r3, #2
 800896a:	d002      	beq.n	8008972 <USBD_SetConfig+0x3e>
 800896c:	2b03      	cmp	r3, #3
 800896e:	d025      	beq.n	80089bc <USBD_SetConfig+0x88>
 8008970:	e071      	b.n	8008a56 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008972:	4b42      	ldr	r3, [pc, #264]	; (8008a7c <USBD_SetConfig+0x148>)
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d01c      	beq.n	80089b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800897a:	4b40      	ldr	r3, [pc, #256]	; (8008a7c <USBD_SetConfig+0x148>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008984:	4b3d      	ldr	r3, [pc, #244]	; (8008a7c <USBD_SetConfig+0x148>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff f948 	bl	8007c20 <USBD_SetClassConfig>
 8008990:	4603      	mov	r3, r0
 8008992:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d004      	beq.n	80089a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f949 	bl	8008c34 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089a2:	e065      	b.n	8008a70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fa10 	bl	8008dca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2203      	movs	r2, #3
 80089ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089b2:	e05d      	b.n	8008a70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fa08 	bl	8008dca <USBD_CtlSendStatus>
      break;
 80089ba:	e059      	b.n	8008a70 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80089bc:	4b2f      	ldr	r3, [pc, #188]	; (8008a7c <USBD_SetConfig+0x148>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d112      	bne.n	80089ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80089cc:	4b2b      	ldr	r3, [pc, #172]	; (8008a7c <USBD_SetConfig+0x148>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089d6:	4b29      	ldr	r3, [pc, #164]	; (8008a7c <USBD_SetConfig+0x148>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff f93b 	bl	8007c58 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f9f1 	bl	8008dca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089e8:	e042      	b.n	8008a70 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80089ea:	4b24      	ldr	r3, [pc, #144]	; (8008a7c <USBD_SetConfig+0x148>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d02a      	beq.n	8008a4e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff f929 	bl	8007c58 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a06:	4b1d      	ldr	r3, [pc, #116]	; (8008a7c <USBD_SetConfig+0x148>)
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a10:	4b1a      	ldr	r3, [pc, #104]	; (8008a7c <USBD_SetConfig+0x148>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7ff f902 	bl	8007c20 <USBD_SetClassConfig>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00f      	beq.n	8008a46 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f903 	bl	8008c34 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7ff f90e 	bl	8007c58 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a44:	e014      	b.n	8008a70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f9bf 	bl	8008dca <USBD_CtlSendStatus>
      break;
 8008a4c:	e010      	b.n	8008a70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f9bb 	bl	8008dca <USBD_CtlSendStatus>
      break;
 8008a54:	e00c      	b.n	8008a70 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f8eb 	bl	8008c34 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a5e:	4b07      	ldr	r3, [pc, #28]	; (8008a7c <USBD_SetConfig+0x148>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff f8f7 	bl	8007c58 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a6e:	bf00      	nop
  }

  return ret;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	200005f4 	.word	0x200005f4

08008a80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	88db      	ldrh	r3, [r3, #6]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d004      	beq.n	8008a9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f8cd 	bl	8008c34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a9a:	e023      	b.n	8008ae4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	dc02      	bgt.n	8008aae <USBD_GetConfig+0x2e>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	dc03      	bgt.n	8008ab4 <USBD_GetConfig+0x34>
 8008aac:	e015      	b.n	8008ada <USBD_GetConfig+0x5a>
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d00b      	beq.n	8008aca <USBD_GetConfig+0x4a>
 8008ab2:	e012      	b.n	8008ada <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3308      	adds	r3, #8
 8008abe:	2201      	movs	r2, #1
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f927 	bl	8008d16 <USBD_CtlSendData>
        break;
 8008ac8:	e00c      	b.n	8008ae4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	3304      	adds	r3, #4
 8008ace:	2201      	movs	r2, #1
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f91f 	bl	8008d16 <USBD_CtlSendData>
        break;
 8008ad8:	e004      	b.n	8008ae4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f8a9 	bl	8008c34 <USBD_CtlError>
        break;
 8008ae2:	bf00      	nop
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	3b01      	subs	r3, #1
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d81e      	bhi.n	8008b42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	88db      	ldrh	r3, [r3, #6]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d004      	beq.n	8008b16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f890 	bl	8008c34 <USBD_CtlError>
        break;
 8008b14:	e01a      	b.n	8008b4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d005      	beq.n	8008b32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f043 0202 	orr.w	r2, r3, #2
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	330c      	adds	r3, #12
 8008b36:	2202      	movs	r2, #2
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f8eb 	bl	8008d16 <USBD_CtlSendData>
      break;
 8008b40:	e004      	b.n	8008b4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f875 	bl	8008c34 <USBD_CtlError>
      break;
 8008b4a:	bf00      	nop
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	885b      	ldrh	r3, [r3, #2]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d106      	bne.n	8008b74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f92b 	bl	8008dca <USBD_CtlSendStatus>
  }
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d80b      	bhi.n	8008bac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	885b      	ldrh	r3, [r3, #2]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d10c      	bne.n	8008bb6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f910 	bl	8008dca <USBD_CtlSendStatus>
      }
      break;
 8008baa:	e004      	b.n	8008bb6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f840 	bl	8008c34 <USBD_CtlError>
      break;
 8008bb4:	e000      	b.n	8008bb8 <USBD_ClrFeature+0x3c>
      break;
 8008bb6:	bf00      	nop
  }
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	781a      	ldrb	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	781a      	ldrb	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f7ff fabb 	bl	8008166 <SWAPBYTE>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f7ff faae 	bl	8008166 <SWAPBYTE>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3301      	adds	r3, #1
 8008c16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f7ff faa1 	bl	8008166 <SWAPBYTE>
 8008c24:	4603      	mov	r3, r0
 8008c26:	461a      	mov	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	80da      	strh	r2, [r3, #6]
}
 8008c2c:	bf00      	nop
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c3e:	2180      	movs	r1, #128	; 0x80
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f004 fbe5 	bl	800d410 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c46:	2100      	movs	r1, #0
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f004 fbe1 	bl	800d410 <USBD_LL_StallEP>
}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b086      	sub	sp, #24
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d036      	beq.n	8008cda <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c70:	6938      	ldr	r0, [r7, #16]
 8008c72:	f000 f836 	bl	8008ce2 <USBD_GetLen>
 8008c76:	4603      	mov	r3, r0
 8008c78:	3301      	adds	r3, #1
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	4413      	add	r3, r2
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	7812      	ldrb	r2, [r2, #0]
 8008c8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	3301      	adds	r3, #1
 8008c94:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	2203      	movs	r2, #3
 8008c9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ca6:	e013      	b.n	8008cd0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4413      	add	r3, r2
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	7812      	ldrb	r2, [r2, #0]
 8008cb2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	613b      	str	r3, [r7, #16]
    idx++;
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	701a      	strb	r2, [r3, #0]
    idx++;
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1e7      	bne.n	8008ca8 <USBD_GetString+0x52>
 8008cd8:	e000      	b.n	8008cdc <USBD_GetString+0x86>
    return;
 8008cda:	bf00      	nop
  }
}
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b085      	sub	sp, #20
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008cf2:	e005      	b.n	8008d00 <USBD_GetLen+0x1e>
  {
    len++;
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1f5      	bne.n	8008cf4 <USBD_GetLen+0x12>
  }

  return len;
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b084      	sub	sp, #16
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	60b9      	str	r1, [r7, #8]
 8008d20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2202      	movs	r2, #2
 8008d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f004 fbf0 	bl	800d522 <USBD_LL_Transmit>

  return USBD_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f004 fbdf 	bl	800d522 <USBD_LL_Transmit>

  return USBD_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	60f8      	str	r0, [r7, #12]
 8008d76:	60b9      	str	r1, [r7, #8]
 8008d78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	2100      	movs	r1, #0
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f004 fbe3 	bl	800d564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	2100      	movs	r1, #0
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f004 fbd2 	bl	800d564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2204      	movs	r2, #4
 8008dd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008dda:	2300      	movs	r3, #0
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f004 fb9e 	bl	800d522 <USBD_LL_Transmit>

  return USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2205      	movs	r2, #5
 8008dfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e00:	2300      	movs	r3, #0
 8008e02:	2200      	movs	r2, #0
 8008e04:	2100      	movs	r1, #0
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f004 fbac 	bl	800d564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <__NVIC_SetPriority>:
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	6039      	str	r1, [r7, #0]
 8008e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	db0a      	blt.n	8008e42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	490c      	ldr	r1, [pc, #48]	; (8008e64 <__NVIC_SetPriority+0x4c>)
 8008e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e36:	0112      	lsls	r2, r2, #4
 8008e38:	b2d2      	uxtb	r2, r2
 8008e3a:	440b      	add	r3, r1
 8008e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e40:	e00a      	b.n	8008e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	4908      	ldr	r1, [pc, #32]	; (8008e68 <__NVIC_SetPriority+0x50>)
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	f003 030f 	and.w	r3, r3, #15
 8008e4e:	3b04      	subs	r3, #4
 8008e50:	0112      	lsls	r2, r2, #4
 8008e52:	b2d2      	uxtb	r2, r2
 8008e54:	440b      	add	r3, r1
 8008e56:	761a      	strb	r2, [r3, #24]
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	e000e100 	.word	0xe000e100
 8008e68:	e000ed00 	.word	0xe000ed00

08008e6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008e70:	4b05      	ldr	r3, [pc, #20]	; (8008e88 <SysTick_Handler+0x1c>)
 8008e72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008e74:	f002 fc96 	bl	800b7a4 <xTaskGetSchedulerState>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d001      	beq.n	8008e82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008e7e:	f003 fc3b 	bl	800c6f8 <xPortSysTickHandler>
  }
}
 8008e82:	bf00      	nop
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	e000e010 	.word	0xe000e010

08008e8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008e90:	2100      	movs	r1, #0
 8008e92:	f06f 0004 	mvn.w	r0, #4
 8008e96:	f7ff ffbf 	bl	8008e18 <__NVIC_SetPriority>
#endif
}
 8008e9a:	bf00      	nop
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ea6:	f3ef 8305 	mrs	r3, IPSR
 8008eaa:	603b      	str	r3, [r7, #0]
  return(result);
 8008eac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008eb2:	f06f 0305 	mvn.w	r3, #5
 8008eb6:	607b      	str	r3, [r7, #4]
 8008eb8:	e00c      	b.n	8008ed4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008eba:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <osKernelInitialize+0x44>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d105      	bne.n	8008ece <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ec2:	4b08      	ldr	r3, [pc, #32]	; (8008ee4 <osKernelInitialize+0x44>)
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	607b      	str	r3, [r7, #4]
 8008ecc:	e002      	b.n	8008ed4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ed2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ed4:	687b      	ldr	r3, [r7, #4]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	200005f8 	.word	0x200005f8

08008ee8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eee:	f3ef 8305 	mrs	r3, IPSR
 8008ef2:	603b      	str	r3, [r7, #0]
  return(result);
 8008ef4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008efa:	f06f 0305 	mvn.w	r3, #5
 8008efe:	607b      	str	r3, [r7, #4]
 8008f00:	e010      	b.n	8008f24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f02:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <osKernelStart+0x48>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d109      	bne.n	8008f1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f0a:	f7ff ffbf 	bl	8008e8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f0e:	4b08      	ldr	r3, [pc, #32]	; (8008f30 <osKernelStart+0x48>)
 8008f10:	2202      	movs	r2, #2
 8008f12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f14:	f001 fe58 	bl	800abc8 <vTaskStartScheduler>
      stat = osOK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	607b      	str	r3, [r7, #4]
 8008f1c:	e002      	b.n	8008f24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f24:	687b      	ldr	r3, [r7, #4]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	200005f8 	.word	0x200005f8

08008f34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08e      	sub	sp, #56	; 0x38
 8008f38:	af04      	add	r7, sp, #16
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f44:	f3ef 8305 	mrs	r3, IPSR
 8008f48:	617b      	str	r3, [r7, #20]
  return(result);
 8008f4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d17e      	bne.n	800904e <osThreadNew+0x11a>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d07b      	beq.n	800904e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008f56:	2380      	movs	r3, #128	; 0x80
 8008f58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f5a:	2318      	movs	r3, #24
 8008f5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d045      	beq.n	8008ffa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <osThreadNew+0x48>
        name = attr->name;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d008      	beq.n	8008fa2 <osThreadNew+0x6e>
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	2b38      	cmp	r3, #56	; 0x38
 8008f94:	d805      	bhi.n	8008fa2 <osThreadNew+0x6e>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <osThreadNew+0x72>
        return (NULL);
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e054      	b.n	8009050 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	089b      	lsrs	r3, r3, #2
 8008fb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00e      	beq.n	8008fdc <osThreadNew+0xa8>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	2bbf      	cmp	r3, #191	; 0xbf
 8008fc4:	d90a      	bls.n	8008fdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d006      	beq.n	8008fdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <osThreadNew+0xa8>
        mem = 1;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	61bb      	str	r3, [r7, #24]
 8008fda:	e010      	b.n	8008ffe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10c      	bne.n	8008ffe <osThreadNew+0xca>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d108      	bne.n	8008ffe <osThreadNew+0xca>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d104      	bne.n	8008ffe <osThreadNew+0xca>
          mem = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61bb      	str	r3, [r7, #24]
 8008ff8:	e001      	b.n	8008ffe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d110      	bne.n	8009026 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800900c:	9202      	str	r2, [sp, #8]
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	6a3a      	ldr	r2, [r7, #32]
 8009018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f001 fb7e 	bl	800a71c <xTaskCreateStatic>
 8009020:	4603      	mov	r3, r0
 8009022:	613b      	str	r3, [r7, #16]
 8009024:	e013      	b.n	800904e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d110      	bne.n	800904e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	b29a      	uxth	r2, r3
 8009030:	f107 0310 	add.w	r3, r7, #16
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f001 fbc9 	bl	800a7d6 <xTaskCreate>
 8009044:	4603      	mov	r3, r0
 8009046:	2b01      	cmp	r3, #1
 8009048:	d001      	beq.n	800904e <osThreadNew+0x11a>
            hTask = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800904e:	693b      	ldr	r3, [r7, #16]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3728      	adds	r7, #40	; 0x28
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009060:	f3ef 8305 	mrs	r3, IPSR
 8009064:	60bb      	str	r3, [r7, #8]
  return(result);
 8009066:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <osDelay+0x1c>
    stat = osErrorISR;
 800906c:	f06f 0305 	mvn.w	r3, #5
 8009070:	60fb      	str	r3, [r7, #12]
 8009072:	e007      	b.n	8009084 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009074:	2300      	movs	r3, #0
 8009076:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <osDelay+0x2c>
      vTaskDelay(ticks);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 fd08 	bl	800aa94 <vTaskDelay>
    }
  }

  return (stat);
 8009084:	68fb      	ldr	r3, [r7, #12]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800908e:	b580      	push	{r7, lr}
 8009090:	b08a      	sub	sp, #40	; 0x28
 8009092:	af02      	add	r7, sp, #8
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800909a:	2300      	movs	r3, #0
 800909c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800909e:	f3ef 8305 	mrs	r3, IPSR
 80090a2:	613b      	str	r3, [r7, #16]
  return(result);
 80090a4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d175      	bne.n	8009196 <osSemaphoreNew+0x108>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d072      	beq.n	8009196 <osSemaphoreNew+0x108>
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d86e      	bhi.n	8009196 <osSemaphoreNew+0x108>
    mem = -1;
 80090b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d015      	beq.n	80090f0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d006      	beq.n	80090da <osSemaphoreNew+0x4c>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	2b4f      	cmp	r3, #79	; 0x4f
 80090d2:	d902      	bls.n	80090da <osSemaphoreNew+0x4c>
        mem = 1;
 80090d4:	2301      	movs	r3, #1
 80090d6:	61bb      	str	r3, [r7, #24]
 80090d8:	e00c      	b.n	80090f4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d108      	bne.n	80090f4 <osSemaphoreNew+0x66>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d104      	bne.n	80090f4 <osSemaphoreNew+0x66>
          mem = 0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	61bb      	str	r3, [r7, #24]
 80090ee:	e001      	b.n	80090f4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090fa:	d04c      	beq.n	8009196 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d128      	bne.n	8009154 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d10a      	bne.n	800911e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	2203      	movs	r2, #3
 800910e:	9200      	str	r2, [sp, #0]
 8009110:	2200      	movs	r2, #0
 8009112:	2100      	movs	r1, #0
 8009114:	2001      	movs	r0, #1
 8009116:	f000 fb5b 	bl	80097d0 <xQueueGenericCreateStatic>
 800911a:	61f8      	str	r0, [r7, #28]
 800911c:	e005      	b.n	800912a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800911e:	2203      	movs	r2, #3
 8009120:	2100      	movs	r1, #0
 8009122:	2001      	movs	r0, #1
 8009124:	f000 fbcc 	bl	80098c0 <xQueueGenericCreate>
 8009128:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d022      	beq.n	8009176 <osSemaphoreNew+0xe8>
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d01f      	beq.n	8009176 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009136:	2300      	movs	r3, #0
 8009138:	2200      	movs	r2, #0
 800913a:	2100      	movs	r1, #0
 800913c:	69f8      	ldr	r0, [r7, #28]
 800913e:	f000 fc87 	bl	8009a50 <xQueueGenericSend>
 8009142:	4603      	mov	r3, r0
 8009144:	2b01      	cmp	r3, #1
 8009146:	d016      	beq.n	8009176 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009148:	69f8      	ldr	r0, [r7, #28]
 800914a:	f001 f913 	bl	800a374 <vQueueDelete>
            hSemaphore = NULL;
 800914e:	2300      	movs	r3, #0
 8009150:	61fb      	str	r3, [r7, #28]
 8009152:	e010      	b.n	8009176 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d108      	bne.n	800916c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	461a      	mov	r2, r3
 8009160:	68b9      	ldr	r1, [r7, #8]
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 fc09 	bl	800997a <xQueueCreateCountingSemaphoreStatic>
 8009168:	61f8      	str	r0, [r7, #28]
 800916a:	e004      	b.n	8009176 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800916c:	68b9      	ldr	r1, [r7, #8]
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 fc3a 	bl	80099e8 <xQueueCreateCountingSemaphore>
 8009174:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00c      	beq.n	8009196 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <osSemaphoreNew+0xfc>
          name = attr->name;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	e001      	b.n	800918e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800918a:	2300      	movs	r3, #0
 800918c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800918e:	6979      	ldr	r1, [r7, #20]
 8009190:	69f8      	ldr	r0, [r7, #28]
 8009192:	f001 fa3b 	bl	800a60c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009196:	69fb      	ldr	r3, [r7, #28]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3720      	adds	r7, #32
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d103      	bne.n	80091c0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80091b8:	f06f 0303 	mvn.w	r3, #3
 80091bc:	617b      	str	r3, [r7, #20]
 80091be:	e039      	b.n	8009234 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091c0:	f3ef 8305 	mrs	r3, IPSR
 80091c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80091c6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d022      	beq.n	8009212 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80091d2:	f06f 0303 	mvn.w	r3, #3
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	e02c      	b.n	8009234 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80091da:	2300      	movs	r3, #0
 80091dc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80091de:	f107 0308 	add.w	r3, r7, #8
 80091e2:	461a      	mov	r2, r3
 80091e4:	2100      	movs	r1, #0
 80091e6:	6938      	ldr	r0, [r7, #16]
 80091e8:	f001 f844 	bl	800a274 <xQueueReceiveFromISR>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d003      	beq.n	80091fa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80091f2:	f06f 0302 	mvn.w	r3, #2
 80091f6:	617b      	str	r3, [r7, #20]
 80091f8:	e01c      	b.n	8009234 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d019      	beq.n	8009234 <osSemaphoreAcquire+0x94>
 8009200:	4b0f      	ldr	r3, [pc, #60]	; (8009240 <osSemaphoreAcquire+0xa0>)
 8009202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009206:	601a      	str	r2, [r3, #0]
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	e010      	b.n	8009234 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6938      	ldr	r0, [r7, #16]
 8009216:	f000 ff21 	bl	800a05c <xQueueSemaphoreTake>
 800921a:	4603      	mov	r3, r0
 800921c:	2b01      	cmp	r3, #1
 800921e:	d009      	beq.n	8009234 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d003      	beq.n	800922e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009226:	f06f 0301 	mvn.w	r3, #1
 800922a:	617b      	str	r3, [r7, #20]
 800922c:	e002      	b.n	8009234 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800922e:	f06f 0302 	mvn.w	r3, #2
 8009232:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009234:	697b      	ldr	r3, [r7, #20]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	e000ed04 	.word	0xe000ed04

08009244 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009244:	b580      	push	{r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009250:	2300      	movs	r3, #0
 8009252:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d103      	bne.n	8009262 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800925a:	f06f 0303 	mvn.w	r3, #3
 800925e:	617b      	str	r3, [r7, #20]
 8009260:	e02c      	b.n	80092bc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009262:	f3ef 8305 	mrs	r3, IPSR
 8009266:	60fb      	str	r3, [r7, #12]
  return(result);
 8009268:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800926a:	2b00      	cmp	r3, #0
 800926c:	d01a      	beq.n	80092a4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800926e:	2300      	movs	r3, #0
 8009270:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009272:	f107 0308 	add.w	r3, r7, #8
 8009276:	4619      	mov	r1, r3
 8009278:	6938      	ldr	r0, [r7, #16]
 800927a:	f000 fd82 	bl	8009d82 <xQueueGiveFromISR>
 800927e:	4603      	mov	r3, r0
 8009280:	2b01      	cmp	r3, #1
 8009282:	d003      	beq.n	800928c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009284:	f06f 0302 	mvn.w	r3, #2
 8009288:	617b      	str	r3, [r7, #20]
 800928a:	e017      	b.n	80092bc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d014      	beq.n	80092bc <osSemaphoreRelease+0x78>
 8009292:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <osSemaphoreRelease+0x84>)
 8009294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009298:	601a      	str	r2, [r3, #0]
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	e00b      	b.n	80092bc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80092a4:	2300      	movs	r3, #0
 80092a6:	2200      	movs	r2, #0
 80092a8:	2100      	movs	r1, #0
 80092aa:	6938      	ldr	r0, [r7, #16]
 80092ac:	f000 fbd0 	bl	8009a50 <xQueueGenericSend>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d002      	beq.n	80092bc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80092b6:	f06f 0302 	mvn.w	r3, #2
 80092ba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80092bc:	697b      	ldr	r3, [r7, #20]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3718      	adds	r7, #24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	e000ed04 	.word	0xe000ed04

080092cc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08a      	sub	sp, #40	; 0x28
 80092d0:	af02      	add	r7, sp, #8
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80092d8:	2300      	movs	r3, #0
 80092da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092dc:	f3ef 8305 	mrs	r3, IPSR
 80092e0:	613b      	str	r3, [r7, #16]
  return(result);
 80092e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d15f      	bne.n	80093a8 <osMessageQueueNew+0xdc>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d05c      	beq.n	80093a8 <osMessageQueueNew+0xdc>
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d059      	beq.n	80093a8 <osMessageQueueNew+0xdc>
    mem = -1;
 80092f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d029      	beq.n	8009354 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d012      	beq.n	800932e <osMessageQueueNew+0x62>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	2b4f      	cmp	r3, #79	; 0x4f
 800930e:	d90e      	bls.n	800932e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00a      	beq.n	800932e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	695a      	ldr	r2, [r3, #20]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	68b9      	ldr	r1, [r7, #8]
 8009320:	fb01 f303 	mul.w	r3, r1, r3
 8009324:	429a      	cmp	r2, r3
 8009326:	d302      	bcc.n	800932e <osMessageQueueNew+0x62>
        mem = 1;
 8009328:	2301      	movs	r3, #1
 800932a:	61bb      	str	r3, [r7, #24]
 800932c:	e014      	b.n	8009358 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d110      	bne.n	8009358 <osMessageQueueNew+0x8c>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10c      	bne.n	8009358 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009342:	2b00      	cmp	r3, #0
 8009344:	d108      	bne.n	8009358 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d104      	bne.n	8009358 <osMessageQueueNew+0x8c>
          mem = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	61bb      	str	r3, [r7, #24]
 8009352:	e001      	b.n	8009358 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d10b      	bne.n	8009376 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	691a      	ldr	r2, [r3, #16]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	2100      	movs	r1, #0
 8009368:	9100      	str	r1, [sp, #0]
 800936a:	68b9      	ldr	r1, [r7, #8]
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f000 fa2f 	bl	80097d0 <xQueueGenericCreateStatic>
 8009372:	61f8      	str	r0, [r7, #28]
 8009374:	e008      	b.n	8009388 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d105      	bne.n	8009388 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800937c:	2200      	movs	r2, #0
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 fa9d 	bl	80098c0 <xQueueGenericCreate>
 8009386:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00c      	beq.n	80093a8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <osMessageQueueNew+0xd0>
        name = attr->name;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	617b      	str	r3, [r7, #20]
 800939a:	e001      	b.n	80093a0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800939c:	2300      	movs	r3, #0
 800939e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80093a0:	6979      	ldr	r1, [r7, #20]
 80093a2:	69f8      	ldr	r0, [r7, #28]
 80093a4:	f001 f932 	bl	800a60c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80093a8:	69fb      	ldr	r3, [r7, #28]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3720      	adds	r7, #32
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	4613      	mov	r3, r2
 80093c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093cc:	f3ef 8305 	mrs	r3, IPSR
 80093d0:	617b      	str	r3, [r7, #20]
  return(result);
 80093d2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d028      	beq.n	800942a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d005      	beq.n	80093ea <osMessageQueuePut+0x36>
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <osMessageQueuePut+0x36>
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80093ea:	f06f 0303 	mvn.w	r3, #3
 80093ee:	61fb      	str	r3, [r7, #28]
 80093f0:	e038      	b.n	8009464 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80093f2:	2300      	movs	r3, #0
 80093f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80093f6:	f107 0210 	add.w	r2, r7, #16
 80093fa:	2300      	movs	r3, #0
 80093fc:	68b9      	ldr	r1, [r7, #8]
 80093fe:	69b8      	ldr	r0, [r7, #24]
 8009400:	f000 fc24 	bl	8009c4c <xQueueGenericSendFromISR>
 8009404:	4603      	mov	r3, r0
 8009406:	2b01      	cmp	r3, #1
 8009408:	d003      	beq.n	8009412 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800940a:	f06f 0302 	mvn.w	r3, #2
 800940e:	61fb      	str	r3, [r7, #28]
 8009410:	e028      	b.n	8009464 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d025      	beq.n	8009464 <osMessageQueuePut+0xb0>
 8009418:	4b15      	ldr	r3, [pc, #84]	; (8009470 <osMessageQueuePut+0xbc>)
 800941a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800941e:	601a      	str	r2, [r3, #0]
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	e01c      	b.n	8009464 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <osMessageQueuePut+0x82>
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d103      	bne.n	800943e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009436:	f06f 0303 	mvn.w	r3, #3
 800943a:	61fb      	str	r3, [r7, #28]
 800943c:	e012      	b.n	8009464 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800943e:	2300      	movs	r3, #0
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	68b9      	ldr	r1, [r7, #8]
 8009444:	69b8      	ldr	r0, [r7, #24]
 8009446:	f000 fb03 	bl	8009a50 <xQueueGenericSend>
 800944a:	4603      	mov	r3, r0
 800944c:	2b01      	cmp	r3, #1
 800944e:	d009      	beq.n	8009464 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009456:	f06f 0301 	mvn.w	r3, #1
 800945a:	61fb      	str	r3, [r7, #28]
 800945c:	e002      	b.n	8009464 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800945e:	f06f 0302 	mvn.w	r3, #2
 8009462:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009464:	69fb      	ldr	r3, [r7, #28]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3720      	adds	r7, #32
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	e000ed04 	.word	0xe000ed04

08009474 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009474:	b580      	push	{r7, lr}
 8009476:	b088      	sub	sp, #32
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009486:	2300      	movs	r3, #0
 8009488:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800948a:	f3ef 8305 	mrs	r3, IPSR
 800948e:	617b      	str	r3, [r7, #20]
  return(result);
 8009490:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009492:	2b00      	cmp	r3, #0
 8009494:	d028      	beq.n	80094e8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d005      	beq.n	80094a8 <osMessageQueueGet+0x34>
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <osMessageQueueGet+0x34>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d003      	beq.n	80094b0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80094a8:	f06f 0303 	mvn.w	r3, #3
 80094ac:	61fb      	str	r3, [r7, #28]
 80094ae:	e037      	b.n	8009520 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80094b0:	2300      	movs	r3, #0
 80094b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80094b4:	f107 0310 	add.w	r3, r7, #16
 80094b8:	461a      	mov	r2, r3
 80094ba:	68b9      	ldr	r1, [r7, #8]
 80094bc:	69b8      	ldr	r0, [r7, #24]
 80094be:	f000 fed9 	bl	800a274 <xQueueReceiveFromISR>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d003      	beq.n	80094d0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80094c8:	f06f 0302 	mvn.w	r3, #2
 80094cc:	61fb      	str	r3, [r7, #28]
 80094ce:	e027      	b.n	8009520 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d024      	beq.n	8009520 <osMessageQueueGet+0xac>
 80094d6:	4b15      	ldr	r3, [pc, #84]	; (800952c <osMessageQueueGet+0xb8>)
 80094d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	e01b      	b.n	8009520 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <osMessageQueueGet+0x80>
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d103      	bne.n	80094fc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80094f4:	f06f 0303 	mvn.w	r3, #3
 80094f8:	61fb      	str	r3, [r7, #28]
 80094fa:	e011      	b.n	8009520 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	68b9      	ldr	r1, [r7, #8]
 8009500:	69b8      	ldr	r0, [r7, #24]
 8009502:	f000 fccb 	bl	8009e9c <xQueueReceive>
 8009506:	4603      	mov	r3, r0
 8009508:	2b01      	cmp	r3, #1
 800950a:	d009      	beq.n	8009520 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009512:	f06f 0301 	mvn.w	r3, #1
 8009516:	61fb      	str	r3, [r7, #28]
 8009518:	e002      	b.n	8009520 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800951a:	f06f 0302 	mvn.w	r3, #2
 800951e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009520:	69fb      	ldr	r3, [r7, #28]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3720      	adds	r7, #32
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	e000ed04 	.word	0xe000ed04

08009530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	4a07      	ldr	r2, [pc, #28]	; (800955c <vApplicationGetIdleTaskMemory+0x2c>)
 8009540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	4a06      	ldr	r2, [pc, #24]	; (8009560 <vApplicationGetIdleTaskMemory+0x30>)
 8009546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2280      	movs	r2, #128	; 0x80
 800954c:	601a      	str	r2, [r3, #0]
}
 800954e:	bf00      	nop
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	200005fc 	.word	0x200005fc
 8009560:	200006bc 	.word	0x200006bc

08009564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4a07      	ldr	r2, [pc, #28]	; (8009590 <vApplicationGetTimerTaskMemory+0x2c>)
 8009574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	4a06      	ldr	r2, [pc, #24]	; (8009594 <vApplicationGetTimerTaskMemory+0x30>)
 800957a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009582:	601a      	str	r2, [r3, #0]
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	200008bc 	.word	0x200008bc
 8009594:	2000097c 	.word	0x2000097c

08009598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f103 0208 	add.w	r2, r3, #8
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f103 0208 	add.w	r2, r3, #8
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f103 0208 	add.w	r2, r3, #8
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095e6:	bf00      	nop
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
}
 800962e:	bf00      	nop
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800963a:	b480      	push	{r7}
 800963c:	b085      	sub	sp, #20
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009650:	d103      	bne.n	800965a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	e00c      	b.n	8009674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3308      	adds	r3, #8
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	e002      	b.n	8009668 <vListInsert+0x2e>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	60fb      	str	r3, [r7, #12]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	429a      	cmp	r2, r3
 8009672:	d2f6      	bcs.n	8009662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	601a      	str	r2, [r3, #0]
}
 80096a0:	bf00      	nop
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	6892      	ldr	r2, [r2, #8]
 80096c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	6852      	ldr	r2, [r2, #4]
 80096cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d103      	bne.n	80096e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	1e5a      	subs	r2, r3, #1
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10a      	bne.n	800972a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009726:	bf00      	nop
 8009728:	e7fe      	b.n	8009728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800972a:	f002 ff53 	bl	800c5d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009736:	68f9      	ldr	r1, [r7, #12]
 8009738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800973a:	fb01 f303 	mul.w	r3, r1, r3
 800973e:	441a      	add	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975a:	3b01      	subs	r3, #1
 800975c:	68f9      	ldr	r1, [r7, #12]
 800975e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009760:	fb01 f303 	mul.w	r3, r1, r3
 8009764:	441a      	add	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	22ff      	movs	r2, #255	; 0xff
 800976e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	22ff      	movs	r2, #255	; 0xff
 8009776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d114      	bne.n	80097aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d01a      	beq.n	80097be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	3310      	adds	r3, #16
 800978c:	4618      	mov	r0, r3
 800978e:	f001 fd73 	bl	800b278 <xTaskRemoveFromEventList>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d012      	beq.n	80097be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009798:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <xQueueGenericReset+0xcc>)
 800979a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800979e:	601a      	str	r2, [r3, #0]
 80097a0:	f3bf 8f4f 	dsb	sy
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	e009      	b.n	80097be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3310      	adds	r3, #16
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff fef2 	bl	8009598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3324      	adds	r3, #36	; 0x24
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff feed 	bl	8009598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80097be:	f002 ff39 	bl	800c634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80097c2:	2301      	movs	r3, #1
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	e000ed04 	.word	0xe000ed04

080097d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08e      	sub	sp, #56	; 0x38
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097f6:	bf00      	nop
 80097f8:	e7fe      	b.n	80097f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10a      	bne.n	8009816 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <xQueueGenericCreateStatic+0x52>
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <xQueueGenericCreateStatic+0x56>
 8009822:	2301      	movs	r3, #1
 8009824:	e000      	b.n	8009828 <xQueueGenericCreateStatic+0x58>
 8009826:	2300      	movs	r3, #0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10a      	bne.n	8009842 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	623b      	str	r3, [r7, #32]
}
 800983e:	bf00      	nop
 8009840:	e7fe      	b.n	8009840 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <xQueueGenericCreateStatic+0x7e>
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <xQueueGenericCreateStatic+0x82>
 800984e:	2301      	movs	r3, #1
 8009850:	e000      	b.n	8009854 <xQueueGenericCreateStatic+0x84>
 8009852:	2300      	movs	r3, #0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10a      	bne.n	800986e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	61fb      	str	r3, [r7, #28]
}
 800986a:	bf00      	nop
 800986c:	e7fe      	b.n	800986c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800986e:	2350      	movs	r3, #80	; 0x50
 8009870:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b50      	cmp	r3, #80	; 0x50
 8009876:	d00a      	beq.n	800988e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	61bb      	str	r3, [r7, #24]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800988e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00d      	beq.n	80098b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800989a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80098a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80098a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	4613      	mov	r3, r2
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 f83f 	bl	8009934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3730      	adds	r7, #48	; 0x30
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b08a      	sub	sp, #40	; 0x28
 80098c4:	af02      	add	r7, sp, #8
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10a      	bne.n	80098ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	613b      	str	r3, [r7, #16]
}
 80098e6:	bf00      	nop
 80098e8:	e7fe      	b.n	80098e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	fb02 f303 	mul.w	r3, r2, r3
 80098f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	3350      	adds	r3, #80	; 0x50
 80098f8:	4618      	mov	r0, r3
 80098fa:	f002 ff8d 	bl	800c818 <pvPortMalloc>
 80098fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d011      	beq.n	800992a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	3350      	adds	r3, #80	; 0x50
 800990e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009918:	79fa      	ldrb	r2, [r7, #7]
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	4613      	mov	r3, r2
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	68b9      	ldr	r1, [r7, #8]
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 f805 	bl	8009934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800992a:	69bb      	ldr	r3, [r7, #24]
	}
 800992c:	4618      	mov	r0, r3
 800992e:	3720      	adds	r7, #32
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d103      	bne.n	8009950 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	69ba      	ldr	r2, [r7, #24]
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	e002      	b.n	8009956 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009962:	2101      	movs	r1, #1
 8009964:	69b8      	ldr	r0, [r7, #24]
 8009966:	f7ff fecb 	bl	8009700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	78fa      	ldrb	r2, [r7, #3]
 800996e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800997a:	b580      	push	{r7, lr}
 800997c:	b08a      	sub	sp, #40	; 0x28
 800997e:	af02      	add	r7, sp, #8
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10a      	bne.n	80099a2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	61bb      	str	r3, [r7, #24]
}
 800999e:	bf00      	nop
 80099a0:	e7fe      	b.n	80099a0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d90a      	bls.n	80099c0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	617b      	str	r3, [r7, #20]
}
 80099bc:	bf00      	nop
 80099be:	e7fe      	b.n	80099be <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80099c0:	2302      	movs	r3, #2
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	2100      	movs	r1, #0
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f7ff ff00 	bl	80097d0 <xQueueGenericCreateStatic>
 80099d0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80099de:	69fb      	ldr	r3, [r7, #28]
	}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3720      	adds	r7, #32
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10a      	bne.n	8009a0e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	613b      	str	r3, [r7, #16]
}
 8009a0a:	bf00      	nop
 8009a0c:	e7fe      	b.n	8009a0c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d90a      	bls.n	8009a2c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	60fb      	str	r3, [r7, #12]
}
 8009a28:	bf00      	nop
 8009a2a:	e7fe      	b.n	8009a2a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	2100      	movs	r1, #0
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff ff45 	bl	80098c0 <xQueueGenericCreate>
 8009a36:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009a44:	697b      	ldr	r3, [r7, #20]
	}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
	...

08009a50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08e      	sub	sp, #56	; 0x38
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10a      	bne.n	8009a82 <xQueueGenericSend+0x32>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a7e:	bf00      	nop
 8009a80:	e7fe      	b.n	8009a80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d103      	bne.n	8009a90 <xQueueGenericSend+0x40>
 8009a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <xQueueGenericSend+0x44>
 8009a90:	2301      	movs	r3, #1
 8009a92:	e000      	b.n	8009a96 <xQueueGenericSend+0x46>
 8009a94:	2300      	movs	r3, #0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10a      	bne.n	8009ab0 <xQueueGenericSend+0x60>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009aac:	bf00      	nop
 8009aae:	e7fe      	b.n	8009aae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d103      	bne.n	8009abe <xQueueGenericSend+0x6e>
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d101      	bne.n	8009ac2 <xQueueGenericSend+0x72>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e000      	b.n	8009ac4 <xQueueGenericSend+0x74>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <xQueueGenericSend+0x8e>
	__asm volatile
 8009ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	623b      	str	r3, [r7, #32]
}
 8009ada:	bf00      	nop
 8009adc:	e7fe      	b.n	8009adc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ade:	f001 fe61 	bl	800b7a4 <xTaskGetSchedulerState>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d102      	bne.n	8009aee <xQueueGenericSend+0x9e>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <xQueueGenericSend+0xa2>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e000      	b.n	8009af4 <xQueueGenericSend+0xa4>
 8009af2:	2300      	movs	r3, #0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10a      	bne.n	8009b0e <xQueueGenericSend+0xbe>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	61fb      	str	r3, [r7, #28]
}
 8009b0a:	bf00      	nop
 8009b0c:	e7fe      	b.n	8009b0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b0e:	f002 fd61 	bl	800c5d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d302      	bcc.n	8009b24 <xQueueGenericSend+0xd4>
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d129      	bne.n	8009b78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	68b9      	ldr	r1, [r7, #8]
 8009b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b2a:	f000 fc5e 	bl	800a3ea <prvCopyDataToQueue>
 8009b2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d010      	beq.n	8009b5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	3324      	adds	r3, #36	; 0x24
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f001 fb9b 	bl	800b278 <xTaskRemoveFromEventList>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d013      	beq.n	8009b70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009b48:	4b3f      	ldr	r3, [pc, #252]	; (8009c48 <xQueueGenericSend+0x1f8>)
 8009b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	e00a      	b.n	8009b70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d007      	beq.n	8009b70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b60:	4b39      	ldr	r3, [pc, #228]	; (8009c48 <xQueueGenericSend+0x1f8>)
 8009b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b66:	601a      	str	r2, [r3, #0]
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009b70:	f002 fd60 	bl	800c634 <vPortExitCritical>
				return pdPASS;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e063      	b.n	8009c40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d103      	bne.n	8009b86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b7e:	f002 fd59 	bl	800c634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	e05c      	b.n	8009c40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d106      	bne.n	8009b9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b8c:	f107 0314 	add.w	r3, r7, #20
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 fbd5 	bl	800b340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b96:	2301      	movs	r3, #1
 8009b98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b9a:	f002 fd4b 	bl	800c634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b9e:	f001 f885 	bl	800acac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ba2:	f002 fd17 	bl	800c5d4 <vPortEnterCritical>
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bac:	b25b      	sxtb	r3, r3
 8009bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bb2:	d103      	bne.n	8009bbc <xQueueGenericSend+0x16c>
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bc2:	b25b      	sxtb	r3, r3
 8009bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bc8:	d103      	bne.n	8009bd2 <xQueueGenericSend+0x182>
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bd2:	f002 fd2f 	bl	800c634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bd6:	1d3a      	adds	r2, r7, #4
 8009bd8:	f107 0314 	add.w	r3, r7, #20
 8009bdc:	4611      	mov	r1, r2
 8009bde:	4618      	mov	r0, r3
 8009be0:	f001 fbc4 	bl	800b36c <xTaskCheckForTimeOut>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d124      	bne.n	8009c34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009bea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bec:	f000 fcf5 	bl	800a5da <prvIsQueueFull>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d018      	beq.n	8009c28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	3310      	adds	r3, #16
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f001 faea 	bl	800b1d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c06:	f000 fc80 	bl	800a50a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c0a:	f001 f85d 	bl	800acc8 <xTaskResumeAll>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f47f af7c 	bne.w	8009b0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009c16:	4b0c      	ldr	r3, [pc, #48]	; (8009c48 <xQueueGenericSend+0x1f8>)
 8009c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c1c:	601a      	str	r2, [r3, #0]
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	e772      	b.n	8009b0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c2a:	f000 fc6e 	bl	800a50a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c2e:	f001 f84b 	bl	800acc8 <xTaskResumeAll>
 8009c32:	e76c      	b.n	8009b0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c36:	f000 fc68 	bl	800a50a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c3a:	f001 f845 	bl	800acc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009c3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3738      	adds	r7, #56	; 0x38
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	e000ed04 	.word	0xe000ed04

08009c4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b090      	sub	sp, #64	; 0x40
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10a      	bne.n	8009c7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d103      	bne.n	8009c88 <xQueueGenericSendFromISR+0x3c>
 8009c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d101      	bne.n	8009c8c <xQueueGenericSendFromISR+0x40>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e000      	b.n	8009c8e <xQueueGenericSendFromISR+0x42>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ca4:	bf00      	nop
 8009ca6:	e7fe      	b.n	8009ca6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d103      	bne.n	8009cb6 <xQueueGenericSendFromISR+0x6a>
 8009cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d101      	bne.n	8009cba <xQueueGenericSendFromISR+0x6e>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e000      	b.n	8009cbc <xQueueGenericSendFromISR+0x70>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10a      	bne.n	8009cd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	623b      	str	r3, [r7, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	e7fe      	b.n	8009cd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cd6:	f002 fd5f 	bl	800c798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009cda:	f3ef 8211 	mrs	r2, BASEPRI
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	61fa      	str	r2, [r7, #28]
 8009cf0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009cf2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009cf4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d302      	bcc.n	8009d08 <xQueueGenericSendFromISR+0xbc>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d12f      	bne.n	8009d68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	68b9      	ldr	r1, [r7, #8]
 8009d1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d1e:	f000 fb64 	bl	800a3ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d2a:	d112      	bne.n	8009d52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d016      	beq.n	8009d62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	3324      	adds	r3, #36	; 0x24
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 fa9d 	bl	800b278 <xTaskRemoveFromEventList>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00e      	beq.n	8009d62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00b      	beq.n	8009d62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	e007      	b.n	8009d62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d56:	3301      	adds	r3, #1
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	b25a      	sxtb	r2, r3
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d62:	2301      	movs	r3, #1
 8009d64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009d66:	e001      	b.n	8009d6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3740      	adds	r7, #64	; 0x40
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b08e      	sub	sp, #56	; 0x38
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10a      	bne.n	8009dac <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	623b      	str	r3, [r7, #32]
}
 8009da8:	bf00      	nop
 8009daa:	e7fe      	b.n	8009daa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00a      	beq.n	8009dca <xQueueGiveFromISR+0x48>
	__asm volatile
 8009db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	61fb      	str	r3, [r7, #28]
}
 8009dc6:	bf00      	nop
 8009dc8:	e7fe      	b.n	8009dc8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d103      	bne.n	8009dda <xQueueGiveFromISR+0x58>
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <xQueueGiveFromISR+0x5c>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <xQueueGiveFromISR+0x5e>
 8009dde:	2300      	movs	r3, #0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10a      	bne.n	8009dfa <xQueueGiveFromISR+0x78>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	61bb      	str	r3, [r7, #24]
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dfa:	f002 fccd 	bl	800c798 <vPortValidateInterruptPriority>
	__asm volatile
 8009dfe:	f3ef 8211 	mrs	r2, BASEPRI
 8009e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	617a      	str	r2, [r7, #20]
 8009e14:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009e16:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d22b      	bcs.n	8009e82 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e44:	d112      	bne.n	8009e6c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d016      	beq.n	8009e7c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e50:	3324      	adds	r3, #36	; 0x24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 fa10 	bl	800b278 <xTaskRemoveFromEventList>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00e      	beq.n	8009e7c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2201      	movs	r2, #1
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	e007      	b.n	8009e7c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e70:	3301      	adds	r3, #1
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	b25a      	sxtb	r2, r3
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e80:	e001      	b.n	8009e86 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e82:	2300      	movs	r3, #0
 8009e84:	637b      	str	r3, [r7, #52]	; 0x34
 8009e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e88:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f383 8811 	msr	BASEPRI, r3
}
 8009e90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3738      	adds	r7, #56	; 0x38
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08c      	sub	sp, #48	; 0x30
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10a      	bne.n	8009ecc <xQueueReceive+0x30>
	__asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	623b      	str	r3, [r7, #32]
}
 8009ec8:	bf00      	nop
 8009eca:	e7fe      	b.n	8009eca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d103      	bne.n	8009eda <xQueueReceive+0x3e>
 8009ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <xQueueReceive+0x42>
 8009eda:	2301      	movs	r3, #1
 8009edc:	e000      	b.n	8009ee0 <xQueueReceive+0x44>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <xQueueReceive+0x5e>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	61fb      	str	r3, [r7, #28]
}
 8009ef6:	bf00      	nop
 8009ef8:	e7fe      	b.n	8009ef8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009efa:	f001 fc53 	bl	800b7a4 <xTaskGetSchedulerState>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d102      	bne.n	8009f0a <xQueueReceive+0x6e>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <xQueueReceive+0x72>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e000      	b.n	8009f10 <xQueueReceive+0x74>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <xQueueReceive+0x8e>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	61bb      	str	r3, [r7, #24]
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f2a:	f002 fb53 	bl	800c5d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d01f      	beq.n	8009f7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f3e:	f000 fabe 	bl	800a4be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	1e5a      	subs	r2, r3, #1
 8009f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00f      	beq.n	8009f72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f54:	3310      	adds	r3, #16
 8009f56:	4618      	mov	r0, r3
 8009f58:	f001 f98e 	bl	800b278 <xTaskRemoveFromEventList>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d007      	beq.n	8009f72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f62:	4b3d      	ldr	r3, [pc, #244]	; (800a058 <xQueueReceive+0x1bc>)
 8009f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f72:	f002 fb5f 	bl	800c634 <vPortExitCritical>
				return pdPASS;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e069      	b.n	800a04e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d103      	bne.n	8009f88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f80:	f002 fb58 	bl	800c634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f84:	2300      	movs	r3, #0
 8009f86:	e062      	b.n	800a04e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d106      	bne.n	8009f9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f8e:	f107 0310 	add.w	r3, r7, #16
 8009f92:	4618      	mov	r0, r3
 8009f94:	f001 f9d4 	bl	800b340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f9c:	f002 fb4a 	bl	800c634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fa0:	f000 fe84 	bl	800acac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fa4:	f002 fb16 	bl	800c5d4 <vPortEnterCritical>
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fae:	b25b      	sxtb	r3, r3
 8009fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fb4:	d103      	bne.n	8009fbe <xQueueReceive+0x122>
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fc4:	b25b      	sxtb	r3, r3
 8009fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fca:	d103      	bne.n	8009fd4 <xQueueReceive+0x138>
 8009fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fd4:	f002 fb2e 	bl	800c634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fd8:	1d3a      	adds	r2, r7, #4
 8009fda:	f107 0310 	add.w	r3, r7, #16
 8009fde:	4611      	mov	r1, r2
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f001 f9c3 	bl	800b36c <xTaskCheckForTimeOut>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d123      	bne.n	800a034 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fee:	f000 fade 	bl	800a5ae <prvIsQueueEmpty>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d017      	beq.n	800a028 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	3324      	adds	r3, #36	; 0x24
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	4611      	mov	r1, r2
 800a000:	4618      	mov	r0, r3
 800a002:	f001 f8e9 	bl	800b1d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a008:	f000 fa7f 	bl	800a50a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a00c:	f000 fe5c 	bl	800acc8 <xTaskResumeAll>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d189      	bne.n	8009f2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a016:	4b10      	ldr	r3, [pc, #64]	; (800a058 <xQueueReceive+0x1bc>)
 800a018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	e780      	b.n	8009f2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a02a:	f000 fa6e 	bl	800a50a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a02e:	f000 fe4b 	bl	800acc8 <xTaskResumeAll>
 800a032:	e77a      	b.n	8009f2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a036:	f000 fa68 	bl	800a50a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a03a:	f000 fe45 	bl	800acc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a03e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a040:	f000 fab5 	bl	800a5ae <prvIsQueueEmpty>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	f43f af6f 	beq.w	8009f2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a04c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3730      	adds	r7, #48	; 0x30
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08e      	sub	sp, #56	; 0x38
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a066:	2300      	movs	r3, #0
 800a068:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a06e:	2300      	movs	r3, #0
 800a070:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10a      	bne.n	800a08e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	623b      	str	r3, [r7, #32]
}
 800a08a:	bf00      	nop
 800a08c:	e7fe      	b.n	800a08c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00a      	beq.n	800a0ac <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	61fb      	str	r3, [r7, #28]
}
 800a0a8:	bf00      	nop
 800a0aa:	e7fe      	b.n	800a0aa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0ac:	f001 fb7a 	bl	800b7a4 <xTaskGetSchedulerState>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d102      	bne.n	800a0bc <xQueueSemaphoreTake+0x60>
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <xQueueSemaphoreTake+0x64>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e000      	b.n	800a0c2 <xQueueSemaphoreTake+0x66>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10a      	bne.n	800a0dc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	61bb      	str	r3, [r7, #24]
}
 800a0d8:	bf00      	nop
 800a0da:	e7fe      	b.n	800a0da <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0dc:	f002 fa7a 	bl	800c5d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d024      	beq.n	800a136 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	1e5a      	subs	r2, r3, #1
 800a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d104      	bne.n	800a106 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a0fc:	f001 fd84 	bl	800bc08 <pvTaskIncrementMutexHeldCount>
 800a100:	4602      	mov	r2, r0
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00f      	beq.n	800a12e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a110:	3310      	adds	r3, #16
 800a112:	4618      	mov	r0, r3
 800a114:	f001 f8b0 	bl	800b278 <xTaskRemoveFromEventList>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d007      	beq.n	800a12e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a11e:	4b54      	ldr	r3, [pc, #336]	; (800a270 <xQueueSemaphoreTake+0x214>)
 800a120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a12e:	f002 fa81 	bl	800c634 <vPortExitCritical>
				return pdPASS;
 800a132:	2301      	movs	r3, #1
 800a134:	e097      	b.n	800a266 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d111      	bne.n	800a160 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	617b      	str	r3, [r7, #20]
}
 800a154:	bf00      	nop
 800a156:	e7fe      	b.n	800a156 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a158:	f002 fa6c 	bl	800c634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a15c:	2300      	movs	r3, #0
 800a15e:	e082      	b.n	800a266 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a166:	f107 030c 	add.w	r3, r7, #12
 800a16a:	4618      	mov	r0, r3
 800a16c:	f001 f8e8 	bl	800b340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a170:	2301      	movs	r3, #1
 800a172:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a174:	f002 fa5e 	bl	800c634 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a178:	f000 fd98 	bl	800acac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a17c:	f002 fa2a 	bl	800c5d4 <vPortEnterCritical>
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a186:	b25b      	sxtb	r3, r3
 800a188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a18c:	d103      	bne.n	800a196 <xQueueSemaphoreTake+0x13a>
 800a18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a190:	2200      	movs	r2, #0
 800a192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a19c:	b25b      	sxtb	r3, r3
 800a19e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1a2:	d103      	bne.n	800a1ac <xQueueSemaphoreTake+0x150>
 800a1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1ac:	f002 fa42 	bl	800c634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1b0:	463a      	mov	r2, r7
 800a1b2:	f107 030c 	add.w	r3, r7, #12
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f001 f8d7 	bl	800b36c <xTaskCheckForTimeOut>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d132      	bne.n	800a22a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1c6:	f000 f9f2 	bl	800a5ae <prvIsQueueEmpty>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d026      	beq.n	800a21e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d109      	bne.n	800a1ec <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a1d8:	f002 f9fc 	bl	800c5d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f001 fafd 	bl	800b7e0 <xTaskPriorityInherit>
 800a1e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a1e8:	f002 fa24 	bl	800c634 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ee:	3324      	adds	r3, #36	; 0x24
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f000 ffef 	bl	800b1d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1fc:	f000 f985 	bl	800a50a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a200:	f000 fd62 	bl	800acc8 <xTaskResumeAll>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	f47f af68 	bne.w	800a0dc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a20c:	4b18      	ldr	r3, [pc, #96]	; (800a270 <xQueueSemaphoreTake+0x214>)
 800a20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	e75e      	b.n	800a0dc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a21e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a220:	f000 f973 	bl	800a50a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a224:	f000 fd50 	bl	800acc8 <xTaskResumeAll>
 800a228:	e758      	b.n	800a0dc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a22a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a22c:	f000 f96d 	bl	800a50a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a230:	f000 fd4a 	bl	800acc8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a236:	f000 f9ba 	bl	800a5ae <prvIsQueueEmpty>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f43f af4d 	beq.w	800a0dc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00d      	beq.n	800a264 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a248:	f002 f9c4 	bl	800c5d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a24c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a24e:	f000 f8b4 	bl	800a3ba <prvGetDisinheritPriorityAfterTimeout>
 800a252:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a25a:	4618      	mov	r0, r3
 800a25c:	f001 fb96 	bl	800b98c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a260:	f002 f9e8 	bl	800c634 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a264:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a266:	4618      	mov	r0, r3
 800a268:	3738      	adds	r7, #56	; 0x38
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	e000ed04 	.word	0xe000ed04

0800a274 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08e      	sub	sp, #56	; 0x38
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a286:	2b00      	cmp	r3, #0
 800a288:	d10a      	bne.n	800a2a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	623b      	str	r3, [r7, #32]
}
 800a29c:	bf00      	nop
 800a29e:	e7fe      	b.n	800a29e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d103      	bne.n	800a2ae <xQueueReceiveFromISR+0x3a>
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <xQueueReceiveFromISR+0x3e>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <xQueueReceiveFromISR+0x40>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10a      	bne.n	800a2ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	61fb      	str	r3, [r7, #28]
}
 800a2ca:	bf00      	nop
 800a2cc:	e7fe      	b.n	800a2cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2ce:	f002 fa63 	bl	800c798 <vPortValidateInterruptPriority>
	__asm volatile
 800a2d2:	f3ef 8211 	mrs	r2, BASEPRI
 800a2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	61ba      	str	r2, [r7, #24]
 800a2e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a2ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d02f      	beq.n	800a35a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a304:	68b9      	ldr	r1, [r7, #8]
 800a306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a308:	f000 f8d9 	bl	800a4be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	1e5a      	subs	r2, r3, #1
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a314:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a31c:	d112      	bne.n	800a344 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d016      	beq.n	800a354 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a328:	3310      	adds	r3, #16
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 ffa4 	bl	800b278 <xTaskRemoveFromEventList>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00e      	beq.n	800a354 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00b      	beq.n	800a354 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	e007      	b.n	800a354 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a348:	3301      	adds	r3, #1
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	b25a      	sxtb	r2, r3
 800a34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a354:	2301      	movs	r3, #1
 800a356:	637b      	str	r3, [r7, #52]	; 0x34
 800a358:	e001      	b.n	800a35e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a35a:	2300      	movs	r3, #0
 800a35c:	637b      	str	r3, [r7, #52]	; 0x34
 800a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a360:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	f383 8811 	msr	BASEPRI, r3
}
 800a368:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3738      	adds	r7, #56	; 0x38
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10a      	bne.n	800a39c <vQueueDelete+0x28>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	60bb      	str	r3, [r7, #8]
}
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 f95f 	bl	800a660 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d102      	bne.n	800a3b2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f002 faff 	bl	800c9b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a3b2:	bf00      	nop
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b085      	sub	sp, #20
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d006      	beq.n	800a3d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a3d4:	60fb      	str	r3, [r7, #12]
 800a3d6:	e001      	b.n	800a3dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
	}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b086      	sub	sp, #24
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	60f8      	str	r0, [r7, #12]
 800a3f2:	60b9      	str	r1, [r7, #8]
 800a3f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10d      	bne.n	800a424 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d14d      	bne.n	800a4ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	4618      	mov	r0, r3
 800a416:	f001 fa4b 	bl	800b8b0 <xTaskPriorityDisinherit>
 800a41a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	609a      	str	r2, [r3, #8]
 800a422:	e043      	b.n	800a4ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d119      	bne.n	800a45e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6858      	ldr	r0, [r3, #4]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a432:	461a      	mov	r2, r3
 800a434:	68b9      	ldr	r1, [r7, #8]
 800a436:	f003 f953 	bl	800d6e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	441a      	add	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	429a      	cmp	r2, r3
 800a452:	d32b      	bcc.n	800a4ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	605a      	str	r2, [r3, #4]
 800a45c:	e026      	b.n	800a4ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	68d8      	ldr	r0, [r3, #12]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a466:	461a      	mov	r2, r3
 800a468:	68b9      	ldr	r1, [r7, #8]
 800a46a:	f003 f939 	bl	800d6e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	68da      	ldr	r2, [r3, #12]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a476:	425b      	negs	r3, r3
 800a478:	441a      	add	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d207      	bcs.n	800a49a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	689a      	ldr	r2, [r3, #8]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a492:	425b      	negs	r3, r3
 800a494:	441a      	add	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d105      	bne.n	800a4ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	1c5a      	adds	r2, r3, #1
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a4b4:	697b      	ldr	r3, [r7, #20]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3718      	adds	r7, #24
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d018      	beq.n	800a502 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68da      	ldr	r2, [r3, #12]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d8:	441a      	add	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d303      	bcc.n	800a4f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68d9      	ldr	r1, [r3, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	6838      	ldr	r0, [r7, #0]
 800a4fe:	f003 f8ef 	bl	800d6e0 <memcpy>
	}
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a512:	f002 f85f 	bl	800c5d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a51c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a51e:	e011      	b.n	800a544 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	2b00      	cmp	r3, #0
 800a526:	d012      	beq.n	800a54e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3324      	adds	r3, #36	; 0x24
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 fea3 	bl	800b278 <xTaskRemoveFromEventList>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a538:	f000 ff7a 	bl	800b430 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
 800a53e:	3b01      	subs	r3, #1
 800a540:	b2db      	uxtb	r3, r3
 800a542:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	dce9      	bgt.n	800a520 <prvUnlockQueue+0x16>
 800a54c:	e000      	b.n	800a550 <prvUnlockQueue+0x46>
					break;
 800a54e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	22ff      	movs	r2, #255	; 0xff
 800a554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a558:	f002 f86c 	bl	800c634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a55c:	f002 f83a 	bl	800c5d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a566:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a568:	e011      	b.n	800a58e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d012      	beq.n	800a598 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	3310      	adds	r3, #16
 800a576:	4618      	mov	r0, r3
 800a578:	f000 fe7e 	bl	800b278 <xTaskRemoveFromEventList>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a582:	f000 ff55 	bl	800b430 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a586:	7bbb      	ldrb	r3, [r7, #14]
 800a588:	3b01      	subs	r3, #1
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a58e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a592:	2b00      	cmp	r3, #0
 800a594:	dce9      	bgt.n	800a56a <prvUnlockQueue+0x60>
 800a596:	e000      	b.n	800a59a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a598:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	22ff      	movs	r2, #255	; 0xff
 800a59e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a5a2:	f002 f847 	bl	800c634 <vPortExitCritical>
}
 800a5a6:	bf00      	nop
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a5b6:	f002 f80d 	bl	800c5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d102      	bne.n	800a5c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	e001      	b.n	800a5cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5cc:	f002 f832 	bl	800c634 <vPortExitCritical>

	return xReturn;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a5e2:	f001 fff7 	bl	800c5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d102      	bne.n	800a5f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	e001      	b.n	800a5fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5fc:	f002 f81a 	bl	800c634 <vPortExitCritical>

	return xReturn;
 800a600:	68fb      	ldr	r3, [r7, #12]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	e014      	b.n	800a646 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a61c:	4a0f      	ldr	r2, [pc, #60]	; (800a65c <vQueueAddToRegistry+0x50>)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10b      	bne.n	800a640 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a628:	490c      	ldr	r1, [pc, #48]	; (800a65c <vQueueAddToRegistry+0x50>)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a632:	4a0a      	ldr	r2, [pc, #40]	; (800a65c <vQueueAddToRegistry+0x50>)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	4413      	add	r3, r2
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a63e:	e006      	b.n	800a64e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3301      	adds	r3, #1
 800a644:	60fb      	str	r3, [r7, #12]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2b07      	cmp	r3, #7
 800a64a:	d9e7      	bls.n	800a61c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a64c:	bf00      	nop
 800a64e:	bf00      	nop
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20006a14 	.word	0x20006a14

0800a660 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a668:	2300      	movs	r3, #0
 800a66a:	60fb      	str	r3, [r7, #12]
 800a66c:	e016      	b.n	800a69c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a66e:	4a10      	ldr	r2, [pc, #64]	; (800a6b0 <vQueueUnregisterQueue+0x50>)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	00db      	lsls	r3, r3, #3
 800a674:	4413      	add	r3, r2
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d10b      	bne.n	800a696 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a67e:	4a0c      	ldr	r2, [pc, #48]	; (800a6b0 <vQueueUnregisterQueue+0x50>)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2100      	movs	r1, #0
 800a684:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a688:	4a09      	ldr	r2, [pc, #36]	; (800a6b0 <vQueueUnregisterQueue+0x50>)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	00db      	lsls	r3, r3, #3
 800a68e:	4413      	add	r3, r2
 800a690:	2200      	movs	r2, #0
 800a692:	605a      	str	r2, [r3, #4]
				break;
 800a694:	e006      	b.n	800a6a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3301      	adds	r3, #1
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2b07      	cmp	r3, #7
 800a6a0:	d9e5      	bls.n	800a66e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a6a2:	bf00      	nop
 800a6a4:	bf00      	nop
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	20006a14 	.word	0x20006a14

0800a6b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a6c4:	f001 ff86 	bl	800c5d4 <vPortEnterCritical>
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6ce:	b25b      	sxtb	r3, r3
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6d4:	d103      	bne.n	800a6de <vQueueWaitForMessageRestricted+0x2a>
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6e4:	b25b      	sxtb	r3, r3
 800a6e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6ea:	d103      	bne.n	800a6f4 <vQueueWaitForMessageRestricted+0x40>
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6f4:	f001 ff9e 	bl	800c634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d106      	bne.n	800a70e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	3324      	adds	r3, #36	; 0x24
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	68b9      	ldr	r1, [r7, #8]
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 fd89 	bl	800b220 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a70e:	6978      	ldr	r0, [r7, #20]
 800a710:	f7ff fefb 	bl	800a50a <prvUnlockQueue>
	}
 800a714:	bf00      	nop
 800a716:	3718      	adds	r7, #24
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b08e      	sub	sp, #56	; 0x38
 800a720:	af04      	add	r7, sp, #16
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10a      	bne.n	800a746 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	623b      	str	r3, [r7, #32]
}
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10a      	bne.n	800a762 <xTaskCreateStatic+0x46>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	61fb      	str	r3, [r7, #28]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a762:	23c0      	movs	r3, #192	; 0xc0
 800a764:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2bc0      	cmp	r3, #192	; 0xc0
 800a76a:	d00a      	beq.n	800a782 <xTaskCreateStatic+0x66>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	61bb      	str	r3, [r7, #24]
}
 800a77e:	bf00      	nop
 800a780:	e7fe      	b.n	800a780 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a782:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a786:	2b00      	cmp	r3, #0
 800a788:	d01e      	beq.n	800a7c8 <xTaskCreateStatic+0xac>
 800a78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d01b      	beq.n	800a7c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a792:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a798:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	2202      	movs	r2, #2
 800a79e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9303      	str	r3, [sp, #12]
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a8:	9302      	str	r3, [sp, #8]
 800a7aa:	f107 0314 	add.w	r3, r7, #20
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	68b9      	ldr	r1, [r7, #8]
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f000 f850 	bl	800a860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7c2:	f000 f8f7 	bl	800a9b4 <prvAddNewTaskToReadyList>
 800a7c6:	e001      	b.n	800a7cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a7cc:	697b      	ldr	r3, [r7, #20]
	}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3728      	adds	r7, #40	; 0x28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b08c      	sub	sp, #48	; 0x30
 800a7da:	af04      	add	r7, sp, #16
 800a7dc:	60f8      	str	r0, [r7, #12]
 800a7de:	60b9      	str	r1, [r7, #8]
 800a7e0:	603b      	str	r3, [r7, #0]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a7e6:	88fb      	ldrh	r3, [r7, #6]
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f002 f814 	bl	800c818 <pvPortMalloc>
 800a7f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00e      	beq.n	800a816 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a7f8:	20c0      	movs	r0, #192	; 0xc0
 800a7fa:	f002 f80d 	bl	800c818 <pvPortMalloc>
 800a7fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	631a      	str	r2, [r3, #48]	; 0x30
 800a80c:	e005      	b.n	800a81a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a80e:	6978      	ldr	r0, [r7, #20]
 800a810:	f002 f8ce 	bl	800c9b0 <vPortFree>
 800a814:	e001      	b.n	800a81a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a816:	2300      	movs	r3, #0
 800a818:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d017      	beq.n	800a850 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a828:	88fa      	ldrh	r2, [r7, #6]
 800a82a:	2300      	movs	r3, #0
 800a82c:	9303      	str	r3, [sp, #12]
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	9302      	str	r3, [sp, #8]
 800a832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 f80e 	bl	800a860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a844:	69f8      	ldr	r0, [r7, #28]
 800a846:	f000 f8b5 	bl	800a9b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a84a:	2301      	movs	r3, #1
 800a84c:	61bb      	str	r3, [r7, #24]
 800a84e:	e002      	b.n	800a856 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a854:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a856:	69bb      	ldr	r3, [r7, #24]
	}
 800a858:	4618      	mov	r0, r3
 800a85a:	3720      	adds	r7, #32
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b088      	sub	sp, #32
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
 800a86c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	461a      	mov	r2, r3
 800a878:	21a5      	movs	r1, #165	; 0xa5
 800a87a:	f002 ff3f 	bl	800d6fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a888:	3b01      	subs	r3, #1
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	f023 0307 	bic.w	r3, r3, #7
 800a896:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	f003 0307 	and.w	r3, r3, #7
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00a      	beq.n	800a8b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	617b      	str	r3, [r7, #20]
}
 800a8b4:	bf00      	nop
 800a8b6:	e7fe      	b.n	800a8b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d01f      	beq.n	800a8fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8be:	2300      	movs	r3, #0
 800a8c0:	61fb      	str	r3, [r7, #28]
 800a8c2:	e012      	b.n	800a8ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	7819      	ldrb	r1, [r3, #0]
 800a8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	3334      	adds	r3, #52	; 0x34
 800a8d4:	460a      	mov	r2, r1
 800a8d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	4413      	add	r3, r2
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d006      	beq.n	800a8f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	61fb      	str	r3, [r7, #28]
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	2b0f      	cmp	r3, #15
 800a8ee:	d9e9      	bls.n	800a8c4 <prvInitialiseNewTask+0x64>
 800a8f0:	e000      	b.n	800a8f4 <prvInitialiseNewTask+0x94>
			{
				break;
 800a8f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a8fc:	e003      	b.n	800a906 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a908:	2b37      	cmp	r3, #55	; 0x37
 800a90a:	d901      	bls.n	800a910 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a90c:	2337      	movs	r3, #55	; 0x37
 800a90e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a914:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a91a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	2200      	movs	r2, #0
 800a920:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	3304      	adds	r3, #4
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe fe56 	bl	80095d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92e:	3318      	adds	r3, #24
 800a930:	4618      	mov	r0, r3
 800a932:	f7fe fe51 	bl	80095d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a93a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a94a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94e:	2200      	movs	r2, #0
 800a950:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	2200      	movs	r2, #0
 800a956:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a964:	3358      	adds	r3, #88	; 0x58
 800a966:	2260      	movs	r2, #96	; 0x60
 800a968:	2100      	movs	r1, #0
 800a96a:	4618      	mov	r0, r3
 800a96c:	f002 fec6 	bl	800d6fc <memset>
 800a970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a972:	4a0d      	ldr	r2, [pc, #52]	; (800a9a8 <prvInitialiseNewTask+0x148>)
 800a974:	65da      	str	r2, [r3, #92]	; 0x5c
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	4a0c      	ldr	r2, [pc, #48]	; (800a9ac <prvInitialiseNewTask+0x14c>)
 800a97a:	661a      	str	r2, [r3, #96]	; 0x60
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	4a0c      	ldr	r2, [pc, #48]	; (800a9b0 <prvInitialiseNewTask+0x150>)
 800a980:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a982:	683a      	ldr	r2, [r7, #0]
 800a984:	68f9      	ldr	r1, [r7, #12]
 800a986:	69b8      	ldr	r0, [r7, #24]
 800a988:	f001 fcf4 	bl	800c374 <pxPortInitialiseStack>
 800a98c:	4602      	mov	r2, r0
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a99c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a99e:	bf00      	nop
 800a9a0:	3720      	adds	r7, #32
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	0800e36c 	.word	0x0800e36c
 800a9ac:	0800e38c 	.word	0x0800e38c
 800a9b0:	0800e34c 	.word	0x0800e34c

0800a9b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a9bc:	f001 fe0a 	bl	800c5d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9c0:	4b2d      	ldr	r3, [pc, #180]	; (800aa78 <prvAddNewTaskToReadyList+0xc4>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	4a2c      	ldr	r2, [pc, #176]	; (800aa78 <prvAddNewTaskToReadyList+0xc4>)
 800a9c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9ca:	4b2c      	ldr	r3, [pc, #176]	; (800aa7c <prvAddNewTaskToReadyList+0xc8>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d109      	bne.n	800a9e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9d2:	4a2a      	ldr	r2, [pc, #168]	; (800aa7c <prvAddNewTaskToReadyList+0xc8>)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9d8:	4b27      	ldr	r3, [pc, #156]	; (800aa78 <prvAddNewTaskToReadyList+0xc4>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d110      	bne.n	800aa02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a9e0:	f000 fd4a 	bl	800b478 <prvInitialiseTaskLists>
 800a9e4:	e00d      	b.n	800aa02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9e6:	4b26      	ldr	r3, [pc, #152]	; (800aa80 <prvAddNewTaskToReadyList+0xcc>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d109      	bne.n	800aa02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9ee:	4b23      	ldr	r3, [pc, #140]	; (800aa7c <prvAddNewTaskToReadyList+0xc8>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d802      	bhi.n	800aa02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a9fc:	4a1f      	ldr	r2, [pc, #124]	; (800aa7c <prvAddNewTaskToReadyList+0xc8>)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa02:	4b20      	ldr	r3, [pc, #128]	; (800aa84 <prvAddNewTaskToReadyList+0xd0>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	3301      	adds	r3, #1
 800aa08:	4a1e      	ldr	r2, [pc, #120]	; (800aa84 <prvAddNewTaskToReadyList+0xd0>)
 800aa0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aa0c:	4b1d      	ldr	r3, [pc, #116]	; (800aa84 <prvAddNewTaskToReadyList+0xd0>)
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa18:	4b1b      	ldr	r3, [pc, #108]	; (800aa88 <prvAddNewTaskToReadyList+0xd4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d903      	bls.n	800aa28 <prvAddNewTaskToReadyList+0x74>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa24:	4a18      	ldr	r2, [pc, #96]	; (800aa88 <prvAddNewTaskToReadyList+0xd4>)
 800aa26:	6013      	str	r3, [r2, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4a15      	ldr	r2, [pc, #84]	; (800aa8c <prvAddNewTaskToReadyList+0xd8>)
 800aa36:	441a      	add	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	f7fe fdd7 	bl	80095f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa44:	f001 fdf6 	bl	800c634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa48:	4b0d      	ldr	r3, [pc, #52]	; (800aa80 <prvAddNewTaskToReadyList+0xcc>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00e      	beq.n	800aa6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa50:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <prvAddNewTaskToReadyList+0xc8>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d207      	bcs.n	800aa6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa5e:	4b0c      	ldr	r3, [pc, #48]	; (800aa90 <prvAddNewTaskToReadyList+0xdc>)
 800aa60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa64:	601a      	str	r2, [r3, #0]
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa6e:	bf00      	nop
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	20001250 	.word	0x20001250
 800aa7c:	20000d7c 	.word	0x20000d7c
 800aa80:	2000125c 	.word	0x2000125c
 800aa84:	2000126c 	.word	0x2000126c
 800aa88:	20001258 	.word	0x20001258
 800aa8c:	20000d80 	.word	0x20000d80
 800aa90:	e000ed04 	.word	0xe000ed04

0800aa94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d017      	beq.n	800aad6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aaa6:	4b13      	ldr	r3, [pc, #76]	; (800aaf4 <vTaskDelay+0x60>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00a      	beq.n	800aac4 <vTaskDelay+0x30>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	60bb      	str	r3, [r7, #8]
}
 800aac0:	bf00      	nop
 800aac2:	e7fe      	b.n	800aac2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aac4:	f000 f8f2 	bl	800acac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aac8:	2100      	movs	r1, #0
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f001 f8b0 	bl	800bc30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aad0:	f000 f8fa 	bl	800acc8 <xTaskResumeAll>
 800aad4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d107      	bne.n	800aaec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aadc:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <vTaskDelay+0x64>)
 800aade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aaec:	bf00      	nop
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	20001278 	.word	0x20001278
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b088      	sub	sp, #32
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10a      	bne.n	800ab24 <eTaskGetState+0x28>
	__asm volatile
 800ab0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	60bb      	str	r3, [r7, #8]
}
 800ab20:	bf00      	nop
 800ab22:	e7fe      	b.n	800ab22 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800ab24:	4b23      	ldr	r3, [pc, #140]	; (800abb4 <eTaskGetState+0xb8>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	69ba      	ldr	r2, [r7, #24]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d102      	bne.n	800ab34 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	77fb      	strb	r3, [r7, #31]
 800ab32:	e03a      	b.n	800abaa <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800ab34:	f001 fd4e 	bl	800c5d4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800ab3e:	4b1e      	ldr	r3, [pc, #120]	; (800abb8 <eTaskGetState+0xbc>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800ab44:	4b1d      	ldr	r3, [pc, #116]	; (800abbc <eTaskGetState+0xc0>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800ab4a:	f001 fd73 	bl	800c634 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d003      	beq.n	800ab5e <eTaskGetState+0x62>
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d102      	bne.n	800ab64 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800ab5e:	2302      	movs	r3, #2
 800ab60:	77fb      	strb	r3, [r7, #31]
 800ab62:	e022      	b.n	800abaa <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	4a16      	ldr	r2, [pc, #88]	; (800abc0 <eTaskGetState+0xc4>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d112      	bne.n	800ab92 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10b      	bne.n	800ab8c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d102      	bne.n	800ab86 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800ab80:	2302      	movs	r3, #2
 800ab82:	77fb      	strb	r3, [r7, #31]
 800ab84:	e011      	b.n	800abaa <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800ab86:	2303      	movs	r3, #3
 800ab88:	77fb      	strb	r3, [r7, #31]
 800ab8a:	e00e      	b.n	800abaa <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	77fb      	strb	r3, [r7, #31]
 800ab90:	e00b      	b.n	800abaa <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	4a0b      	ldr	r2, [pc, #44]	; (800abc4 <eTaskGetState+0xc8>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d002      	beq.n	800aba0 <eTaskGetState+0xa4>
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d102      	bne.n	800aba6 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800aba0:	2304      	movs	r3, #4
 800aba2:	77fb      	strb	r3, [r7, #31]
 800aba4:	e001      	b.n	800abaa <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800aba6:	2301      	movs	r3, #1
 800aba8:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800abaa:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800abac:	4618      	mov	r0, r3
 800abae:	3720      	adds	r7, #32
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	20000d7c 	.word	0x20000d7c
 800abb8:	20001208 	.word	0x20001208
 800abbc:	2000120c 	.word	0x2000120c
 800abc0:	2000123c 	.word	0x2000123c
 800abc4:	20001224 	.word	0x20001224

0800abc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08a      	sub	sp, #40	; 0x28
 800abcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800abce:	2300      	movs	r3, #0
 800abd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800abd6:	463a      	mov	r2, r7
 800abd8:	1d39      	adds	r1, r7, #4
 800abda:	f107 0308 	add.w	r3, r7, #8
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fe fca6 	bl	8009530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	9202      	str	r2, [sp, #8]
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	2300      	movs	r3, #0
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	2300      	movs	r3, #0
 800abf4:	460a      	mov	r2, r1
 800abf6:	4925      	ldr	r1, [pc, #148]	; (800ac8c <vTaskStartScheduler+0xc4>)
 800abf8:	4825      	ldr	r0, [pc, #148]	; (800ac90 <vTaskStartScheduler+0xc8>)
 800abfa:	f7ff fd8f 	bl	800a71c <xTaskCreateStatic>
 800abfe:	4603      	mov	r3, r0
 800ac00:	4a24      	ldr	r2, [pc, #144]	; (800ac94 <vTaskStartScheduler+0xcc>)
 800ac02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac04:	4b23      	ldr	r3, [pc, #140]	; (800ac94 <vTaskStartScheduler+0xcc>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	617b      	str	r3, [r7, #20]
 800ac10:	e001      	b.n	800ac16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d102      	bne.n	800ac22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac1c:	f001 f85c 	bl	800bcd8 <xTimerCreateTimerTask>
 800ac20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d11d      	bne.n	800ac64 <vTaskStartScheduler+0x9c>
	__asm volatile
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	613b      	str	r3, [r7, #16]
}
 800ac3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac3c:	4b16      	ldr	r3, [pc, #88]	; (800ac98 <vTaskStartScheduler+0xd0>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3358      	adds	r3, #88	; 0x58
 800ac42:	4a16      	ldr	r2, [pc, #88]	; (800ac9c <vTaskStartScheduler+0xd4>)
 800ac44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac46:	4b16      	ldr	r3, [pc, #88]	; (800aca0 <vTaskStartScheduler+0xd8>)
 800ac48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac4e:	4b15      	ldr	r3, [pc, #84]	; (800aca4 <vTaskStartScheduler+0xdc>)
 800ac50:	2201      	movs	r2, #1
 800ac52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac54:	4b14      	ldr	r3, [pc, #80]	; (800aca8 <vTaskStartScheduler+0xe0>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ac5a:	f7f5 fc8d 	bl	8000578 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac5e:	f001 fc17 	bl	800c490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac62:	e00e      	b.n	800ac82 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac6a:	d10a      	bne.n	800ac82 <vTaskStartScheduler+0xba>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	60fb      	str	r3, [r7, #12]
}
 800ac7e:	bf00      	nop
 800ac80:	e7fe      	b.n	800ac80 <vTaskStartScheduler+0xb8>
}
 800ac82:	bf00      	nop
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	0800e188 	.word	0x0800e188
 800ac90:	0800b449 	.word	0x0800b449
 800ac94:	20001274 	.word	0x20001274
 800ac98:	20000d7c 	.word	0x20000d7c
 800ac9c:	20000184 	.word	0x20000184
 800aca0:	20001270 	.word	0x20001270
 800aca4:	2000125c 	.word	0x2000125c
 800aca8:	20001254 	.word	0x20001254

0800acac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800acac:	b480      	push	{r7}
 800acae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800acb0:	4b04      	ldr	r3, [pc, #16]	; (800acc4 <vTaskSuspendAll+0x18>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	3301      	adds	r3, #1
 800acb6:	4a03      	ldr	r2, [pc, #12]	; (800acc4 <vTaskSuspendAll+0x18>)
 800acb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800acba:	bf00      	nop
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr
 800acc4:	20001278 	.word	0x20001278

0800acc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800acce:	2300      	movs	r3, #0
 800acd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800acd2:	2300      	movs	r3, #0
 800acd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800acd6:	4b42      	ldr	r3, [pc, #264]	; (800ade0 <xTaskResumeAll+0x118>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10a      	bne.n	800acf4 <xTaskResumeAll+0x2c>
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	603b      	str	r3, [r7, #0]
}
 800acf0:	bf00      	nop
 800acf2:	e7fe      	b.n	800acf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800acf4:	f001 fc6e 	bl	800c5d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800acf8:	4b39      	ldr	r3, [pc, #228]	; (800ade0 <xTaskResumeAll+0x118>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3b01      	subs	r3, #1
 800acfe:	4a38      	ldr	r2, [pc, #224]	; (800ade0 <xTaskResumeAll+0x118>)
 800ad00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad02:	4b37      	ldr	r3, [pc, #220]	; (800ade0 <xTaskResumeAll+0x118>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d162      	bne.n	800add0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad0a:	4b36      	ldr	r3, [pc, #216]	; (800ade4 <xTaskResumeAll+0x11c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d05e      	beq.n	800add0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad12:	e02f      	b.n	800ad74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad14:	4b34      	ldr	r3, [pc, #208]	; (800ade8 <xTaskResumeAll+0x120>)
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3318      	adds	r3, #24
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fe fcc3 	bl	80096ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	3304      	adds	r3, #4
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fe fcbe 	bl	80096ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad34:	4b2d      	ldr	r3, [pc, #180]	; (800adec <xTaskResumeAll+0x124>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d903      	bls.n	800ad44 <xTaskResumeAll+0x7c>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	4a2a      	ldr	r2, [pc, #168]	; (800adec <xTaskResumeAll+0x124>)
 800ad42:	6013      	str	r3, [r2, #0]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad48:	4613      	mov	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4a27      	ldr	r2, [pc, #156]	; (800adf0 <xTaskResumeAll+0x128>)
 800ad52:	441a      	add	r2, r3
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3304      	adds	r3, #4
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	f7fe fc49 	bl	80095f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad64:	4b23      	ldr	r3, [pc, #140]	; (800adf4 <xTaskResumeAll+0x12c>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d302      	bcc.n	800ad74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ad6e:	4b22      	ldr	r3, [pc, #136]	; (800adf8 <xTaskResumeAll+0x130>)
 800ad70:	2201      	movs	r2, #1
 800ad72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad74:	4b1c      	ldr	r3, [pc, #112]	; (800ade8 <xTaskResumeAll+0x120>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1cb      	bne.n	800ad14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d001      	beq.n	800ad86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad82:	f000 fcef 	bl	800b764 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad86:	4b1d      	ldr	r3, [pc, #116]	; (800adfc <xTaskResumeAll+0x134>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d010      	beq.n	800adb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad92:	f000 f8d7 	bl	800af44 <xTaskIncrementTick>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ad9c:	4b16      	ldr	r3, [pc, #88]	; (800adf8 <xTaskResumeAll+0x130>)
 800ad9e:	2201      	movs	r2, #1
 800ada0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3b01      	subs	r3, #1
 800ada6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1f1      	bne.n	800ad92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800adae:	4b13      	ldr	r3, [pc, #76]	; (800adfc <xTaskResumeAll+0x134>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800adb4:	4b10      	ldr	r3, [pc, #64]	; (800adf8 <xTaskResumeAll+0x130>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d009      	beq.n	800add0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800adbc:	2301      	movs	r3, #1
 800adbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800adc0:	4b0f      	ldr	r3, [pc, #60]	; (800ae00 <xTaskResumeAll+0x138>)
 800adc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800add0:	f001 fc30 	bl	800c634 <vPortExitCritical>

	return xAlreadyYielded;
 800add4:	68bb      	ldr	r3, [r7, #8]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	20001278 	.word	0x20001278
 800ade4:	20001250 	.word	0x20001250
 800ade8:	20001210 	.word	0x20001210
 800adec:	20001258 	.word	0x20001258
 800adf0:	20000d80 	.word	0x20000d80
 800adf4:	20000d7c 	.word	0x20000d7c
 800adf8:	20001264 	.word	0x20001264
 800adfc:	20001260 	.word	0x20001260
 800ae00:	e000ed04 	.word	0xe000ed04

0800ae04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae0a:	4b05      	ldr	r3, [pc, #20]	; (800ae20 <xTaskGetTickCount+0x1c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae10:	687b      	ldr	r3, [r7, #4]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	20001254 	.word	0x20001254

0800ae24 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800ae30:	2300      	movs	r3, #0
 800ae32:	617b      	str	r3, [r7, #20]
 800ae34:	2338      	movs	r3, #56	; 0x38
 800ae36:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800ae38:	f7ff ff38 	bl	800acac <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ae3c:	4b3b      	ldr	r3, [pc, #236]	; (800af2c <uxTaskGetSystemState+0x108>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d36a      	bcc.n	800af1c <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	00db      	lsls	r3, r3, #3
 800ae52:	4413      	add	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	461a      	mov	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	1898      	adds	r0, r3, r2
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4a32      	ldr	r2, [pc, #200]	; (800af30 <uxTaskGetSystemState+0x10c>)
 800ae68:	4413      	add	r3, r2
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	f000 fbd7 	bl	800b620 <prvListTasksWithinSingleList>
 800ae72:	4602      	mov	r2, r0
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	4413      	add	r3, r2
 800ae78:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1e2      	bne.n	800ae46 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	4613      	mov	r3, r2
 800ae84:	00db      	lsls	r3, r3, #3
 800ae86:	4413      	add	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	4413      	add	r3, r2
 800ae90:	4a28      	ldr	r2, [pc, #160]	; (800af34 <uxTaskGetSystemState+0x110>)
 800ae92:	6811      	ldr	r1, [r2, #0]
 800ae94:	2202      	movs	r2, #2
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 fbc2 	bl	800b620 <prvListTasksWithinSingleList>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	4413      	add	r3, r2
 800aea2:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	4613      	mov	r3, r2
 800aea8:	00db      	lsls	r3, r3, #3
 800aeaa:	4413      	add	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	461a      	mov	r2, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	4a20      	ldr	r2, [pc, #128]	; (800af38 <uxTaskGetSystemState+0x114>)
 800aeb6:	6811      	ldr	r1, [r2, #0]
 800aeb8:	2202      	movs	r2, #2
 800aeba:	4618      	mov	r0, r3
 800aebc:	f000 fbb0 	bl	800b620 <prvListTasksWithinSingleList>
 800aec0:	4602      	mov	r2, r0
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	4413      	add	r3, r2
 800aec6:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800aec8:	697a      	ldr	r2, [r7, #20]
 800aeca:	4613      	mov	r3, r2
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	461a      	mov	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4413      	add	r3, r2
 800aed8:	2204      	movs	r2, #4
 800aeda:	4918      	ldr	r1, [pc, #96]	; (800af3c <uxTaskGetSystemState+0x118>)
 800aedc:	4618      	mov	r0, r3
 800aede:	f000 fb9f 	bl	800b620 <prvListTasksWithinSingleList>
 800aee2:	4602      	mov	r2, r0
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	4413      	add	r3, r2
 800aee8:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	4613      	mov	r3, r2
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	4413      	add	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	461a      	mov	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	4413      	add	r3, r2
 800aefa:	2203      	movs	r2, #3
 800aefc:	4910      	ldr	r1, [pc, #64]	; (800af40 <uxTaskGetSystemState+0x11c>)
 800aefe:	4618      	mov	r0, r3
 800af00:	f000 fb8e 	bl	800b620 <prvListTasksWithinSingleList>
 800af04:	4602      	mov	r2, r0
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	4413      	add	r3, r2
 800af0a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d004      	beq.n	800af1c <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800af12:	f7f5 fb38 	bl	8000586 <getRunTimeCounterValue>
 800af16:	4602      	mov	r2, r0
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800af1c:	f7ff fed4 	bl	800acc8 <xTaskResumeAll>

		return uxTask;
 800af20:	697b      	ldr	r3, [r7, #20]
	}
 800af22:	4618      	mov	r0, r3
 800af24:	3718      	adds	r7, #24
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	20001250 	.word	0x20001250
 800af30:	20000d80 	.word	0x20000d80
 800af34:	20001208 	.word	0x20001208
 800af38:	2000120c 	.word	0x2000120c
 800af3c:	20001224 	.word	0x20001224
 800af40:	2000123c 	.word	0x2000123c

0800af44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af4e:	4b4f      	ldr	r3, [pc, #316]	; (800b08c <xTaskIncrementTick+0x148>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	f040 808f 	bne.w	800b076 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af58:	4b4d      	ldr	r3, [pc, #308]	; (800b090 <xTaskIncrementTick+0x14c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	3301      	adds	r3, #1
 800af5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af60:	4a4b      	ldr	r2, [pc, #300]	; (800b090 <xTaskIncrementTick+0x14c>)
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d120      	bne.n	800afae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800af6c:	4b49      	ldr	r3, [pc, #292]	; (800b094 <xTaskIncrementTick+0x150>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00a      	beq.n	800af8c <xTaskIncrementTick+0x48>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	603b      	str	r3, [r7, #0]
}
 800af88:	bf00      	nop
 800af8a:	e7fe      	b.n	800af8a <xTaskIncrementTick+0x46>
 800af8c:	4b41      	ldr	r3, [pc, #260]	; (800b094 <xTaskIncrementTick+0x150>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	60fb      	str	r3, [r7, #12]
 800af92:	4b41      	ldr	r3, [pc, #260]	; (800b098 <xTaskIncrementTick+0x154>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a3f      	ldr	r2, [pc, #252]	; (800b094 <xTaskIncrementTick+0x150>)
 800af98:	6013      	str	r3, [r2, #0]
 800af9a:	4a3f      	ldr	r2, [pc, #252]	; (800b098 <xTaskIncrementTick+0x154>)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	4b3e      	ldr	r3, [pc, #248]	; (800b09c <xTaskIncrementTick+0x158>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3301      	adds	r3, #1
 800afa6:	4a3d      	ldr	r2, [pc, #244]	; (800b09c <xTaskIncrementTick+0x158>)
 800afa8:	6013      	str	r3, [r2, #0]
 800afaa:	f000 fbdb 	bl	800b764 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800afae:	4b3c      	ldr	r3, [pc, #240]	; (800b0a0 <xTaskIncrementTick+0x15c>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d349      	bcc.n	800b04c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afb8:	4b36      	ldr	r3, [pc, #216]	; (800b094 <xTaskIncrementTick+0x150>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d104      	bne.n	800afcc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afc2:	4b37      	ldr	r3, [pc, #220]	; (800b0a0 <xTaskIncrementTick+0x15c>)
 800afc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afc8:	601a      	str	r2, [r3, #0]
					break;
 800afca:	e03f      	b.n	800b04c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afcc:	4b31      	ldr	r3, [pc, #196]	; (800b094 <xTaskIncrementTick+0x150>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d203      	bcs.n	800afec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800afe4:	4a2e      	ldr	r2, [pc, #184]	; (800b0a0 <xTaskIncrementTick+0x15c>)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800afea:	e02f      	b.n	800b04c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	3304      	adds	r3, #4
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fe fb5b 	bl	80096ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800affa:	2b00      	cmp	r3, #0
 800affc:	d004      	beq.n	800b008 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	3318      	adds	r3, #24
 800b002:	4618      	mov	r0, r3
 800b004:	f7fe fb52 	bl	80096ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b00c:	4b25      	ldr	r3, [pc, #148]	; (800b0a4 <xTaskIncrementTick+0x160>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	429a      	cmp	r2, r3
 800b012:	d903      	bls.n	800b01c <xTaskIncrementTick+0xd8>
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	4a22      	ldr	r2, [pc, #136]	; (800b0a4 <xTaskIncrementTick+0x160>)
 800b01a:	6013      	str	r3, [r2, #0]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b020:	4613      	mov	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4a1f      	ldr	r2, [pc, #124]	; (800b0a8 <xTaskIncrementTick+0x164>)
 800b02a:	441a      	add	r2, r3
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	3304      	adds	r3, #4
 800b030:	4619      	mov	r1, r3
 800b032:	4610      	mov	r0, r2
 800b034:	f7fe fadd 	bl	80095f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03c:	4b1b      	ldr	r3, [pc, #108]	; (800b0ac <xTaskIncrementTick+0x168>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b042:	429a      	cmp	r2, r3
 800b044:	d3b8      	bcc.n	800afb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b046:	2301      	movs	r3, #1
 800b048:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b04a:	e7b5      	b.n	800afb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b04c:	4b17      	ldr	r3, [pc, #92]	; (800b0ac <xTaskIncrementTick+0x168>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b052:	4915      	ldr	r1, [pc, #84]	; (800b0a8 <xTaskIncrementTick+0x164>)
 800b054:	4613      	mov	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	440b      	add	r3, r1
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b01      	cmp	r3, #1
 800b062:	d901      	bls.n	800b068 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b064:	2301      	movs	r3, #1
 800b066:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b068:	4b11      	ldr	r3, [pc, #68]	; (800b0b0 <xTaskIncrementTick+0x16c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d007      	beq.n	800b080 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b070:	2301      	movs	r3, #1
 800b072:	617b      	str	r3, [r7, #20]
 800b074:	e004      	b.n	800b080 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b076:	4b0f      	ldr	r3, [pc, #60]	; (800b0b4 <xTaskIncrementTick+0x170>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3301      	adds	r3, #1
 800b07c:	4a0d      	ldr	r2, [pc, #52]	; (800b0b4 <xTaskIncrementTick+0x170>)
 800b07e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b080:	697b      	ldr	r3, [r7, #20]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3718      	adds	r7, #24
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	20001278 	.word	0x20001278
 800b090:	20001254 	.word	0x20001254
 800b094:	20001208 	.word	0x20001208
 800b098:	2000120c 	.word	0x2000120c
 800b09c:	20001268 	.word	0x20001268
 800b0a0:	20001270 	.word	0x20001270
 800b0a4:	20001258 	.word	0x20001258
 800b0a8:	20000d80 	.word	0x20000d80
 800b0ac:	20000d7c 	.word	0x20000d7c
 800b0b0:	20001264 	.word	0x20001264
 800b0b4:	20001260 	.word	0x20001260

0800b0b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b0be:	4b3e      	ldr	r3, [pc, #248]	; (800b1b8 <vTaskSwitchContext+0x100>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d003      	beq.n	800b0ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b0c6:	4b3d      	ldr	r3, [pc, #244]	; (800b1bc <vTaskSwitchContext+0x104>)
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b0cc:	e070      	b.n	800b1b0 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800b0ce:	4b3b      	ldr	r3, [pc, #236]	; (800b1bc <vTaskSwitchContext+0x104>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b0d4:	f7f5 fa57 	bl	8000586 <getRunTimeCounterValue>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	4a39      	ldr	r2, [pc, #228]	; (800b1c0 <vTaskSwitchContext+0x108>)
 800b0dc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b0de:	4b38      	ldr	r3, [pc, #224]	; (800b1c0 <vTaskSwitchContext+0x108>)
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	4b38      	ldr	r3, [pc, #224]	; (800b1c4 <vTaskSwitchContext+0x10c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d909      	bls.n	800b0fe <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b0ea:	4b37      	ldr	r3, [pc, #220]	; (800b1c8 <vTaskSwitchContext+0x110>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b0f0:	4a33      	ldr	r2, [pc, #204]	; (800b1c0 <vTaskSwitchContext+0x108>)
 800b0f2:	6810      	ldr	r0, [r2, #0]
 800b0f4:	4a33      	ldr	r2, [pc, #204]	; (800b1c4 <vTaskSwitchContext+0x10c>)
 800b0f6:	6812      	ldr	r2, [r2, #0]
 800b0f8:	1a82      	subs	r2, r0, r2
 800b0fa:	440a      	add	r2, r1
 800b0fc:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b0fe:	4b30      	ldr	r3, [pc, #192]	; (800b1c0 <vTaskSwitchContext+0x108>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a30      	ldr	r2, [pc, #192]	; (800b1c4 <vTaskSwitchContext+0x10c>)
 800b104:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b106:	4b30      	ldr	r3, [pc, #192]	; (800b1c8 <vTaskSwitchContext+0x110>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	4b2e      	ldr	r3, [pc, #184]	; (800b1c8 <vTaskSwitchContext+0x110>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b112:	429a      	cmp	r2, r3
 800b114:	d808      	bhi.n	800b128 <vTaskSwitchContext+0x70>
 800b116:	4b2c      	ldr	r3, [pc, #176]	; (800b1c8 <vTaskSwitchContext+0x110>)
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	4b2b      	ldr	r3, [pc, #172]	; (800b1c8 <vTaskSwitchContext+0x110>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	3334      	adds	r3, #52	; 0x34
 800b120:	4619      	mov	r1, r3
 800b122:	4610      	mov	r0, r2
 800b124:	f7f5 fa37 	bl	8000596 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b128:	4b28      	ldr	r3, [pc, #160]	; (800b1cc <vTaskSwitchContext+0x114>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	e010      	b.n	800b152 <vTaskSwitchContext+0x9a>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10a      	bne.n	800b14c <vTaskSwitchContext+0x94>
	__asm volatile
 800b136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	607b      	str	r3, [r7, #4]
}
 800b148:	bf00      	nop
 800b14a:	e7fe      	b.n	800b14a <vTaskSwitchContext+0x92>
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	3b01      	subs	r3, #1
 800b150:	60fb      	str	r3, [r7, #12]
 800b152:	491f      	ldr	r1, [pc, #124]	; (800b1d0 <vTaskSwitchContext+0x118>)
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	4613      	mov	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	440b      	add	r3, r1
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d0e4      	beq.n	800b130 <vTaskSwitchContext+0x78>
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	4613      	mov	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4a17      	ldr	r2, [pc, #92]	; (800b1d0 <vTaskSwitchContext+0x118>)
 800b172:	4413      	add	r3, r2
 800b174:	60bb      	str	r3, [r7, #8]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	605a      	str	r2, [r3, #4]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	685a      	ldr	r2, [r3, #4]
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	3308      	adds	r3, #8
 800b188:	429a      	cmp	r2, r3
 800b18a:	d104      	bne.n	800b196 <vTaskSwitchContext+0xde>
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	605a      	str	r2, [r3, #4]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	4a0a      	ldr	r2, [pc, #40]	; (800b1c8 <vTaskSwitchContext+0x110>)
 800b19e:	6013      	str	r3, [r2, #0]
 800b1a0:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <vTaskSwitchContext+0x114>)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1a6:	4b08      	ldr	r3, [pc, #32]	; (800b1c8 <vTaskSwitchContext+0x110>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	3358      	adds	r3, #88	; 0x58
 800b1ac:	4a09      	ldr	r2, [pc, #36]	; (800b1d4 <vTaskSwitchContext+0x11c>)
 800b1ae:	6013      	str	r3, [r2, #0]
}
 800b1b0:	bf00      	nop
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	20001278 	.word	0x20001278
 800b1bc:	20001264 	.word	0x20001264
 800b1c0:	20001280 	.word	0x20001280
 800b1c4:	2000127c 	.word	0x2000127c
 800b1c8:	20000d7c 	.word	0x20000d7c
 800b1cc:	20001258 	.word	0x20001258
 800b1d0:	20000d80 	.word	0x20000d80
 800b1d4:	20000184 	.word	0x20000184

0800b1d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10a      	bne.n	800b1fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ec:	f383 8811 	msr	BASEPRI, r3
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	60fb      	str	r3, [r7, #12]
}
 800b1fa:	bf00      	nop
 800b1fc:	e7fe      	b.n	800b1fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1fe:	4b07      	ldr	r3, [pc, #28]	; (800b21c <vTaskPlaceOnEventList+0x44>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3318      	adds	r3, #24
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7fe fa17 	bl	800963a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b20c:	2101      	movs	r1, #1
 800b20e:	6838      	ldr	r0, [r7, #0]
 800b210:	f000 fd0e 	bl	800bc30 <prvAddCurrentTaskToDelayedList>
}
 800b214:	bf00      	nop
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	20000d7c 	.word	0x20000d7c

0800b220 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10a      	bne.n	800b248 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b236:	f383 8811 	msr	BASEPRI, r3
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	617b      	str	r3, [r7, #20]
}
 800b244:	bf00      	nop
 800b246:	e7fe      	b.n	800b246 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b248:	4b0a      	ldr	r3, [pc, #40]	; (800b274 <vTaskPlaceOnEventListRestricted+0x54>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3318      	adds	r3, #24
 800b24e:	4619      	mov	r1, r3
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7fe f9ce 	bl	80095f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b25c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b260:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b262:	6879      	ldr	r1, [r7, #4]
 800b264:	68b8      	ldr	r0, [r7, #8]
 800b266:	f000 fce3 	bl	800bc30 <prvAddCurrentTaskToDelayedList>
	}
 800b26a:	bf00      	nop
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20000d7c 	.word	0x20000d7c

0800b278 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10a      	bne.n	800b2a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	60fb      	str	r3, [r7, #12]
}
 800b2a0:	bf00      	nop
 800b2a2:	e7fe      	b.n	800b2a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	3318      	adds	r3, #24
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fe f9ff 	bl	80096ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2ae:	4b1e      	ldr	r3, [pc, #120]	; (800b328 <xTaskRemoveFromEventList+0xb0>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d11d      	bne.n	800b2f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fe f9f6 	bl	80096ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c4:	4b19      	ldr	r3, [pc, #100]	; (800b32c <xTaskRemoveFromEventList+0xb4>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d903      	bls.n	800b2d4 <xTaskRemoveFromEventList+0x5c>
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	4a16      	ldr	r2, [pc, #88]	; (800b32c <xTaskRemoveFromEventList+0xb4>)
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d8:	4613      	mov	r3, r2
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4a13      	ldr	r2, [pc, #76]	; (800b330 <xTaskRemoveFromEventList+0xb8>)
 800b2e2:	441a      	add	r2, r3
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	f7fe f981 	bl	80095f2 <vListInsertEnd>
 800b2f0:	e005      	b.n	800b2fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	3318      	adds	r3, #24
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	480e      	ldr	r0, [pc, #56]	; (800b334 <xTaskRemoveFromEventList+0xbc>)
 800b2fa:	f7fe f97a 	bl	80095f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b302:	4b0d      	ldr	r3, [pc, #52]	; (800b338 <xTaskRemoveFromEventList+0xc0>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b308:	429a      	cmp	r2, r3
 800b30a:	d905      	bls.n	800b318 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b30c:	2301      	movs	r3, #1
 800b30e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b310:	4b0a      	ldr	r3, [pc, #40]	; (800b33c <xTaskRemoveFromEventList+0xc4>)
 800b312:	2201      	movs	r2, #1
 800b314:	601a      	str	r2, [r3, #0]
 800b316:	e001      	b.n	800b31c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b318:	2300      	movs	r3, #0
 800b31a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b31c:	697b      	ldr	r3, [r7, #20]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	20001278 	.word	0x20001278
 800b32c:	20001258 	.word	0x20001258
 800b330:	20000d80 	.word	0x20000d80
 800b334:	20001210 	.word	0x20001210
 800b338:	20000d7c 	.word	0x20000d7c
 800b33c:	20001264 	.word	0x20001264

0800b340 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b348:	4b06      	ldr	r3, [pc, #24]	; (800b364 <vTaskInternalSetTimeOutState+0x24>)
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b350:	4b05      	ldr	r3, [pc, #20]	; (800b368 <vTaskInternalSetTimeOutState+0x28>)
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	605a      	str	r2, [r3, #4]
}
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	20001268 	.word	0x20001268
 800b368:	20001254 	.word	0x20001254

0800b36c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b088      	sub	sp, #32
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10a      	bne.n	800b392 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	613b      	str	r3, [r7, #16]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10a      	bne.n	800b3ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39c:	f383 8811 	msr	BASEPRI, r3
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	60fb      	str	r3, [r7, #12]
}
 800b3aa:	bf00      	nop
 800b3ac:	e7fe      	b.n	800b3ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b3ae:	f001 f911 	bl	800c5d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3b2:	4b1d      	ldr	r3, [pc, #116]	; (800b428 <xTaskCheckForTimeOut+0xbc>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	69ba      	ldr	r2, [r7, #24]
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3ca:	d102      	bne.n	800b3d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	61fb      	str	r3, [r7, #28]
 800b3d0:	e023      	b.n	800b41a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	4b15      	ldr	r3, [pc, #84]	; (800b42c <xTaskCheckForTimeOut+0xc0>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d007      	beq.n	800b3ee <xTaskCheckForTimeOut+0x82>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	69ba      	ldr	r2, [r7, #24]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d302      	bcc.n	800b3ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	61fb      	str	r3, [r7, #28]
 800b3ec:	e015      	b.n	800b41a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d20b      	bcs.n	800b410 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f7ff ff9b 	bl	800b340 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b40a:	2300      	movs	r3, #0
 800b40c:	61fb      	str	r3, [r7, #28]
 800b40e:	e004      	b.n	800b41a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b416:	2301      	movs	r3, #1
 800b418:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b41a:	f001 f90b 	bl	800c634 <vPortExitCritical>

	return xReturn;
 800b41e:	69fb      	ldr	r3, [r7, #28]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3720      	adds	r7, #32
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	20001254 	.word	0x20001254
 800b42c:	20001268 	.word	0x20001268

0800b430 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b430:	b480      	push	{r7}
 800b432:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b434:	4b03      	ldr	r3, [pc, #12]	; (800b444 <vTaskMissedYield+0x14>)
 800b436:	2201      	movs	r2, #1
 800b438:	601a      	str	r2, [r3, #0]
}
 800b43a:	bf00      	nop
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	20001264 	.word	0x20001264

0800b448 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b450:	f000 f852 	bl	800b4f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b454:	4b06      	ldr	r3, [pc, #24]	; (800b470 <prvIdleTask+0x28>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d9f9      	bls.n	800b450 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b45c:	4b05      	ldr	r3, [pc, #20]	; (800b474 <prvIdleTask+0x2c>)
 800b45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b46c:	e7f0      	b.n	800b450 <prvIdleTask+0x8>
 800b46e:	bf00      	nop
 800b470:	20000d80 	.word	0x20000d80
 800b474:	e000ed04 	.word	0xe000ed04

0800b478 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b47e:	2300      	movs	r3, #0
 800b480:	607b      	str	r3, [r7, #4]
 800b482:	e00c      	b.n	800b49e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	4613      	mov	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4a12      	ldr	r2, [pc, #72]	; (800b4d8 <prvInitialiseTaskLists+0x60>)
 800b490:	4413      	add	r3, r2
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe f880 	bl	8009598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	3301      	adds	r3, #1
 800b49c:	607b      	str	r3, [r7, #4]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2b37      	cmp	r3, #55	; 0x37
 800b4a2:	d9ef      	bls.n	800b484 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4a4:	480d      	ldr	r0, [pc, #52]	; (800b4dc <prvInitialiseTaskLists+0x64>)
 800b4a6:	f7fe f877 	bl	8009598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4aa:	480d      	ldr	r0, [pc, #52]	; (800b4e0 <prvInitialiseTaskLists+0x68>)
 800b4ac:	f7fe f874 	bl	8009598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4b0:	480c      	ldr	r0, [pc, #48]	; (800b4e4 <prvInitialiseTaskLists+0x6c>)
 800b4b2:	f7fe f871 	bl	8009598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4b6:	480c      	ldr	r0, [pc, #48]	; (800b4e8 <prvInitialiseTaskLists+0x70>)
 800b4b8:	f7fe f86e 	bl	8009598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4bc:	480b      	ldr	r0, [pc, #44]	; (800b4ec <prvInitialiseTaskLists+0x74>)
 800b4be:	f7fe f86b 	bl	8009598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4c2:	4b0b      	ldr	r3, [pc, #44]	; (800b4f0 <prvInitialiseTaskLists+0x78>)
 800b4c4:	4a05      	ldr	r2, [pc, #20]	; (800b4dc <prvInitialiseTaskLists+0x64>)
 800b4c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4c8:	4b0a      	ldr	r3, [pc, #40]	; (800b4f4 <prvInitialiseTaskLists+0x7c>)
 800b4ca:	4a05      	ldr	r2, [pc, #20]	; (800b4e0 <prvInitialiseTaskLists+0x68>)
 800b4cc:	601a      	str	r2, [r3, #0]
}
 800b4ce:	bf00      	nop
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20000d80 	.word	0x20000d80
 800b4dc:	200011e0 	.word	0x200011e0
 800b4e0:	200011f4 	.word	0x200011f4
 800b4e4:	20001210 	.word	0x20001210
 800b4e8:	20001224 	.word	0x20001224
 800b4ec:	2000123c 	.word	0x2000123c
 800b4f0:	20001208 	.word	0x20001208
 800b4f4:	2000120c 	.word	0x2000120c

0800b4f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4fe:	e019      	b.n	800b534 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b500:	f001 f868 	bl	800c5d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b504:	4b10      	ldr	r3, [pc, #64]	; (800b548 <prvCheckTasksWaitingTermination+0x50>)
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	3304      	adds	r3, #4
 800b510:	4618      	mov	r0, r3
 800b512:	f7fe f8cb 	bl	80096ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b516:	4b0d      	ldr	r3, [pc, #52]	; (800b54c <prvCheckTasksWaitingTermination+0x54>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3b01      	subs	r3, #1
 800b51c:	4a0b      	ldr	r2, [pc, #44]	; (800b54c <prvCheckTasksWaitingTermination+0x54>)
 800b51e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b520:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <prvCheckTasksWaitingTermination+0x58>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	3b01      	subs	r3, #1
 800b526:	4a0a      	ldr	r2, [pc, #40]	; (800b550 <prvCheckTasksWaitingTermination+0x58>)
 800b528:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b52a:	f001 f883 	bl	800c634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f8e4 	bl	800b6fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b534:	4b06      	ldr	r3, [pc, #24]	; (800b550 <prvCheckTasksWaitingTermination+0x58>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1e1      	bne.n	800b500 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b53c:	bf00      	nop
 800b53e:	bf00      	nop
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	20001224 	.word	0x20001224
 800b54c:	20001250 	.word	0x20001250
 800b550:	20001238 	.word	0x20001238

0800b554 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
 800b560:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d102      	bne.n	800b56e <vTaskGetInfo+0x1a>
 800b568:	4b2c      	ldr	r3, [pc, #176]	; (800b61c <vTaskGetInfo+0xc8>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	e000      	b.n	800b570 <vTaskGetInfo+0x1c>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800b5aa:	78fb      	ldrb	r3, [r7, #3]
 800b5ac:	2b05      	cmp	r3, #5
 800b5ae:	d01a      	beq.n	800b5e6 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800b5b0:	4b1a      	ldr	r3, [pc, #104]	; (800b61c <vTaskGetInfo+0xc8>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	697a      	ldr	r2, [r7, #20]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d103      	bne.n	800b5c2 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	731a      	strb	r2, [r3, #12]
 800b5c0:	e018      	b.n	800b5f4 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	78fa      	ldrb	r2, [r7, #3]
 800b5c6:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800b5c8:	78fb      	ldrb	r3, [r7, #3]
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	d112      	bne.n	800b5f4 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800b5ce:	f7ff fb6d 	bl	800acac <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d002      	beq.n	800b5e0 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2202      	movs	r2, #2
 800b5de:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800b5e0:	f7ff fb72 	bl	800acc8 <xTaskResumeAll>
 800b5e4:	e006      	b.n	800b5f4 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800b5e6:	6978      	ldr	r0, [r7, #20]
 800b5e8:	f7ff fa88 	bl	800aafc <eTaskGetState>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d009      	beq.n	800b60e <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fe:	4618      	mov	r0, r3
 800b600:	f000 f860 	bl	800b6c4 <prvTaskCheckFreeStackSpace>
 800b604:	4603      	mov	r3, r0
 800b606:	461a      	mov	r2, r3
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800b60c:	e002      	b.n	800b614 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	2200      	movs	r2, #0
 800b612:	841a      	strh	r2, [r3, #32]
	}
 800b614:	bf00      	nop
 800b616:	3718      	adds	r7, #24
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	20000d7c 	.word	0x20000d7c

0800b620 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08a      	sub	sp, #40	; 0x28
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	4613      	mov	r3, r2
 800b62c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d03f      	beq.n	800b6ba <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	623b      	str	r3, [r7, #32]
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	685a      	ldr	r2, [r3, #4]
 800b644:	6a3b      	ldr	r3, [r7, #32]
 800b646:	605a      	str	r2, [r3, #4]
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	685a      	ldr	r2, [r3, #4]
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	3308      	adds	r3, #8
 800b650:	429a      	cmp	r2, r3
 800b652:	d104      	bne.n	800b65e <prvListTasksWithinSingleList+0x3e>
 800b654:	6a3b      	ldr	r3, [r7, #32]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	6a3b      	ldr	r3, [r7, #32]
 800b65c:	605a      	str	r2, [r3, #4]
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	61bb      	str	r3, [r7, #24]
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	685a      	ldr	r2, [r3, #4]
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	605a      	str	r2, [r3, #4]
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	685a      	ldr	r2, [r3, #4]
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	3308      	adds	r3, #8
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d104      	bne.n	800b68a <prvListTasksWithinSingleList+0x6a>
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	605a      	str	r2, [r3, #4]
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800b692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b694:	4613      	mov	r3, r2
 800b696:	00db      	lsls	r3, r3, #3
 800b698:	4413      	add	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	461a      	mov	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	1899      	adds	r1, r3, r2
 800b6a2:	79fb      	ldrb	r3, [r7, #7]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	6978      	ldr	r0, [r7, #20]
 800b6a8:	f7ff ff54 	bl	800b554 <vTaskGetInfo>
				uxTask++;
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d1d5      	bne.n	800b666 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3728      	adds	r7, #40	; 0x28
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b6d0:	e005      	b.n	800b6de <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	607b      	str	r3, [r7, #4]
			ulCount++;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	2ba5      	cmp	r3, #165	; 0xa5
 800b6e4:	d0f5      	beq.n	800b6d2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	089b      	lsrs	r3, r3, #2
 800b6ea:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	b29b      	uxth	r3, r3
	}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	3358      	adds	r3, #88	; 0x58
 800b708:	4618      	mov	r0, r3
 800b70a:	f002 f867 	bl	800d7dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800b714:	2b00      	cmp	r3, #0
 800b716:	d108      	bne.n	800b72a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b71c:	4618      	mov	r0, r3
 800b71e:	f001 f947 	bl	800c9b0 <vPortFree>
				vPortFree( pxTCB );
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f001 f944 	bl	800c9b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b728:	e018      	b.n	800b75c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800b730:	2b01      	cmp	r3, #1
 800b732:	d103      	bne.n	800b73c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f001 f93b 	bl	800c9b0 <vPortFree>
	}
 800b73a:	e00f      	b.n	800b75c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800b742:	2b02      	cmp	r3, #2
 800b744:	d00a      	beq.n	800b75c <prvDeleteTCB+0x60>
	__asm volatile
 800b746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74a:	f383 8811 	msr	BASEPRI, r3
 800b74e:	f3bf 8f6f 	isb	sy
 800b752:	f3bf 8f4f 	dsb	sy
 800b756:	60fb      	str	r3, [r7, #12]
}
 800b758:	bf00      	nop
 800b75a:	e7fe      	b.n	800b75a <prvDeleteTCB+0x5e>
	}
 800b75c:	bf00      	nop
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b76a:	4b0c      	ldr	r3, [pc, #48]	; (800b79c <prvResetNextTaskUnblockTime+0x38>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d104      	bne.n	800b77e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b774:	4b0a      	ldr	r3, [pc, #40]	; (800b7a0 <prvResetNextTaskUnblockTime+0x3c>)
 800b776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b77a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b77c:	e008      	b.n	800b790 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b77e:	4b07      	ldr	r3, [pc, #28]	; (800b79c <prvResetNextTaskUnblockTime+0x38>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	4a04      	ldr	r2, [pc, #16]	; (800b7a0 <prvResetNextTaskUnblockTime+0x3c>)
 800b78e:	6013      	str	r3, [r2, #0]
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	20001208 	.word	0x20001208
 800b7a0:	20001270 	.word	0x20001270

0800b7a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b7aa:	4b0b      	ldr	r3, [pc, #44]	; (800b7d8 <xTaskGetSchedulerState+0x34>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d102      	bne.n	800b7b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	607b      	str	r3, [r7, #4]
 800b7b6:	e008      	b.n	800b7ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7b8:	4b08      	ldr	r3, [pc, #32]	; (800b7dc <xTaskGetSchedulerState+0x38>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d102      	bne.n	800b7c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	607b      	str	r3, [r7, #4]
 800b7c4:	e001      	b.n	800b7ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b7ca:	687b      	ldr	r3, [r7, #4]
	}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	2000125c 	.word	0x2000125c
 800b7dc:	20001278 	.word	0x20001278

0800b7e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d051      	beq.n	800b89a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fa:	4b2a      	ldr	r3, [pc, #168]	; (800b8a4 <xTaskPriorityInherit+0xc4>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b800:	429a      	cmp	r2, r3
 800b802:	d241      	bcs.n	800b888 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	db06      	blt.n	800b81a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b80c:	4b25      	ldr	r3, [pc, #148]	; (800b8a4 <xTaskPriorityInherit+0xc4>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b812:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	6959      	ldr	r1, [r3, #20]
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4a1f      	ldr	r2, [pc, #124]	; (800b8a8 <xTaskPriorityInherit+0xc8>)
 800b82c:	4413      	add	r3, r2
 800b82e:	4299      	cmp	r1, r3
 800b830:	d122      	bne.n	800b878 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	3304      	adds	r3, #4
 800b836:	4618      	mov	r0, r3
 800b838:	f7fd ff38 	bl	80096ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b83c:	4b19      	ldr	r3, [pc, #100]	; (800b8a4 <xTaskPriorityInherit+0xc4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84a:	4b18      	ldr	r3, [pc, #96]	; (800b8ac <xTaskPriorityInherit+0xcc>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d903      	bls.n	800b85a <xTaskPriorityInherit+0x7a>
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b856:	4a15      	ldr	r2, [pc, #84]	; (800b8ac <xTaskPriorityInherit+0xcc>)
 800b858:	6013      	str	r3, [r2, #0]
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85e:	4613      	mov	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4413      	add	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4a10      	ldr	r2, [pc, #64]	; (800b8a8 <xTaskPriorityInherit+0xc8>)
 800b868:	441a      	add	r2, r3
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	3304      	adds	r3, #4
 800b86e:	4619      	mov	r1, r3
 800b870:	4610      	mov	r0, r2
 800b872:	f7fd febe 	bl	80095f2 <vListInsertEnd>
 800b876:	e004      	b.n	800b882 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b878:	4b0a      	ldr	r3, [pc, #40]	; (800b8a4 <xTaskPriorityInherit+0xc4>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b882:	2301      	movs	r3, #1
 800b884:	60fb      	str	r3, [r7, #12]
 800b886:	e008      	b.n	800b89a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b88c:	4b05      	ldr	r3, [pc, #20]	; (800b8a4 <xTaskPriorityInherit+0xc4>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b892:	429a      	cmp	r2, r3
 800b894:	d201      	bcs.n	800b89a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b896:	2301      	movs	r3, #1
 800b898:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b89a:	68fb      	ldr	r3, [r7, #12]
	}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20000d7c 	.word	0x20000d7c
 800b8a8:	20000d80 	.word	0x20000d80
 800b8ac:	20001258 	.word	0x20001258

0800b8b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d056      	beq.n	800b974 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b8c6:	4b2e      	ldr	r3, [pc, #184]	; (800b980 <xTaskPriorityDisinherit+0xd0>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	693a      	ldr	r2, [r7, #16]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d00a      	beq.n	800b8e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	60fb      	str	r3, [r7, #12]
}
 800b8e2:	bf00      	nop
 800b8e4:	e7fe      	b.n	800b8e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10a      	bne.n	800b904 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	60bb      	str	r3, [r7, #8]
}
 800b900:	bf00      	nop
 800b902:	e7fe      	b.n	800b902 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b908:	1e5a      	subs	r2, r3, #1
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b916:	429a      	cmp	r2, r3
 800b918:	d02c      	beq.n	800b974 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d128      	bne.n	800b974 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	3304      	adds	r3, #4
 800b926:	4618      	mov	r0, r3
 800b928:	f7fd fec0 	bl	80096ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b938:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b944:	4b0f      	ldr	r3, [pc, #60]	; (800b984 <xTaskPriorityDisinherit+0xd4>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d903      	bls.n	800b954 <xTaskPriorityDisinherit+0xa4>
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	4a0c      	ldr	r2, [pc, #48]	; (800b984 <xTaskPriorityDisinherit+0xd4>)
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b958:	4613      	mov	r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4413      	add	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4a09      	ldr	r2, [pc, #36]	; (800b988 <xTaskPriorityDisinherit+0xd8>)
 800b962:	441a      	add	r2, r3
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	3304      	adds	r3, #4
 800b968:	4619      	mov	r1, r3
 800b96a:	4610      	mov	r0, r2
 800b96c:	f7fd fe41 	bl	80095f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b970:	2301      	movs	r3, #1
 800b972:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b974:	697b      	ldr	r3, [r7, #20]
	}
 800b976:	4618      	mov	r0, r3
 800b978:	3718      	adds	r7, #24
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	20000d7c 	.word	0x20000d7c
 800b984:	20001258 	.word	0x20001258
 800b988:	20000d80 	.word	0x20000d80

0800b98c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b088      	sub	sp, #32
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b99a:	2301      	movs	r3, #1
 800b99c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d06a      	beq.n	800ba7a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10a      	bne.n	800b9c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b0:	f383 8811 	msr	BASEPRI, r3
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	60fb      	str	r3, [r7, #12]
}
 800b9be:	bf00      	nop
 800b9c0:	e7fe      	b.n	800b9c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d902      	bls.n	800b9d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	61fb      	str	r3, [r7, #28]
 800b9d0:	e002      	b.n	800b9d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9dc:	69fa      	ldr	r2, [r7, #28]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d04b      	beq.n	800ba7a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d146      	bne.n	800ba7a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b9ec:	4b25      	ldr	r3, [pc, #148]	; (800ba84 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	69ba      	ldr	r2, [r7, #24]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d10a      	bne.n	800ba0c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	60bb      	str	r3, [r7, #8]
}
 800ba08:	bf00      	nop
 800ba0a:	e7fe      	b.n	800ba0a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	69fa      	ldr	r2, [r7, #28]
 800ba16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	db04      	blt.n	800ba2a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	6959      	ldr	r1, [r3, #20]
 800ba2e:	693a      	ldr	r2, [r7, #16]
 800ba30:	4613      	mov	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	4a13      	ldr	r2, [pc, #76]	; (800ba88 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ba3a:	4413      	add	r3, r2
 800ba3c:	4299      	cmp	r1, r3
 800ba3e:	d11c      	bne.n	800ba7a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	3304      	adds	r3, #4
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7fd fe31 	bl	80096ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4e:	4b0f      	ldr	r3, [pc, #60]	; (800ba8c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d903      	bls.n	800ba5e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5a:	4a0c      	ldr	r2, [pc, #48]	; (800ba8c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ba5c:	6013      	str	r3, [r2, #0]
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba62:	4613      	mov	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4413      	add	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	4a07      	ldr	r2, [pc, #28]	; (800ba88 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ba6c:	441a      	add	r2, r3
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	3304      	adds	r3, #4
 800ba72:	4619      	mov	r1, r3
 800ba74:	4610      	mov	r0, r2
 800ba76:	f7fd fdbc 	bl	80095f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba7a:	bf00      	nop
 800ba7c:	3720      	adds	r7, #32
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20000d7c 	.word	0x20000d7c
 800ba88:	20000d80 	.word	0x20000d80
 800ba8c:	20001258 	.word	0x20001258

0800ba90 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f001 ff38 	bl	800d912 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7f4 fb94 	bl	80001d0 <strlen>
 800baa8:	60f8      	str	r0, [r7, #12]
 800baaa:	e007      	b.n	800babc <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	4413      	add	r3, r2
 800bab2:	2220      	movs	r2, #32
 800bab4:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	3301      	adds	r3, #1
 800baba:	60fb      	str	r3, [r7, #12]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2b0e      	cmp	r3, #14
 800bac0:	d9f4      	bls.n	800baac <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	4413      	add	r3, r2
 800bac8:	2200      	movs	r2, #0
 800baca:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	4413      	add	r3, r2
	}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
	...

0800badc <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800badc:	b590      	push	{r4, r7, lr}
 800bade:	b089      	sub	sp, #36	; 0x24
 800bae0:	af02      	add	r7, sp, #8
 800bae2:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800baea:	4b45      	ldr	r3, [pc, #276]	; (800bc00 <vTaskList+0x124>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800baf0:	4b43      	ldr	r3, [pc, #268]	; (800bc00 <vTaskList+0x124>)
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	4613      	mov	r3, r2
 800baf6:	00db      	lsls	r3, r3, #3
 800baf8:	4413      	add	r3, r2
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 fe8b 	bl	800c818 <pvPortMalloc>
 800bb02:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d076      	beq.n	800bbf8 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	68f9      	ldr	r1, [r7, #12]
 800bb0e:	68b8      	ldr	r0, [r7, #8]
 800bb10:	f7ff f988 	bl	800ae24 <uxTaskGetSystemState>
 800bb14:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800bb16:	2300      	movs	r3, #0
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	e066      	b.n	800bbea <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	00db      	lsls	r3, r3, #3
 800bb22:	4413      	add	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	461a      	mov	r2, r3
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	7b1b      	ldrb	r3, [r3, #12]
 800bb2e:	2b04      	cmp	r3, #4
 800bb30:	d81b      	bhi.n	800bb6a <vTaskList+0x8e>
 800bb32:	a201      	add	r2, pc, #4	; (adr r2, 800bb38 <vTaskList+0x5c>)
 800bb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb38:	0800bb4d 	.word	0x0800bb4d
 800bb3c:	0800bb53 	.word	0x0800bb53
 800bb40:	0800bb59 	.word	0x0800bb59
 800bb44:	0800bb5f 	.word	0x0800bb5f
 800bb48:	0800bb65 	.word	0x0800bb65
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800bb4c:	2358      	movs	r3, #88	; 0x58
 800bb4e:	74fb      	strb	r3, [r7, #19]
										break;
 800bb50:	e00e      	b.n	800bb70 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800bb52:	2352      	movs	r3, #82	; 0x52
 800bb54:	74fb      	strb	r3, [r7, #19]
										break;
 800bb56:	e00b      	b.n	800bb70 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800bb58:	2342      	movs	r3, #66	; 0x42
 800bb5a:	74fb      	strb	r3, [r7, #19]
										break;
 800bb5c:	e008      	b.n	800bb70 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800bb5e:	2353      	movs	r3, #83	; 0x53
 800bb60:	74fb      	strb	r3, [r7, #19]
										break;
 800bb62:	e005      	b.n	800bb70 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800bb64:	2344      	movs	r3, #68	; 0x44
 800bb66:	74fb      	strb	r3, [r7, #19]
										break;
 800bb68:	e002      	b.n	800bb70 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	74fb      	strb	r3, [r7, #19]
										break;
 800bb6e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800bb70:	697a      	ldr	r2, [r7, #20]
 800bb72:	4613      	mov	r3, r2
 800bb74:	00db      	lsls	r3, r3, #3
 800bb76:	4413      	add	r3, r2
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	4413      	add	r3, r2
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	4619      	mov	r1, r3
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f7ff ff83 	bl	800ba90 <prvWriteNameToBuffer>
 800bb8a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800bb8c:	7cf9      	ldrb	r1, [r7, #19]
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	4613      	mov	r3, r2
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	4413      	add	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	461a      	mov	r2, r3
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	6918      	ldr	r0, [r3, #16]
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	4613      	mov	r3, r2
 800bba4:	00db      	lsls	r3, r3, #3
 800bba6:	4413      	add	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	461a      	mov	r2, r3
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	4413      	add	r3, r2
 800bbb0:	8c1b      	ldrh	r3, [r3, #32]
 800bbb2:	461c      	mov	r4, r3
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	00db      	lsls	r3, r3, #3
 800bbba:	4413      	add	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	9400      	str	r4, [sp, #0]
 800bbca:	4603      	mov	r3, r0
 800bbcc:	460a      	mov	r2, r1
 800bbce:	490d      	ldr	r1, [pc, #52]	; (800bc04 <vTaskList+0x128>)
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f001 fe6f 	bl	800d8b4 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f7f4 fafa 	bl	80001d0 <strlen>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	697a      	ldr	r2, [r7, #20]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d394      	bcc.n	800bb1c <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800bbf2:	68b8      	ldr	r0, [r7, #8]
 800bbf4:	f000 fedc 	bl	800c9b0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbf8:	bf00      	nop
 800bbfa:	371c      	adds	r7, #28
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd90      	pop	{r4, r7, pc}
 800bc00:	20001250 	.word	0x20001250
 800bc04:	0800e190 	.word	0x0800e190

0800bc08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bc08:	b480      	push	{r7}
 800bc0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bc0c:	4b07      	ldr	r3, [pc, #28]	; (800bc2c <pvTaskIncrementMutexHeldCount+0x24>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d004      	beq.n	800bc1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bc14:	4b05      	ldr	r3, [pc, #20]	; (800bc2c <pvTaskIncrementMutexHeldCount+0x24>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc1a:	3201      	adds	r2, #1
 800bc1c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bc1e:	4b03      	ldr	r3, [pc, #12]	; (800bc2c <pvTaskIncrementMutexHeldCount+0x24>)
 800bc20:	681b      	ldr	r3, [r3, #0]
	}
 800bc22:	4618      	mov	r0, r3
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr
 800bc2c:	20000d7c 	.word	0x20000d7c

0800bc30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc3a:	4b21      	ldr	r3, [pc, #132]	; (800bcc0 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc40:	4b20      	ldr	r3, [pc, #128]	; (800bcc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3304      	adds	r3, #4
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fd fd30 	bl	80096ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc52:	d10a      	bne.n	800bc6a <prvAddCurrentTaskToDelayedList+0x3a>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d007      	beq.n	800bc6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc5a:	4b1a      	ldr	r3, [pc, #104]	; (800bcc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	4619      	mov	r1, r3
 800bc62:	4819      	ldr	r0, [pc, #100]	; (800bcc8 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc64:	f7fd fcc5 	bl	80095f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc68:	e026      	b.n	800bcb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4413      	add	r3, r2
 800bc70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc72:	4b14      	ldr	r3, [pc, #80]	; (800bcc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d209      	bcs.n	800bc96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc82:	4b12      	ldr	r3, [pc, #72]	; (800bccc <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	4b0f      	ldr	r3, [pc, #60]	; (800bcc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	4610      	mov	r0, r2
 800bc90:	f7fd fcd3 	bl	800963a <vListInsert>
}
 800bc94:	e010      	b.n	800bcb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc96:	4b0e      	ldr	r3, [pc, #56]	; (800bcd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	4b0a      	ldr	r3, [pc, #40]	; (800bcc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7fd fcc9 	bl	800963a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bca8:	4b0a      	ldr	r3, [pc, #40]	; (800bcd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d202      	bcs.n	800bcb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bcb2:	4a08      	ldr	r2, [pc, #32]	; (800bcd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	6013      	str	r3, [r2, #0]
}
 800bcb8:	bf00      	nop
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	20001254 	.word	0x20001254
 800bcc4:	20000d7c 	.word	0x20000d7c
 800bcc8:	2000123c 	.word	0x2000123c
 800bccc:	2000120c 	.word	0x2000120c
 800bcd0:	20001208 	.word	0x20001208
 800bcd4:	20001270 	.word	0x20001270

0800bcd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08a      	sub	sp, #40	; 0x28
 800bcdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bce2:	f000 fb07 	bl	800c2f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bce6:	4b1c      	ldr	r3, [pc, #112]	; (800bd58 <xTimerCreateTimerTask+0x80>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d021      	beq.n	800bd32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bcf6:	1d3a      	adds	r2, r7, #4
 800bcf8:	f107 0108 	add.w	r1, r7, #8
 800bcfc:	f107 030c 	add.w	r3, r7, #12
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fd fc2f 	bl	8009564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd06:	6879      	ldr	r1, [r7, #4]
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	9202      	str	r2, [sp, #8]
 800bd0e:	9301      	str	r3, [sp, #4]
 800bd10:	2302      	movs	r3, #2
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	2300      	movs	r3, #0
 800bd16:	460a      	mov	r2, r1
 800bd18:	4910      	ldr	r1, [pc, #64]	; (800bd5c <xTimerCreateTimerTask+0x84>)
 800bd1a:	4811      	ldr	r0, [pc, #68]	; (800bd60 <xTimerCreateTimerTask+0x88>)
 800bd1c:	f7fe fcfe 	bl	800a71c <xTaskCreateStatic>
 800bd20:	4603      	mov	r3, r0
 800bd22:	4a10      	ldr	r2, [pc, #64]	; (800bd64 <xTimerCreateTimerTask+0x8c>)
 800bd24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd26:	4b0f      	ldr	r3, [pc, #60]	; (800bd64 <xTimerCreateTimerTask+0x8c>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d10a      	bne.n	800bd4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3c:	f383 8811 	msr	BASEPRI, r3
 800bd40:	f3bf 8f6f 	isb	sy
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	613b      	str	r3, [r7, #16]
}
 800bd4a:	bf00      	nop
 800bd4c:	e7fe      	b.n	800bd4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd4e:	697b      	ldr	r3, [r7, #20]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	200012b4 	.word	0x200012b4
 800bd5c:	0800e1b8 	.word	0x0800e1b8
 800bd60:	0800be9d 	.word	0x0800be9d
 800bd64:	200012b8 	.word	0x200012b8

0800bd68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08a      	sub	sp, #40	; 0x28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
 800bd74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10a      	bne.n	800bd96 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	623b      	str	r3, [r7, #32]
}
 800bd92:	bf00      	nop
 800bd94:	e7fe      	b.n	800bd94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd96:	4b1a      	ldr	r3, [pc, #104]	; (800be00 <xTimerGenericCommand+0x98>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d02a      	beq.n	800bdf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	2b05      	cmp	r3, #5
 800bdae:	dc18      	bgt.n	800bde2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bdb0:	f7ff fcf8 	bl	800b7a4 <xTaskGetSchedulerState>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d109      	bne.n	800bdce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bdba:	4b11      	ldr	r3, [pc, #68]	; (800be00 <xTimerGenericCommand+0x98>)
 800bdbc:	6818      	ldr	r0, [r3, #0]
 800bdbe:	f107 0110 	add.w	r1, r7, #16
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdc6:	f7fd fe43 	bl	8009a50 <xQueueGenericSend>
 800bdca:	6278      	str	r0, [r7, #36]	; 0x24
 800bdcc:	e012      	b.n	800bdf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bdce:	4b0c      	ldr	r3, [pc, #48]	; (800be00 <xTimerGenericCommand+0x98>)
 800bdd0:	6818      	ldr	r0, [r3, #0]
 800bdd2:	f107 0110 	add.w	r1, r7, #16
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f7fd fe39 	bl	8009a50 <xQueueGenericSend>
 800bdde:	6278      	str	r0, [r7, #36]	; 0x24
 800bde0:	e008      	b.n	800bdf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bde2:	4b07      	ldr	r3, [pc, #28]	; (800be00 <xTimerGenericCommand+0x98>)
 800bde4:	6818      	ldr	r0, [r3, #0]
 800bde6:	f107 0110 	add.w	r1, r7, #16
 800bdea:	2300      	movs	r3, #0
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	f7fd ff2d 	bl	8009c4c <xQueueGenericSendFromISR>
 800bdf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3728      	adds	r7, #40	; 0x28
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	200012b4 	.word	0x200012b4

0800be04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b088      	sub	sp, #32
 800be08:	af02      	add	r7, sp, #8
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be0e:	4b22      	ldr	r3, [pc, #136]	; (800be98 <prvProcessExpiredTimer+0x94>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	3304      	adds	r3, #4
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fd fc45 	bl	80096ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be28:	f003 0304 	and.w	r3, r3, #4
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d022      	beq.n	800be76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	699a      	ldr	r2, [r3, #24]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	18d1      	adds	r1, r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	6978      	ldr	r0, [r7, #20]
 800be3e:	f000 f8d1 	bl	800bfe4 <prvInsertTimerInActiveList>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d01f      	beq.n	800be88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be48:	2300      	movs	r3, #0
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	2300      	movs	r3, #0
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	2100      	movs	r1, #0
 800be52:	6978      	ldr	r0, [r7, #20]
 800be54:	f7ff ff88 	bl	800bd68 <xTimerGenericCommand>
 800be58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d113      	bne.n	800be88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	60fb      	str	r3, [r7, #12]
}
 800be72:	bf00      	nop
 800be74:	e7fe      	b.n	800be74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be7c:	f023 0301 	bic.w	r3, r3, #1
 800be80:	b2da      	uxtb	r2, r3
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	6978      	ldr	r0, [r7, #20]
 800be8e:	4798      	blx	r3
}
 800be90:	bf00      	nop
 800be92:	3718      	adds	r7, #24
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	200012ac 	.word	0x200012ac

0800be9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bea4:	f107 0308 	add.w	r3, r7, #8
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 f857 	bl	800bf5c <prvGetNextExpireTime>
 800beae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	4619      	mov	r1, r3
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f000 f803 	bl	800bec0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800beba:	f000 f8d5 	bl	800c068 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bebe:	e7f1      	b.n	800bea4 <prvTimerTask+0x8>

0800bec0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800beca:	f7fe feef 	bl	800acac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bece:	f107 0308 	add.w	r3, r7, #8
 800bed2:	4618      	mov	r0, r3
 800bed4:	f000 f866 	bl	800bfa4 <prvSampleTimeNow>
 800bed8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d130      	bne.n	800bf42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10a      	bne.n	800befc <prvProcessTimerOrBlockTask+0x3c>
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	429a      	cmp	r2, r3
 800beec:	d806      	bhi.n	800befc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800beee:	f7fe feeb 	bl	800acc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bef2:	68f9      	ldr	r1, [r7, #12]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7ff ff85 	bl	800be04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800befa:	e024      	b.n	800bf46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d008      	beq.n	800bf14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf02:	4b13      	ldr	r3, [pc, #76]	; (800bf50 <prvProcessTimerOrBlockTask+0x90>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d101      	bne.n	800bf10 <prvProcessTimerOrBlockTask+0x50>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e000      	b.n	800bf12 <prvProcessTimerOrBlockTask+0x52>
 800bf10:	2300      	movs	r3, #0
 800bf12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf14:	4b0f      	ldr	r3, [pc, #60]	; (800bf54 <prvProcessTimerOrBlockTask+0x94>)
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	683a      	ldr	r2, [r7, #0]
 800bf20:	4619      	mov	r1, r3
 800bf22:	f7fe fbc7 	bl	800a6b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf26:	f7fe fecf 	bl	800acc8 <xTaskResumeAll>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10a      	bne.n	800bf46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf30:	4b09      	ldr	r3, [pc, #36]	; (800bf58 <prvProcessTimerOrBlockTask+0x98>)
 800bf32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf36:	601a      	str	r2, [r3, #0]
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	f3bf 8f6f 	isb	sy
}
 800bf40:	e001      	b.n	800bf46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf42:	f7fe fec1 	bl	800acc8 <xTaskResumeAll>
}
 800bf46:	bf00      	nop
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	200012b0 	.word	0x200012b0
 800bf54:	200012b4 	.word	0x200012b4
 800bf58:	e000ed04 	.word	0xe000ed04

0800bf5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf64:	4b0e      	ldr	r3, [pc, #56]	; (800bfa0 <prvGetNextExpireTime+0x44>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d101      	bne.n	800bf72 <prvGetNextExpireTime+0x16>
 800bf6e:	2201      	movs	r2, #1
 800bf70:	e000      	b.n	800bf74 <prvGetNextExpireTime+0x18>
 800bf72:	2200      	movs	r2, #0
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d105      	bne.n	800bf8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf80:	4b07      	ldr	r3, [pc, #28]	; (800bfa0 <prvGetNextExpireTime+0x44>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	60fb      	str	r3, [r7, #12]
 800bf8a:	e001      	b.n	800bf90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf90:	68fb      	ldr	r3, [r7, #12]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3714      	adds	r7, #20
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	200012ac 	.word	0x200012ac

0800bfa4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bfac:	f7fe ff2a 	bl	800ae04 <xTaskGetTickCount>
 800bfb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bfb2:	4b0b      	ldr	r3, [pc, #44]	; (800bfe0 <prvSampleTimeNow+0x3c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d205      	bcs.n	800bfc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bfbc:	f000 f936 	bl	800c22c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	601a      	str	r2, [r3, #0]
 800bfc6:	e002      	b.n	800bfce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfce:	4a04      	ldr	r2, [pc, #16]	; (800bfe0 <prvSampleTimeNow+0x3c>)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	200012bc 	.word	0x200012bc

0800bfe4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b086      	sub	sp, #24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
 800bff0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bff2:	2300      	movs	r3, #0
 800bff4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	429a      	cmp	r2, r3
 800c008:	d812      	bhi.n	800c030 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	429a      	cmp	r2, r3
 800c016:	d302      	bcc.n	800c01e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c018:	2301      	movs	r3, #1
 800c01a:	617b      	str	r3, [r7, #20]
 800c01c:	e01b      	b.n	800c056 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c01e:	4b10      	ldr	r3, [pc, #64]	; (800c060 <prvInsertTimerInActiveList+0x7c>)
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3304      	adds	r3, #4
 800c026:	4619      	mov	r1, r3
 800c028:	4610      	mov	r0, r2
 800c02a:	f7fd fb06 	bl	800963a <vListInsert>
 800c02e:	e012      	b.n	800c056 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	429a      	cmp	r2, r3
 800c036:	d206      	bcs.n	800c046 <prvInsertTimerInActiveList+0x62>
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d302      	bcc.n	800c046 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c040:	2301      	movs	r3, #1
 800c042:	617b      	str	r3, [r7, #20]
 800c044:	e007      	b.n	800c056 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c046:	4b07      	ldr	r3, [pc, #28]	; (800c064 <prvInsertTimerInActiveList+0x80>)
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	3304      	adds	r3, #4
 800c04e:	4619      	mov	r1, r3
 800c050:	4610      	mov	r0, r2
 800c052:	f7fd faf2 	bl	800963a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c056:	697b      	ldr	r3, [r7, #20]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3718      	adds	r7, #24
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	200012b0 	.word	0x200012b0
 800c064:	200012ac 	.word	0x200012ac

0800c068 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b08e      	sub	sp, #56	; 0x38
 800c06c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c06e:	e0ca      	b.n	800c206 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	da18      	bge.n	800c0a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c076:	1d3b      	adds	r3, r7, #4
 800c078:	3304      	adds	r3, #4
 800c07a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10a      	bne.n	800c098 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c086:	f383 8811 	msr	BASEPRI, r3
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	f3bf 8f4f 	dsb	sy
 800c092:	61fb      	str	r3, [r7, #28]
}
 800c094:	bf00      	nop
 800c096:	e7fe      	b.n	800c096 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c09e:	6850      	ldr	r0, [r2, #4]
 800c0a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0a2:	6892      	ldr	r2, [r2, #8]
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f2c0 80aa 	blt.w	800c204 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b6:	695b      	ldr	r3, [r3, #20]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d004      	beq.n	800c0c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0be:	3304      	adds	r3, #4
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fd faf3 	bl	80096ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0c6:	463b      	mov	r3, r7
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7ff ff6b 	bl	800bfa4 <prvSampleTimeNow>
 800c0ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b09      	cmp	r3, #9
 800c0d4:	f200 8097 	bhi.w	800c206 <prvProcessReceivedCommands+0x19e>
 800c0d8:	a201      	add	r2, pc, #4	; (adr r2, 800c0e0 <prvProcessReceivedCommands+0x78>)
 800c0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0de:	bf00      	nop
 800c0e0:	0800c109 	.word	0x0800c109
 800c0e4:	0800c109 	.word	0x0800c109
 800c0e8:	0800c109 	.word	0x0800c109
 800c0ec:	0800c17d 	.word	0x0800c17d
 800c0f0:	0800c191 	.word	0x0800c191
 800c0f4:	0800c1db 	.word	0x0800c1db
 800c0f8:	0800c109 	.word	0x0800c109
 800c0fc:	0800c109 	.word	0x0800c109
 800c100:	0800c17d 	.word	0x0800c17d
 800c104:	0800c191 	.word	0x0800c191
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c10e:	f043 0301 	orr.w	r3, r3, #1
 800c112:	b2da      	uxtb	r2, r3
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	18d1      	adds	r1, r2, r3
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c128:	f7ff ff5c 	bl	800bfe4 <prvInsertTimerInActiveList>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d069      	beq.n	800c206 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	6a1b      	ldr	r3, [r3, #32]
 800c136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c138:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c140:	f003 0304 	and.w	r3, r3, #4
 800c144:	2b00      	cmp	r3, #0
 800c146:	d05e      	beq.n	800c206 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	441a      	add	r2, r3
 800c150:	2300      	movs	r3, #0
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	2300      	movs	r3, #0
 800c156:	2100      	movs	r1, #0
 800c158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c15a:	f7ff fe05 	bl	800bd68 <xTimerGenericCommand>
 800c15e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c160:	6a3b      	ldr	r3, [r7, #32]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d14f      	bne.n	800c206 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	61bb      	str	r3, [r7, #24]
}
 800c178:	bf00      	nop
 800c17a:	e7fe      	b.n	800c17a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c182:	f023 0301 	bic.w	r3, r3, #1
 800c186:	b2da      	uxtb	r2, r3
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c18e:	e03a      	b.n	800c206 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c196:	f043 0301 	orr.w	r3, r3, #1
 800c19a:	b2da      	uxtb	r2, r3
 800c19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10a      	bne.n	800c1c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	617b      	str	r3, [r7, #20]
}
 800c1c2:	bf00      	nop
 800c1c4:	e7fe      	b.n	800c1c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c8:	699a      	ldr	r2, [r3, #24]
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	18d1      	adds	r1, r2, r3
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1d4:	f7ff ff06 	bl	800bfe4 <prvInsertTimerInActiveList>
					break;
 800c1d8:	e015      	b.n	800c206 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1e0:	f003 0302 	and.w	r3, r3, #2
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d103      	bne.n	800c1f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c1e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ea:	f000 fbe1 	bl	800c9b0 <vPortFree>
 800c1ee:	e00a      	b.n	800c206 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1f6:	f023 0301 	bic.w	r3, r3, #1
 800c1fa:	b2da      	uxtb	r2, r3
 800c1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c202:	e000      	b.n	800c206 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c204:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c206:	4b08      	ldr	r3, [pc, #32]	; (800c228 <prvProcessReceivedCommands+0x1c0>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	1d39      	adds	r1, r7, #4
 800c20c:	2200      	movs	r2, #0
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fd fe44 	bl	8009e9c <xQueueReceive>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	f47f af2a 	bne.w	800c070 <prvProcessReceivedCommands+0x8>
	}
}
 800c21c:	bf00      	nop
 800c21e:	bf00      	nop
 800c220:	3730      	adds	r7, #48	; 0x30
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	200012b4 	.word	0x200012b4

0800c22c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b088      	sub	sp, #32
 800c230:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c232:	e048      	b.n	800c2c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c234:	4b2d      	ldr	r3, [pc, #180]	; (800c2ec <prvSwitchTimerLists+0xc0>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c23e:	4b2b      	ldr	r3, [pc, #172]	; (800c2ec <prvSwitchTimerLists+0xc0>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	3304      	adds	r3, #4
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fd fa2d 	bl	80096ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6a1b      	ldr	r3, [r3, #32]
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c260:	f003 0304 	and.w	r3, r3, #4
 800c264:	2b00      	cmp	r3, #0
 800c266:	d02e      	beq.n	800c2c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	693a      	ldr	r2, [r7, #16]
 800c26e:	4413      	add	r3, r2
 800c270:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	429a      	cmp	r2, r3
 800c278:	d90e      	bls.n	800c298 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c286:	4b19      	ldr	r3, [pc, #100]	; (800c2ec <prvSwitchTimerLists+0xc0>)
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	3304      	adds	r3, #4
 800c28e:	4619      	mov	r1, r3
 800c290:	4610      	mov	r0, r2
 800c292:	f7fd f9d2 	bl	800963a <vListInsert>
 800c296:	e016      	b.n	800c2c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c298:	2300      	movs	r3, #0
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	2300      	movs	r3, #0
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f7ff fd60 	bl	800bd68 <xTimerGenericCommand>
 800c2a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	603b      	str	r3, [r7, #0]
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2c6:	4b09      	ldr	r3, [pc, #36]	; (800c2ec <prvSwitchTimerLists+0xc0>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1b1      	bne.n	800c234 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2d0:	4b06      	ldr	r3, [pc, #24]	; (800c2ec <prvSwitchTimerLists+0xc0>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2d6:	4b06      	ldr	r3, [pc, #24]	; (800c2f0 <prvSwitchTimerLists+0xc4>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a04      	ldr	r2, [pc, #16]	; (800c2ec <prvSwitchTimerLists+0xc0>)
 800c2dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2de:	4a04      	ldr	r2, [pc, #16]	; (800c2f0 <prvSwitchTimerLists+0xc4>)
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	6013      	str	r3, [r2, #0]
}
 800c2e4:	bf00      	nop
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	200012ac 	.word	0x200012ac
 800c2f0:	200012b0 	.word	0x200012b0

0800c2f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2fa:	f000 f96b 	bl	800c5d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2fe:	4b15      	ldr	r3, [pc, #84]	; (800c354 <prvCheckForValidListAndQueue+0x60>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d120      	bne.n	800c348 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c306:	4814      	ldr	r0, [pc, #80]	; (800c358 <prvCheckForValidListAndQueue+0x64>)
 800c308:	f7fd f946 	bl	8009598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c30c:	4813      	ldr	r0, [pc, #76]	; (800c35c <prvCheckForValidListAndQueue+0x68>)
 800c30e:	f7fd f943 	bl	8009598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c312:	4b13      	ldr	r3, [pc, #76]	; (800c360 <prvCheckForValidListAndQueue+0x6c>)
 800c314:	4a10      	ldr	r2, [pc, #64]	; (800c358 <prvCheckForValidListAndQueue+0x64>)
 800c316:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c318:	4b12      	ldr	r3, [pc, #72]	; (800c364 <prvCheckForValidListAndQueue+0x70>)
 800c31a:	4a10      	ldr	r2, [pc, #64]	; (800c35c <prvCheckForValidListAndQueue+0x68>)
 800c31c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c31e:	2300      	movs	r3, #0
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	4b11      	ldr	r3, [pc, #68]	; (800c368 <prvCheckForValidListAndQueue+0x74>)
 800c324:	4a11      	ldr	r2, [pc, #68]	; (800c36c <prvCheckForValidListAndQueue+0x78>)
 800c326:	2110      	movs	r1, #16
 800c328:	200a      	movs	r0, #10
 800c32a:	f7fd fa51 	bl	80097d0 <xQueueGenericCreateStatic>
 800c32e:	4603      	mov	r3, r0
 800c330:	4a08      	ldr	r2, [pc, #32]	; (800c354 <prvCheckForValidListAndQueue+0x60>)
 800c332:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c334:	4b07      	ldr	r3, [pc, #28]	; (800c354 <prvCheckForValidListAndQueue+0x60>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d005      	beq.n	800c348 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c33c:	4b05      	ldr	r3, [pc, #20]	; (800c354 <prvCheckForValidListAndQueue+0x60>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	490b      	ldr	r1, [pc, #44]	; (800c370 <prvCheckForValidListAndQueue+0x7c>)
 800c342:	4618      	mov	r0, r3
 800c344:	f7fe f962 	bl	800a60c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c348:	f000 f974 	bl	800c634 <vPortExitCritical>
}
 800c34c:	bf00      	nop
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	200012b4 	.word	0x200012b4
 800c358:	20001284 	.word	0x20001284
 800c35c:	20001298 	.word	0x20001298
 800c360:	200012ac 	.word	0x200012ac
 800c364:	200012b0 	.word	0x200012b0
 800c368:	20001360 	.word	0x20001360
 800c36c:	200012c0 	.word	0x200012c0
 800c370:	0800e1c0 	.word	0x0800e1c0

0800c374 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	3b04      	subs	r3, #4
 800c384:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c38c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3b04      	subs	r3, #4
 800c392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	f023 0201 	bic.w	r2, r3, #1
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	3b04      	subs	r3, #4
 800c3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3a4:	4a0c      	ldr	r2, [pc, #48]	; (800c3d8 <pxPortInitialiseStack+0x64>)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3b14      	subs	r3, #20
 800c3ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	3b04      	subs	r3, #4
 800c3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f06f 0202 	mvn.w	r2, #2
 800c3c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	3b20      	subs	r3, #32
 800c3c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	0800c3dd 	.word	0x0800c3dd

0800c3dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3e6:	4b12      	ldr	r3, [pc, #72]	; (800c430 <prvTaskExitError+0x54>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ee:	d00a      	beq.n	800c406 <prvTaskExitError+0x2a>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	60fb      	str	r3, [r7, #12]
}
 800c402:	bf00      	nop
 800c404:	e7fe      	b.n	800c404 <prvTaskExitError+0x28>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	60bb      	str	r3, [r7, #8]
}
 800c418:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c41a:	bf00      	nop
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d0fc      	beq.n	800c41c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c422:	bf00      	nop
 800c424:	bf00      	nop
 800c426:	3714      	adds	r7, #20
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr
 800c430:	2000011c 	.word	0x2000011c
	...

0800c440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c440:	4b07      	ldr	r3, [pc, #28]	; (800c460 <pxCurrentTCBConst2>)
 800c442:	6819      	ldr	r1, [r3, #0]
 800c444:	6808      	ldr	r0, [r1, #0]
 800c446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c44a:	f380 8809 	msr	PSP, r0
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f04f 0000 	mov.w	r0, #0
 800c456:	f380 8811 	msr	BASEPRI, r0
 800c45a:	4770      	bx	lr
 800c45c:	f3af 8000 	nop.w

0800c460 <pxCurrentTCBConst2>:
 800c460:	20000d7c 	.word	0x20000d7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c464:	bf00      	nop
 800c466:	bf00      	nop

0800c468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c468:	4808      	ldr	r0, [pc, #32]	; (800c48c <prvPortStartFirstTask+0x24>)
 800c46a:	6800      	ldr	r0, [r0, #0]
 800c46c:	6800      	ldr	r0, [r0, #0]
 800c46e:	f380 8808 	msr	MSP, r0
 800c472:	f04f 0000 	mov.w	r0, #0
 800c476:	f380 8814 	msr	CONTROL, r0
 800c47a:	b662      	cpsie	i
 800c47c:	b661      	cpsie	f
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	df00      	svc	0
 800c488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c48a:	bf00      	nop
 800c48c:	e000ed08 	.word	0xe000ed08

0800c490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c496:	4b46      	ldr	r3, [pc, #280]	; (800c5b0 <xPortStartScheduler+0x120>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a46      	ldr	r2, [pc, #280]	; (800c5b4 <xPortStartScheduler+0x124>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d10a      	bne.n	800c4b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	613b      	str	r3, [r7, #16]
}
 800c4b2:	bf00      	nop
 800c4b4:	e7fe      	b.n	800c4b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4b6:	4b3e      	ldr	r3, [pc, #248]	; (800c5b0 <xPortStartScheduler+0x120>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a3f      	ldr	r2, [pc, #252]	; (800c5b8 <xPortStartScheduler+0x128>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d10a      	bne.n	800c4d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	60fb      	str	r3, [r7, #12]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4d6:	4b39      	ldr	r3, [pc, #228]	; (800c5bc <xPortStartScheduler+0x12c>)
 800c4d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	22ff      	movs	r2, #255	; 0xff
 800c4e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4f0:	78fb      	ldrb	r3, [r7, #3]
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c4f8:	b2da      	uxtb	r2, r3
 800c4fa:	4b31      	ldr	r3, [pc, #196]	; (800c5c0 <xPortStartScheduler+0x130>)
 800c4fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4fe:	4b31      	ldr	r3, [pc, #196]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c500:	2207      	movs	r2, #7
 800c502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c504:	e009      	b.n	800c51a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c506:	4b2f      	ldr	r3, [pc, #188]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	3b01      	subs	r3, #1
 800c50c:	4a2d      	ldr	r2, [pc, #180]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c50e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c510:	78fb      	ldrb	r3, [r7, #3]
 800c512:	b2db      	uxtb	r3, r3
 800c514:	005b      	lsls	r3, r3, #1
 800c516:	b2db      	uxtb	r3, r3
 800c518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c51a:	78fb      	ldrb	r3, [r7, #3]
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c522:	2b80      	cmp	r3, #128	; 0x80
 800c524:	d0ef      	beq.n	800c506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c526:	4b27      	ldr	r3, [pc, #156]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f1c3 0307 	rsb	r3, r3, #7
 800c52e:	2b04      	cmp	r3, #4
 800c530:	d00a      	beq.n	800c548 <xPortStartScheduler+0xb8>
	__asm volatile
 800c532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c536:	f383 8811 	msr	BASEPRI, r3
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	60bb      	str	r3, [r7, #8]
}
 800c544:	bf00      	nop
 800c546:	e7fe      	b.n	800c546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c548:	4b1e      	ldr	r3, [pc, #120]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	021b      	lsls	r3, r3, #8
 800c54e:	4a1d      	ldr	r2, [pc, #116]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c552:	4b1c      	ldr	r3, [pc, #112]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c55a:	4a1a      	ldr	r2, [pc, #104]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c55c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	b2da      	uxtb	r2, r3
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c566:	4b18      	ldr	r3, [pc, #96]	; (800c5c8 <xPortStartScheduler+0x138>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a17      	ldr	r2, [pc, #92]	; (800c5c8 <xPortStartScheduler+0x138>)
 800c56c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c572:	4b15      	ldr	r3, [pc, #84]	; (800c5c8 <xPortStartScheduler+0x138>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a14      	ldr	r2, [pc, #80]	; (800c5c8 <xPortStartScheduler+0x138>)
 800c578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c57c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c57e:	f000 f8dd 	bl	800c73c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c582:	4b12      	ldr	r3, [pc, #72]	; (800c5cc <xPortStartScheduler+0x13c>)
 800c584:	2200      	movs	r2, #0
 800c586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c588:	f000 f8fc 	bl	800c784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c58c:	4b10      	ldr	r3, [pc, #64]	; (800c5d0 <xPortStartScheduler+0x140>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a0f      	ldr	r2, [pc, #60]	; (800c5d0 <xPortStartScheduler+0x140>)
 800c592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c598:	f7ff ff66 	bl	800c468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c59c:	f7fe fd8c 	bl	800b0b8 <vTaskSwitchContext>
	prvTaskExitError();
 800c5a0:	f7ff ff1c 	bl	800c3dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	e000ed00 	.word	0xe000ed00
 800c5b4:	410fc271 	.word	0x410fc271
 800c5b8:	410fc270 	.word	0x410fc270
 800c5bc:	e000e400 	.word	0xe000e400
 800c5c0:	200013b0 	.word	0x200013b0
 800c5c4:	200013b4 	.word	0x200013b4
 800c5c8:	e000ed20 	.word	0xe000ed20
 800c5cc:	2000011c 	.word	0x2000011c
 800c5d0:	e000ef34 	.word	0xe000ef34

0800c5d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	607b      	str	r3, [r7, #4]
}
 800c5ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5ee:	4b0f      	ldr	r3, [pc, #60]	; (800c62c <vPortEnterCritical+0x58>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	4a0d      	ldr	r2, [pc, #52]	; (800c62c <vPortEnterCritical+0x58>)
 800c5f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5f8:	4b0c      	ldr	r3, [pc, #48]	; (800c62c <vPortEnterCritical+0x58>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d10f      	bne.n	800c620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c600:	4b0b      	ldr	r3, [pc, #44]	; (800c630 <vPortEnterCritical+0x5c>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	b2db      	uxtb	r3, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00a      	beq.n	800c620 <vPortEnterCritical+0x4c>
	__asm volatile
 800c60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60e:	f383 8811 	msr	BASEPRI, r3
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	f3bf 8f4f 	dsb	sy
 800c61a:	603b      	str	r3, [r7, #0]
}
 800c61c:	bf00      	nop
 800c61e:	e7fe      	b.n	800c61e <vPortEnterCritical+0x4a>
	}
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	2000011c 	.word	0x2000011c
 800c630:	e000ed04 	.word	0xe000ed04

0800c634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c63a:	4b12      	ldr	r3, [pc, #72]	; (800c684 <vPortExitCritical+0x50>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d10a      	bne.n	800c658 <vPortExitCritical+0x24>
	__asm volatile
 800c642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c646:	f383 8811 	msr	BASEPRI, r3
 800c64a:	f3bf 8f6f 	isb	sy
 800c64e:	f3bf 8f4f 	dsb	sy
 800c652:	607b      	str	r3, [r7, #4]
}
 800c654:	bf00      	nop
 800c656:	e7fe      	b.n	800c656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c658:	4b0a      	ldr	r3, [pc, #40]	; (800c684 <vPortExitCritical+0x50>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3b01      	subs	r3, #1
 800c65e:	4a09      	ldr	r2, [pc, #36]	; (800c684 <vPortExitCritical+0x50>)
 800c660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c662:	4b08      	ldr	r3, [pc, #32]	; (800c684 <vPortExitCritical+0x50>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d105      	bne.n	800c676 <vPortExitCritical+0x42>
 800c66a:	2300      	movs	r3, #0
 800c66c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	f383 8811 	msr	BASEPRI, r3
}
 800c674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c676:	bf00      	nop
 800c678:	370c      	adds	r7, #12
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	2000011c 	.word	0x2000011c
	...

0800c690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c690:	f3ef 8009 	mrs	r0, PSP
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	4b15      	ldr	r3, [pc, #84]	; (800c6f0 <pxCurrentTCBConst>)
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	f01e 0f10 	tst.w	lr, #16
 800c6a0:	bf08      	it	eq
 800c6a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6aa:	6010      	str	r0, [r2, #0]
 800c6ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6b4:	f380 8811 	msr	BASEPRI, r0
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f7fe fcfa 	bl	800b0b8 <vTaskSwitchContext>
 800c6c4:	f04f 0000 	mov.w	r0, #0
 800c6c8:	f380 8811 	msr	BASEPRI, r0
 800c6cc:	bc09      	pop	{r0, r3}
 800c6ce:	6819      	ldr	r1, [r3, #0]
 800c6d0:	6808      	ldr	r0, [r1, #0]
 800c6d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d6:	f01e 0f10 	tst.w	lr, #16
 800c6da:	bf08      	it	eq
 800c6dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6e0:	f380 8809 	msr	PSP, r0
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	f3af 8000 	nop.w

0800c6f0 <pxCurrentTCBConst>:
 800c6f0:	20000d7c 	.word	0x20000d7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop

0800c6f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	607b      	str	r3, [r7, #4]
}
 800c710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c712:	f7fe fc17 	bl	800af44 <xTaskIncrementTick>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d003      	beq.n	800c724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c71c:	4b06      	ldr	r3, [pc, #24]	; (800c738 <xPortSysTickHandler+0x40>)
 800c71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	2300      	movs	r3, #0
 800c726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	f383 8811 	msr	BASEPRI, r3
}
 800c72e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c730:	bf00      	nop
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	e000ed04 	.word	0xe000ed04

0800c73c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c73c:	b480      	push	{r7}
 800c73e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c740:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <vPortSetupTimerInterrupt+0x34>)
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c746:	4b0b      	ldr	r3, [pc, #44]	; (800c774 <vPortSetupTimerInterrupt+0x38>)
 800c748:	2200      	movs	r2, #0
 800c74a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c74c:	4b0a      	ldr	r3, [pc, #40]	; (800c778 <vPortSetupTimerInterrupt+0x3c>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a0a      	ldr	r2, [pc, #40]	; (800c77c <vPortSetupTimerInterrupt+0x40>)
 800c752:	fba2 2303 	umull	r2, r3, r2, r3
 800c756:	099b      	lsrs	r3, r3, #6
 800c758:	4a09      	ldr	r2, [pc, #36]	; (800c780 <vPortSetupTimerInterrupt+0x44>)
 800c75a:	3b01      	subs	r3, #1
 800c75c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c75e:	4b04      	ldr	r3, [pc, #16]	; (800c770 <vPortSetupTimerInterrupt+0x34>)
 800c760:	2207      	movs	r2, #7
 800c762:	601a      	str	r2, [r3, #0]
}
 800c764:	bf00      	nop
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	e000e010 	.word	0xe000e010
 800c774:	e000e018 	.word	0xe000e018
 800c778:	20000000 	.word	0x20000000
 800c77c:	10624dd3 	.word	0x10624dd3
 800c780:	e000e014 	.word	0xe000e014

0800c784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c794 <vPortEnableVFP+0x10>
 800c788:	6801      	ldr	r1, [r0, #0]
 800c78a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c78e:	6001      	str	r1, [r0, #0]
 800c790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c792:	bf00      	nop
 800c794:	e000ed88 	.word	0xe000ed88

0800c798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c79e:	f3ef 8305 	mrs	r3, IPSR
 800c7a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2b0f      	cmp	r3, #15
 800c7a8:	d914      	bls.n	800c7d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7aa:	4a17      	ldr	r2, [pc, #92]	; (800c808 <vPortValidateInterruptPriority+0x70>)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7b4:	4b15      	ldr	r3, [pc, #84]	; (800c80c <vPortValidateInterruptPriority+0x74>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	7afa      	ldrb	r2, [r7, #11]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d20a      	bcs.n	800c7d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	607b      	str	r3, [r7, #4]
}
 800c7d0:	bf00      	nop
 800c7d2:	e7fe      	b.n	800c7d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7d4:	4b0e      	ldr	r3, [pc, #56]	; (800c810 <vPortValidateInterruptPriority+0x78>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c7dc:	4b0d      	ldr	r3, [pc, #52]	; (800c814 <vPortValidateInterruptPriority+0x7c>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d90a      	bls.n	800c7fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	603b      	str	r3, [r7, #0]
}
 800c7f6:	bf00      	nop
 800c7f8:	e7fe      	b.n	800c7f8 <vPortValidateInterruptPriority+0x60>
	}
 800c7fa:	bf00      	nop
 800c7fc:	3714      	adds	r7, #20
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	e000e3f0 	.word	0xe000e3f0
 800c80c:	200013b0 	.word	0x200013b0
 800c810:	e000ed0c 	.word	0xe000ed0c
 800c814:	200013b4 	.word	0x200013b4

0800c818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08a      	sub	sp, #40	; 0x28
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c820:	2300      	movs	r3, #0
 800c822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c824:	f7fe fa42 	bl	800acac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c828:	4b5b      	ldr	r3, [pc, #364]	; (800c998 <pvPortMalloc+0x180>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c830:	f000 f92c 	bl	800ca8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c834:	4b59      	ldr	r3, [pc, #356]	; (800c99c <pvPortMalloc+0x184>)
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4013      	ands	r3, r2
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f040 8093 	bne.w	800c968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d01d      	beq.n	800c884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c848:	2208      	movs	r2, #8
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4413      	add	r3, r2
 800c84e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f003 0307 	and.w	r3, r3, #7
 800c856:	2b00      	cmp	r3, #0
 800c858:	d014      	beq.n	800c884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f023 0307 	bic.w	r3, r3, #7
 800c860:	3308      	adds	r3, #8
 800c862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f003 0307 	and.w	r3, r3, #7
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00a      	beq.n	800c884 <pvPortMalloc+0x6c>
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	617b      	str	r3, [r7, #20]
}
 800c880:	bf00      	nop
 800c882:	e7fe      	b.n	800c882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d06e      	beq.n	800c968 <pvPortMalloc+0x150>
 800c88a:	4b45      	ldr	r3, [pc, #276]	; (800c9a0 <pvPortMalloc+0x188>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	429a      	cmp	r2, r3
 800c892:	d869      	bhi.n	800c968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c894:	4b43      	ldr	r3, [pc, #268]	; (800c9a4 <pvPortMalloc+0x18c>)
 800c896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c898:	4b42      	ldr	r3, [pc, #264]	; (800c9a4 <pvPortMalloc+0x18c>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c89e:	e004      	b.n	800c8aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d903      	bls.n	800c8bc <pvPortMalloc+0xa4>
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1f1      	bne.n	800c8a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8bc:	4b36      	ldr	r3, [pc, #216]	; (800c998 <pvPortMalloc+0x180>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d050      	beq.n	800c968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8c6:	6a3b      	ldr	r3, [r7, #32]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2208      	movs	r2, #8
 800c8cc:	4413      	add	r3, r2
 800c8ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	685a      	ldr	r2, [r3, #4]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	1ad2      	subs	r2, r2, r3
 800c8e0:	2308      	movs	r3, #8
 800c8e2:	005b      	lsls	r3, r3, #1
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d91f      	bls.n	800c928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00a      	beq.n	800c910 <pvPortMalloc+0xf8>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	613b      	str	r3, [r7, #16]
}
 800c90c:	bf00      	nop
 800c90e:	e7fe      	b.n	800c90e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	1ad2      	subs	r2, r2, r3
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c922:	69b8      	ldr	r0, [r7, #24]
 800c924:	f000 f914 	bl	800cb50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c928:	4b1d      	ldr	r3, [pc, #116]	; (800c9a0 <pvPortMalloc+0x188>)
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	4a1b      	ldr	r2, [pc, #108]	; (800c9a0 <pvPortMalloc+0x188>)
 800c934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c936:	4b1a      	ldr	r3, [pc, #104]	; (800c9a0 <pvPortMalloc+0x188>)
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	4b1b      	ldr	r3, [pc, #108]	; (800c9a8 <pvPortMalloc+0x190>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d203      	bcs.n	800c94a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c942:	4b17      	ldr	r3, [pc, #92]	; (800c9a0 <pvPortMalloc+0x188>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a18      	ldr	r2, [pc, #96]	; (800c9a8 <pvPortMalloc+0x190>)
 800c948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	4b13      	ldr	r3, [pc, #76]	; (800c99c <pvPortMalloc+0x184>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	431a      	orrs	r2, r3
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95a:	2200      	movs	r2, #0
 800c95c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c95e:	4b13      	ldr	r3, [pc, #76]	; (800c9ac <pvPortMalloc+0x194>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3301      	adds	r3, #1
 800c964:	4a11      	ldr	r2, [pc, #68]	; (800c9ac <pvPortMalloc+0x194>)
 800c966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c968:	f7fe f9ae 	bl	800acc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	f003 0307 	and.w	r3, r3, #7
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00a      	beq.n	800c98c <pvPortMalloc+0x174>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	60fb      	str	r3, [r7, #12]
}
 800c988:	bf00      	nop
 800c98a:	e7fe      	b.n	800c98a <pvPortMalloc+0x172>
	return pvReturn;
 800c98c:	69fb      	ldr	r3, [r7, #28]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3728      	adds	r7, #40	; 0x28
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	20004fc0 	.word	0x20004fc0
 800c99c:	20004fd4 	.word	0x20004fd4
 800c9a0:	20004fc4 	.word	0x20004fc4
 800c9a4:	20004fb8 	.word	0x20004fb8
 800c9a8:	20004fc8 	.word	0x20004fc8
 800c9ac:	20004fcc 	.word	0x20004fcc

0800c9b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d04d      	beq.n	800ca5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9c2:	2308      	movs	r3, #8
 800c9c4:	425b      	negs	r3, r3
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	685a      	ldr	r2, [r3, #4]
 800c9d4:	4b24      	ldr	r3, [pc, #144]	; (800ca68 <vPortFree+0xb8>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4013      	ands	r3, r2
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d10a      	bne.n	800c9f4 <vPortFree+0x44>
	__asm volatile
 800c9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e2:	f383 8811 	msr	BASEPRI, r3
 800c9e6:	f3bf 8f6f 	isb	sy
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	60fb      	str	r3, [r7, #12]
}
 800c9f0:	bf00      	nop
 800c9f2:	e7fe      	b.n	800c9f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00a      	beq.n	800ca12 <vPortFree+0x62>
	__asm volatile
 800c9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca00:	f383 8811 	msr	BASEPRI, r3
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	60bb      	str	r3, [r7, #8]
}
 800ca0e:	bf00      	nop
 800ca10:	e7fe      	b.n	800ca10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	685a      	ldr	r2, [r3, #4]
 800ca16:	4b14      	ldr	r3, [pc, #80]	; (800ca68 <vPortFree+0xb8>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4013      	ands	r3, r2
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d01e      	beq.n	800ca5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d11a      	bne.n	800ca5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	4b0e      	ldr	r3, [pc, #56]	; (800ca68 <vPortFree+0xb8>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	43db      	mvns	r3, r3
 800ca32:	401a      	ands	r2, r3
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca38:	f7fe f938 	bl	800acac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	685a      	ldr	r2, [r3, #4]
 800ca40:	4b0a      	ldr	r3, [pc, #40]	; (800ca6c <vPortFree+0xbc>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4413      	add	r3, r2
 800ca46:	4a09      	ldr	r2, [pc, #36]	; (800ca6c <vPortFree+0xbc>)
 800ca48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca4a:	6938      	ldr	r0, [r7, #16]
 800ca4c:	f000 f880 	bl	800cb50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca50:	4b07      	ldr	r3, [pc, #28]	; (800ca70 <vPortFree+0xc0>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3301      	adds	r3, #1
 800ca56:	4a06      	ldr	r2, [pc, #24]	; (800ca70 <vPortFree+0xc0>)
 800ca58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca5a:	f7fe f935 	bl	800acc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca5e:	bf00      	nop
 800ca60:	3718      	adds	r7, #24
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	20004fd4 	.word	0x20004fd4
 800ca6c:	20004fc4 	.word	0x20004fc4
 800ca70:	20004fd0 	.word	0x20004fd0

0800ca74 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800ca74:	b480      	push	{r7}
 800ca76:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800ca78:	4b03      	ldr	r3, [pc, #12]	; (800ca88 <xPortGetFreeHeapSize+0x14>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	20004fc4 	.word	0x20004fc4

0800ca8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca92:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ca96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca98:	4b27      	ldr	r3, [pc, #156]	; (800cb38 <prvHeapInit+0xac>)
 800ca9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f003 0307 	and.w	r3, r3, #7
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00c      	beq.n	800cac0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	3307      	adds	r3, #7
 800caaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f023 0307 	bic.w	r3, r3, #7
 800cab2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	4a1f      	ldr	r2, [pc, #124]	; (800cb38 <prvHeapInit+0xac>)
 800cabc:	4413      	add	r3, r2
 800cabe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cac4:	4a1d      	ldr	r2, [pc, #116]	; (800cb3c <prvHeapInit+0xb0>)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800caca:	4b1c      	ldr	r3, [pc, #112]	; (800cb3c <prvHeapInit+0xb0>)
 800cacc:	2200      	movs	r2, #0
 800cace:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	4413      	add	r3, r2
 800cad6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cad8:	2208      	movs	r2, #8
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	1a9b      	subs	r3, r3, r2
 800cade:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f023 0307 	bic.w	r3, r3, #7
 800cae6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	4a15      	ldr	r2, [pc, #84]	; (800cb40 <prvHeapInit+0xb4>)
 800caec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800caee:	4b14      	ldr	r3, [pc, #80]	; (800cb40 <prvHeapInit+0xb4>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2200      	movs	r2, #0
 800caf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800caf6:	4b12      	ldr	r3, [pc, #72]	; (800cb40 <prvHeapInit+0xb4>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2200      	movs	r2, #0
 800cafc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	1ad2      	subs	r2, r2, r3
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb0c:	4b0c      	ldr	r3, [pc, #48]	; (800cb40 <prvHeapInit+0xb4>)
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	4a0a      	ldr	r2, [pc, #40]	; (800cb44 <prvHeapInit+0xb8>)
 800cb1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	4a09      	ldr	r2, [pc, #36]	; (800cb48 <prvHeapInit+0xbc>)
 800cb22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb24:	4b09      	ldr	r3, [pc, #36]	; (800cb4c <prvHeapInit+0xc0>)
 800cb26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb2a:	601a      	str	r2, [r3, #0]
}
 800cb2c:	bf00      	nop
 800cb2e:	3714      	adds	r7, #20
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr
 800cb38:	200013b8 	.word	0x200013b8
 800cb3c:	20004fb8 	.word	0x20004fb8
 800cb40:	20004fc0 	.word	0x20004fc0
 800cb44:	20004fc8 	.word	0x20004fc8
 800cb48:	20004fc4 	.word	0x20004fc4
 800cb4c:	20004fd4 	.word	0x20004fd4

0800cb50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb58:	4b28      	ldr	r3, [pc, #160]	; (800cbfc <prvInsertBlockIntoFreeList+0xac>)
 800cb5a:	60fb      	str	r3, [r7, #12]
 800cb5c:	e002      	b.n	800cb64 <prvInsertBlockIntoFreeList+0x14>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d8f7      	bhi.n	800cb5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	4413      	add	r3, r2
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d108      	bne.n	800cb92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	685a      	ldr	r2, [r3, #4]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	441a      	add	r2, r3
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	441a      	add	r2, r3
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d118      	bne.n	800cbd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	4b15      	ldr	r3, [pc, #84]	; (800cc00 <prvInsertBlockIntoFreeList+0xb0>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d00d      	beq.n	800cbce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	685a      	ldr	r2, [r3, #4]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	441a      	add	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	e008      	b.n	800cbe0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbce:	4b0c      	ldr	r3, [pc, #48]	; (800cc00 <prvInsertBlockIntoFreeList+0xb0>)
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	601a      	str	r2, [r3, #0]
 800cbd6:	e003      	b.n	800cbe0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d002      	beq.n	800cbee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbee:	bf00      	nop
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	20004fb8 	.word	0x20004fb8
 800cc00:	20004fc0 	.word	0x20004fc0

0800cc04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	4912      	ldr	r1, [pc, #72]	; (800cc54 <MX_USB_DEVICE_Init+0x50>)
 800cc0c:	4812      	ldr	r0, [pc, #72]	; (800cc58 <MX_USB_DEVICE_Init+0x54>)
 800cc0e:	f7fa ff99 	bl	8007b44 <USBD_Init>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d001      	beq.n	800cc1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cc18:	f7f4 f979 	bl	8000f0e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cc1c:	490f      	ldr	r1, [pc, #60]	; (800cc5c <MX_USB_DEVICE_Init+0x58>)
 800cc1e:	480e      	ldr	r0, [pc, #56]	; (800cc58 <MX_USB_DEVICE_Init+0x54>)
 800cc20:	f7fa ffc0 	bl	8007ba4 <USBD_RegisterClass>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cc2a:	f7f4 f970 	bl	8000f0e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cc2e:	490c      	ldr	r1, [pc, #48]	; (800cc60 <MX_USB_DEVICE_Init+0x5c>)
 800cc30:	4809      	ldr	r0, [pc, #36]	; (800cc58 <MX_USB_DEVICE_Init+0x54>)
 800cc32:	f7fa fee1 	bl	80079f8 <USBD_CDC_RegisterInterface>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d001      	beq.n	800cc40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cc3c:	f7f4 f967 	bl	8000f0e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc40:	4805      	ldr	r0, [pc, #20]	; (800cc58 <MX_USB_DEVICE_Init+0x54>)
 800cc42:	f7fa ffd6 	bl	8007bf2 <USBD_Start>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d001      	beq.n	800cc50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cc4c:	f7f4 f95f 	bl	8000f0e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc50:	bf00      	nop
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	20000134 	.word	0x20000134
 800cc58:	20006a54 	.word	0x20006a54
 800cc5c:	20000018 	.word	0x20000018
 800cc60:	20000120 	.word	0x20000120

0800cc64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc68:	2200      	movs	r2, #0
 800cc6a:	4905      	ldr	r1, [pc, #20]	; (800cc80 <CDC_Init_FS+0x1c>)
 800cc6c:	4805      	ldr	r0, [pc, #20]	; (800cc84 <CDC_Init_FS+0x20>)
 800cc6e:	f7fa fed8 	bl	8007a22 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc72:	4905      	ldr	r1, [pc, #20]	; (800cc88 <CDC_Init_FS+0x24>)
 800cc74:	4803      	ldr	r0, [pc, #12]	; (800cc84 <CDC_Init_FS+0x20>)
 800cc76:	f7fa fef2 	bl	8007a5e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	20007524 	.word	0x20007524
 800cc84:	20006a54 	.word	0x20006a54
 800cc88:	20006d24 	.word	0x20006d24

0800cc8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	4603      	mov	r3, r0
 800cca4:	6039      	str	r1, [r7, #0]
 800cca6:	71fb      	strb	r3, [r7, #7]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ccac:	79fb      	ldrb	r3, [r7, #7]
 800ccae:	2b23      	cmp	r3, #35	; 0x23
 800ccb0:	d84a      	bhi.n	800cd48 <CDC_Control_FS+0xac>
 800ccb2:	a201      	add	r2, pc, #4	; (adr r2, 800ccb8 <CDC_Control_FS+0x1c>)
 800ccb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb8:	0800cd49 	.word	0x0800cd49
 800ccbc:	0800cd49 	.word	0x0800cd49
 800ccc0:	0800cd49 	.word	0x0800cd49
 800ccc4:	0800cd49 	.word	0x0800cd49
 800ccc8:	0800cd49 	.word	0x0800cd49
 800cccc:	0800cd49 	.word	0x0800cd49
 800ccd0:	0800cd49 	.word	0x0800cd49
 800ccd4:	0800cd49 	.word	0x0800cd49
 800ccd8:	0800cd49 	.word	0x0800cd49
 800ccdc:	0800cd49 	.word	0x0800cd49
 800cce0:	0800cd49 	.word	0x0800cd49
 800cce4:	0800cd49 	.word	0x0800cd49
 800cce8:	0800cd49 	.word	0x0800cd49
 800ccec:	0800cd49 	.word	0x0800cd49
 800ccf0:	0800cd49 	.word	0x0800cd49
 800ccf4:	0800cd49 	.word	0x0800cd49
 800ccf8:	0800cd49 	.word	0x0800cd49
 800ccfc:	0800cd49 	.word	0x0800cd49
 800cd00:	0800cd49 	.word	0x0800cd49
 800cd04:	0800cd49 	.word	0x0800cd49
 800cd08:	0800cd49 	.word	0x0800cd49
 800cd0c:	0800cd49 	.word	0x0800cd49
 800cd10:	0800cd49 	.word	0x0800cd49
 800cd14:	0800cd49 	.word	0x0800cd49
 800cd18:	0800cd49 	.word	0x0800cd49
 800cd1c:	0800cd49 	.word	0x0800cd49
 800cd20:	0800cd49 	.word	0x0800cd49
 800cd24:	0800cd49 	.word	0x0800cd49
 800cd28:	0800cd49 	.word	0x0800cd49
 800cd2c:	0800cd49 	.word	0x0800cd49
 800cd30:	0800cd49 	.word	0x0800cd49
 800cd34:	0800cd49 	.word	0x0800cd49
 800cd38:	0800cd49 	.word	0x0800cd49
 800cd3c:	0800cd49 	.word	0x0800cd49
 800cd40:	0800cd49 	.word	0x0800cd49
 800cd44:	0800cd49 	.word	0x0800cd49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd48:	bf00      	nop
  }

  return (USBD_OK);
 800cd4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	4805      	ldr	r0, [pc, #20]	; (800cd7c <CDC_Receive_FS+0x24>)
 800cd66:	f7fa fe7a 	bl	8007a5e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd6a:	4804      	ldr	r0, [pc, #16]	; (800cd7c <CDC_Receive_FS+0x24>)
 800cd6c:	f7fa fec0 	bl	8007af0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20006a54 	.word	0x20006a54

0800cd80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd90:	4b0d      	ldr	r3, [pc, #52]	; (800cdc8 <CDC_Transmit_FS+0x48>)
 800cd92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d001      	beq.n	800cda6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e00b      	b.n	800cdbe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cda6:	887b      	ldrh	r3, [r7, #2]
 800cda8:	461a      	mov	r2, r3
 800cdaa:	6879      	ldr	r1, [r7, #4]
 800cdac:	4806      	ldr	r0, [pc, #24]	; (800cdc8 <CDC_Transmit_FS+0x48>)
 800cdae:	f7fa fe38 	bl	8007a22 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cdb2:	4805      	ldr	r0, [pc, #20]	; (800cdc8 <CDC_Transmit_FS+0x48>)
 800cdb4:	f7fa fe6c 	bl	8007a90 <USBD_CDC_TransmitPacket>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cdbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	20006a54 	.word	0x20006a54

0800cdcc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b087      	sub	sp, #28
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cdde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	371c      	adds	r7, #28
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
	...

0800cdf0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	6039      	str	r1, [r7, #0]
 800cdfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	2212      	movs	r2, #18
 800ce00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce02:	4b03      	ldr	r3, [pc, #12]	; (800ce10 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr
 800ce10:	20000150 	.word	0x20000150

0800ce14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	6039      	str	r1, [r7, #0]
 800ce1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	2204      	movs	r2, #4
 800ce24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce26:	4b03      	ldr	r3, [pc, #12]	; (800ce34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr
 800ce34:	20000164 	.word	0x20000164

0800ce38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	4603      	mov	r3, r0
 800ce40:	6039      	str	r1, [r7, #0]
 800ce42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce44:	79fb      	ldrb	r3, [r7, #7]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d105      	bne.n	800ce56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	4907      	ldr	r1, [pc, #28]	; (800ce6c <USBD_FS_ProductStrDescriptor+0x34>)
 800ce4e:	4808      	ldr	r0, [pc, #32]	; (800ce70 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce50:	f7fb ff01 	bl	8008c56 <USBD_GetString>
 800ce54:	e004      	b.n	800ce60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	4904      	ldr	r1, [pc, #16]	; (800ce6c <USBD_FS_ProductStrDescriptor+0x34>)
 800ce5a:	4805      	ldr	r0, [pc, #20]	; (800ce70 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce5c:	f7fb fefb 	bl	8008c56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce60:	4b02      	ldr	r3, [pc, #8]	; (800ce6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	20007d24 	.word	0x20007d24
 800ce70:	0800e1c8 	.word	0x0800e1c8

0800ce74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	6039      	str	r1, [r7, #0]
 800ce7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce80:	683a      	ldr	r2, [r7, #0]
 800ce82:	4904      	ldr	r1, [pc, #16]	; (800ce94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce84:	4804      	ldr	r0, [pc, #16]	; (800ce98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce86:	f7fb fee6 	bl	8008c56 <USBD_GetString>
  return USBD_StrDesc;
 800ce8a:	4b02      	ldr	r3, [pc, #8]	; (800ce94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	20007d24 	.word	0x20007d24
 800ce98:	0800e1e0 	.word	0x0800e1e0

0800ce9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	4603      	mov	r3, r0
 800cea4:	6039      	str	r1, [r7, #0]
 800cea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	221a      	movs	r2, #26
 800ceac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ceae:	f000 f843 	bl	800cf38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ceb2:	4b02      	ldr	r3, [pc, #8]	; (800cebc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	20000168 	.word	0x20000168

0800cec0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	4603      	mov	r3, r0
 800cec8:	6039      	str	r1, [r7, #0]
 800ceca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cecc:	79fb      	ldrb	r3, [r7, #7]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d105      	bne.n	800cede <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	4907      	ldr	r1, [pc, #28]	; (800cef4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ced6:	4808      	ldr	r0, [pc, #32]	; (800cef8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ced8:	f7fb febd 	bl	8008c56 <USBD_GetString>
 800cedc:	e004      	b.n	800cee8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	4904      	ldr	r1, [pc, #16]	; (800cef4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cee2:	4805      	ldr	r0, [pc, #20]	; (800cef8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cee4:	f7fb feb7 	bl	8008c56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cee8:	4b02      	ldr	r3, [pc, #8]	; (800cef4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	20007d24 	.word	0x20007d24
 800cef8:	0800e1f4 	.word	0x0800e1f4

0800cefc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	4603      	mov	r3, r0
 800cf04:	6039      	str	r1, [r7, #0]
 800cf06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf08:	79fb      	ldrb	r3, [r7, #7]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d105      	bne.n	800cf1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf0e:	683a      	ldr	r2, [r7, #0]
 800cf10:	4907      	ldr	r1, [pc, #28]	; (800cf30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf12:	4808      	ldr	r0, [pc, #32]	; (800cf34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf14:	f7fb fe9f 	bl	8008c56 <USBD_GetString>
 800cf18:	e004      	b.n	800cf24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf1a:	683a      	ldr	r2, [r7, #0]
 800cf1c:	4904      	ldr	r1, [pc, #16]	; (800cf30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf1e:	4805      	ldr	r0, [pc, #20]	; (800cf34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf20:	f7fb fe99 	bl	8008c56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf24:	4b02      	ldr	r3, [pc, #8]	; (800cf30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	20007d24 	.word	0x20007d24
 800cf34:	0800e200 	.word	0x0800e200

0800cf38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf3e:	4b0f      	ldr	r3, [pc, #60]	; (800cf7c <Get_SerialNum+0x44>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf44:	4b0e      	ldr	r3, [pc, #56]	; (800cf80 <Get_SerialNum+0x48>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf4a:	4b0e      	ldr	r3, [pc, #56]	; (800cf84 <Get_SerialNum+0x4c>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4413      	add	r3, r2
 800cf56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d009      	beq.n	800cf72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf5e:	2208      	movs	r2, #8
 800cf60:	4909      	ldr	r1, [pc, #36]	; (800cf88 <Get_SerialNum+0x50>)
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f000 f814 	bl	800cf90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf68:	2204      	movs	r2, #4
 800cf6a:	4908      	ldr	r1, [pc, #32]	; (800cf8c <Get_SerialNum+0x54>)
 800cf6c:	68b8      	ldr	r0, [r7, #8]
 800cf6e:	f000 f80f 	bl	800cf90 <IntToUnicode>
  }
}
 800cf72:	bf00      	nop
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	1fff7a10 	.word	0x1fff7a10
 800cf80:	1fff7a14 	.word	0x1fff7a14
 800cf84:	1fff7a18 	.word	0x1fff7a18
 800cf88:	2000016a 	.word	0x2000016a
 800cf8c:	2000017a 	.word	0x2000017a

0800cf90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b087      	sub	sp, #28
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	75fb      	strb	r3, [r7, #23]
 800cfa6:	e027      	b.n	800cff8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	0f1b      	lsrs	r3, r3, #28
 800cfac:	2b09      	cmp	r3, #9
 800cfae:	d80b      	bhi.n	800cfc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	0f1b      	lsrs	r3, r3, #28
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	7dfb      	ldrb	r3, [r7, #23]
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	4619      	mov	r1, r3
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	440b      	add	r3, r1
 800cfc0:	3230      	adds	r2, #48	; 0x30
 800cfc2:	b2d2      	uxtb	r2, r2
 800cfc4:	701a      	strb	r2, [r3, #0]
 800cfc6:	e00a      	b.n	800cfde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	0f1b      	lsrs	r3, r3, #28
 800cfcc:	b2da      	uxtb	r2, r3
 800cfce:	7dfb      	ldrb	r3, [r7, #23]
 800cfd0:	005b      	lsls	r3, r3, #1
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	440b      	add	r3, r1
 800cfd8:	3237      	adds	r2, #55	; 0x37
 800cfda:	b2d2      	uxtb	r2, r2
 800cfdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	011b      	lsls	r3, r3, #4
 800cfe2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cfe4:	7dfb      	ldrb	r3, [r7, #23]
 800cfe6:	005b      	lsls	r3, r3, #1
 800cfe8:	3301      	adds	r3, #1
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	4413      	add	r3, r2
 800cfee:	2200      	movs	r2, #0
 800cff0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cff2:	7dfb      	ldrb	r3, [r7, #23]
 800cff4:	3301      	adds	r3, #1
 800cff6:	75fb      	strb	r3, [r7, #23]
 800cff8:	7dfa      	ldrb	r2, [r7, #23]
 800cffa:	79fb      	ldrb	r3, [r7, #7]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d3d3      	bcc.n	800cfa8 <IntToUnicode+0x18>
  }
}
 800d000:	bf00      	nop
 800d002:	bf00      	nop
 800d004:	371c      	adds	r7, #28
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr
	...

0800d010 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b08a      	sub	sp, #40	; 0x28
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d018:	f107 0314 	add.w	r3, r7, #20
 800d01c:	2200      	movs	r2, #0
 800d01e:	601a      	str	r2, [r3, #0]
 800d020:	605a      	str	r2, [r3, #4]
 800d022:	609a      	str	r2, [r3, #8]
 800d024:	60da      	str	r2, [r3, #12]
 800d026:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d030:	d147      	bne.n	800d0c2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d032:	2300      	movs	r3, #0
 800d034:	613b      	str	r3, [r7, #16]
 800d036:	4b25      	ldr	r3, [pc, #148]	; (800d0cc <HAL_PCD_MspInit+0xbc>)
 800d038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d03a:	4a24      	ldr	r2, [pc, #144]	; (800d0cc <HAL_PCD_MspInit+0xbc>)
 800d03c:	f043 0301 	orr.w	r3, r3, #1
 800d040:	6313      	str	r3, [r2, #48]	; 0x30
 800d042:	4b22      	ldr	r3, [pc, #136]	; (800d0cc <HAL_PCD_MspInit+0xbc>)
 800d044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d046:	f003 0301 	and.w	r3, r3, #1
 800d04a:	613b      	str	r3, [r7, #16]
 800d04c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d04e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d054:	2300      	movs	r3, #0
 800d056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d058:	2300      	movs	r3, #0
 800d05a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d05c:	f107 0314 	add.w	r3, r7, #20
 800d060:	4619      	mov	r1, r3
 800d062:	481b      	ldr	r0, [pc, #108]	; (800d0d0 <HAL_PCD_MspInit+0xc0>)
 800d064:	f7f5 f84a 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d068:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d06c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d06e:	2302      	movs	r3, #2
 800d070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d072:	2300      	movs	r3, #0
 800d074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d076:	2300      	movs	r3, #0
 800d078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d07a:	230a      	movs	r3, #10
 800d07c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d07e:	f107 0314 	add.w	r3, r7, #20
 800d082:	4619      	mov	r1, r3
 800d084:	4812      	ldr	r0, [pc, #72]	; (800d0d0 <HAL_PCD_MspInit+0xc0>)
 800d086:	f7f5 f839 	bl	80020fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d08a:	4b10      	ldr	r3, [pc, #64]	; (800d0cc <HAL_PCD_MspInit+0xbc>)
 800d08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d08e:	4a0f      	ldr	r2, [pc, #60]	; (800d0cc <HAL_PCD_MspInit+0xbc>)
 800d090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d094:	6353      	str	r3, [r2, #52]	; 0x34
 800d096:	2300      	movs	r3, #0
 800d098:	60fb      	str	r3, [r7, #12]
 800d09a:	4b0c      	ldr	r3, [pc, #48]	; (800d0cc <HAL_PCD_MspInit+0xbc>)
 800d09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d09e:	4a0b      	ldr	r2, [pc, #44]	; (800d0cc <HAL_PCD_MspInit+0xbc>)
 800d0a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0a4:	6453      	str	r3, [r2, #68]	; 0x44
 800d0a6:	4b09      	ldr	r3, [pc, #36]	; (800d0cc <HAL_PCD_MspInit+0xbc>)
 800d0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	2105      	movs	r1, #5
 800d0b6:	2043      	movs	r0, #67	; 0x43
 800d0b8:	f7f4 fff6 	bl	80020a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d0bc:	2043      	movs	r0, #67	; 0x43
 800d0be:	f7f5 f80f 	bl	80020e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d0c2:	bf00      	nop
 800d0c4:	3728      	adds	r7, #40	; 0x28
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	40023800 	.word	0x40023800
 800d0d0:	40020000 	.word	0x40020000

0800d0d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	f7fa fdcc 	bl	8007c88 <USBD_LL_SetupStage>
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	460b      	mov	r3, r1
 800d102:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d10a:	78fa      	ldrb	r2, [r7, #3]
 800d10c:	6879      	ldr	r1, [r7, #4]
 800d10e:	4613      	mov	r3, r2
 800d110:	00db      	lsls	r3, r3, #3
 800d112:	1a9b      	subs	r3, r3, r2
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	440b      	add	r3, r1
 800d118:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	78fb      	ldrb	r3, [r7, #3]
 800d120:	4619      	mov	r1, r3
 800d122:	f7fa fe06 	bl	8007d32 <USBD_LL_DataOutStage>
}
 800d126:	bf00      	nop
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}

0800d12e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d12e:	b580      	push	{r7, lr}
 800d130:	b082      	sub	sp, #8
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
 800d136:	460b      	mov	r3, r1
 800d138:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d140:	78fa      	ldrb	r2, [r7, #3]
 800d142:	6879      	ldr	r1, [r7, #4]
 800d144:	4613      	mov	r3, r2
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	1a9b      	subs	r3, r3, r2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	440b      	add	r3, r1
 800d14e:	3348      	adds	r3, #72	; 0x48
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	78fb      	ldrb	r3, [r7, #3]
 800d154:	4619      	mov	r1, r3
 800d156:	f7fa fe4f 	bl	8007df8 <USBD_LL_DataInStage>
}
 800d15a:	bf00      	nop
 800d15c:	3708      	adds	r7, #8
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b082      	sub	sp, #8
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d170:	4618      	mov	r0, r3
 800d172:	f7fa ff63 	bl	800803c <USBD_LL_SOF>
}
 800d176:	bf00      	nop
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b084      	sub	sp, #16
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d186:	2301      	movs	r3, #1
 800d188:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d102      	bne.n	800d198 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d192:	2300      	movs	r3, #0
 800d194:	73fb      	strb	r3, [r7, #15]
 800d196:	e008      	b.n	800d1aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d102      	bne.n	800d1a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	73fb      	strb	r3, [r7, #15]
 800d1a4:	e001      	b.n	800d1aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d1a6:	f7f3 feb2 	bl	8000f0e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1b0:	7bfa      	ldrb	r2, [r7, #15]
 800d1b2:	4611      	mov	r1, r2
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fa ff03 	bl	8007fc0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fa feaf 	bl	8007f24 <USBD_LL_Reset>
}
 800d1c6:	bf00      	nop
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
	...

0800d1d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fa fefe 	bl	8007fe0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	6812      	ldr	r2, [r2, #0]
 800d1f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d1f6:	f043 0301 	orr.w	r3, r3, #1
 800d1fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6a1b      	ldr	r3, [r3, #32]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d005      	beq.n	800d210 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d204:	4b04      	ldr	r3, [pc, #16]	; (800d218 <HAL_PCD_SuspendCallback+0x48>)
 800d206:	691b      	ldr	r3, [r3, #16]
 800d208:	4a03      	ldr	r2, [pc, #12]	; (800d218 <HAL_PCD_SuspendCallback+0x48>)
 800d20a:	f043 0306 	orr.w	r3, r3, #6
 800d20e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}
 800d218:	e000ed00 	.word	0xe000ed00

0800d21c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fa feee 	bl	800800c <USBD_LL_Resume>
}
 800d230:	bf00      	nop
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d24a:	78fa      	ldrb	r2, [r7, #3]
 800d24c:	4611      	mov	r1, r2
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fa ff3c 	bl	80080cc <USBD_LL_IsoOUTIncomplete>
}
 800d254:	bf00      	nop
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	460b      	mov	r3, r1
 800d266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d26e:	78fa      	ldrb	r2, [r7, #3]
 800d270:	4611      	mov	r1, r2
 800d272:	4618      	mov	r0, r3
 800d274:	f7fa ff04 	bl	8008080 <USBD_LL_IsoINIncomplete>
}
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fa ff42 	bl	8008118 <USBD_LL_DevConnected>
}
 800d294:	bf00      	nop
 800d296:	3708      	adds	r7, #8
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7fa ff3f 	bl	800812e <USBD_LL_DevDisconnected>
}
 800d2b0:	bf00      	nop
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d13c      	bne.n	800d342 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d2c8:	4a20      	ldr	r2, [pc, #128]	; (800d34c <USBD_LL_Init+0x94>)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4a1e      	ldr	r2, [pc, #120]	; (800d34c <USBD_LL_Init+0x94>)
 800d2d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2d8:	4b1c      	ldr	r3, [pc, #112]	; (800d34c <USBD_LL_Init+0x94>)
 800d2da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d2de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d2e0:	4b1a      	ldr	r3, [pc, #104]	; (800d34c <USBD_LL_Init+0x94>)
 800d2e2:	2204      	movs	r2, #4
 800d2e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d2e6:	4b19      	ldr	r3, [pc, #100]	; (800d34c <USBD_LL_Init+0x94>)
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d2ec:	4b17      	ldr	r3, [pc, #92]	; (800d34c <USBD_LL_Init+0x94>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2f2:	4b16      	ldr	r3, [pc, #88]	; (800d34c <USBD_LL_Init+0x94>)
 800d2f4:	2202      	movs	r2, #2
 800d2f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d2f8:	4b14      	ldr	r3, [pc, #80]	; (800d34c <USBD_LL_Init+0x94>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d2fe:	4b13      	ldr	r3, [pc, #76]	; (800d34c <USBD_LL_Init+0x94>)
 800d300:	2200      	movs	r2, #0
 800d302:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d304:	4b11      	ldr	r3, [pc, #68]	; (800d34c <USBD_LL_Init+0x94>)
 800d306:	2200      	movs	r2, #0
 800d308:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d30a:	4b10      	ldr	r3, [pc, #64]	; (800d34c <USBD_LL_Init+0x94>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d310:	4b0e      	ldr	r3, [pc, #56]	; (800d34c <USBD_LL_Init+0x94>)
 800d312:	2200      	movs	r2, #0
 800d314:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d316:	480d      	ldr	r0, [pc, #52]	; (800d34c <USBD_LL_Init+0x94>)
 800d318:	f7f5 febc 	bl	8003094 <HAL_PCD_Init>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d322:	f7f3 fdf4 	bl	8000f0e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d326:	2180      	movs	r1, #128	; 0x80
 800d328:	4808      	ldr	r0, [pc, #32]	; (800d34c <USBD_LL_Init+0x94>)
 800d32a:	f7f7 f81a 	bl	8004362 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d32e:	2240      	movs	r2, #64	; 0x40
 800d330:	2100      	movs	r1, #0
 800d332:	4806      	ldr	r0, [pc, #24]	; (800d34c <USBD_LL_Init+0x94>)
 800d334:	f7f6 ffce 	bl	80042d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d338:	2280      	movs	r2, #128	; 0x80
 800d33a:	2101      	movs	r1, #1
 800d33c:	4803      	ldr	r0, [pc, #12]	; (800d34c <USBD_LL_Init+0x94>)
 800d33e:	f7f6 ffc9 	bl	80042d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	20007f24 	.word	0x20007f24

0800d350 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d358:	2300      	movs	r3, #0
 800d35a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d35c:	2300      	movs	r3, #0
 800d35e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d366:	4618      	mov	r0, r3
 800d368:	f7f5 ffb1 	bl	80032ce <HAL_PCD_Start>
 800d36c:	4603      	mov	r3, r0
 800d36e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d370:	7bfb      	ldrb	r3, [r7, #15]
 800d372:	4618      	mov	r0, r3
 800d374:	f000 f942 	bl	800d5fc <USBD_Get_USB_Status>
 800d378:	4603      	mov	r3, r0
 800d37a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d37c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b084      	sub	sp, #16
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
 800d38e:	4608      	mov	r0, r1
 800d390:	4611      	mov	r1, r2
 800d392:	461a      	mov	r2, r3
 800d394:	4603      	mov	r3, r0
 800d396:	70fb      	strb	r3, [r7, #3]
 800d398:	460b      	mov	r3, r1
 800d39a:	70bb      	strb	r3, [r7, #2]
 800d39c:	4613      	mov	r3, r2
 800d39e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3ae:	78bb      	ldrb	r3, [r7, #2]
 800d3b0:	883a      	ldrh	r2, [r7, #0]
 800d3b2:	78f9      	ldrb	r1, [r7, #3]
 800d3b4:	f7f6 fb95 	bl	8003ae2 <HAL_PCD_EP_Open>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3bc:	7bfb      	ldrb	r3, [r7, #15]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f000 f91c 	bl	800d5fc <USBD_Get_USB_Status>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b084      	sub	sp, #16
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
 800d3da:	460b      	mov	r3, r1
 800d3dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3ec:	78fa      	ldrb	r2, [r7, #3]
 800d3ee:	4611      	mov	r1, r2
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7f6 fbde 	bl	8003bb2 <HAL_PCD_EP_Close>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3fa:	7bfb      	ldrb	r3, [r7, #15]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f000 f8fd 	bl	800d5fc <USBD_Get_USB_Status>
 800d402:	4603      	mov	r3, r0
 800d404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d406:	7bbb      	ldrb	r3, [r7, #14]
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d420:	2300      	movs	r3, #0
 800d422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d42a:	78fa      	ldrb	r2, [r7, #3]
 800d42c:	4611      	mov	r1, r2
 800d42e:	4618      	mov	r0, r3
 800d430:	f7f6 fcb6 	bl	8003da0 <HAL_PCD_EP_SetStall>
 800d434:	4603      	mov	r3, r0
 800d436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d438:	7bfb      	ldrb	r3, [r7, #15]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 f8de 	bl	800d5fc <USBD_Get_USB_Status>
 800d440:	4603      	mov	r3, r0
 800d442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d444:	7bbb      	ldrb	r3, [r7, #14]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b084      	sub	sp, #16
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	460b      	mov	r3, r1
 800d458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d45a:	2300      	movs	r3, #0
 800d45c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d45e:	2300      	movs	r3, #0
 800d460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d468:	78fa      	ldrb	r2, [r7, #3]
 800d46a:	4611      	mov	r1, r2
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7f6 fcfb 	bl	8003e68 <HAL_PCD_EP_ClrStall>
 800d472:	4603      	mov	r3, r0
 800d474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d476:	7bfb      	ldrb	r3, [r7, #15]
 800d478:	4618      	mov	r0, r3
 800d47a:	f000 f8bf 	bl	800d5fc <USBD_Get_USB_Status>
 800d47e:	4603      	mov	r3, r0
 800d480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d482:	7bbb      	ldrb	r3, [r7, #14]
}
 800d484:	4618      	mov	r0, r3
 800d486:	3710      	adds	r7, #16
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b085      	sub	sp, #20
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	460b      	mov	r3, r1
 800d496:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d49e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d4a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	da0b      	bge.n	800d4c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d4a8:	78fb      	ldrb	r3, [r7, #3]
 800d4aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4ae:	68f9      	ldr	r1, [r7, #12]
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	00db      	lsls	r3, r3, #3
 800d4b4:	1a9b      	subs	r3, r3, r2
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	440b      	add	r3, r1
 800d4ba:	333e      	adds	r3, #62	; 0x3e
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	e00b      	b.n	800d4d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d4c0:	78fb      	ldrb	r3, [r7, #3]
 800d4c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4c6:	68f9      	ldr	r1, [r7, #12]
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	00db      	lsls	r3, r3, #3
 800d4cc:	1a9b      	subs	r3, r3, r2
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	440b      	add	r3, r1
 800d4d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d4d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3714      	adds	r7, #20
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4fe:	78fa      	ldrb	r2, [r7, #3]
 800d500:	4611      	mov	r1, r2
 800d502:	4618      	mov	r0, r3
 800d504:	f7f6 fac8 	bl	8003a98 <HAL_PCD_SetAddress>
 800d508:	4603      	mov	r3, r0
 800d50a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d50c:	7bfb      	ldrb	r3, [r7, #15]
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 f874 	bl	800d5fc <USBD_Get_USB_Status>
 800d514:	4603      	mov	r3, r0
 800d516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d518:	7bbb      	ldrb	r3, [r7, #14]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b086      	sub	sp, #24
 800d526:	af00      	add	r7, sp, #0
 800d528:	60f8      	str	r0, [r7, #12]
 800d52a:	607a      	str	r2, [r7, #4]
 800d52c:	603b      	str	r3, [r7, #0]
 800d52e:	460b      	mov	r3, r1
 800d530:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d532:	2300      	movs	r3, #0
 800d534:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d536:	2300      	movs	r3, #0
 800d538:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d540:	7af9      	ldrb	r1, [r7, #11]
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	f7f6 fbe1 	bl	8003d0c <HAL_PCD_EP_Transmit>
 800d54a:	4603      	mov	r3, r0
 800d54c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d54e:	7dfb      	ldrb	r3, [r7, #23]
 800d550:	4618      	mov	r0, r3
 800d552:	f000 f853 	bl	800d5fc <USBD_Get_USB_Status>
 800d556:	4603      	mov	r3, r0
 800d558:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d55a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3718      	adds	r7, #24
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	607a      	str	r2, [r7, #4]
 800d56e:	603b      	str	r3, [r7, #0]
 800d570:	460b      	mov	r3, r1
 800d572:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d582:	7af9      	ldrb	r1, [r7, #11]
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	f7f6 fb5d 	bl	8003c46 <HAL_PCD_EP_Receive>
 800d58c:	4603      	mov	r3, r0
 800d58e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d590:	7dfb      	ldrb	r3, [r7, #23]
 800d592:	4618      	mov	r0, r3
 800d594:	f000 f832 	bl	800d5fc <USBD_Get_USB_Status>
 800d598:	4603      	mov	r3, r0
 800d59a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d59c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3718      	adds	r7, #24
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b082      	sub	sp, #8
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5b8:	78fa      	ldrb	r2, [r7, #3]
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7f6 fb8d 	bl	8003cdc <HAL_PCD_EP_GetRxCount>
 800d5c2:	4603      	mov	r3, r0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d5d4:	4b03      	ldr	r3, [pc, #12]	; (800d5e4 <USBD_static_malloc+0x18>)
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	370c      	adds	r7, #12
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop
 800d5e4:	20004fd8 	.word	0x20004fd8

0800d5e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]

}
 800d5f0:	bf00      	nop
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b085      	sub	sp, #20
 800d600:	af00      	add	r7, sp, #0
 800d602:	4603      	mov	r3, r0
 800d604:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d606:	2300      	movs	r3, #0
 800d608:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d60a:	79fb      	ldrb	r3, [r7, #7]
 800d60c:	2b03      	cmp	r3, #3
 800d60e:	d817      	bhi.n	800d640 <USBD_Get_USB_Status+0x44>
 800d610:	a201      	add	r2, pc, #4	; (adr r2, 800d618 <USBD_Get_USB_Status+0x1c>)
 800d612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d616:	bf00      	nop
 800d618:	0800d629 	.word	0x0800d629
 800d61c:	0800d62f 	.word	0x0800d62f
 800d620:	0800d635 	.word	0x0800d635
 800d624:	0800d63b 	.word	0x0800d63b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d628:	2300      	movs	r3, #0
 800d62a:	73fb      	strb	r3, [r7, #15]
    break;
 800d62c:	e00b      	b.n	800d646 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d62e:	2303      	movs	r3, #3
 800d630:	73fb      	strb	r3, [r7, #15]
    break;
 800d632:	e008      	b.n	800d646 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d634:	2301      	movs	r3, #1
 800d636:	73fb      	strb	r3, [r7, #15]
    break;
 800d638:	e005      	b.n	800d646 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d63a:	2303      	movs	r3, #3
 800d63c:	73fb      	strb	r3, [r7, #15]
    break;
 800d63e:	e002      	b.n	800d646 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d640:	2303      	movs	r3, #3
 800d642:	73fb      	strb	r3, [r7, #15]
    break;
 800d644:	bf00      	nop
  }
  return usb_status;
 800d646:	7bfb      	ldrb	r3, [r7, #15]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3714      	adds	r7, #20
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <__errno>:
 800d654:	4b01      	ldr	r3, [pc, #4]	; (800d65c <__errno+0x8>)
 800d656:	6818      	ldr	r0, [r3, #0]
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	20000184 	.word	0x20000184

0800d660 <__libc_init_array>:
 800d660:	b570      	push	{r4, r5, r6, lr}
 800d662:	4d0d      	ldr	r5, [pc, #52]	; (800d698 <__libc_init_array+0x38>)
 800d664:	4c0d      	ldr	r4, [pc, #52]	; (800d69c <__libc_init_array+0x3c>)
 800d666:	1b64      	subs	r4, r4, r5
 800d668:	10a4      	asrs	r4, r4, #2
 800d66a:	2600      	movs	r6, #0
 800d66c:	42a6      	cmp	r6, r4
 800d66e:	d109      	bne.n	800d684 <__libc_init_array+0x24>
 800d670:	4d0b      	ldr	r5, [pc, #44]	; (800d6a0 <__libc_init_array+0x40>)
 800d672:	4c0c      	ldr	r4, [pc, #48]	; (800d6a4 <__libc_init_array+0x44>)
 800d674:	f000 fd2c 	bl	800e0d0 <_init>
 800d678:	1b64      	subs	r4, r4, r5
 800d67a:	10a4      	asrs	r4, r4, #2
 800d67c:	2600      	movs	r6, #0
 800d67e:	42a6      	cmp	r6, r4
 800d680:	d105      	bne.n	800d68e <__libc_init_array+0x2e>
 800d682:	bd70      	pop	{r4, r5, r6, pc}
 800d684:	f855 3b04 	ldr.w	r3, [r5], #4
 800d688:	4798      	blx	r3
 800d68a:	3601      	adds	r6, #1
 800d68c:	e7ee      	b.n	800d66c <__libc_init_array+0xc>
 800d68e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d692:	4798      	blx	r3
 800d694:	3601      	adds	r6, #1
 800d696:	e7f2      	b.n	800d67e <__libc_init_array+0x1e>
 800d698:	0800e40c 	.word	0x0800e40c
 800d69c:	0800e40c 	.word	0x0800e40c
 800d6a0:	0800e40c 	.word	0x0800e40c
 800d6a4:	0800e410 	.word	0x0800e410

0800d6a8 <__itoa>:
 800d6a8:	1e93      	subs	r3, r2, #2
 800d6aa:	2b22      	cmp	r3, #34	; 0x22
 800d6ac:	b510      	push	{r4, lr}
 800d6ae:	460c      	mov	r4, r1
 800d6b0:	d904      	bls.n	800d6bc <__itoa+0x14>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	700b      	strb	r3, [r1, #0]
 800d6b6:	461c      	mov	r4, r3
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	bd10      	pop	{r4, pc}
 800d6bc:	2a0a      	cmp	r2, #10
 800d6be:	d109      	bne.n	800d6d4 <__itoa+0x2c>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	da07      	bge.n	800d6d4 <__itoa+0x2c>
 800d6c4:	232d      	movs	r3, #45	; 0x2d
 800d6c6:	700b      	strb	r3, [r1, #0]
 800d6c8:	4240      	negs	r0, r0
 800d6ca:	2101      	movs	r1, #1
 800d6cc:	4421      	add	r1, r4
 800d6ce:	f000 f929 	bl	800d924 <__utoa>
 800d6d2:	e7f1      	b.n	800d6b8 <__itoa+0x10>
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	e7f9      	b.n	800d6cc <__itoa+0x24>

0800d6d8 <itoa>:
 800d6d8:	f7ff bfe6 	b.w	800d6a8 <__itoa>

0800d6dc <__retarget_lock_acquire_recursive>:
 800d6dc:	4770      	bx	lr

0800d6de <__retarget_lock_release_recursive>:
 800d6de:	4770      	bx	lr

0800d6e0 <memcpy>:
 800d6e0:	440a      	add	r2, r1
 800d6e2:	4291      	cmp	r1, r2
 800d6e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d6e8:	d100      	bne.n	800d6ec <memcpy+0xc>
 800d6ea:	4770      	bx	lr
 800d6ec:	b510      	push	{r4, lr}
 800d6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6f6:	4291      	cmp	r1, r2
 800d6f8:	d1f9      	bne.n	800d6ee <memcpy+0xe>
 800d6fa:	bd10      	pop	{r4, pc}

0800d6fc <memset>:
 800d6fc:	4402      	add	r2, r0
 800d6fe:	4603      	mov	r3, r0
 800d700:	4293      	cmp	r3, r2
 800d702:	d100      	bne.n	800d706 <memset+0xa>
 800d704:	4770      	bx	lr
 800d706:	f803 1b01 	strb.w	r1, [r3], #1
 800d70a:	e7f9      	b.n	800d700 <memset+0x4>

0800d70c <_malloc_r>:
 800d70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d70e:	1ccd      	adds	r5, r1, #3
 800d710:	f025 0503 	bic.w	r5, r5, #3
 800d714:	3508      	adds	r5, #8
 800d716:	2d0c      	cmp	r5, #12
 800d718:	bf38      	it	cc
 800d71a:	250c      	movcc	r5, #12
 800d71c:	2d00      	cmp	r5, #0
 800d71e:	4606      	mov	r6, r0
 800d720:	db01      	blt.n	800d726 <_malloc_r+0x1a>
 800d722:	42a9      	cmp	r1, r5
 800d724:	d903      	bls.n	800d72e <_malloc_r+0x22>
 800d726:	230c      	movs	r3, #12
 800d728:	6033      	str	r3, [r6, #0]
 800d72a:	2000      	movs	r0, #0
 800d72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d72e:	f000 f93b 	bl	800d9a8 <__malloc_lock>
 800d732:	4921      	ldr	r1, [pc, #132]	; (800d7b8 <_malloc_r+0xac>)
 800d734:	680a      	ldr	r2, [r1, #0]
 800d736:	4614      	mov	r4, r2
 800d738:	b99c      	cbnz	r4, 800d762 <_malloc_r+0x56>
 800d73a:	4f20      	ldr	r7, [pc, #128]	; (800d7bc <_malloc_r+0xb0>)
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	b923      	cbnz	r3, 800d74a <_malloc_r+0x3e>
 800d740:	4621      	mov	r1, r4
 800d742:	4630      	mov	r0, r6
 800d744:	f000 f8a6 	bl	800d894 <_sbrk_r>
 800d748:	6038      	str	r0, [r7, #0]
 800d74a:	4629      	mov	r1, r5
 800d74c:	4630      	mov	r0, r6
 800d74e:	f000 f8a1 	bl	800d894 <_sbrk_r>
 800d752:	1c43      	adds	r3, r0, #1
 800d754:	d123      	bne.n	800d79e <_malloc_r+0x92>
 800d756:	230c      	movs	r3, #12
 800d758:	6033      	str	r3, [r6, #0]
 800d75a:	4630      	mov	r0, r6
 800d75c:	f000 f92a 	bl	800d9b4 <__malloc_unlock>
 800d760:	e7e3      	b.n	800d72a <_malloc_r+0x1e>
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	1b5b      	subs	r3, r3, r5
 800d766:	d417      	bmi.n	800d798 <_malloc_r+0x8c>
 800d768:	2b0b      	cmp	r3, #11
 800d76a:	d903      	bls.n	800d774 <_malloc_r+0x68>
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	441c      	add	r4, r3
 800d770:	6025      	str	r5, [r4, #0]
 800d772:	e004      	b.n	800d77e <_malloc_r+0x72>
 800d774:	6863      	ldr	r3, [r4, #4]
 800d776:	42a2      	cmp	r2, r4
 800d778:	bf0c      	ite	eq
 800d77a:	600b      	streq	r3, [r1, #0]
 800d77c:	6053      	strne	r3, [r2, #4]
 800d77e:	4630      	mov	r0, r6
 800d780:	f000 f918 	bl	800d9b4 <__malloc_unlock>
 800d784:	f104 000b 	add.w	r0, r4, #11
 800d788:	1d23      	adds	r3, r4, #4
 800d78a:	f020 0007 	bic.w	r0, r0, #7
 800d78e:	1ac2      	subs	r2, r0, r3
 800d790:	d0cc      	beq.n	800d72c <_malloc_r+0x20>
 800d792:	1a1b      	subs	r3, r3, r0
 800d794:	50a3      	str	r3, [r4, r2]
 800d796:	e7c9      	b.n	800d72c <_malloc_r+0x20>
 800d798:	4622      	mov	r2, r4
 800d79a:	6864      	ldr	r4, [r4, #4]
 800d79c:	e7cc      	b.n	800d738 <_malloc_r+0x2c>
 800d79e:	1cc4      	adds	r4, r0, #3
 800d7a0:	f024 0403 	bic.w	r4, r4, #3
 800d7a4:	42a0      	cmp	r0, r4
 800d7a6:	d0e3      	beq.n	800d770 <_malloc_r+0x64>
 800d7a8:	1a21      	subs	r1, r4, r0
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	f000 f872 	bl	800d894 <_sbrk_r>
 800d7b0:	3001      	adds	r0, #1
 800d7b2:	d1dd      	bne.n	800d770 <_malloc_r+0x64>
 800d7b4:	e7cf      	b.n	800d756 <_malloc_r+0x4a>
 800d7b6:	bf00      	nop
 800d7b8:	200051f8 	.word	0x200051f8
 800d7bc:	200051fc 	.word	0x200051fc

0800d7c0 <cleanup_glue>:
 800d7c0:	b538      	push	{r3, r4, r5, lr}
 800d7c2:	460c      	mov	r4, r1
 800d7c4:	6809      	ldr	r1, [r1, #0]
 800d7c6:	4605      	mov	r5, r0
 800d7c8:	b109      	cbz	r1, 800d7ce <cleanup_glue+0xe>
 800d7ca:	f7ff fff9 	bl	800d7c0 <cleanup_glue>
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7d6:	f000 b8f3 	b.w	800d9c0 <_free_r>
	...

0800d7dc <_reclaim_reent>:
 800d7dc:	4b2c      	ldr	r3, [pc, #176]	; (800d890 <_reclaim_reent+0xb4>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4283      	cmp	r3, r0
 800d7e2:	b570      	push	{r4, r5, r6, lr}
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	d051      	beq.n	800d88c <_reclaim_reent+0xb0>
 800d7e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d7ea:	b143      	cbz	r3, 800d7fe <_reclaim_reent+0x22>
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d14a      	bne.n	800d888 <_reclaim_reent+0xac>
 800d7f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7f4:	6819      	ldr	r1, [r3, #0]
 800d7f6:	b111      	cbz	r1, 800d7fe <_reclaim_reent+0x22>
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f000 f8e1 	bl	800d9c0 <_free_r>
 800d7fe:	6961      	ldr	r1, [r4, #20]
 800d800:	b111      	cbz	r1, 800d808 <_reclaim_reent+0x2c>
 800d802:	4620      	mov	r0, r4
 800d804:	f000 f8dc 	bl	800d9c0 <_free_r>
 800d808:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d80a:	b111      	cbz	r1, 800d812 <_reclaim_reent+0x36>
 800d80c:	4620      	mov	r0, r4
 800d80e:	f000 f8d7 	bl	800d9c0 <_free_r>
 800d812:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d814:	b111      	cbz	r1, 800d81c <_reclaim_reent+0x40>
 800d816:	4620      	mov	r0, r4
 800d818:	f000 f8d2 	bl	800d9c0 <_free_r>
 800d81c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d81e:	b111      	cbz	r1, 800d826 <_reclaim_reent+0x4a>
 800d820:	4620      	mov	r0, r4
 800d822:	f000 f8cd 	bl	800d9c0 <_free_r>
 800d826:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d828:	b111      	cbz	r1, 800d830 <_reclaim_reent+0x54>
 800d82a:	4620      	mov	r0, r4
 800d82c:	f000 f8c8 	bl	800d9c0 <_free_r>
 800d830:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d832:	b111      	cbz	r1, 800d83a <_reclaim_reent+0x5e>
 800d834:	4620      	mov	r0, r4
 800d836:	f000 f8c3 	bl	800d9c0 <_free_r>
 800d83a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d83c:	b111      	cbz	r1, 800d844 <_reclaim_reent+0x68>
 800d83e:	4620      	mov	r0, r4
 800d840:	f000 f8be 	bl	800d9c0 <_free_r>
 800d844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d846:	b111      	cbz	r1, 800d84e <_reclaim_reent+0x72>
 800d848:	4620      	mov	r0, r4
 800d84a:	f000 f8b9 	bl	800d9c0 <_free_r>
 800d84e:	69a3      	ldr	r3, [r4, #24]
 800d850:	b1e3      	cbz	r3, 800d88c <_reclaim_reent+0xb0>
 800d852:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d854:	4620      	mov	r0, r4
 800d856:	4798      	blx	r3
 800d858:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d85a:	b1b9      	cbz	r1, 800d88c <_reclaim_reent+0xb0>
 800d85c:	4620      	mov	r0, r4
 800d85e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d862:	f7ff bfad 	b.w	800d7c0 <cleanup_glue>
 800d866:	5949      	ldr	r1, [r1, r5]
 800d868:	b941      	cbnz	r1, 800d87c <_reclaim_reent+0xa0>
 800d86a:	3504      	adds	r5, #4
 800d86c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d86e:	2d80      	cmp	r5, #128	; 0x80
 800d870:	68d9      	ldr	r1, [r3, #12]
 800d872:	d1f8      	bne.n	800d866 <_reclaim_reent+0x8a>
 800d874:	4620      	mov	r0, r4
 800d876:	f000 f8a3 	bl	800d9c0 <_free_r>
 800d87a:	e7ba      	b.n	800d7f2 <_reclaim_reent+0x16>
 800d87c:	680e      	ldr	r6, [r1, #0]
 800d87e:	4620      	mov	r0, r4
 800d880:	f000 f89e 	bl	800d9c0 <_free_r>
 800d884:	4631      	mov	r1, r6
 800d886:	e7ef      	b.n	800d868 <_reclaim_reent+0x8c>
 800d888:	2500      	movs	r5, #0
 800d88a:	e7ef      	b.n	800d86c <_reclaim_reent+0x90>
 800d88c:	bd70      	pop	{r4, r5, r6, pc}
 800d88e:	bf00      	nop
 800d890:	20000184 	.word	0x20000184

0800d894 <_sbrk_r>:
 800d894:	b538      	push	{r3, r4, r5, lr}
 800d896:	4d06      	ldr	r5, [pc, #24]	; (800d8b0 <_sbrk_r+0x1c>)
 800d898:	2300      	movs	r3, #0
 800d89a:	4604      	mov	r4, r0
 800d89c:	4608      	mov	r0, r1
 800d89e:	602b      	str	r3, [r5, #0]
 800d8a0:	f7f3 fd9a 	bl	80013d8 <_sbrk>
 800d8a4:	1c43      	adds	r3, r0, #1
 800d8a6:	d102      	bne.n	800d8ae <_sbrk_r+0x1a>
 800d8a8:	682b      	ldr	r3, [r5, #0]
 800d8aa:	b103      	cbz	r3, 800d8ae <_sbrk_r+0x1a>
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	bd38      	pop	{r3, r4, r5, pc}
 800d8b0:	20008338 	.word	0x20008338

0800d8b4 <siprintf>:
 800d8b4:	b40e      	push	{r1, r2, r3}
 800d8b6:	b500      	push	{lr}
 800d8b8:	b09c      	sub	sp, #112	; 0x70
 800d8ba:	ab1d      	add	r3, sp, #116	; 0x74
 800d8bc:	9002      	str	r0, [sp, #8]
 800d8be:	9006      	str	r0, [sp, #24]
 800d8c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d8c4:	4809      	ldr	r0, [pc, #36]	; (800d8ec <siprintf+0x38>)
 800d8c6:	9107      	str	r1, [sp, #28]
 800d8c8:	9104      	str	r1, [sp, #16]
 800d8ca:	4909      	ldr	r1, [pc, #36]	; (800d8f0 <siprintf+0x3c>)
 800d8cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8d0:	9105      	str	r1, [sp, #20]
 800d8d2:	6800      	ldr	r0, [r0, #0]
 800d8d4:	9301      	str	r3, [sp, #4]
 800d8d6:	a902      	add	r1, sp, #8
 800d8d8:	f000 f91e 	bl	800db18 <_svfiprintf_r>
 800d8dc:	9b02      	ldr	r3, [sp, #8]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	701a      	strb	r2, [r3, #0]
 800d8e2:	b01c      	add	sp, #112	; 0x70
 800d8e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8e8:	b003      	add	sp, #12
 800d8ea:	4770      	bx	lr
 800d8ec:	20000184 	.word	0x20000184
 800d8f0:	ffff0208 	.word	0xffff0208

0800d8f4 <strcat>:
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	7814      	ldrb	r4, [r2, #0]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	3201      	adds	r2, #1
 800d8fe:	2c00      	cmp	r4, #0
 800d900:	d1fa      	bne.n	800d8f8 <strcat+0x4>
 800d902:	3b01      	subs	r3, #1
 800d904:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d908:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d90c:	2a00      	cmp	r2, #0
 800d90e:	d1f9      	bne.n	800d904 <strcat+0x10>
 800d910:	bd10      	pop	{r4, pc}

0800d912 <strcpy>:
 800d912:	4603      	mov	r3, r0
 800d914:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d918:	f803 2b01 	strb.w	r2, [r3], #1
 800d91c:	2a00      	cmp	r2, #0
 800d91e:	d1f9      	bne.n	800d914 <strcpy+0x2>
 800d920:	4770      	bx	lr
	...

0800d924 <__utoa>:
 800d924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d926:	4c1f      	ldr	r4, [pc, #124]	; (800d9a4 <__utoa+0x80>)
 800d928:	b08b      	sub	sp, #44	; 0x2c
 800d92a:	4605      	mov	r5, r0
 800d92c:	460b      	mov	r3, r1
 800d92e:	466e      	mov	r6, sp
 800d930:	f104 0c20 	add.w	ip, r4, #32
 800d934:	6820      	ldr	r0, [r4, #0]
 800d936:	6861      	ldr	r1, [r4, #4]
 800d938:	4637      	mov	r7, r6
 800d93a:	c703      	stmia	r7!, {r0, r1}
 800d93c:	3408      	adds	r4, #8
 800d93e:	4564      	cmp	r4, ip
 800d940:	463e      	mov	r6, r7
 800d942:	d1f7      	bne.n	800d934 <__utoa+0x10>
 800d944:	7921      	ldrb	r1, [r4, #4]
 800d946:	7139      	strb	r1, [r7, #4]
 800d948:	1e91      	subs	r1, r2, #2
 800d94a:	6820      	ldr	r0, [r4, #0]
 800d94c:	6038      	str	r0, [r7, #0]
 800d94e:	2922      	cmp	r1, #34	; 0x22
 800d950:	f04f 0100 	mov.w	r1, #0
 800d954:	d904      	bls.n	800d960 <__utoa+0x3c>
 800d956:	7019      	strb	r1, [r3, #0]
 800d958:	460b      	mov	r3, r1
 800d95a:	4618      	mov	r0, r3
 800d95c:	b00b      	add	sp, #44	; 0x2c
 800d95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d960:	1e58      	subs	r0, r3, #1
 800d962:	4684      	mov	ip, r0
 800d964:	fbb5 f7f2 	udiv	r7, r5, r2
 800d968:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800d96c:	fb02 5617 	mls	r6, r2, r7, r5
 800d970:	4476      	add	r6, lr
 800d972:	460c      	mov	r4, r1
 800d974:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d978:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d97c:	462e      	mov	r6, r5
 800d97e:	42b2      	cmp	r2, r6
 800d980:	f101 0101 	add.w	r1, r1, #1
 800d984:	463d      	mov	r5, r7
 800d986:	d9ed      	bls.n	800d964 <__utoa+0x40>
 800d988:	2200      	movs	r2, #0
 800d98a:	545a      	strb	r2, [r3, r1]
 800d98c:	1919      	adds	r1, r3, r4
 800d98e:	1aa5      	subs	r5, r4, r2
 800d990:	42aa      	cmp	r2, r5
 800d992:	dae2      	bge.n	800d95a <__utoa+0x36>
 800d994:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d998:	780e      	ldrb	r6, [r1, #0]
 800d99a:	7006      	strb	r6, [r0, #0]
 800d99c:	3201      	adds	r2, #1
 800d99e:	f801 5901 	strb.w	r5, [r1], #-1
 800d9a2:	e7f4      	b.n	800d98e <__utoa+0x6a>
 800d9a4:	0800e3ac 	.word	0x0800e3ac

0800d9a8 <__malloc_lock>:
 800d9a8:	4801      	ldr	r0, [pc, #4]	; (800d9b0 <__malloc_lock+0x8>)
 800d9aa:	f7ff be97 	b.w	800d6dc <__retarget_lock_acquire_recursive>
 800d9ae:	bf00      	nop
 800d9b0:	20008330 	.word	0x20008330

0800d9b4 <__malloc_unlock>:
 800d9b4:	4801      	ldr	r0, [pc, #4]	; (800d9bc <__malloc_unlock+0x8>)
 800d9b6:	f7ff be92 	b.w	800d6de <__retarget_lock_release_recursive>
 800d9ba:	bf00      	nop
 800d9bc:	20008330 	.word	0x20008330

0800d9c0 <_free_r>:
 800d9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9c2:	2900      	cmp	r1, #0
 800d9c4:	d048      	beq.n	800da58 <_free_r+0x98>
 800d9c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9ca:	9001      	str	r0, [sp, #4]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f1a1 0404 	sub.w	r4, r1, #4
 800d9d2:	bfb8      	it	lt
 800d9d4:	18e4      	addlt	r4, r4, r3
 800d9d6:	f7ff ffe7 	bl	800d9a8 <__malloc_lock>
 800d9da:	4a20      	ldr	r2, [pc, #128]	; (800da5c <_free_r+0x9c>)
 800d9dc:	9801      	ldr	r0, [sp, #4]
 800d9de:	6813      	ldr	r3, [r2, #0]
 800d9e0:	4615      	mov	r5, r2
 800d9e2:	b933      	cbnz	r3, 800d9f2 <_free_r+0x32>
 800d9e4:	6063      	str	r3, [r4, #4]
 800d9e6:	6014      	str	r4, [r2, #0]
 800d9e8:	b003      	add	sp, #12
 800d9ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9ee:	f7ff bfe1 	b.w	800d9b4 <__malloc_unlock>
 800d9f2:	42a3      	cmp	r3, r4
 800d9f4:	d90b      	bls.n	800da0e <_free_r+0x4e>
 800d9f6:	6821      	ldr	r1, [r4, #0]
 800d9f8:	1862      	adds	r2, r4, r1
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	bf04      	itt	eq
 800d9fe:	681a      	ldreq	r2, [r3, #0]
 800da00:	685b      	ldreq	r3, [r3, #4]
 800da02:	6063      	str	r3, [r4, #4]
 800da04:	bf04      	itt	eq
 800da06:	1852      	addeq	r2, r2, r1
 800da08:	6022      	streq	r2, [r4, #0]
 800da0a:	602c      	str	r4, [r5, #0]
 800da0c:	e7ec      	b.n	800d9e8 <_free_r+0x28>
 800da0e:	461a      	mov	r2, r3
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	b10b      	cbz	r3, 800da18 <_free_r+0x58>
 800da14:	42a3      	cmp	r3, r4
 800da16:	d9fa      	bls.n	800da0e <_free_r+0x4e>
 800da18:	6811      	ldr	r1, [r2, #0]
 800da1a:	1855      	adds	r5, r2, r1
 800da1c:	42a5      	cmp	r5, r4
 800da1e:	d10b      	bne.n	800da38 <_free_r+0x78>
 800da20:	6824      	ldr	r4, [r4, #0]
 800da22:	4421      	add	r1, r4
 800da24:	1854      	adds	r4, r2, r1
 800da26:	42a3      	cmp	r3, r4
 800da28:	6011      	str	r1, [r2, #0]
 800da2a:	d1dd      	bne.n	800d9e8 <_free_r+0x28>
 800da2c:	681c      	ldr	r4, [r3, #0]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	6053      	str	r3, [r2, #4]
 800da32:	4421      	add	r1, r4
 800da34:	6011      	str	r1, [r2, #0]
 800da36:	e7d7      	b.n	800d9e8 <_free_r+0x28>
 800da38:	d902      	bls.n	800da40 <_free_r+0x80>
 800da3a:	230c      	movs	r3, #12
 800da3c:	6003      	str	r3, [r0, #0]
 800da3e:	e7d3      	b.n	800d9e8 <_free_r+0x28>
 800da40:	6825      	ldr	r5, [r4, #0]
 800da42:	1961      	adds	r1, r4, r5
 800da44:	428b      	cmp	r3, r1
 800da46:	bf04      	itt	eq
 800da48:	6819      	ldreq	r1, [r3, #0]
 800da4a:	685b      	ldreq	r3, [r3, #4]
 800da4c:	6063      	str	r3, [r4, #4]
 800da4e:	bf04      	itt	eq
 800da50:	1949      	addeq	r1, r1, r5
 800da52:	6021      	streq	r1, [r4, #0]
 800da54:	6054      	str	r4, [r2, #4]
 800da56:	e7c7      	b.n	800d9e8 <_free_r+0x28>
 800da58:	b003      	add	sp, #12
 800da5a:	bd30      	pop	{r4, r5, pc}
 800da5c:	200051f8 	.word	0x200051f8

0800da60 <__ssputs_r>:
 800da60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da64:	688e      	ldr	r6, [r1, #8]
 800da66:	429e      	cmp	r6, r3
 800da68:	4682      	mov	sl, r0
 800da6a:	460c      	mov	r4, r1
 800da6c:	4690      	mov	r8, r2
 800da6e:	461f      	mov	r7, r3
 800da70:	d838      	bhi.n	800dae4 <__ssputs_r+0x84>
 800da72:	898a      	ldrh	r2, [r1, #12]
 800da74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da78:	d032      	beq.n	800dae0 <__ssputs_r+0x80>
 800da7a:	6825      	ldr	r5, [r4, #0]
 800da7c:	6909      	ldr	r1, [r1, #16]
 800da7e:	eba5 0901 	sub.w	r9, r5, r1
 800da82:	6965      	ldr	r5, [r4, #20]
 800da84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da8c:	3301      	adds	r3, #1
 800da8e:	444b      	add	r3, r9
 800da90:	106d      	asrs	r5, r5, #1
 800da92:	429d      	cmp	r5, r3
 800da94:	bf38      	it	cc
 800da96:	461d      	movcc	r5, r3
 800da98:	0553      	lsls	r3, r2, #21
 800da9a:	d531      	bpl.n	800db00 <__ssputs_r+0xa0>
 800da9c:	4629      	mov	r1, r5
 800da9e:	f7ff fe35 	bl	800d70c <_malloc_r>
 800daa2:	4606      	mov	r6, r0
 800daa4:	b950      	cbnz	r0, 800dabc <__ssputs_r+0x5c>
 800daa6:	230c      	movs	r3, #12
 800daa8:	f8ca 3000 	str.w	r3, [sl]
 800daac:	89a3      	ldrh	r3, [r4, #12]
 800daae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dab2:	81a3      	strh	r3, [r4, #12]
 800dab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dabc:	6921      	ldr	r1, [r4, #16]
 800dabe:	464a      	mov	r2, r9
 800dac0:	f7ff fe0e 	bl	800d6e0 <memcpy>
 800dac4:	89a3      	ldrh	r3, [r4, #12]
 800dac6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800daca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dace:	81a3      	strh	r3, [r4, #12]
 800dad0:	6126      	str	r6, [r4, #16]
 800dad2:	6165      	str	r5, [r4, #20]
 800dad4:	444e      	add	r6, r9
 800dad6:	eba5 0509 	sub.w	r5, r5, r9
 800dada:	6026      	str	r6, [r4, #0]
 800dadc:	60a5      	str	r5, [r4, #8]
 800dade:	463e      	mov	r6, r7
 800dae0:	42be      	cmp	r6, r7
 800dae2:	d900      	bls.n	800dae6 <__ssputs_r+0x86>
 800dae4:	463e      	mov	r6, r7
 800dae6:	4632      	mov	r2, r6
 800dae8:	6820      	ldr	r0, [r4, #0]
 800daea:	4641      	mov	r1, r8
 800daec:	f000 faa8 	bl	800e040 <memmove>
 800daf0:	68a3      	ldr	r3, [r4, #8]
 800daf2:	6822      	ldr	r2, [r4, #0]
 800daf4:	1b9b      	subs	r3, r3, r6
 800daf6:	4432      	add	r2, r6
 800daf8:	60a3      	str	r3, [r4, #8]
 800dafa:	6022      	str	r2, [r4, #0]
 800dafc:	2000      	movs	r0, #0
 800dafe:	e7db      	b.n	800dab8 <__ssputs_r+0x58>
 800db00:	462a      	mov	r2, r5
 800db02:	f000 fab7 	bl	800e074 <_realloc_r>
 800db06:	4606      	mov	r6, r0
 800db08:	2800      	cmp	r0, #0
 800db0a:	d1e1      	bne.n	800dad0 <__ssputs_r+0x70>
 800db0c:	6921      	ldr	r1, [r4, #16]
 800db0e:	4650      	mov	r0, sl
 800db10:	f7ff ff56 	bl	800d9c0 <_free_r>
 800db14:	e7c7      	b.n	800daa6 <__ssputs_r+0x46>
	...

0800db18 <_svfiprintf_r>:
 800db18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db1c:	4698      	mov	r8, r3
 800db1e:	898b      	ldrh	r3, [r1, #12]
 800db20:	061b      	lsls	r3, r3, #24
 800db22:	b09d      	sub	sp, #116	; 0x74
 800db24:	4607      	mov	r7, r0
 800db26:	460d      	mov	r5, r1
 800db28:	4614      	mov	r4, r2
 800db2a:	d50e      	bpl.n	800db4a <_svfiprintf_r+0x32>
 800db2c:	690b      	ldr	r3, [r1, #16]
 800db2e:	b963      	cbnz	r3, 800db4a <_svfiprintf_r+0x32>
 800db30:	2140      	movs	r1, #64	; 0x40
 800db32:	f7ff fdeb 	bl	800d70c <_malloc_r>
 800db36:	6028      	str	r0, [r5, #0]
 800db38:	6128      	str	r0, [r5, #16]
 800db3a:	b920      	cbnz	r0, 800db46 <_svfiprintf_r+0x2e>
 800db3c:	230c      	movs	r3, #12
 800db3e:	603b      	str	r3, [r7, #0]
 800db40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db44:	e0d1      	b.n	800dcea <_svfiprintf_r+0x1d2>
 800db46:	2340      	movs	r3, #64	; 0x40
 800db48:	616b      	str	r3, [r5, #20]
 800db4a:	2300      	movs	r3, #0
 800db4c:	9309      	str	r3, [sp, #36]	; 0x24
 800db4e:	2320      	movs	r3, #32
 800db50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db54:	f8cd 800c 	str.w	r8, [sp, #12]
 800db58:	2330      	movs	r3, #48	; 0x30
 800db5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd04 <_svfiprintf_r+0x1ec>
 800db5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db62:	f04f 0901 	mov.w	r9, #1
 800db66:	4623      	mov	r3, r4
 800db68:	469a      	mov	sl, r3
 800db6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db6e:	b10a      	cbz	r2, 800db74 <_svfiprintf_r+0x5c>
 800db70:	2a25      	cmp	r2, #37	; 0x25
 800db72:	d1f9      	bne.n	800db68 <_svfiprintf_r+0x50>
 800db74:	ebba 0b04 	subs.w	fp, sl, r4
 800db78:	d00b      	beq.n	800db92 <_svfiprintf_r+0x7a>
 800db7a:	465b      	mov	r3, fp
 800db7c:	4622      	mov	r2, r4
 800db7e:	4629      	mov	r1, r5
 800db80:	4638      	mov	r0, r7
 800db82:	f7ff ff6d 	bl	800da60 <__ssputs_r>
 800db86:	3001      	adds	r0, #1
 800db88:	f000 80aa 	beq.w	800dce0 <_svfiprintf_r+0x1c8>
 800db8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db8e:	445a      	add	r2, fp
 800db90:	9209      	str	r2, [sp, #36]	; 0x24
 800db92:	f89a 3000 	ldrb.w	r3, [sl]
 800db96:	2b00      	cmp	r3, #0
 800db98:	f000 80a2 	beq.w	800dce0 <_svfiprintf_r+0x1c8>
 800db9c:	2300      	movs	r3, #0
 800db9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dba6:	f10a 0a01 	add.w	sl, sl, #1
 800dbaa:	9304      	str	r3, [sp, #16]
 800dbac:	9307      	str	r3, [sp, #28]
 800dbae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbb2:	931a      	str	r3, [sp, #104]	; 0x68
 800dbb4:	4654      	mov	r4, sl
 800dbb6:	2205      	movs	r2, #5
 800dbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbbc:	4851      	ldr	r0, [pc, #324]	; (800dd04 <_svfiprintf_r+0x1ec>)
 800dbbe:	f7f2 fb0f 	bl	80001e0 <memchr>
 800dbc2:	9a04      	ldr	r2, [sp, #16]
 800dbc4:	b9d8      	cbnz	r0, 800dbfe <_svfiprintf_r+0xe6>
 800dbc6:	06d0      	lsls	r0, r2, #27
 800dbc8:	bf44      	itt	mi
 800dbca:	2320      	movmi	r3, #32
 800dbcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbd0:	0711      	lsls	r1, r2, #28
 800dbd2:	bf44      	itt	mi
 800dbd4:	232b      	movmi	r3, #43	; 0x2b
 800dbd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbda:	f89a 3000 	ldrb.w	r3, [sl]
 800dbde:	2b2a      	cmp	r3, #42	; 0x2a
 800dbe0:	d015      	beq.n	800dc0e <_svfiprintf_r+0xf6>
 800dbe2:	9a07      	ldr	r2, [sp, #28]
 800dbe4:	4654      	mov	r4, sl
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	f04f 0c0a 	mov.w	ip, #10
 800dbec:	4621      	mov	r1, r4
 800dbee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbf2:	3b30      	subs	r3, #48	; 0x30
 800dbf4:	2b09      	cmp	r3, #9
 800dbf6:	d94e      	bls.n	800dc96 <_svfiprintf_r+0x17e>
 800dbf8:	b1b0      	cbz	r0, 800dc28 <_svfiprintf_r+0x110>
 800dbfa:	9207      	str	r2, [sp, #28]
 800dbfc:	e014      	b.n	800dc28 <_svfiprintf_r+0x110>
 800dbfe:	eba0 0308 	sub.w	r3, r0, r8
 800dc02:	fa09 f303 	lsl.w	r3, r9, r3
 800dc06:	4313      	orrs	r3, r2
 800dc08:	9304      	str	r3, [sp, #16]
 800dc0a:	46a2      	mov	sl, r4
 800dc0c:	e7d2      	b.n	800dbb4 <_svfiprintf_r+0x9c>
 800dc0e:	9b03      	ldr	r3, [sp, #12]
 800dc10:	1d19      	adds	r1, r3, #4
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	9103      	str	r1, [sp, #12]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	bfbb      	ittet	lt
 800dc1a:	425b      	neglt	r3, r3
 800dc1c:	f042 0202 	orrlt.w	r2, r2, #2
 800dc20:	9307      	strge	r3, [sp, #28]
 800dc22:	9307      	strlt	r3, [sp, #28]
 800dc24:	bfb8      	it	lt
 800dc26:	9204      	strlt	r2, [sp, #16]
 800dc28:	7823      	ldrb	r3, [r4, #0]
 800dc2a:	2b2e      	cmp	r3, #46	; 0x2e
 800dc2c:	d10c      	bne.n	800dc48 <_svfiprintf_r+0x130>
 800dc2e:	7863      	ldrb	r3, [r4, #1]
 800dc30:	2b2a      	cmp	r3, #42	; 0x2a
 800dc32:	d135      	bne.n	800dca0 <_svfiprintf_r+0x188>
 800dc34:	9b03      	ldr	r3, [sp, #12]
 800dc36:	1d1a      	adds	r2, r3, #4
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	9203      	str	r2, [sp, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	bfb8      	it	lt
 800dc40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dc44:	3402      	adds	r4, #2
 800dc46:	9305      	str	r3, [sp, #20]
 800dc48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd14 <_svfiprintf_r+0x1fc>
 800dc4c:	7821      	ldrb	r1, [r4, #0]
 800dc4e:	2203      	movs	r2, #3
 800dc50:	4650      	mov	r0, sl
 800dc52:	f7f2 fac5 	bl	80001e0 <memchr>
 800dc56:	b140      	cbz	r0, 800dc6a <_svfiprintf_r+0x152>
 800dc58:	2340      	movs	r3, #64	; 0x40
 800dc5a:	eba0 000a 	sub.w	r0, r0, sl
 800dc5e:	fa03 f000 	lsl.w	r0, r3, r0
 800dc62:	9b04      	ldr	r3, [sp, #16]
 800dc64:	4303      	orrs	r3, r0
 800dc66:	3401      	adds	r4, #1
 800dc68:	9304      	str	r3, [sp, #16]
 800dc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc6e:	4826      	ldr	r0, [pc, #152]	; (800dd08 <_svfiprintf_r+0x1f0>)
 800dc70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc74:	2206      	movs	r2, #6
 800dc76:	f7f2 fab3 	bl	80001e0 <memchr>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	d038      	beq.n	800dcf0 <_svfiprintf_r+0x1d8>
 800dc7e:	4b23      	ldr	r3, [pc, #140]	; (800dd0c <_svfiprintf_r+0x1f4>)
 800dc80:	bb1b      	cbnz	r3, 800dcca <_svfiprintf_r+0x1b2>
 800dc82:	9b03      	ldr	r3, [sp, #12]
 800dc84:	3307      	adds	r3, #7
 800dc86:	f023 0307 	bic.w	r3, r3, #7
 800dc8a:	3308      	adds	r3, #8
 800dc8c:	9303      	str	r3, [sp, #12]
 800dc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc90:	4433      	add	r3, r6
 800dc92:	9309      	str	r3, [sp, #36]	; 0x24
 800dc94:	e767      	b.n	800db66 <_svfiprintf_r+0x4e>
 800dc96:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc9a:	460c      	mov	r4, r1
 800dc9c:	2001      	movs	r0, #1
 800dc9e:	e7a5      	b.n	800dbec <_svfiprintf_r+0xd4>
 800dca0:	2300      	movs	r3, #0
 800dca2:	3401      	adds	r4, #1
 800dca4:	9305      	str	r3, [sp, #20]
 800dca6:	4619      	mov	r1, r3
 800dca8:	f04f 0c0a 	mov.w	ip, #10
 800dcac:	4620      	mov	r0, r4
 800dcae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcb2:	3a30      	subs	r2, #48	; 0x30
 800dcb4:	2a09      	cmp	r2, #9
 800dcb6:	d903      	bls.n	800dcc0 <_svfiprintf_r+0x1a8>
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d0c5      	beq.n	800dc48 <_svfiprintf_r+0x130>
 800dcbc:	9105      	str	r1, [sp, #20]
 800dcbe:	e7c3      	b.n	800dc48 <_svfiprintf_r+0x130>
 800dcc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e7f0      	b.n	800dcac <_svfiprintf_r+0x194>
 800dcca:	ab03      	add	r3, sp, #12
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	462a      	mov	r2, r5
 800dcd0:	4b0f      	ldr	r3, [pc, #60]	; (800dd10 <_svfiprintf_r+0x1f8>)
 800dcd2:	a904      	add	r1, sp, #16
 800dcd4:	4638      	mov	r0, r7
 800dcd6:	f3af 8000 	nop.w
 800dcda:	1c42      	adds	r2, r0, #1
 800dcdc:	4606      	mov	r6, r0
 800dcde:	d1d6      	bne.n	800dc8e <_svfiprintf_r+0x176>
 800dce0:	89ab      	ldrh	r3, [r5, #12]
 800dce2:	065b      	lsls	r3, r3, #25
 800dce4:	f53f af2c 	bmi.w	800db40 <_svfiprintf_r+0x28>
 800dce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcea:	b01d      	add	sp, #116	; 0x74
 800dcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf0:	ab03      	add	r3, sp, #12
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	462a      	mov	r2, r5
 800dcf6:	4b06      	ldr	r3, [pc, #24]	; (800dd10 <_svfiprintf_r+0x1f8>)
 800dcf8:	a904      	add	r1, sp, #16
 800dcfa:	4638      	mov	r0, r7
 800dcfc:	f000 f87a 	bl	800ddf4 <_printf_i>
 800dd00:	e7eb      	b.n	800dcda <_svfiprintf_r+0x1c2>
 800dd02:	bf00      	nop
 800dd04:	0800e3d1 	.word	0x0800e3d1
 800dd08:	0800e3db 	.word	0x0800e3db
 800dd0c:	00000000 	.word	0x00000000
 800dd10:	0800da61 	.word	0x0800da61
 800dd14:	0800e3d7 	.word	0x0800e3d7

0800dd18 <_printf_common>:
 800dd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd1c:	4616      	mov	r6, r2
 800dd1e:	4699      	mov	r9, r3
 800dd20:	688a      	ldr	r2, [r1, #8]
 800dd22:	690b      	ldr	r3, [r1, #16]
 800dd24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	bfb8      	it	lt
 800dd2c:	4613      	movlt	r3, r2
 800dd2e:	6033      	str	r3, [r6, #0]
 800dd30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd34:	4607      	mov	r7, r0
 800dd36:	460c      	mov	r4, r1
 800dd38:	b10a      	cbz	r2, 800dd3e <_printf_common+0x26>
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	6033      	str	r3, [r6, #0]
 800dd3e:	6823      	ldr	r3, [r4, #0]
 800dd40:	0699      	lsls	r1, r3, #26
 800dd42:	bf42      	ittt	mi
 800dd44:	6833      	ldrmi	r3, [r6, #0]
 800dd46:	3302      	addmi	r3, #2
 800dd48:	6033      	strmi	r3, [r6, #0]
 800dd4a:	6825      	ldr	r5, [r4, #0]
 800dd4c:	f015 0506 	ands.w	r5, r5, #6
 800dd50:	d106      	bne.n	800dd60 <_printf_common+0x48>
 800dd52:	f104 0a19 	add.w	sl, r4, #25
 800dd56:	68e3      	ldr	r3, [r4, #12]
 800dd58:	6832      	ldr	r2, [r6, #0]
 800dd5a:	1a9b      	subs	r3, r3, r2
 800dd5c:	42ab      	cmp	r3, r5
 800dd5e:	dc26      	bgt.n	800ddae <_printf_common+0x96>
 800dd60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd64:	1e13      	subs	r3, r2, #0
 800dd66:	6822      	ldr	r2, [r4, #0]
 800dd68:	bf18      	it	ne
 800dd6a:	2301      	movne	r3, #1
 800dd6c:	0692      	lsls	r2, r2, #26
 800dd6e:	d42b      	bmi.n	800ddc8 <_printf_common+0xb0>
 800dd70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd74:	4649      	mov	r1, r9
 800dd76:	4638      	mov	r0, r7
 800dd78:	47c0      	blx	r8
 800dd7a:	3001      	adds	r0, #1
 800dd7c:	d01e      	beq.n	800ddbc <_printf_common+0xa4>
 800dd7e:	6823      	ldr	r3, [r4, #0]
 800dd80:	68e5      	ldr	r5, [r4, #12]
 800dd82:	6832      	ldr	r2, [r6, #0]
 800dd84:	f003 0306 	and.w	r3, r3, #6
 800dd88:	2b04      	cmp	r3, #4
 800dd8a:	bf08      	it	eq
 800dd8c:	1aad      	subeq	r5, r5, r2
 800dd8e:	68a3      	ldr	r3, [r4, #8]
 800dd90:	6922      	ldr	r2, [r4, #16]
 800dd92:	bf0c      	ite	eq
 800dd94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd98:	2500      	movne	r5, #0
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	bfc4      	itt	gt
 800dd9e:	1a9b      	subgt	r3, r3, r2
 800dda0:	18ed      	addgt	r5, r5, r3
 800dda2:	2600      	movs	r6, #0
 800dda4:	341a      	adds	r4, #26
 800dda6:	42b5      	cmp	r5, r6
 800dda8:	d11a      	bne.n	800dde0 <_printf_common+0xc8>
 800ddaa:	2000      	movs	r0, #0
 800ddac:	e008      	b.n	800ddc0 <_printf_common+0xa8>
 800ddae:	2301      	movs	r3, #1
 800ddb0:	4652      	mov	r2, sl
 800ddb2:	4649      	mov	r1, r9
 800ddb4:	4638      	mov	r0, r7
 800ddb6:	47c0      	blx	r8
 800ddb8:	3001      	adds	r0, #1
 800ddba:	d103      	bne.n	800ddc4 <_printf_common+0xac>
 800ddbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddc4:	3501      	adds	r5, #1
 800ddc6:	e7c6      	b.n	800dd56 <_printf_common+0x3e>
 800ddc8:	18e1      	adds	r1, r4, r3
 800ddca:	1c5a      	adds	r2, r3, #1
 800ddcc:	2030      	movs	r0, #48	; 0x30
 800ddce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ddd2:	4422      	add	r2, r4
 800ddd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dddc:	3302      	adds	r3, #2
 800ddde:	e7c7      	b.n	800dd70 <_printf_common+0x58>
 800dde0:	2301      	movs	r3, #1
 800dde2:	4622      	mov	r2, r4
 800dde4:	4649      	mov	r1, r9
 800dde6:	4638      	mov	r0, r7
 800dde8:	47c0      	blx	r8
 800ddea:	3001      	adds	r0, #1
 800ddec:	d0e6      	beq.n	800ddbc <_printf_common+0xa4>
 800ddee:	3601      	adds	r6, #1
 800ddf0:	e7d9      	b.n	800dda6 <_printf_common+0x8e>
	...

0800ddf4 <_printf_i>:
 800ddf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf8:	460c      	mov	r4, r1
 800ddfa:	4691      	mov	r9, r2
 800ddfc:	7e27      	ldrb	r7, [r4, #24]
 800ddfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800de00:	2f78      	cmp	r7, #120	; 0x78
 800de02:	4680      	mov	r8, r0
 800de04:	469a      	mov	sl, r3
 800de06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de0a:	d807      	bhi.n	800de1c <_printf_i+0x28>
 800de0c:	2f62      	cmp	r7, #98	; 0x62
 800de0e:	d80a      	bhi.n	800de26 <_printf_i+0x32>
 800de10:	2f00      	cmp	r7, #0
 800de12:	f000 80d8 	beq.w	800dfc6 <_printf_i+0x1d2>
 800de16:	2f58      	cmp	r7, #88	; 0x58
 800de18:	f000 80a3 	beq.w	800df62 <_printf_i+0x16e>
 800de1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800de20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de24:	e03a      	b.n	800de9c <_printf_i+0xa8>
 800de26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de2a:	2b15      	cmp	r3, #21
 800de2c:	d8f6      	bhi.n	800de1c <_printf_i+0x28>
 800de2e:	a001      	add	r0, pc, #4	; (adr r0, 800de34 <_printf_i+0x40>)
 800de30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800de34:	0800de8d 	.word	0x0800de8d
 800de38:	0800dea1 	.word	0x0800dea1
 800de3c:	0800de1d 	.word	0x0800de1d
 800de40:	0800de1d 	.word	0x0800de1d
 800de44:	0800de1d 	.word	0x0800de1d
 800de48:	0800de1d 	.word	0x0800de1d
 800de4c:	0800dea1 	.word	0x0800dea1
 800de50:	0800de1d 	.word	0x0800de1d
 800de54:	0800de1d 	.word	0x0800de1d
 800de58:	0800de1d 	.word	0x0800de1d
 800de5c:	0800de1d 	.word	0x0800de1d
 800de60:	0800dfad 	.word	0x0800dfad
 800de64:	0800ded1 	.word	0x0800ded1
 800de68:	0800df8f 	.word	0x0800df8f
 800de6c:	0800de1d 	.word	0x0800de1d
 800de70:	0800de1d 	.word	0x0800de1d
 800de74:	0800dfcf 	.word	0x0800dfcf
 800de78:	0800de1d 	.word	0x0800de1d
 800de7c:	0800ded1 	.word	0x0800ded1
 800de80:	0800de1d 	.word	0x0800de1d
 800de84:	0800de1d 	.word	0x0800de1d
 800de88:	0800df97 	.word	0x0800df97
 800de8c:	680b      	ldr	r3, [r1, #0]
 800de8e:	1d1a      	adds	r2, r3, #4
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	600a      	str	r2, [r1, #0]
 800de94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800de98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de9c:	2301      	movs	r3, #1
 800de9e:	e0a3      	b.n	800dfe8 <_printf_i+0x1f4>
 800dea0:	6825      	ldr	r5, [r4, #0]
 800dea2:	6808      	ldr	r0, [r1, #0]
 800dea4:	062e      	lsls	r6, r5, #24
 800dea6:	f100 0304 	add.w	r3, r0, #4
 800deaa:	d50a      	bpl.n	800dec2 <_printf_i+0xce>
 800deac:	6805      	ldr	r5, [r0, #0]
 800deae:	600b      	str	r3, [r1, #0]
 800deb0:	2d00      	cmp	r5, #0
 800deb2:	da03      	bge.n	800debc <_printf_i+0xc8>
 800deb4:	232d      	movs	r3, #45	; 0x2d
 800deb6:	426d      	negs	r5, r5
 800deb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800debc:	485e      	ldr	r0, [pc, #376]	; (800e038 <_printf_i+0x244>)
 800debe:	230a      	movs	r3, #10
 800dec0:	e019      	b.n	800def6 <_printf_i+0x102>
 800dec2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dec6:	6805      	ldr	r5, [r0, #0]
 800dec8:	600b      	str	r3, [r1, #0]
 800deca:	bf18      	it	ne
 800decc:	b22d      	sxthne	r5, r5
 800dece:	e7ef      	b.n	800deb0 <_printf_i+0xbc>
 800ded0:	680b      	ldr	r3, [r1, #0]
 800ded2:	6825      	ldr	r5, [r4, #0]
 800ded4:	1d18      	adds	r0, r3, #4
 800ded6:	6008      	str	r0, [r1, #0]
 800ded8:	0628      	lsls	r0, r5, #24
 800deda:	d501      	bpl.n	800dee0 <_printf_i+0xec>
 800dedc:	681d      	ldr	r5, [r3, #0]
 800dede:	e002      	b.n	800dee6 <_printf_i+0xf2>
 800dee0:	0669      	lsls	r1, r5, #25
 800dee2:	d5fb      	bpl.n	800dedc <_printf_i+0xe8>
 800dee4:	881d      	ldrh	r5, [r3, #0]
 800dee6:	4854      	ldr	r0, [pc, #336]	; (800e038 <_printf_i+0x244>)
 800dee8:	2f6f      	cmp	r7, #111	; 0x6f
 800deea:	bf0c      	ite	eq
 800deec:	2308      	moveq	r3, #8
 800deee:	230a      	movne	r3, #10
 800def0:	2100      	movs	r1, #0
 800def2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800def6:	6866      	ldr	r6, [r4, #4]
 800def8:	60a6      	str	r6, [r4, #8]
 800defa:	2e00      	cmp	r6, #0
 800defc:	bfa2      	ittt	ge
 800defe:	6821      	ldrge	r1, [r4, #0]
 800df00:	f021 0104 	bicge.w	r1, r1, #4
 800df04:	6021      	strge	r1, [r4, #0]
 800df06:	b90d      	cbnz	r5, 800df0c <_printf_i+0x118>
 800df08:	2e00      	cmp	r6, #0
 800df0a:	d04d      	beq.n	800dfa8 <_printf_i+0x1b4>
 800df0c:	4616      	mov	r6, r2
 800df0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800df12:	fb03 5711 	mls	r7, r3, r1, r5
 800df16:	5dc7      	ldrb	r7, [r0, r7]
 800df18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df1c:	462f      	mov	r7, r5
 800df1e:	42bb      	cmp	r3, r7
 800df20:	460d      	mov	r5, r1
 800df22:	d9f4      	bls.n	800df0e <_printf_i+0x11a>
 800df24:	2b08      	cmp	r3, #8
 800df26:	d10b      	bne.n	800df40 <_printf_i+0x14c>
 800df28:	6823      	ldr	r3, [r4, #0]
 800df2a:	07df      	lsls	r7, r3, #31
 800df2c:	d508      	bpl.n	800df40 <_printf_i+0x14c>
 800df2e:	6923      	ldr	r3, [r4, #16]
 800df30:	6861      	ldr	r1, [r4, #4]
 800df32:	4299      	cmp	r1, r3
 800df34:	bfde      	ittt	le
 800df36:	2330      	movle	r3, #48	; 0x30
 800df38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800df3c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800df40:	1b92      	subs	r2, r2, r6
 800df42:	6122      	str	r2, [r4, #16]
 800df44:	f8cd a000 	str.w	sl, [sp]
 800df48:	464b      	mov	r3, r9
 800df4a:	aa03      	add	r2, sp, #12
 800df4c:	4621      	mov	r1, r4
 800df4e:	4640      	mov	r0, r8
 800df50:	f7ff fee2 	bl	800dd18 <_printf_common>
 800df54:	3001      	adds	r0, #1
 800df56:	d14c      	bne.n	800dff2 <_printf_i+0x1fe>
 800df58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df5c:	b004      	add	sp, #16
 800df5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df62:	4835      	ldr	r0, [pc, #212]	; (800e038 <_printf_i+0x244>)
 800df64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800df68:	6823      	ldr	r3, [r4, #0]
 800df6a:	680e      	ldr	r6, [r1, #0]
 800df6c:	061f      	lsls	r7, r3, #24
 800df6e:	f856 5b04 	ldr.w	r5, [r6], #4
 800df72:	600e      	str	r6, [r1, #0]
 800df74:	d514      	bpl.n	800dfa0 <_printf_i+0x1ac>
 800df76:	07d9      	lsls	r1, r3, #31
 800df78:	bf44      	itt	mi
 800df7a:	f043 0320 	orrmi.w	r3, r3, #32
 800df7e:	6023      	strmi	r3, [r4, #0]
 800df80:	b91d      	cbnz	r5, 800df8a <_printf_i+0x196>
 800df82:	6823      	ldr	r3, [r4, #0]
 800df84:	f023 0320 	bic.w	r3, r3, #32
 800df88:	6023      	str	r3, [r4, #0]
 800df8a:	2310      	movs	r3, #16
 800df8c:	e7b0      	b.n	800def0 <_printf_i+0xfc>
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	f043 0320 	orr.w	r3, r3, #32
 800df94:	6023      	str	r3, [r4, #0]
 800df96:	2378      	movs	r3, #120	; 0x78
 800df98:	4828      	ldr	r0, [pc, #160]	; (800e03c <_printf_i+0x248>)
 800df9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df9e:	e7e3      	b.n	800df68 <_printf_i+0x174>
 800dfa0:	065e      	lsls	r6, r3, #25
 800dfa2:	bf48      	it	mi
 800dfa4:	b2ad      	uxthmi	r5, r5
 800dfa6:	e7e6      	b.n	800df76 <_printf_i+0x182>
 800dfa8:	4616      	mov	r6, r2
 800dfaa:	e7bb      	b.n	800df24 <_printf_i+0x130>
 800dfac:	680b      	ldr	r3, [r1, #0]
 800dfae:	6826      	ldr	r6, [r4, #0]
 800dfb0:	6960      	ldr	r0, [r4, #20]
 800dfb2:	1d1d      	adds	r5, r3, #4
 800dfb4:	600d      	str	r5, [r1, #0]
 800dfb6:	0635      	lsls	r5, r6, #24
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	d501      	bpl.n	800dfc0 <_printf_i+0x1cc>
 800dfbc:	6018      	str	r0, [r3, #0]
 800dfbe:	e002      	b.n	800dfc6 <_printf_i+0x1d2>
 800dfc0:	0671      	lsls	r1, r6, #25
 800dfc2:	d5fb      	bpl.n	800dfbc <_printf_i+0x1c8>
 800dfc4:	8018      	strh	r0, [r3, #0]
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	6123      	str	r3, [r4, #16]
 800dfca:	4616      	mov	r6, r2
 800dfcc:	e7ba      	b.n	800df44 <_printf_i+0x150>
 800dfce:	680b      	ldr	r3, [r1, #0]
 800dfd0:	1d1a      	adds	r2, r3, #4
 800dfd2:	600a      	str	r2, [r1, #0]
 800dfd4:	681e      	ldr	r6, [r3, #0]
 800dfd6:	6862      	ldr	r2, [r4, #4]
 800dfd8:	2100      	movs	r1, #0
 800dfda:	4630      	mov	r0, r6
 800dfdc:	f7f2 f900 	bl	80001e0 <memchr>
 800dfe0:	b108      	cbz	r0, 800dfe6 <_printf_i+0x1f2>
 800dfe2:	1b80      	subs	r0, r0, r6
 800dfe4:	6060      	str	r0, [r4, #4]
 800dfe6:	6863      	ldr	r3, [r4, #4]
 800dfe8:	6123      	str	r3, [r4, #16]
 800dfea:	2300      	movs	r3, #0
 800dfec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dff0:	e7a8      	b.n	800df44 <_printf_i+0x150>
 800dff2:	6923      	ldr	r3, [r4, #16]
 800dff4:	4632      	mov	r2, r6
 800dff6:	4649      	mov	r1, r9
 800dff8:	4640      	mov	r0, r8
 800dffa:	47d0      	blx	sl
 800dffc:	3001      	adds	r0, #1
 800dffe:	d0ab      	beq.n	800df58 <_printf_i+0x164>
 800e000:	6823      	ldr	r3, [r4, #0]
 800e002:	079b      	lsls	r3, r3, #30
 800e004:	d413      	bmi.n	800e02e <_printf_i+0x23a>
 800e006:	68e0      	ldr	r0, [r4, #12]
 800e008:	9b03      	ldr	r3, [sp, #12]
 800e00a:	4298      	cmp	r0, r3
 800e00c:	bfb8      	it	lt
 800e00e:	4618      	movlt	r0, r3
 800e010:	e7a4      	b.n	800df5c <_printf_i+0x168>
 800e012:	2301      	movs	r3, #1
 800e014:	4632      	mov	r2, r6
 800e016:	4649      	mov	r1, r9
 800e018:	4640      	mov	r0, r8
 800e01a:	47d0      	blx	sl
 800e01c:	3001      	adds	r0, #1
 800e01e:	d09b      	beq.n	800df58 <_printf_i+0x164>
 800e020:	3501      	adds	r5, #1
 800e022:	68e3      	ldr	r3, [r4, #12]
 800e024:	9903      	ldr	r1, [sp, #12]
 800e026:	1a5b      	subs	r3, r3, r1
 800e028:	42ab      	cmp	r3, r5
 800e02a:	dcf2      	bgt.n	800e012 <_printf_i+0x21e>
 800e02c:	e7eb      	b.n	800e006 <_printf_i+0x212>
 800e02e:	2500      	movs	r5, #0
 800e030:	f104 0619 	add.w	r6, r4, #25
 800e034:	e7f5      	b.n	800e022 <_printf_i+0x22e>
 800e036:	bf00      	nop
 800e038:	0800e3e2 	.word	0x0800e3e2
 800e03c:	0800e3f3 	.word	0x0800e3f3

0800e040 <memmove>:
 800e040:	4288      	cmp	r0, r1
 800e042:	b510      	push	{r4, lr}
 800e044:	eb01 0402 	add.w	r4, r1, r2
 800e048:	d902      	bls.n	800e050 <memmove+0x10>
 800e04a:	4284      	cmp	r4, r0
 800e04c:	4623      	mov	r3, r4
 800e04e:	d807      	bhi.n	800e060 <memmove+0x20>
 800e050:	1e43      	subs	r3, r0, #1
 800e052:	42a1      	cmp	r1, r4
 800e054:	d008      	beq.n	800e068 <memmove+0x28>
 800e056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e05a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e05e:	e7f8      	b.n	800e052 <memmove+0x12>
 800e060:	4402      	add	r2, r0
 800e062:	4601      	mov	r1, r0
 800e064:	428a      	cmp	r2, r1
 800e066:	d100      	bne.n	800e06a <memmove+0x2a>
 800e068:	bd10      	pop	{r4, pc}
 800e06a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e06e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e072:	e7f7      	b.n	800e064 <memmove+0x24>

0800e074 <_realloc_r>:
 800e074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e076:	4607      	mov	r7, r0
 800e078:	4614      	mov	r4, r2
 800e07a:	460e      	mov	r6, r1
 800e07c:	b921      	cbnz	r1, 800e088 <_realloc_r+0x14>
 800e07e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e082:	4611      	mov	r1, r2
 800e084:	f7ff bb42 	b.w	800d70c <_malloc_r>
 800e088:	b922      	cbnz	r2, 800e094 <_realloc_r+0x20>
 800e08a:	f7ff fc99 	bl	800d9c0 <_free_r>
 800e08e:	4625      	mov	r5, r4
 800e090:	4628      	mov	r0, r5
 800e092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e094:	f000 f814 	bl	800e0c0 <_malloc_usable_size_r>
 800e098:	42a0      	cmp	r0, r4
 800e09a:	d20f      	bcs.n	800e0bc <_realloc_r+0x48>
 800e09c:	4621      	mov	r1, r4
 800e09e:	4638      	mov	r0, r7
 800e0a0:	f7ff fb34 	bl	800d70c <_malloc_r>
 800e0a4:	4605      	mov	r5, r0
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	d0f2      	beq.n	800e090 <_realloc_r+0x1c>
 800e0aa:	4631      	mov	r1, r6
 800e0ac:	4622      	mov	r2, r4
 800e0ae:	f7ff fb17 	bl	800d6e0 <memcpy>
 800e0b2:	4631      	mov	r1, r6
 800e0b4:	4638      	mov	r0, r7
 800e0b6:	f7ff fc83 	bl	800d9c0 <_free_r>
 800e0ba:	e7e9      	b.n	800e090 <_realloc_r+0x1c>
 800e0bc:	4635      	mov	r5, r6
 800e0be:	e7e7      	b.n	800e090 <_realloc_r+0x1c>

0800e0c0 <_malloc_usable_size_r>:
 800e0c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0c4:	1f18      	subs	r0, r3, #4
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	bfbc      	itt	lt
 800e0ca:	580b      	ldrlt	r3, [r1, r0]
 800e0cc:	18c0      	addlt	r0, r0, r3
 800e0ce:	4770      	bx	lr

0800e0d0 <_init>:
 800e0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d2:	bf00      	nop
 800e0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0d6:	bc08      	pop	{r3}
 800e0d8:	469e      	mov	lr, r3
 800e0da:	4770      	bx	lr

0800e0dc <_fini>:
 800e0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0de:	bf00      	nop
 800e0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0e2:	bc08      	pop	{r3}
 800e0e4:	469e      	mov	lr, r3
 800e0e6:	4770      	bx	lr
